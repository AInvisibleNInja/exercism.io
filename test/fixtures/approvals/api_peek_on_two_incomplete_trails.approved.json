{
  "assignments": [
    {
      "track": "ruby",
      "slug": "word-count",
      "readme": "# Word Count\n\nWrite a program that given a phrase can count the occurrences of each word in that phrase.\n\nFor example for the input `\"olly olly in come free\"`\n\n```plain\nolly: 2\nin: 1\ncome: 1\nfree: 1\n```\n\n\n\n## Source\n\nThe golang tour [view source](http://tour.golang.org)\n",
      "test_file": "word-count_test.rb",
      "tests": "require 'minitest/autorun'\nrequire_relative 'phrase'\n\nclass PhraseTest < MiniTest::Unit::TestCase\n\n  def test_count_one_word\n    phrase = Phrase.new(\"word\")\n    counts = {\"word\" => 1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_count_one_of_each\n    skip\n    phrase = Phrase.new(\"one of each\")\n    counts = {\"one\" => 1, \"of\" => 1, \"each\" => 1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_count_multiple_occurrences\n    skip\n    phrase = Phrase.new(\"one fish two fish red fish blue fish\")\n    counts = {\"one\"=>1, \"fish\"=>4, \"two\"=>1, \"red\"=>1, \"blue\"=>1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_count_everything_just_once\n    skip\n    phrase = Phrase.new(\"all the kings horses and all the kings men\")\n    phrase.word_count # count it an extra time\n    counts = {\n      \"all\"=>2, \"the\"=>2, \"kings\"=>2, \"horses\"=>1, \"and\"=>1, \"men\"=>1\n    }\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_ignore_punctuation\n    skip\n    phrase = Phrase.new(\"car : carpet as java : javascript!!&@$%^&\")\n    counts = {\"car\"=>1, \"carpet\"=>1, \"as\"=>1, \"java\"=>1, \"javascript\"=>1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_handles_cramped_lists\n    skip\n    phrase = Phrase.new(\"one,two,three\")\n    counts = {\"one\"=>1, \"two\"=>1, \"three\" => 1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_include_numbers\n    skip\n    phrase = Phrase.new(\"testing, 1, 2 testing\")\n    counts = {\"testing\" => 2, \"1\" => 1, \"2\" => 1}\n    assert_equal counts, phrase.word_count\n  end\n\n  def test_normalize_case\n    skip\n    phrase = Phrase.new(\"go Go GO\")\n    counts = {\"go\" => 3}\n    assert_equal counts, phrase.word_count\n  end\nend\n"
    },
    {
      "track": "clojure",
      "slug": "word-count",
      "readme": "# Word Count\n\nWrite a program that given a phrase can count the occurrences of each word in that phrase.\n\nFor example for the input `\"olly olly in come free\"`\n\n```plain\nolly: 2\nin: 1\ncome: 1\nfree: 1\n```\n\n\n\n## Source\n\nThe golang tour [view source](http://tour.golang.org)\n",
      "test_file": "word-count_test.clj",
      "tests": "(ns word-count.test (:use clojure.test))\n(load-file \"word_count.clj\")\n\n(deftest count-one-word\n  (is (= {\"word\" 1}\n         (phrase/word-count \"word\"))))\n\n(deftest count-one-of-each\n  (is (= {\"one\" 1 \"of\" 1 \"each\" 1}\n         (phrase/word-count \"one of each\"))))\n\n(deftest count-multiple-occurrences\n  (is (= {\"one\" 1 \"fish\" 4 \"two\" 1 \"red\" 1 \"blue\" 1}\n         (phrase/word-count \"one fish two fish red fish blue fish\"))))\n\n(deftest ignore-punctuation\n  (is (= {\"car\" 1, \"carpet\" 1 \"as\" 1 \"java\" 1 \"javascript\" 1}\n         (phrase/word-count \"car : carpet as java : javascript!!&@$%^&\"))))\n\n(deftest include-numbers\n  (is (= {\"testing\" 2 \"1\" 1 \"2\" 1}\n         (phrase/word-count \"testing, 1, 2 testing\"))))\n\n(deftest normalize-case\n  (is (= {\"go\" 3}\n         (phrase/word-count \"go Go GO\"))))\n\n(run-tests)\n"
    }
  ]
}