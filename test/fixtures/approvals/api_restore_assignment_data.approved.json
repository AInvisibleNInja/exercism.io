{
  "assignments": [
    {
      "track": "ruby",
      "slug": "one",
      "files": {
        "Fakefile": "Autorun fake code\n",
        "one.rb": "CODE1RB",
        "one_test.rb": "require 'minitest/autorun'\nrequire_relative 'example'\nclass OneTest < Minitest::Test\n  def test_one\n    assert_equal 1, One.value\n  end\nend\n",
        "README.md": "# One\n\nThis is one.\n\n* one\n* one again\n\n\n## Source\n\nThe internet. [view source](http://example.com)\n"
      }
    },
    {
      "track": "ruby",
      "slug": "two",
      "files": {
        "README.md": "# Two\n\nThis is two.\n\n* two\n* two again\n\n\n## Source\n\nThe web. [view source](http://example.org)\n",
        "two_test.rb": "require 'minitest/autorun'\nrequire_relative 'example'\nclass TwoTest < Minitest::Test\n  def test_two\n    assert_equal 2, Two.value\n  end\nend\n"
      }
    },
    {
      "track": "go",
      "slug": "one",
      "files": {
        "one.go": "CODE1GO",
        "one_test.go": "package one\n\nimport \"testing\"\n\nfunc TestOne(t *testing.T) {\n\tif 1 != Uno.Value {\n\t\tt.Errorf(\"Expected Uno.Value to equal 1\")\n\t}\n}\n",
        "README.md": "# One\n\nThis is one.\n\n* one\n* one again\n\n\n## Source\n\nThe internet. [view source](http://example.com)\n"
      }
    },
    {
      "track": "go",
      "slug": "two",
      "files": {
        "README.md": "# Two\n\nThis is two.\n\n* two\n* two again\n\n\n## Source\n\nThe web. [view source](http://example.org)\n",
        "two.go": "CODE2GO",
        "two_test.go": "package two\n\nimport \"testing\"\n\nfunc TestTwo(t *testing.T) {\n\tif 2 != Due.Value {\n\t\tt.Errorf(\"Expected Due.Value to equal 2\")\n\t}\n}\n"
      }
    },
    {
      "track": "go",
      "slug": "three",
      "files": {
        "README.md": "# Three\n\nThis is three.\n\n* three\n* three once more\n\n\n## Source\n\nOnline. [view source](http://www.example.org)\n",
        "three_test.go": "package three\n\nimport \"testing\"\n\nfunc TestThree(t *testing.T) {\n\tif 3 != Tres.Value {\n\t\tt.Errorf(\"Expected Tres.Value to equal 3\")\n\t}\n}\n"
      }
    },
    {
      "track": "scala",
      "slug": "one",
      "files": {
        "build.sbt": "scalaVersion := \"2.10.3\"\n\nlibaryDependencies += \"org.scalatest\" %% \"scalatest\" % \"2.0.RC3\" % \"test\"\n",
        "README.md": "# One\n\nThis is one.\n\n* one\n* one again\n\n\n## Source\n\nThe internet. [view source](http://example.com)\n",
        "src/test/scala/one_test.scala": "import org.scalatest._\n\nclass OneTest extends FunSuite with Matchers {\n  test (\"one\") {\n    One.value should be (1)\n  }\n}\n"
      }
    }
  ]
}