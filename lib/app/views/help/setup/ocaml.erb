<h3>OCaml</h3>

<h4>Installation: </h4>

<p>
  Follow the
  <a href="https://realworldocaml.org/install">installation instructions</a>
  of the excellent <a href="https://realworldocaml.org">Real World OCaml</a> book.

  Afterwards be sure to install <a href="http://ounit.forge.ocamlcore.org/">OUnit</a>
  using <pre>opam install ounit</pre>.
</p>

<h4>Building and running tests: </h4>

Because OCaml is a compiled language you need to compile your submission and the
test code before you can run the tests. Compile with <pre>$ corebuild -quiet test.native</pre>
and when successful run the tests by running the <pre>test.native</pre> executable
(<pre>./test.native</pre>). Alternatively just type <pre>make</pre>.

<h4>Creating your first OCaml module: </h4>

To create a module that can be used with the test in the <i>bob</i> exercise put
this code in <pre>bob.ml</pre>:

<code>
open Core.Std

let response_for input = failwith "TODO"
</code>

</pre>

<h4>Finding API documentation: </h4>

OCaml's documentation is spread over multiple projects and can be hard to find
because there is what is sometimes called the standard library library (the
rather minimal library that comes with the compiler) and a Core library (a
separate project by <a href="https://ocaml.janestreet.com/">Jane Street</a> that
aims to provide a more complete and consistent standard library). Confusingly
the standard library is sometimes referred to as the core library (though rarely
as the Core library).

Here's documentation for the standard library: <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html">http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html</a>.

And here's the documentation for the Core library: <a href="https://ocaml.janestreet.com/ocaml-core/latest/doc/core/index.html">https://ocaml.janestreet.com/ocaml-core/latest/doc/core/index.html</a>.

The Core library itself consists of two parts: Core and Core_kernel where Core
extends Core_kernel. Often a Core module includes a Core_kernel module, if
that's the case the documentation will have a link to the Core_kernel module's
documentation page. If you can't find a function it's often hidden in an
included module.

Note that when you do <pre>open Core.Std</pre> (which is a good idea) you're
using the Core library which shadows some of the modules from the standard
library.  For example instead of <a
href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html">List</a> you
get <a
href="https://ocaml.janestreet.com/ocaml-core/latest/doc/core_kernel/Core_list.html">Core_kernel's
Core_list</a> (<pre>open Core.Std</pre> makes this available under the name
<pre>List</pre>).

There are some subtle and not so subtle differences between the standard library
List module and Core's List, for example in the standard library
<pre>List.for_all</pre> has signature <pre>val for_all : ('a -&gt; bool) -&gt;
'a list -&gt; bool</pre> whereas in the Core library it has <pre>val for_all :
'a t -&gt; f:('a -&gt; bool) -&gt; bool</pre>. The consequence is that to check
if all numbers in a list are lower than 10 you have to write <pre>List.for_all
(fun x -&gt; x &lt; 10) list</pre> with the compiler core List module and
<pre>List.for_all list (fun x -&gt; x &lt; 10)</pre> or (preferably)
<pre>List.for_all ~f:(fun x -&gt; x &lt; 10) list</pre> with the Core List
module.

A piece of advise: focus on the Core library and ignore the standard library
unless you really can't find what you need in Core.

<h4>Helpful information</h4>

Though by no means required it doesn't hurt to read through the <a
href="http://caml.inria.fr/resources/doc/guides/guidelines.en.html">Programming
guidelines on the INRIA OCaml site</a>. Those guidelines contain very useful
advice, especially when you're just learning OCaml.
