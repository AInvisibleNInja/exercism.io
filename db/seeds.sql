--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: alerts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE alerts (
    id integer NOT NULL,
    user_id integer NOT NULL,
    text text,
    url character varying(255),
    link_text character varying(255),
    read boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.alerts OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE alerts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.alerts_id_seq OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE alerts_id_seq OWNED BY alerts.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    user_id integer NOT NULL,
    submission_id integer NOT NULL,
    body text,
    html_body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.comments OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: likes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE likes (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.likes OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE likes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.likes_id_seq OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE likes_id_seq OWNED BY likes.id;


--
-- Name: log_entries; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE log_entries (
    id integer NOT NULL,
    user_id integer,
    body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.log_entries OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE log_entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_entries_id_seq OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE log_entries_id_seq OWNED BY log_entries.id;


--
-- Name: muted_submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE muted_submissions (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.muted_submissions OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE muted_submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.muted_submissions_id_seq OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE muted_submissions_id_seq OWNED BY muted_submissions.id;


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE notifications (
    id integer NOT NULL,
    user_id integer NOT NULL,
    item_id integer,
    regarding character varying(255),
    read boolean,
    count integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    item_type character varying(255),
    creator_id integer
);


ALTER TABLE public.notifications OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notifications_id_seq OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE notifications_id_seq OWNED BY notifications.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE posts (
    id integer NOT NULL,
    slug character varying(255),
    title character varying(255),
    blurb text,
    body text,
    testimonial_keyword character varying(255),
    event_on date,
    archive_on date,
    is_indestructible boolean,
    is_featured boolean,
    is_service boolean,
    priority integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.posts OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.posts_id_seq OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE posts_id_seq OWNED BY posts.id;


--
-- Name: products; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE products (
    id integer NOT NULL,
    title character varying(255),
    price character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    sort_order integer
);


ALTER TABLE public.products OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE products_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.products_id_seq OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE products_id_seq OWNED BY products.id;


--
-- Name: quotes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE quotes (
    id integer NOT NULL,
    body text,
    cite character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.quotes OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE quotes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quotes_id_seq OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE quotes_id_seq OWNED BY quotes.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO exercism;

--
-- Name: submission_viewers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submission_viewers (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    viewer_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.submission_viewers OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submission_viewers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submission_viewers_id_seq OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submission_viewers_id_seq OWNED BY submission_viewers.id;


--
-- Name: submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submissions (
    id integer NOT NULL,
    user_id integer NOT NULL,
    key character varying(255),
    state character varying(255),
    language character varying(255),
    slug character varying(255),
    code text,
    done_at timestamp without time zone,
    is_liked boolean,
    nit_count integer NOT NULL,
    version integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_exercise_id integer,
    filename character varying(255)
);


ALTER TABLE public.submissions OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submissions_id_seq OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submissions_id_seq OWNED BY submissions.id;


--
-- Name: team_managers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_managers (
    id integer NOT NULL,
    user_id integer NOT NULL,
    team_id integer NOT NULL
);


ALTER TABLE public.team_managers OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_managers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_managers_id_seq OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_managers_id_seq OWNED BY team_managers.id;


--
-- Name: team_memberships; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_memberships (
    id integer NOT NULL,
    team_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    confirmed boolean
);


ALTER TABLE public.team_memberships OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_memberships_id_seq OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_memberships_id_seq OWNED BY team_memberships.id;


--
-- Name: teams; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE teams (
    id integer NOT NULL,
    slug character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    name character varying(255)
);


ALTER TABLE public.teams OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE teams_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.teams_id_seq OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE teams_id_seq OWNED BY teams.id;


--
-- Name: testimonials; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE testimonials (
    id integer NOT NULL,
    body text,
    name character varying(255),
    about character varying(255),
    homepage character varying(255),
    keyword character varying(255),
    featured boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.testimonials OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE testimonials_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testimonials_id_seq OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE testimonials_id_seq OWNED BY testimonials.id;


--
-- Name: user_exercises; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE user_exercises (
    id integer NOT NULL,
    user_id integer NOT NULL,
    language character varying(255),
    slug character varying(255),
    iteration_count integer,
    state character varying(255),
    completed_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    key character varying(255),
    is_nitpicker boolean DEFAULT false
);


ALTER TABLE public.user_exercises OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE user_exercises_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_exercises_id_seq OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE user_exercises_id_seq OWNED BY user_exercises.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    username character varying(255),
    email character varying(255),
    avatar_url character varying(255),
    github_id integer,
    key character varying(255),
    mastery text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.users OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY alerts ALTER COLUMN id SET DEFAULT nextval('alerts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY likes ALTER COLUMN id SET DEFAULT nextval('likes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY log_entries ALTER COLUMN id SET DEFAULT nextval('log_entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY muted_submissions ALTER COLUMN id SET DEFAULT nextval('muted_submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY notifications ALTER COLUMN id SET DEFAULT nextval('notifications_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY posts ALTER COLUMN id SET DEFAULT nextval('posts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY products ALTER COLUMN id SET DEFAULT nextval('products_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY quotes ALTER COLUMN id SET DEFAULT nextval('quotes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submission_viewers ALTER COLUMN id SET DEFAULT nextval('submission_viewers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submissions ALTER COLUMN id SET DEFAULT nextval('submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_managers ALTER COLUMN id SET DEFAULT nextval('team_managers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_memberships ALTER COLUMN id SET DEFAULT nextval('team_memberships_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY teams ALTER COLUMN id SET DEFAULT nextval('teams_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY testimonials ALTER COLUMN id SET DEFAULT nextval('testimonials_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY user_exercises ALTER COLUMN id SET DEFAULT nextval('user_exercises_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	7	Your exercise bob in ruby has gone into hibernation.	/bob/541a2aeed356360627960c47	View submission.	f	2014-03-08 00:50:55	2014-03-08 00:50:55
2	7	Your exercise grains in clojure has gone into hibernation.	/bob/63ab46d4477d56a653dbceec	View submission.	f	2014-01-29 09:18:03	2014-01-29 09:18:03
3	7	Your exercise beer-song in elixir has gone into hibernation.	/bob/42e2e789c2f8dcaa5ffabceb	View submission.	f	2014-02-15 06:15:49	2014-02-15 06:15:49
4	4	Your exercise phone-number in haskell has gone into hibernation.	/eve/23009bc19155e5bc435ec67f	View submission.	f	2014-03-17 22:35:23	2014-03-17 22:35:23
5	21	Your exercise bob in ruby has gone into hibernation.	/mary/7c9356eda73fe3b06e21f7d5	View submission.	f	2014-02-05 10:28:21	2014-02-05 10:28:21
6	21	Your exercise word-count in ruby has gone into hibernation.	/mary/310d25d53906525135253aba	View submission.	f	2014-03-19 23:49:52	2014-03-19 23:49:52
7	19	Your exercise bob in ruby has gone into hibernation.	/madison/5567be25dd2e5bcdfac0cb28	View submission.	f	2014-02-14 11:35:43	2014-02-14 11:35:43
8	19	Your exercise word-count in javascript has gone into hibernation.	/madison/0a58583edb4def3e9714666c	View submission.	f	2014-03-19 20:31:02	2014-03-19 20:31:02
9	18	Your exercise bob in python has gone into hibernation.	/mack/607f077cd3511a5982ebc165	View submission.	f	2014-02-15 11:28:09	2014-02-15 11:28:09
10	18	Your exercise word-count in ruby has gone into hibernation.	/mack/3168fe6a948f650875a1a717	View submission.	f	2014-01-13 21:59:01	2014-01-13 21:59:01
11	25	Your exercise bob in ruby has gone into hibernation.	/mitchell/57e586e99f63e92f51b53c21	View submission.	f	2014-02-25 20:31:58	2014-02-25 20:31:58
12	20	Your exercise anagram in ruby has gone into hibernation.	/marshall/bc6c2c4d7a7eddfa32fbc7b6	View submission.	f	2014-02-02 23:20:22	2014-02-02 23:20:22
13	6	Your exercise word-count in ruby has gone into hibernation.	/beth/e61ff6a344b957d7bbaea36b	View submission.	f	2013-11-30 11:37:38	2013-11-30 11:37:38
14	6	Your exercise leap in ruby has gone into hibernation.	/beth/e84ea47fa6b609b12cf95fe4	View submission.	f	2014-02-04 12:04:09	2014-02-04 12:04:09
15	6	Your exercise bob in python has gone into hibernation.	/beth/3072565af1fc3a693f220175	View submission.	f	2014-03-20 14:23:09	2014-03-20 14:23:09
16	8	Your exercise bob in javascript has gone into hibernation.	/claire/a22000e183c222f3c8a75621	View submission.	f	2014-03-20 03:00:18	2014-03-20 03:00:18
17	9	Your exercise word-count in javascript has gone into hibernation.	/dawson/e05e9072a738ed4738fe5612	View submission.	f	2013-12-01 12:26:06	2013-12-01 12:26:06
18	9	Your exercise etl in go has gone into hibernation.	/dawson/70b316d4e92ed7522389e463	View submission.	f	2014-01-05 02:14:52	2014-01-05 02:14:52
19	9	Your exercise bob in ruby has gone into hibernation.	/dawson/06223436f27e88f912e810c6	View submission.	f	2014-01-21 05:04:18	2014-01-21 05:04:18
20	11	Your exercise word-count in ruby has gone into hibernation.	/frederique/4775d96b8280c7cab48c55f5	View submission.	f	2014-02-25 07:08:31	2014-02-25 07:08:31
21	13	Your exercise bob in javascript has gone into hibernation.	/haley/b17363e18943e6b5af6ee59d	View submission.	f	2014-03-01 12:57:07	2014-03-01 12:57:07
22	13	Your exercise nucleotide-count in ruby has gone into hibernation.	/haley/20d5def547c1eb57a09a0cf8	View submission.	f	2014-03-11 07:39:37	2014-03-11 07:39:37
23	13	Your exercise bob in ruby has gone into hibernation.	/haley/801513854ca4362a8480bd6d	View submission.	f	2013-12-21 22:49:19	2013-12-21 22:49:19
24	14	Your exercise word-count in javascript has gone into hibernation.	/isaac/5e8313195edf0263410b5788	View submission.	f	2014-01-31 22:51:03	2014-01-31 22:51:03
25	14	Your exercise bob in clojure has gone into hibernation.	/isaac/7a77faa626db5024c4bb1943	View submission.	f	2013-12-19 19:41:26	2013-12-19 19:41:26
26	15	Your exercise word-count in javascript has gone into hibernation.	/jarrod/36c90499ad88cad4fb6e0f6d	View submission.	f	2014-02-12 08:15:25	2014-02-12 08:15:25
27	16	Your exercise point-mutations in ruby has gone into hibernation.	/kieran/659388f41ff1c14699c78031	View submission.	f	2014-02-16 15:01:33	2014-02-16 15:01:33
28	16	Your exercise word-count in haskell has gone into hibernation.	/kieran/9796061628f0fa9bc417f1a8	View submission.	f	2014-03-09 04:51:29	2014-03-09 04:51:29
29	22	Your exercise word-count in python has gone into hibernation.	/mia/c715f94196e1ed1d8d600d6e	View submission.	f	2014-01-01 03:01:28	2014-01-01 03:01:28
30	27	Your exercise word-count in ruby has gone into hibernation.	/norma/2de58c37ddc6f4915c9fa606	View submission.	f	2014-01-31 11:51:51	2014-01-31 11:51:51
31	28	Your exercise bob in ruby has gone into hibernation.	/opal/d643e82f29c68f038ef90690	View submission.	f	2014-03-14 00:24:25	2014-03-14 00:24:25
32	29	Your exercise grade-school in ruby has gone into hibernation.	/paula/9dede57f74b48eee24f5b2d3	View submission.	f	2014-01-08 08:00:43	2014-01-08 08:00:43
33	29	Your exercise bob in elixir has gone into hibernation.	/paula/bc95f3fd8ca975c07812928e	View submission.	f	2014-02-05 07:32:41	2014-02-05 07:32:41
34	29	Your exercise word-count in python has gone into hibernation.	/paula/51c7e61fd3e9efc0ed89ce44	View submission.	f	2013-12-12 01:31:13	2013-12-12 01:31:13
35	30	Your exercise word-count in ruby has gone into hibernation.	/quentin/234d933115e6a35822ffde5c	View submission.	f	2014-03-19 21:55:05	2014-03-19 21:55:05
36	30	Your exercise bob in perl5 has gone into hibernation.	/quentin/5fab59efc2616c1fbfabab2a	View submission.	f	2014-03-17 16:14:15	2014-03-17 16:14:15
37	30	Your exercise word-count in clojure has gone into hibernation.	/quentin/19f13f107c42d29454d45795	View submission.	f	2014-03-19 12:43:49	2014-03-19 12:43:49
38	37	Your exercise scrabble-score in ruby has gone into hibernation.	/ruben/7b2e634f50c9811cebfb5af2	View submission.	f	2014-03-15 05:51:21	2014-03-15 05:51:21
39	41	Your exercise bob in clojure has gone into hibernation.	/shaina/40a2313cde4a0c597486ad01	View submission.	f	2014-02-19 15:42:32	2014-02-19 15:42:32
40	42	Your exercise bob in ruby has gone into hibernation.	/talia/3031c250b47913bad6a4298e	View submission.	f	2014-01-30 13:03:04	2014-01-30 13:03:04
41	43	Your exercise bob in clojure has gone into hibernation.	/ursula/7a77faa626db5024c4bb1943	View submission.	f	2014-03-01 07:58:06	2014-03-01 07:58:06
42	43	Your exercise beer-song in ruby has gone into hibernation.	/ursula/96ee7f6a688df53e849c1972	View submission.	f	2014-03-11 14:25:41	2014-03-11 14:25:41
43	44	Your exercise anagram in javascript has gone into hibernation.	/vince/5b1229d596a278925f37afac	View submission.	f	2014-01-28 23:42:57	2014-01-28 23:42:57
44	44	Your exercise nucleotide-count in ruby has gone into hibernation.	/vince/c759bbb71a46560985ab5fe4	View submission.	f	2013-12-29 11:13:31	2013-12-29 11:13:31
45	46	Your exercise leap in ruby has gone into hibernation.	/xavier/e35b8e846da8830e72674fc1	View submission.	f	2014-03-16 18:35:09	2014-03-16 18:35:09
46	46	Your exercise beer-song in python has gone into hibernation.	/xavier/ce20026ac78d623c8355cc73	View submission.	f	2014-02-14 07:55:03	2014-02-14 07:55:03
47	47	Your exercise word-count in javascript has gone into hibernation.	/yvette/796bf3fd8afb892c6e409ca5	View submission.	f	2014-03-09 17:37:56	2014-03-09 17:37:56
48	47	Your exercise word-count in haskell has gone into hibernation.	/yvette/74a0737cc4f95818b9b9f4d3	View submission.	f	2014-02-18 13:32:59	2014-02-18 13:32:59
49	39	Your exercise grains in ruby has gone into hibernation.	/russ/511655504f89ae30da854e9d	View submission.	f	2014-03-11 21:06:16	2014-03-11 21:06:16
50	36	Your exercise bob in ruby has gone into hibernation.	/rolf/79ba381481c4e1447384b2dc	View submission.	f	2014-03-20 00:48:54	2014-03-20 00:48:54
51	32	Your exercise bob in ruby has gone into hibernation.	/randall/4f9bc9c7e9b9abb72b0d67d0	View submission.	f	2014-02-14 02:00:45	2014-02-14 02:00:45
52	35	Your exercise bob in ruby has gone into hibernation.	/river/801513854ca4362a8480bd6d	View submission.	f	2014-02-15 17:00:32	2014-02-15 17:00:32
53	35	Your exercise leap in ruby has gone into hibernation.	/river/d06e0dd2ad4a487004911352	View submission.	f	2014-02-26 13:03:27	2014-02-26 13:03:27
54	33	Your exercise grade-school in ruby has gone into hibernation.	/rick/e5a0c63ab498d05edc06db43	View submission.	f	2014-01-10 03:14:40	2014-01-10 03:14:40
55	33	Your exercise rna-transcription in ruby has gone into hibernation.	/rick/bd2265e6ecab45c5a739391e	View submission.	f	2014-03-04 10:17:33	2014-03-04 10:17:33
56	40	Your exercise grade-school in ruby has gone into hibernation.	/ryan/4eb28f457c7119aae5ffee2d	View submission.	f	2014-03-05 11:22:57	2014-03-05 11:22:57
57	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-12 11:16:29	2014-03-12 11:16:29
58	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-20 10:47:37	2014-03-20 10:47:37
59	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-13 04:16:57	2014-03-13 04:16:57
60	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-09 20:18:21	2014-03-09 20:18:21
61	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-17 11:44:00	2014-03-17 11:44:00
62	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-19 09:58:50	2014-03-19 09:58:50
63	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-18 03:35:51	2014-03-18 03:35:51
64	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-20 01:19:31	2014-03-20 01:19:31
65	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-01-14 02:55:25	2014-01-14 02:55:25
66	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-01-13 09:54:33	2014-01-13 09:54:33
67	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-03-19 01:18:01	2014-03-19 01:18:01
68	7	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2013-08-11 01:56:21	2013-08-11 01:56:21
69	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2013-10-03 03:19:33	2013-10-03 03:19:33
70	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2013-12-10 17:02:33	2013-12-10 17:02:33
71	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2013-11-18 05:51:52	2013-11-18 05:51:52
72	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2013-12-03 16:21:44	2013-12-03 16:21:44
73	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2013-08-09 18:01:11	2013-08-09 18:01:11
74	7	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2013-09-17 15:27:00	2013-09-17 15:27:00
75	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-03-12 12:18:53	2014-03-12 12:18:53
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 75, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	2	1	NO COMMENT	\N	2014-01-28 09:26:03	2014-01-28 09:26:03
2	1	1	NO COMMENT	\N	2014-01-31 21:54:56	2014-01-31 21:54:56
3	1	2	NO COMMENT	\N	2014-01-01 12:06:30	2014-01-01 12:06:30
4	2	2	NO COMMENT	\N	2014-03-05 23:22:50	2014-03-05 23:22:50
5	1	3	NO COMMENT	\N	2014-01-22 02:49:19	2014-01-22 02:49:19
6	2	3	NO COMMENT	\N	2014-01-23 14:07:16	2014-01-23 14:07:16
7	41	3	NO COMMENT	\N	2014-02-09 20:53:13	2014-02-09 20:53:13
8	41	4	NO COMMENT	\N	2014-02-06 20:28:04	2014-02-06 20:28:04
9	2	4	NO COMMENT	\N	2014-02-16 14:47:51	2014-02-16 14:47:51
10	1	4	NO COMMENT	\N	2014-02-24 23:50:30	2014-02-24 23:50:30
11	22	4	NO COMMENT	\N	2014-03-05 17:30:22	2014-03-05 17:30:22
12	44	4	NO COMMENT	\N	2014-03-14 14:50:18	2014-03-14 14:50:18
13	41	5	NO COMMENT	\N	2014-02-14 18:43:48	2014-02-14 18:43:48
14	1	5	NO COMMENT	\N	2014-03-13 03:08:12	2014-03-13 03:08:12
15	28	5	NO COMMENT	\N	2014-03-15 19:21:04	2014-03-15 19:21:04
16	2	5	NO COMMENT	\N	2014-03-18 10:37:39	2014-03-18 10:37:39
17	20	6	NO COMMENT	\N	2014-03-07 05:48:58	2014-03-07 05:48:58
18	26	6	NO COMMENT	\N	2014-03-11 17:41:56	2014-03-11 17:41:56
19	41	6	NO COMMENT	\N	2014-03-17 07:38:15	2014-03-17 07:38:15
20	22	7	NO COMMENT	\N	2014-03-10 15:25:00	2014-03-10 15:25:00
21	20	7	NO COMMENT	\N	2014-03-15 09:47:37	2014-03-15 09:47:37
22	24	8	NO COMMENT	\N	2014-03-13 10:27:46	2014-03-13 10:27:46
23	35	8	NO COMMENT	\N	2014-03-15 08:49:39	2014-03-15 08:49:39
24	22	8	NO COMMENT	\N	2014-03-18 08:05:18	2014-03-18 08:05:18
25	2	8	NO COMMENT	\N	2014-03-20 04:03:54	2014-03-20 04:03:54
26	28	9	NO COMMENT	\N	2014-03-11 14:19:33	2014-03-11 14:19:33
27	16	9	NO COMMENT	\N	2014-03-15 16:38:30	2014-03-15 16:38:30
28	20	9	NO COMMENT	\N	2014-03-16 13:49:31	2014-03-16 13:49:31
29	1	9	NO COMMENT	\N	2014-03-20 11:20:12	2014-03-20 11:20:12
30	45	10	NO COMMENT	\N	2014-03-14 08:40:46	2014-03-14 08:40:46
31	17	10	NO COMMENT	\N	2014-03-16 12:55:10	2014-03-16 12:55:10
32	2	10	NO COMMENT	\N	2014-03-17 20:20:25	2014-03-17 20:20:25
33	16	10	NO COMMENT	\N	2014-03-18 08:22:57	2014-03-18 08:22:57
34	41	10	NO COMMENT	\N	2014-03-18 19:25:53	2014-03-18 19:25:53
35	14	11	NO COMMENT	\N	2014-02-12 11:33:56	2014-02-12 11:33:56
36	45	12	NO COMMENT	\N	2014-02-05 12:44:40	2014-02-05 12:44:40
37	14	12	NO COMMENT	\N	2014-03-01 11:00:19	2014-03-01 11:00:19
38	24	12	NO COMMENT	\N	2014-03-01 21:35:37	2014-03-01 21:35:37
39	2	13	NO COMMENT	\N	2014-01-31 02:04:41	2014-01-31 02:04:41
40	1	13	NO COMMENT	\N	2014-02-04 00:45:58	2014-02-04 00:45:58
41	45	13	NO COMMENT	\N	2014-02-27 16:23:05	2014-02-27 16:23:05
42	24	13	NO COMMENT	\N	2014-02-27 17:03:07	2014-02-27 17:03:07
43	2	15	NO COMMENT	\N	2014-02-02 14:53:19	2014-02-02 14:53:19
44	9	16	NO COMMENT	\N	2014-02-18 04:54:06	2014-02-18 04:54:06
45	1	16	NO COMMENT	\N	2014-02-25 22:20:04	2014-02-25 22:20:04
46	2	16	NO COMMENT	\N	2014-02-28 13:26:55	2014-02-28 13:26:55
47	2	17	NO COMMENT	\N	2014-02-08 14:33:55	2014-02-08 14:33:55
48	9	17	NO COMMENT	\N	2014-02-09 00:42:32	2014-02-09 00:42:32
49	1	17	NO COMMENT	\N	2014-02-12 23:09:34	2014-02-12 23:09:34
50	2	18	NO COMMENT	\N	2014-02-17 13:23:08	2014-02-17 13:23:08
51	9	18	NO COMMENT	\N	2014-02-23 22:15:07	2014-02-23 22:15:07
52	5	18	NO COMMENT	\N	2014-02-27 01:53:44	2014-02-27 01:53:44
53	1	18	NO COMMENT	\N	2014-03-14 22:50:40	2014-03-14 22:50:40
54	1	61	NO COMMENT	\N	2014-02-15 20:55:37	2014-02-15 20:55:37
55	1	20	NO COMMENT	\N	2014-02-18 18:35:40	2014-02-18 18:35:40
56	26	20	NO COMMENT	\N	2014-02-26 23:30:28	2014-02-26 23:30:28
57	2	21	NO COMMENT	\N	2014-01-21 11:28:03	2014-01-21 11:28:03
58	1	21	NO COMMENT	\N	2014-02-06 11:52:44	2014-02-06 11:52:44
59	2	23	NO COMMENT	\N	2014-01-30 00:09:12	2014-01-30 00:09:12
60	31	23	NO COMMENT	\N	2014-02-09 04:19:51	2014-02-09 04:19:51
61	1	23	NO COMMENT	\N	2014-02-13 16:59:31	2014-02-13 16:59:31
62	2	25	NO COMMENT	\N	2014-02-23 23:47:16	2014-02-23 23:47:16
63	31	25	NO COMMENT	\N	2014-03-09 14:14:58	2014-03-09 14:14:58
64	20	25	NO COMMENT	\N	2014-03-09 20:17:26	2014-03-09 20:17:26
65	1	25	NO COMMENT	\N	2014-03-16 07:26:31	2014-03-16 07:26:31
66	1	26	NO COMMENT	\N	2014-03-02 20:56:25	2014-03-02 20:56:25
67	2	26	NO COMMENT	\N	2014-03-05 18:02:09	2014-03-05 18:02:09
68	1	27	NO COMMENT	\N	2014-02-20 15:44:51	2014-02-20 15:44:51
69	2	27	NO COMMENT	\N	2014-03-01 17:53:37	2014-03-01 17:53:37
70	18	27	NO COMMENT	\N	2014-03-06 04:00:39	2014-03-06 04:00:39
71	14	27	NO COMMENT	\N	2014-03-14 05:10:21	2014-03-14 05:10:21
72	48	28	NO COMMENT	\N	2014-02-07 14:44:38	2014-02-07 14:44:38
73	1	28	NO COMMENT	\N	2014-02-10 05:27:10	2014-02-10 05:27:10
74	17	28	NO COMMENT	\N	2014-02-11 12:49:39	2014-02-11 12:49:39
75	22	28	NO COMMENT	\N	2014-03-04 06:56:28	2014-03-04 06:56:28
76	2	28	NO COMMENT	\N	2014-03-15 01:20:13	2014-03-15 01:20:13
77	12	28	NO COMMENT	\N	2014-03-16 00:03:23	2014-03-16 00:03:23
78	28	28	NO COMMENT	\N	2014-03-17 19:20:06	2014-03-17 19:20:06
79	2	30	NO COMMENT	\N	2014-01-22 06:08:37	2014-01-22 06:08:37
80	1	30	NO COMMENT	\N	2014-01-30 03:23:46	2014-01-30 03:23:46
81	1	31	NO COMMENT	\N	2014-03-16 20:28:47	2014-03-16 20:28:47
82	20	31	NO COMMENT	\N	2014-03-17 11:59:15	2014-03-17 11:59:15
83	2	31	NO COMMENT	\N	2014-03-17 23:27:12	2014-03-17 23:27:12
84	42	32	NO COMMENT	\N	2014-02-12 16:06:11	2014-02-12 16:06:11
85	26	32	NO COMMENT	\N	2014-03-10 11:37:55	2014-03-10 11:37:55
86	14	32	NO COMMENT	\N	2014-03-16 01:11:18	2014-03-16 01:11:18
87	1	33	NO COMMENT	\N	2014-02-25 23:20:12	2014-02-25 23:20:12
88	2	33	NO COMMENT	\N	2014-03-02 00:25:52	2014-03-02 00:25:52
89	1	34	NO COMMENT	\N	2014-03-11 03:36:17	2014-03-11 03:36:17
90	2	34	NO COMMENT	\N	2014-03-19 13:22:15	2014-03-19 13:22:15
91	1	35	NO COMMENT	\N	2014-02-24 14:16:20	2014-02-24 14:16:20
92	27	35	NO COMMENT	\N	2014-03-08 05:28:29	2014-03-08 05:28:29
93	2	35	NO COMMENT	\N	2014-03-15 21:23:11	2014-03-15 21:23:11
94	2	37	NO COMMENT	\N	2014-01-16 23:52:25	2014-01-16 23:52:25
95	1	37	NO COMMENT	\N	2014-03-10 07:21:29	2014-03-10 07:21:29
96	1	38	NO COMMENT	\N	2014-02-16 11:27:26	2014-02-16 11:27:26
97	2	38	NO COMMENT	\N	2014-02-23 05:31:46	2014-02-23 05:31:46
98	1	39	NO COMMENT	\N	2014-02-21 06:22:33	2014-02-21 06:22:33
99	2	39	NO COMMENT	\N	2014-02-22 11:34:32	2014-02-22 11:34:32
100	45	62	NO COMMENT	\N	2014-01-16 08:51:37	2014-01-16 08:51:37
101	1	62	NO COMMENT	\N	2014-01-23 09:11:10	2014-01-23 09:11:10
102	41	62	NO COMMENT	\N	2014-01-31 00:27:34	2014-01-31 00:27:34
103	2	62	NO COMMENT	\N	2014-02-23 13:45:49	2014-02-23 13:45:49
104	28	62	NO COMMENT	\N	2014-03-07 06:35:05	2014-03-07 06:35:05
105	2	40	NO COMMENT	\N	2014-02-20 21:47:49	2014-02-20 21:47:49
106	1	40	NO COMMENT	\N	2014-02-28 16:13:16	2014-02-28 16:13:16
107	2	41	NO COMMENT	\N	2014-01-02 11:33:24	2014-01-02 11:33:24
108	1	41	NO COMMENT	\N	2014-01-27 02:14:36	2014-01-27 02:14:36
109	27	41	NO COMMENT	\N	2014-03-01 11:48:26	2014-03-01 11:48:26
110	1	42	NO COMMENT	\N	2014-01-18 02:19:49	2014-01-18 02:19:49
111	27	42	NO COMMENT	\N	2014-02-02 01:40:13	2014-02-02 01:40:13
112	2	42	NO COMMENT	\N	2014-02-26 15:35:17	2014-02-26 15:35:17
113	21	43	NO COMMENT	\N	2014-02-03 16:42:48	2014-02-03 16:42:48
114	27	43	NO COMMENT	\N	2014-02-04 22:27:38	2014-02-04 22:27:38
115	2	43	NO COMMENT	\N	2014-02-14 06:59:23	2014-02-14 06:59:23
116	1	43	NO COMMENT	\N	2014-02-16 06:22:23	2014-02-16 06:22:23
117	1	45	NO COMMENT	\N	2014-02-22 08:34:42	2014-02-22 08:34:42
118	21	45	NO COMMENT	\N	2014-02-26 16:34:23	2014-02-26 16:34:23
119	2	45	NO COMMENT	\N	2014-03-03 02:25:16	2014-03-03 02:25:16
120	27	45	NO COMMENT	\N	2014-03-20 07:29:29	2014-03-20 07:29:29
121	1	46	NO COMMENT	\N	2014-03-12 14:31:24	2014-03-12 14:31:24
122	19	48	NO COMMENT	\N	2014-01-28 15:55:42	2014-01-28 15:55:42
123	1	48	NO COMMENT	\N	2014-01-29 23:25:07	2014-01-29 23:25:07
124	35	48	NO COMMENT	\N	2014-02-14 04:59:24	2014-02-14 04:59:24
125	47	50	NO COMMENT	\N	2014-01-27 08:15:40	2014-01-27 08:15:40
126	2	50	NO COMMENT	\N	2014-01-28 06:28:18	2014-01-28 06:28:18
127	35	50	NO COMMENT	\N	2014-03-07 14:40:14	2014-03-07 14:40:14
128	1	50	NO COMMENT	\N	2014-03-12 03:36:15	2014-03-12 03:36:15
129	47	52	NO COMMENT	\N	2014-01-27 16:01:27	2014-01-27 16:01:27
130	1	52	NO COMMENT	\N	2014-03-10 04:43:25	2014-03-10 04:43:25
131	2	52	NO COMMENT	\N	2014-03-13 23:58:51	2014-03-13 23:58:51
132	35	52	NO COMMENT	\N	2014-03-19 02:05:29	2014-03-19 02:05:29
133	2	53	NO COMMENT	\N	2014-02-03 14:52:59	2014-02-03 14:52:59
134	35	53	NO COMMENT	\N	2014-02-06 20:14:30	2014-02-06 20:14:30
135	47	53	NO COMMENT	\N	2014-03-09 10:12:42	2014-03-09 10:12:42
136	1	53	NO COMMENT	\N	2014-03-12 14:41:42	2014-03-12 14:41:42
137	10	54	NO COMMENT	\N	2014-03-04 06:47:46	2014-03-04 06:47:46
138	1	54	NO COMMENT	\N	2014-03-04 13:36:18	2014-03-04 13:36:18
139	2	54	NO COMMENT	\N	2014-03-09 06:09:39	2014-03-09 06:09:39
140	47	54	NO COMMENT	\N	2014-03-13 02:32:49	2014-03-13 02:32:49
141	35	54	NO COMMENT	\N	2014-03-15 16:59:41	2014-03-15 16:59:41
142	12	54	NO COMMENT	\N	2014-03-16 01:15:52	2014-03-16 01:15:52
143	1	55	NO COMMENT	\N	2014-01-31 14:59:35	2014-01-31 14:59:35
144	2	55	NO COMMENT	\N	2014-02-13 07:03:00	2014-02-13 07:03:00
145	44	55	NO COMMENT	\N	2014-03-19 08:45:05	2014-03-19 08:45:05
146	1	56	NO COMMENT	\N	2014-02-15 21:17:32	2014-02-15 21:17:32
147	1	57	NO COMMENT	\N	2014-03-16 14:40:15	2014-03-16 14:40:15
148	2	57	NO COMMENT	\N	2014-03-18 07:48:55	2014-03-18 07:48:55
149	1	58	NO COMMENT	\N	2014-01-24 10:42:04	2014-01-24 10:42:04
150	2	58	NO COMMENT	\N	2014-02-12 23:17:38	2014-02-12 23:17:38
151	42	58	NO COMMENT	\N	2014-02-23 22:22:41	2014-02-23 22:22:41
152	19	58	NO COMMENT	\N	2014-02-26 12:24:32	2014-02-26 12:24:32
153	2	59	NO COMMENT	\N	2014-03-19 19:15:14	2014-03-19 19:15:14
154	2	60	NO COMMENT	\N	2014-02-17 18:01:51	2014-02-17 18:01:51
155	1	60	NO COMMENT	\N	2014-02-25 06:06:44	2014-02-25 06:06:44
156	2	63	NO COMMENT	\N	2014-02-25 14:53:14	2014-02-25 14:53:14
157	1	64	NO COMMENT	\N	2014-01-20 11:35:58	2014-01-20 11:35:58
158	2	64	NO COMMENT	\N	2014-02-03 04:21:21	2014-02-03 04:21:21
159	1	65	NO COMMENT	\N	2014-03-06 23:19:20	2014-03-06 23:19:20
160	2	65	NO COMMENT	\N	2014-03-16 02:18:40	2014-03-16 02:18:40
161	2	66	NO COMMENT	\N	2014-01-21 23:40:00	2014-01-21 23:40:00
162	1	66	NO COMMENT	\N	2014-02-25 08:41:39	2014-02-25 08:41:39
163	45	66	NO COMMENT	\N	2014-03-02 20:33:47	2014-03-02 20:33:47
164	28	67	NO COMMENT	\N	2014-03-01 04:56:35	2014-03-01 04:56:35
165	1	67	NO COMMENT	\N	2014-03-07 11:45:04	2014-03-07 11:45:04
166	2	68	NO COMMENT	\N	2014-01-24 03:19:40	2014-01-24 03:19:40
167	28	68	NO COMMENT	\N	2014-01-29 01:29:04	2014-01-29 01:29:04
168	1	68	NO COMMENT	\N	2014-02-03 04:11:14	2014-02-03 04:11:14
169	2	70	NO COMMENT	\N	2014-01-17 23:07:03	2014-01-17 23:07:03
170	1	70	NO COMMENT	\N	2014-03-14 15:41:04	2014-03-14 15:41:04
171	2	72	NO COMMENT	\N	2014-02-22 22:29:03	2014-02-22 22:29:03
172	33	72	NO COMMENT	\N	2014-02-26 04:40:11	2014-02-26 04:40:11
173	11	72	NO COMMENT	\N	2014-03-03 16:43:04	2014-03-03 16:43:04
174	29	72	NO COMMENT	\N	2014-03-06 07:05:14	2014-03-06 07:05:14
175	45	72	NO COMMENT	\N	2014-03-08 06:21:49	2014-03-08 06:21:49
176	1	72	NO COMMENT	\N	2014-03-13 14:34:29	2014-03-13 14:34:29
177	26	72	NO COMMENT	\N	2014-03-17 16:53:04	2014-03-17 16:53:04
178	1	74	NO COMMENT	\N	2014-03-09 19:35:23	2014-03-09 19:35:23
179	2	74	NO COMMENT	\N	2014-03-11 17:34:24	2014-03-11 17:34:24
180	7	201	NO COMMENT	\N	2014-02-18 15:15:15	2014-02-18 15:15:15
181	13	201	NO COMMENT	\N	2014-03-18 09:45:46	2014-03-18 09:45:46
182	2	76	NO COMMENT	\N	2014-03-01 12:49:17	2014-03-01 12:49:17
183	1	76	NO COMMENT	\N	2014-03-10 04:30:28	2014-03-10 04:30:28
184	1	77	NO COMMENT	\N	2014-02-16 00:13:25	2014-02-16 00:13:25
185	2	77	NO COMMENT	\N	2014-03-06 12:06:22	2014-03-06 12:06:22
186	2	78	NO COMMENT	\N	2014-03-03 17:49:36	2014-03-03 17:49:36
187	1	78	NO COMMENT	\N	2014-03-11 18:40:24	2014-03-11 18:40:24
188	9	80	NO COMMENT	\N	2014-03-14 06:24:42	2014-03-14 06:24:42
189	1	82	NO COMMENT	\N	2014-01-19 20:56:24	2014-01-19 20:56:24
190	15	82	NO COMMENT	\N	2014-02-14 23:52:42	2014-02-14 23:52:42
191	2	82	NO COMMENT	\N	2014-03-04 09:29:03	2014-03-04 09:29:03
192	1	83	NO COMMENT	\N	2014-03-12 12:39:35	2014-03-12 12:39:35
193	2	83	NO COMMENT	\N	2014-03-14 19:35:06	2014-03-14 19:35:06
194	2	84	NO COMMENT	\N	2014-02-10 09:15:07	2014-02-10 09:15:07
195	1	84	NO COMMENT	\N	2014-03-18 17:48:29	2014-03-18 17:48:29
196	1	85	NO COMMENT	\N	2014-02-09 19:55:51	2014-02-09 19:55:51
197	2	85	NO COMMENT	\N	2014-02-22 22:29:15	2014-02-22 22:29:15
198	44	86	NO COMMENT	\N	2014-02-24 17:48:41	2014-02-24 17:48:41
199	9	86	NO COMMENT	\N	2014-03-06 05:12:19	2014-03-06 05:12:19
200	10	86	NO COMMENT	\N	2014-03-07 18:29:07	2014-03-07 18:29:07
201	1	86	NO COMMENT	\N	2014-03-09 08:43:45	2014-03-09 08:43:45
202	2	86	NO COMMENT	\N	2014-03-12 05:27:48	2014-03-12 05:27:48
203	22	928	NO COMMENT	\N	2014-01-26 15:28:38	2014-01-26 15:28:38
204	41	928	NO COMMENT	\N	2014-02-14 07:21:29	2014-02-14 07:21:29
205	1	87	NO COMMENT	\N	2014-01-21 16:31:50	2014-01-21 16:31:50
206	2	87	NO COMMENT	\N	2014-02-12 23:56:52	2014-02-12 23:56:52
207	2	88	NO COMMENT	\N	2014-03-03 21:01:02	2014-03-03 21:01:02
208	1	88	NO COMMENT	\N	2014-03-04 13:12:16	2014-03-04 13:12:16
209	2	89	NO COMMENT	\N	2014-03-15 21:28:58	2014-03-15 21:28:58
210	2	90	NO COMMENT	\N	2014-01-02 19:33:50	2014-01-02 19:33:50
211	1	90	NO COMMENT	\N	2014-03-08 16:55:35	2014-03-08 16:55:35
212	1	91	NO COMMENT	\N	2014-02-16 13:43:27	2014-02-16 13:43:27
213	2	91	NO COMMENT	\N	2014-03-17 07:00:55	2014-03-17 07:00:55
214	1	93	NO COMMENT	\N	2014-02-16 18:56:47	2014-02-16 18:56:47
215	2	93	NO COMMENT	\N	2014-03-03 11:31:36	2014-03-03 11:31:36
216	2	94	NO COMMENT	\N	2014-02-22 16:14:42	2014-02-22 16:14:42
217	1	94	NO COMMENT	\N	2014-03-20 07:18:10	2014-03-20 07:18:10
218	2	95	NO COMMENT	\N	2014-03-06 03:53:12	2014-03-06 03:53:12
219	1	95	NO COMMENT	\N	2014-03-17 06:21:58	2014-03-17 06:21:58
220	1	96	NO COMMENT	\N	2014-01-14 06:24:34	2014-01-14 06:24:34
221	2	96	NO COMMENT	\N	2014-02-14 17:53:24	2014-02-14 17:53:24
222	18	104	NO COMMENT	\N	2014-03-12 20:08:42	2014-03-12 20:08:42
223	1	97	NO COMMENT	\N	2014-01-17 22:39:16	2014-01-17 22:39:16
224	2	97	NO COMMENT	\N	2014-03-01 03:18:39	2014-03-01 03:18:39
225	42	98	NO COMMENT	\N	2014-01-27 17:36:58	2014-01-27 17:36:58
226	1	98	NO COMMENT	\N	2014-02-02 14:46:30	2014-02-02 14:46:30
227	33	98	NO COMMENT	\N	2014-02-13 21:13:20	2014-02-13 21:13:20
228	32	98	NO COMMENT	\N	2014-02-15 06:56:04	2014-02-15 06:56:04
229	2	98	NO COMMENT	\N	2014-03-19 03:04:56	2014-03-19 03:04:56
230	2	99	NO COMMENT	\N	2014-02-02 21:55:58	2014-02-02 21:55:58
231	1	99	NO COMMENT	\N	2014-03-05 12:19:44	2014-03-05 12:19:44
232	28	101	NO COMMENT	\N	2014-02-11 01:54:37	2014-02-11 01:54:37
233	2	101	NO COMMENT	\N	2014-02-22 11:18:47	2014-02-22 11:18:47
234	1	101	NO COMMENT	\N	2014-03-01 15:18:30	2014-03-01 15:18:30
235	28	102	NO COMMENT	\N	2014-02-24 14:19:37	2014-02-24 14:19:37
236	18	105	NO COMMENT	\N	2014-03-13 19:19:10	2014-03-13 19:19:10
237	43	105	NO COMMENT	\N	2014-03-13 23:34:29	2014-03-13 23:34:29
238	44	105	NO COMMENT	\N	2014-03-18 08:42:18	2014-03-18 08:42:18
239	14	105	NO COMMENT	\N	2014-03-19 10:20:36	2014-03-19 10:20:36
240	43	106	NO COMMENT	\N	2014-03-17 13:55:47	2014-03-17 13:55:47
241	44	106	NO COMMENT	\N	2014-03-20 00:08:25	2014-03-20 00:08:25
242	10	106	NO COMMENT	\N	2014-03-20 17:18:02	2014-03-20 17:18:02
243	43	107	NO COMMENT	\N	2014-03-17 03:40:41	2014-03-17 03:40:41
244	46	107	NO COMMENT	\N	2014-03-17 21:19:03	2014-03-17 21:19:03
245	10	107	NO COMMENT	\N	2014-03-18 03:09:41	2014-03-18 03:09:41
246	22	107	NO COMMENT	\N	2014-03-19 09:45:52	2014-03-19 09:45:52
247	18	107	NO COMMENT	\N	2014-03-19 20:47:24	2014-03-19 20:47:24
248	27	113	NO COMMENT	\N	2014-03-12 18:20:01	2014-03-12 18:20:01
249	6	113	NO COMMENT	\N	2014-03-14 17:41:17	2014-03-14 17:41:17
250	11	113	NO COMMENT	\N	2014-03-16 12:12:04	2014-03-16 12:12:04
251	23	113	NO COMMENT	\N	2014-03-18 10:46:35	2014-03-18 10:46:35
252	41	113	NO COMMENT	\N	2014-03-19 13:55:40	2014-03-19 13:55:40
253	12	113	NO COMMENT	\N	2014-03-19 15:05:49	2014-03-19 15:05:49
254	25	113	NO COMMENT	\N	2014-03-20 03:42:55	2014-03-20 03:42:55
255	13	113	NO COMMENT	\N	2014-03-20 07:20:09	2014-03-20 07:20:09
256	12	114	NO COMMENT	\N	2014-03-15 02:27:29	2014-03-15 02:27:29
257	13	114	NO COMMENT	\N	2014-03-15 04:12:31	2014-03-15 04:12:31
258	41	114	NO COMMENT	\N	2014-03-15 15:25:36	2014-03-15 15:25:36
259	11	114	NO COMMENT	\N	2014-03-18 10:32:28	2014-03-18 10:32:28
260	26	114	NO COMMENT	\N	2014-03-18 20:12:30	2014-03-18 20:12:30
261	23	114	NO COMMENT	\N	2014-03-18 21:07:07	2014-03-18 21:07:07
262	6	114	NO COMMENT	\N	2014-03-19 18:06:54	2014-03-19 18:06:54
263	25	114	NO COMMENT	\N	2014-03-20 05:07:04	2014-03-20 05:07:04
264	27	114	NO COMMENT	\N	2014-03-20 07:20:45	2014-03-20 07:20:45
265	11	115	NO COMMENT	\N	2014-03-16 01:32:13	2014-03-16 01:32:13
266	26	115	NO COMMENT	\N	2014-03-16 07:20:27	2014-03-16 07:20:27
267	6	115	NO COMMENT	\N	2014-03-16 15:26:12	2014-03-16 15:26:12
268	23	115	NO COMMENT	\N	2014-03-17 12:04:26	2014-03-17 12:04:26
269	27	115	NO COMMENT	\N	2014-03-18 11:38:45	2014-03-18 11:38:45
270	12	115	NO COMMENT	\N	2014-03-19 01:59:47	2014-03-19 01:59:47
271	41	115	NO COMMENT	\N	2014-03-19 11:51:56	2014-03-19 11:51:56
272	25	115	NO COMMENT	\N	2014-03-19 13:49:39	2014-03-19 13:49:39
273	13	115	NO COMMENT	\N	2014-03-20 09:08:09	2014-03-20 09:08:09
274	41	116	NO COMMENT	\N	2014-03-17 13:43:32	2014-03-17 13:43:32
275	11	116	NO COMMENT	\N	2014-03-17 17:25:12	2014-03-17 17:25:12
276	13	116	NO COMMENT	\N	2014-03-19 06:34:09	2014-03-19 06:34:09
277	26	116	NO COMMENT	\N	2014-03-19 13:59:30	2014-03-19 13:59:30
278	23	116	NO COMMENT	\N	2014-03-20 02:20:18	2014-03-20 02:20:18
279	6	116	NO COMMENT	\N	2014-03-20 04:46:46	2014-03-20 04:46:46
280	25	116	NO COMMENT	\N	2014-03-20 08:50:14	2014-03-20 08:50:14
281	37	117	NO COMMENT	\N	2014-03-18 11:40:26	2014-03-18 11:40:26
282	26	117	NO COMMENT	\N	2014-03-18 12:56:25	2014-03-18 12:56:25
283	23	117	NO COMMENT	\N	2014-03-19 06:53:01	2014-03-19 06:53:01
284	13	117	NO COMMENT	\N	2014-03-20 16:34:18	2014-03-20 16:34:18
285	1	163	NO COMMENT	\N	2014-02-23 06:45:51	2014-02-23 06:45:51
286	9	163	NO COMMENT	\N	2014-03-01 01:40:49	2014-03-01 01:40:49
287	23	118	NO COMMENT	\N	2014-03-14 01:08:54	2014-03-14 01:08:54
288	19	118	NO COMMENT	\N	2014-03-14 20:03:46	2014-03-14 20:03:46
289	23	119	NO COMMENT	\N	2014-03-15 03:34:04	2014-03-15 03:34:04
290	19	119	NO COMMENT	\N	2014-03-15 13:57:11	2014-03-15 13:57:11
291	22	120	NO COMMENT	\N	2014-03-19 22:41:38	2014-03-19 22:41:38
292	28	120	NO COMMENT	\N	2014-03-20 14:10:16	2014-03-20 14:10:16
293	22	121	NO COMMENT	\N	2014-03-12 15:53:17	2014-03-12 15:53:17
294	6	121	NO COMMENT	\N	2014-03-14 04:40:25	2014-03-14 04:40:25
295	18	121	NO COMMENT	\N	2014-03-18 03:48:34	2014-03-18 03:48:34
296	6	122	NO COMMENT	\N	2014-03-10 19:02:59	2014-03-10 19:02:59
297	18	122	NO COMMENT	\N	2014-03-14 10:42:35	2014-03-14 10:42:35
298	22	122	NO COMMENT	\N	2014-03-15 16:12:07	2014-03-15 16:12:07
299	18	123	NO COMMENT	\N	2014-03-10 03:06:37	2014-03-10 03:06:37
300	6	123	NO COMMENT	\N	2014-03-16 22:35:49	2014-03-16 22:35:49
301	22	123	NO COMMENT	\N	2014-03-18 06:39:16	2014-03-18 06:39:16
302	18	124	NO COMMENT	\N	2014-03-15 14:34:26	2014-03-15 14:34:26
303	22	124	NO COMMENT	\N	2014-03-18 13:53:42	2014-03-18 13:53:42
304	6	124	NO COMMENT	\N	2014-03-19 13:36:43	2014-03-19 13:36:43
305	42	125	NO COMMENT	\N	2014-03-10 14:19:41	2014-03-10 14:19:41
306	7	130	NO COMMENT	\N	2014-03-14 04:50:28	2014-03-14 04:50:28
307	23	130	NO COMMENT	\N	2014-03-15 09:06:18	2014-03-15 09:06:18
308	44	131	NO COMMENT	\N	2014-03-15 18:01:10	2014-03-15 18:01:10
309	44	132	NO COMMENT	\N	2014-03-20 13:32:46	2014-03-20 13:32:46
310	29	133	NO COMMENT	\N	2014-03-09 01:27:32	2014-03-09 01:27:32
311	7	133	NO COMMENT	\N	2014-03-11 03:04:59	2014-03-11 03:04:59
312	18	133	NO COMMENT	\N	2014-03-13 07:23:00	2014-03-13 07:23:00
313	15	133	NO COMMENT	\N	2014-03-13 17:39:30	2014-03-13 17:39:30
314	11	133	NO COMMENT	\N	2014-03-16 19:52:06	2014-03-16 19:52:06
315	21	133	NO COMMENT	\N	2014-03-17 06:55:11	2014-03-17 06:55:11
316	9	133	NO COMMENT	\N	2014-03-17 11:48:30	2014-03-17 11:48:30
317	30	133	NO COMMENT	\N	2014-03-18 15:35:44	2014-03-18 15:35:44
318	21	134	NO COMMENT	\N	2014-03-17 08:08:22	2014-03-17 08:08:22
319	15	134	NO COMMENT	\N	2014-03-17 09:58:36	2014-03-17 09:58:36
320	30	134	NO COMMENT	\N	2014-03-18 19:35:38	2014-03-18 19:35:38
321	7	134	NO COMMENT	\N	2014-03-19 15:34:08	2014-03-19 15:34:08
322	11	134	NO COMMENT	\N	2014-03-20 14:31:30	2014-03-20 14:31:30
323	30	136	NO COMMENT	\N	2014-03-13 04:11:39	2014-03-13 04:11:39
324	18	136	NO COMMENT	\N	2014-03-15 02:54:23	2014-03-15 02:54:23
325	21	137	NO COMMENT	\N	2014-03-14 19:38:39	2014-03-14 19:38:39
326	18	137	NO COMMENT	\N	2014-03-15 23:52:13	2014-03-15 23:52:13
327	37	137	NO COMMENT	\N	2014-03-16 14:09:02	2014-03-16 14:09:02
328	9	137	NO COMMENT	\N	2014-03-16 18:48:18	2014-03-16 18:48:18
329	29	137	NO COMMENT	\N	2014-03-17 12:57:41	2014-03-17 12:57:41
330	7	137	NO COMMENT	\N	2014-03-18 22:52:50	2014-03-18 22:52:50
331	30	137	NO COMMENT	\N	2014-03-19 18:03:51	2014-03-19 18:03:51
332	11	137	NO COMMENT	\N	2014-03-20 17:31:30	2014-03-20 17:31:30
333	15	137	NO COMMENT	\N	2014-03-20 19:49:29	2014-03-20 19:49:29
334	15	138	NO COMMENT	\N	2014-03-15 15:51:09	2014-03-15 15:51:09
335	29	138	NO COMMENT	\N	2014-03-16 13:55:28	2014-03-16 13:55:28
336	11	138	NO COMMENT	\N	2014-03-18 01:23:17	2014-03-18 01:23:17
337	37	138	NO COMMENT	\N	2014-03-19 19:30:31	2014-03-19 19:30:31
338	18	138	NO COMMENT	\N	2014-03-20 00:32:36	2014-03-20 00:32:36
339	11	139	NO COMMENT	\N	2014-03-19 13:48:33	2014-03-19 13:48:33
340	30	139	NO COMMENT	\N	2014-03-20 06:18:51	2014-03-20 06:18:51
341	18	140	NO COMMENT	\N	2014-03-20 05:50:19	2014-03-20 05:50:19
342	37	140	NO COMMENT	\N	2014-03-20 08:09:44	2014-03-20 08:09:44
343	7	140	NO COMMENT	\N	2014-03-20 15:50:53	2014-03-20 15:50:53
344	6	143	NO COMMENT	\N	2014-03-19 22:51:57	2014-03-19 22:51:57
345	6	144	NO COMMENT	\N	2014-03-10 03:22:30	2014-03-10 03:22:30
346	6	145	NO COMMENT	\N	2014-03-19 12:18:15	2014-03-19 12:18:15
347	26	147	NO COMMENT	\N	2014-03-11 04:57:53	2014-03-11 04:57:53
348	26	148	NO COMMENT	\N	2014-03-17 07:49:09	2014-03-17 07:49:09
349	15	150	NO COMMENT	\N	2014-03-18 08:30:29	2014-03-18 08:30:29
350	11	150	NO COMMENT	\N	2014-03-19 00:23:50	2014-03-19 00:23:50
351	35	152	NO COMMENT	\N	2014-02-10 05:04:52	2014-02-10 05:04:52
352	2	152	NO COMMENT	\N	2014-02-14 08:53:52	2014-02-14 08:53:52
353	6	152	NO COMMENT	\N	2014-02-14 16:03:29	2014-02-14 16:03:29
354	1	152	NO COMMENT	\N	2014-02-20 03:18:05	2014-02-20 03:18:05
355	22	152	NO COMMENT	\N	2014-02-25 17:41:50	2014-02-25 17:41:50
356	7	152	NO COMMENT	\N	2014-03-02 09:12:11	2014-03-02 09:12:11
357	19	152	NO COMMENT	\N	2014-03-13 23:10:24	2014-03-13 23:10:24
358	1	153	NO COMMENT	\N	2014-02-15 18:29:52	2014-02-15 18:29:52
359	6	153	NO COMMENT	\N	2014-02-16 22:10:57	2014-02-16 22:10:57
360	35	153	NO COMMENT	\N	2014-02-22 10:01:02	2014-02-22 10:01:02
361	22	153	NO COMMENT	\N	2014-02-25 13:11:15	2014-02-25 13:11:15
362	13	153	NO COMMENT	\N	2014-02-26 03:30:26	2014-02-26 03:30:26
363	18	153	NO COMMENT	\N	2014-02-28 15:56:46	2014-02-28 15:56:46
364	7	153	NO COMMENT	\N	2014-03-09 19:58:34	2014-03-09 19:58:34
365	19	153	NO COMMENT	\N	2014-03-16 09:00:03	2014-03-16 09:00:03
366	2	153	NO COMMENT	\N	2014-03-17 19:39:34	2014-03-17 19:39:34
367	6	154	NO COMMENT	\N	2014-02-25 12:27:46	2014-02-25 12:27:46
368	7	155	NO COMMENT	\N	2014-02-02 17:54:25	2014-02-02 17:54:25
369	6	155	NO COMMENT	\N	2014-02-09 03:13:36	2014-02-09 03:13:36
370	14	155	NO COMMENT	\N	2014-02-15 11:53:19	2014-02-15 11:53:19
371	45	155	NO COMMENT	\N	2014-02-17 13:29:23	2014-02-17 13:29:23
372	2	155	NO COMMENT	\N	2014-02-18 10:54:04	2014-02-18 10:54:04
373	1	155	NO COMMENT	\N	2014-03-16 14:32:51	2014-03-16 14:32:51
374	26	158	NO COMMENT	\N	2014-02-20 21:10:59	2014-02-20 21:10:59
375	42	158	NO COMMENT	\N	2014-02-28 13:05:25	2014-02-28 13:05:25
376	28	158	NO COMMENT	\N	2014-03-01 01:42:06	2014-03-01 01:42:06
377	17	158	NO COMMENT	\N	2014-03-03 09:05:49	2014-03-03 09:05:49
378	42	159	NO COMMENT	\N	2014-03-03 11:45:52	2014-03-03 11:45:52
379	41	159	NO COMMENT	\N	2014-03-08 22:40:54	2014-03-08 22:40:54
380	36	159	NO COMMENT	\N	2014-03-17 12:54:20	2014-03-17 12:54:20
381	2	159	NO COMMENT	\N	2014-03-18 18:08:48	2014-03-18 18:08:48
382	20	159	NO COMMENT	\N	2014-03-19 18:06:28	2014-03-19 18:06:28
383	2	160	NO COMMENT	\N	2014-02-05 10:07:21	2014-02-05 10:07:21
384	7	160	NO COMMENT	\N	2014-02-20 18:46:54	2014-02-20 18:46:54
385	1	160	NO COMMENT	\N	2014-03-14 06:06:20	2014-03-14 06:06:20
386	7	161	NO COMMENT	\N	2014-02-27 05:37:22	2014-02-27 05:37:22
387	2	161	NO COMMENT	\N	2014-03-04 23:42:31	2014-03-04 23:42:31
388	1	161	NO COMMENT	\N	2014-03-17 05:38:47	2014-03-17 05:38:47
389	7	573	NO COMMENT	\N	2013-11-18 04:41:45	2013-11-18 04:41:45
390	2	164	NO COMMENT	\N	2014-02-05 19:40:06	2014-02-05 19:40:06
391	1	164	NO COMMENT	\N	2014-02-27 07:18:29	2014-02-27 07:18:29
392	7	164	NO COMMENT	\N	2014-03-08 13:55:18	2014-03-08 13:55:18
393	2	165	NO COMMENT	\N	2014-03-10 05:16:13	2014-03-10 05:16:13
394	28	167	NO COMMENT	\N	2014-02-11 10:15:17	2014-02-11 10:15:17
395	45	167	NO COMMENT	\N	2014-02-22 10:09:17	2014-02-22 10:09:17
396	2	167	NO COMMENT	\N	2014-03-15 23:25:23	2014-03-15 23:25:23
397	27	168	NO COMMENT	\N	2014-01-27 04:25:32	2014-01-27 04:25:32
398	2	168	NO COMMENT	\N	2014-01-30 16:40:38	2014-01-30 16:40:38
399	7	168	NO COMMENT	\N	2014-02-21 09:41:21	2014-02-21 09:41:21
400	1	168	NO COMMENT	\N	2014-03-04 00:42:14	2014-03-04 00:42:14
401	47	170	NO COMMENT	\N	2014-02-10 18:39:59	2014-02-10 18:39:59
402	7	170	NO COMMENT	\N	2014-02-12 12:48:46	2014-02-12 12:48:46
403	2	170	NO COMMENT	\N	2014-02-25 09:55:47	2014-02-25 09:55:47
404	35	170	NO COMMENT	\N	2014-02-26 02:16:26	2014-02-26 02:16:26
405	1	170	NO COMMENT	\N	2014-02-27 04:55:46	2014-02-27 04:55:46
406	7	173	NO COMMENT	\N	2014-02-17 00:11:17	2014-02-17 00:11:17
407	47	173	NO COMMENT	\N	2014-02-17 00:12:18	2014-02-17 00:12:18
408	12	173	NO COMMENT	\N	2014-02-17 20:46:00	2014-02-17 20:46:00
409	1	173	NO COMMENT	\N	2014-02-23 14:07:11	2014-02-23 14:07:11
410	35	173	NO COMMENT	\N	2014-02-26 06:38:33	2014-02-26 06:38:33
411	2	173	NO COMMENT	\N	2014-03-02 20:39:04	2014-03-02 20:39:04
412	10	173	NO COMMENT	\N	2014-03-11 14:48:43	2014-03-11 14:48:43
413	7	174	NO COMMENT	\N	2014-02-27 21:40:04	2014-02-27 21:40:04
414	47	174	NO COMMENT	\N	2014-03-01 00:39:17	2014-03-01 00:39:17
415	23	174	NO COMMENT	\N	2014-03-01 22:28:19	2014-03-01 22:28:19
416	12	174	NO COMMENT	\N	2014-03-03 22:07:30	2014-03-03 22:07:30
417	2	174	NO COMMENT	\N	2014-03-10 00:26:46	2014-03-10 00:26:46
418	1	174	NO COMMENT	\N	2014-03-12 15:04:30	2014-03-12 15:04:30
419	35	174	NO COMMENT	\N	2014-03-13 23:26:24	2014-03-13 23:26:24
420	10	174	NO COMMENT	\N	2014-03-17 04:32:38	2014-03-17 04:32:38
421	23	175	NO COMMENT	\N	2014-02-24 08:28:03	2014-02-24 08:28:03
422	35	175	NO COMMENT	\N	2014-02-25 17:12:30	2014-02-25 17:12:30
423	40	175	NO COMMENT	\N	2014-02-26 16:58:09	2014-02-26 16:58:09
424	20	175	NO COMMENT	\N	2014-03-03 06:34:35	2014-03-03 06:34:35
425	1	175	NO COMMENT	\N	2014-03-04 07:39:31	2014-03-04 07:39:31
426	7	175	NO COMMENT	\N	2014-03-05 06:42:35	2014-03-05 06:42:35
427	12	175	NO COMMENT	\N	2014-03-05 18:06:52	2014-03-05 18:06:52
428	47	175	NO COMMENT	\N	2014-03-06 11:05:10	2014-03-06 11:05:10
429	10	175	NO COMMENT	\N	2014-03-08 04:45:34	2014-03-08 04:45:34
430	2	175	NO COMMENT	\N	2014-03-12 09:10:29	2014-03-12 09:10:29
431	10	176	NO COMMENT	\N	2014-03-16 10:54:09	2014-03-16 10:54:09
432	1	176	NO COMMENT	\N	2014-03-18 09:57:48	2014-03-18 09:57:48
433	20	176	NO COMMENT	\N	2014-03-18 18:46:40	2014-03-18 18:46:40
434	31	176	NO COMMENT	\N	2014-03-19 22:25:43	2014-03-19 22:25:43
435	7	177	NO COMMENT	\N	2014-02-01 16:32:09	2014-02-01 16:32:09
436	17	177	NO COMMENT	\N	2014-02-17 17:18:40	2014-02-17 17:18:40
437	15	177	NO COMMENT	\N	2014-03-13 09:53:20	2014-03-13 09:53:20
438	1	177	NO COMMENT	\N	2014-03-16 12:27:54	2014-03-16 12:27:54
439	2	178	NO COMMENT	\N	2014-03-14 06:11:51	2014-03-14 06:11:51
440	2	179	NO COMMENT	\N	2014-03-07 06:40:49	2014-03-07 06:40:49
441	1	180	NO COMMENT	\N	2014-02-20 22:10:27	2014-02-20 22:10:27
442	2	180	NO COMMENT	\N	2014-02-23 09:52:54	2014-02-23 09:52:54
443	15	180	NO COMMENT	\N	2014-02-23 20:15:30	2014-02-23 20:15:30
444	7	180	NO COMMENT	\N	2014-02-27 05:09:07	2014-02-27 05:09:07
445	17	180	NO COMMENT	\N	2014-02-27 18:05:19	2014-02-27 18:05:19
446	16	180	NO COMMENT	\N	2014-03-01 10:09:40	2014-03-01 10:09:40
447	24	180	NO COMMENT	\N	2014-03-17 04:07:33	2014-03-17 04:07:33
448	1	181	NO COMMENT	\N	2014-01-17 01:38:40	2014-01-17 01:38:40
449	28	181	NO COMMENT	\N	2014-01-30 10:56:48	2014-01-30 10:56:48
450	7	181	NO COMMENT	\N	2014-03-05 14:33:37	2014-03-05 14:33:37
451	7	182	NO COMMENT	\N	2013-11-13 20:02:11	2013-11-13 20:02:11
452	1	182	NO COMMENT	\N	2014-03-14 23:33:32	2014-03-14 23:33:32
453	7	183	NO COMMENT	\N	2014-01-25 10:19:17	2014-01-25 10:19:17
454	1	183	NO COMMENT	\N	2014-02-16 04:18:57	2014-02-16 04:18:57
455	22	185	NO COMMENT	\N	2014-01-28 01:24:55	2014-01-28 01:24:55
456	41	185	NO COMMENT	\N	2014-02-01 11:12:13	2014-02-01 11:12:13
457	22	186	NO COMMENT	\N	2014-02-11 18:15:19	2014-02-11 18:15:19
458	1	186	NO COMMENT	\N	2014-03-01 03:45:28	2014-03-01 03:45:28
459	44	186	NO COMMENT	\N	2014-03-06 13:20:50	2014-03-06 13:20:50
460	41	186	NO COMMENT	\N	2014-03-13 20:49:33	2014-03-13 20:49:33
461	7	186	NO COMMENT	\N	2014-03-20 07:44:15	2014-03-20 07:44:15
462	7	187	NO COMMENT	\N	2014-01-13 05:24:29	2014-01-13 05:24:29
463	1	187	NO COMMENT	\N	2014-02-09 19:13:30	2014-02-09 19:13:30
464	36	188	NO COMMENT	\N	2014-02-06 17:23:01	2014-02-06 17:23:01
465	47	188	NO COMMENT	\N	2014-02-18 21:42:59	2014-02-18 21:42:59
466	1	188	NO COMMENT	\N	2014-02-21 19:01:11	2014-02-21 19:01:11
467	7	188	NO COMMENT	\N	2014-02-26 19:44:12	2014-02-26 19:44:12
468	1	200	NO COMMENT	\N	2013-11-14 13:25:55	2013-11-14 13:25:55
469	7	200	NO COMMENT	\N	2013-12-27 16:09:53	2013-12-27 16:09:53
470	1	191	NO COMMENT	\N	2014-01-20 08:41:34	2014-01-20 08:41:34
471	7	191	NO COMMENT	\N	2014-02-14 04:13:29	2014-02-14 04:13:29
472	1	192	NO COMMENT	\N	2014-01-17 10:41:35	2014-01-17 10:41:35
473	7	192	NO COMMENT	\N	2014-03-15 06:11:34	2014-03-15 06:11:34
474	1	193	NO COMMENT	\N	2013-10-29 11:34:36	2013-10-29 11:34:36
475	7	193	NO COMMENT	\N	2013-12-29 05:49:03	2013-12-29 05:49:03
476	7	194	NO COMMENT	\N	2013-12-02 22:47:52	2013-12-02 22:47:52
477	1	194	NO COMMENT	\N	2014-02-19 09:53:15	2014-02-19 09:53:15
478	1	195	NO COMMENT	\N	2014-01-21 23:41:27	2014-01-21 23:41:27
479	7	195	NO COMMENT	\N	2014-02-24 09:08:51	2014-02-24 09:08:51
480	7	196	NO COMMENT	\N	2013-11-15 08:27:40	2013-11-15 08:27:40
481	1	196	NO COMMENT	\N	2014-01-29 22:32:15	2014-01-29 22:32:15
482	19	197	NO COMMENT	\N	2014-02-16 18:31:32	2014-02-16 18:31:32
483	44	197	NO COMMENT	\N	2014-02-18 04:51:35	2014-02-18 04:51:35
484	1	197	NO COMMENT	\N	2014-03-01 17:28:40	2014-03-01 17:28:40
485	7	198	NO COMMENT	\N	2014-01-03 21:35:01	2014-01-03 21:35:01
486	1	198	NO COMMENT	\N	2014-01-24 17:18:38	2014-01-24 17:18:38
487	1	202	NO COMMENT	\N	2014-01-07 22:38:27	2014-01-07 22:38:27
488	7	202	NO COMMENT	\N	2014-01-14 17:16:23	2014-01-14 17:16:23
489	7	203	NO COMMENT	\N	2014-01-05 03:52:58	2014-01-05 03:52:58
490	1	203	NO COMMENT	\N	2014-01-20 15:15:48	2014-01-20 15:15:48
491	1	204	NO COMMENT	\N	2013-11-30 00:33:09	2013-11-30 00:33:09
492	7	204	NO COMMENT	\N	2013-12-24 13:19:57	2013-12-24 13:19:57
493	1	206	NO COMMENT	\N	2013-11-24 06:47:37	2013-11-24 06:47:37
494	13	206	NO COMMENT	\N	2013-12-02 21:22:11	2013-12-02 21:22:11
495	7	206	NO COMMENT	\N	2014-03-07 02:42:03	2014-03-07 02:42:03
496	13	207	NO COMMENT	\N	2013-12-15 21:59:32	2013-12-15 21:59:32
497	7	207	NO COMMENT	\N	2013-12-30 20:44:46	2013-12-30 20:44:46
498	1	207	NO COMMENT	\N	2014-02-23 19:09:05	2014-02-23 19:09:05
499	7	208	NO COMMENT	\N	2014-01-21 01:05:03	2014-01-21 01:05:03
500	1	208	NO COMMENT	\N	2014-02-22 19:14:29	2014-02-22 19:14:29
501	13	208	NO COMMENT	\N	2014-03-03 22:19:16	2014-03-03 22:19:16
502	7	209	NO COMMENT	\N	2014-03-17 09:55:32	2014-03-17 09:55:32
503	1	210	NO COMMENT	\N	2014-01-30 04:39:54	2014-01-30 04:39:54
504	7	210	NO COMMENT	\N	2014-02-15 04:15:57	2014-02-15 04:15:57
505	1	211	NO COMMENT	\N	2013-10-19 10:59:10	2013-10-19 10:59:10
506	7	211	NO COMMENT	\N	2014-01-02 20:57:25	2014-01-02 20:57:25
507	45	1606	NO COMMENT	\N	2014-02-22 10:29:11	2014-02-22 10:29:11
508	2	1606	NO COMMENT	\N	2014-03-04 19:26:36	2014-03-04 19:26:36
509	1	212	NO COMMENT	\N	2014-01-07 17:23:29	2014-01-07 17:23:29
510	7	212	NO COMMENT	\N	2014-02-20 14:41:02	2014-02-20 14:41:02
511	7	213	NO COMMENT	\N	2013-11-24 21:17:42	2013-11-24 21:17:42
512	1	213	NO COMMENT	\N	2013-12-20 21:52:56	2013-12-20 21:52:56
513	1	214	NO COMMENT	\N	2014-02-09 15:17:08	2014-02-09 15:17:08
514	1	215	NO COMMENT	\N	2014-01-09 13:06:28	2014-01-09 13:06:28
515	7	215	NO COMMENT	\N	2014-01-11 01:28:33	2014-01-11 01:28:33
516	14	215	NO COMMENT	\N	2014-02-03 06:20:25	2014-02-03 06:20:25
517	14	216	NO COMMENT	\N	2014-02-17 07:52:08	2014-02-17 07:52:08
518	1	218	NO COMMENT	\N	2014-02-22 23:53:06	2014-02-22 23:53:06
519	7	218	NO COMMENT	\N	2014-03-14 05:34:02	2014-03-14 05:34:02
520	7	219	NO COMMENT	\N	2014-01-25 09:34:12	2014-01-25 09:34:12
521	1	220	NO COMMENT	\N	2013-12-13 09:00:33	2013-12-13 09:00:33
522	7	220	NO COMMENT	\N	2014-02-04 23:47:03	2014-02-04 23:47:03
523	7	221	NO COMMENT	\N	2013-12-31 10:07:27	2013-12-31 10:07:27
524	1	221	NO COMMENT	\N	2014-02-20 02:40:24	2014-02-20 02:40:24
525	1	222	NO COMMENT	\N	2014-02-07 05:14:28	2014-02-07 05:14:28
526	1	224	NO COMMENT	\N	2014-02-18 21:40:34	2014-02-18 21:40:34
527	7	224	NO COMMENT	\N	2014-02-28 10:14:03	2014-02-28 10:14:03
528	27	224	NO COMMENT	\N	2014-03-16 14:27:01	2014-03-16 14:27:01
529	7	226	NO COMMENT	\N	2013-12-19 08:44:36	2013-12-19 08:44:36
530	1	226	NO COMMENT	\N	2014-02-03 08:08:19	2014-02-03 08:08:19
531	28	226	NO COMMENT	\N	2014-02-21 07:07:06	2014-02-21 07:07:06
532	7	227	NO COMMENT	\N	2013-11-20 20:56:41	2013-11-20 20:56:41
533	1	227	NO COMMENT	\N	2013-11-26 18:39:46	2013-11-26 18:39:46
534	7	240	NO COMMENT	\N	2013-11-18 16:46:02	2013-11-18 16:46:02
535	1	240	NO COMMENT	\N	2014-03-11 05:21:40	2014-03-11 05:21:40
536	1	228	NO COMMENT	\N	2013-12-09 15:02:13	2013-12-09 15:02:13
537	7	228	NO COMMENT	\N	2014-01-30 21:17:16	2014-01-30 21:17:16
538	1	229	NO COMMENT	\N	2014-01-04 01:29:24	2014-01-04 01:29:24
539	7	229	NO COMMENT	\N	2014-01-12 19:58:56	2014-01-12 19:58:56
540	1	230	NO COMMENT	\N	2013-09-13 03:54:33	2013-09-13 03:54:33
541	28	230	NO COMMENT	\N	2013-10-03 01:52:14	2013-10-03 01:52:14
542	7	230	NO COMMENT	\N	2013-12-29 07:08:42	2013-12-29 07:08:42
543	1	231	NO COMMENT	\N	2013-12-30 03:42:59	2013-12-30 03:42:59
544	28	231	NO COMMENT	\N	2014-01-26 22:32:50	2014-01-26 22:32:50
545	7	231	NO COMMENT	\N	2014-01-30 14:25:17	2014-01-30 14:25:17
546	1	232	NO COMMENT	\N	2014-02-05 18:29:14	2014-02-05 18:29:14
547	12	232	NO COMMENT	\N	2014-02-14 16:56:09	2014-02-14 16:56:09
548	1	233	NO COMMENT	\N	2014-02-12 00:45:55	2014-02-12 00:45:55
549	17	233	NO COMMENT	\N	2014-02-17 11:17:47	2014-02-17 11:17:47
550	48	233	NO COMMENT	\N	2014-02-20 04:36:41	2014-02-20 04:36:41
551	28	233	NO COMMENT	\N	2014-02-27 07:28:18	2014-02-27 07:28:18
552	22	233	NO COMMENT	\N	2014-02-28 11:15:14	2014-02-28 11:15:14
553	7	233	NO COMMENT	\N	2014-03-04 04:42:40	2014-03-04 04:42:40
554	12	233	NO COMMENT	\N	2014-03-11 13:35:29	2014-03-11 13:35:29
555	7	235	NO COMMENT	\N	2014-01-22 04:24:34	2014-01-22 04:24:34
556	1	235	NO COMMENT	\N	2014-03-10 09:43:01	2014-03-10 09:43:01
557	7	236	NO COMMENT	\N	2013-10-29 07:15:27	2013-10-29 07:15:27
558	1	236	NO COMMENT	\N	2013-11-10 00:49:25	2013-11-10 00:49:25
559	27	239	NO COMMENT	\N	2014-02-21 12:31:22	2014-02-21 12:31:22
560	7	239	NO COMMENT	\N	2014-03-10 06:28:06	2014-03-10 06:28:06
561	1	239	NO COMMENT	\N	2014-03-11 01:10:46	2014-03-11 01:10:46
562	7	1162	NO COMMENT	\N	2014-01-25 21:40:56	2014-01-25 21:40:56
563	1	241	NO COMMENT	\N	2014-02-19 03:07:30	2014-02-19 03:07:30
564	7	241	NO COMMENT	\N	2014-02-22 05:12:18	2014-02-22 05:12:18
565	7	245	NO COMMENT	\N	2013-11-16 20:37:30	2013-11-16 20:37:30
566	1	245	NO COMMENT	\N	2014-02-08 12:06:35	2014-02-08 12:06:35
567	1	247	NO COMMENT	\N	2013-12-12 20:23:13	2013-12-12 20:23:13
568	10	248	NO COMMENT	\N	2014-02-05 22:51:10	2014-02-05 22:51:10
569	1	248	NO COMMENT	\N	2014-02-25 21:07:57	2014-02-25 21:07:57
570	44	248	NO COMMENT	\N	2014-02-27 09:59:28	2014-02-27 09:59:28
571	7	248	NO COMMENT	\N	2014-03-02 06:22:28	2014-03-02 06:22:28
572	10	249	NO COMMENT	\N	2014-02-15 14:08:10	2014-02-15 14:08:10
573	9	250	NO COMMENT	\N	2014-03-07 13:43:51	2014-03-07 13:43:51
574	7	250	NO COMMENT	\N	2014-03-12 06:41:20	2014-03-12 06:41:20
575	7	253	NO COMMENT	\N	2013-11-05 15:37:04	2013-11-05 15:37:04
576	1	253	NO COMMENT	\N	2014-03-20 04:26:43	2014-03-20 04:26:43
577	1	254	NO COMMENT	\N	2014-03-04 01:46:10	2014-03-04 01:46:10
578	7	254	NO COMMENT	\N	2014-03-14 03:58:03	2014-03-14 03:58:03
579	1	255	NO COMMENT	\N	2014-01-22 06:39:00	2014-01-22 06:39:00
580	1	256	NO COMMENT	\N	2014-01-18 07:49:21	2014-01-18 07:49:21
581	7	256	NO COMMENT	\N	2014-03-05 14:05:27	2014-03-05 14:05:27
582	1	257	NO COMMENT	\N	2014-02-09 23:57:40	2014-02-09 23:57:40
583	7	257	NO COMMENT	\N	2014-03-08 01:58:06	2014-03-08 01:58:06
584	1	259	NO COMMENT	\N	2013-12-14 06:12:53	2013-12-14 06:12:53
585	1	261	NO COMMENT	\N	2013-10-19 12:46:06	2013-10-19 12:46:06
586	7	261	NO COMMENT	\N	2014-03-17 09:56:57	2014-03-17 09:56:57
587	1	262	NO COMMENT	\N	2014-02-18 23:31:22	2014-02-18 23:31:22
588	7	262	NO COMMENT	\N	2014-03-01 23:15:17	2014-03-01 23:15:17
589	7	264	NO COMMENT	\N	2014-01-13 04:51:30	2014-01-13 04:51:30
590	45	264	NO COMMENT	\N	2014-01-18 00:43:16	2014-01-18 00:43:16
591	1	264	NO COMMENT	\N	2014-01-27 18:35:08	2014-01-27 18:35:08
592	14	264	NO COMMENT	\N	2014-02-28 04:30:06	2014-02-28 04:30:06
593	6	265	NO COMMENT	\N	2014-01-18 02:07:43	2014-01-18 02:07:43
594	45	265	NO COMMENT	\N	2014-01-28 03:21:55	2014-01-28 03:21:55
595	14	265	NO COMMENT	\N	2014-02-04 18:05:16	2014-02-04 18:05:16
596	1	265	NO COMMENT	\N	2014-02-24 07:54:57	2014-02-24 07:54:57
597	7	265	NO COMMENT	\N	2014-03-09 23:39:29	2014-03-09 23:39:29
598	7	266	NO COMMENT	\N	2013-10-25 12:03:12	2013-10-25 12:03:12
599	1	266	NO COMMENT	\N	2014-02-26 04:42:22	2014-02-26 04:42:22
600	7	267	NO COMMENT	\N	2013-10-15 09:15:23	2013-10-15 09:15:23
601	1	267	NO COMMENT	\N	2014-03-13 20:23:03	2014-03-13 20:23:03
602	1	268	NO COMMENT	\N	2014-02-05 21:02:52	2014-02-05 21:02:52
603	1	269	NO COMMENT	\N	2013-12-10 13:27:44	2013-12-10 13:27:44
604	7	269	NO COMMENT	\N	2013-12-26 17:03:20	2013-12-26 17:03:20
605	45	270	NO COMMENT	\N	2014-02-03 10:47:07	2014-02-03 10:47:07
606	1	270	NO COMMENT	\N	2014-02-07 18:50:11	2014-02-07 18:50:11
607	7	270	NO COMMENT	\N	2014-03-16 08:21:34	2014-03-16 08:21:34
608	1	272	NO COMMENT	\N	2013-10-10 07:47:26	2013-10-10 07:47:26
609	7	272	NO COMMENT	\N	2014-01-13 18:45:31	2014-01-13 18:45:31
610	1	273	NO COMMENT	\N	2013-11-09 16:46:20	2013-11-09 16:46:20
611	7	273	NO COMMENT	\N	2013-11-23 13:03:25	2013-11-23 13:03:25
612	7	274	NO COMMENT	\N	2013-12-07 07:08:46	2013-12-07 07:08:46
613	1	274	NO COMMENT	\N	2014-01-01 17:09:34	2014-01-01 17:09:34
614	7	275	NO COMMENT	\N	2014-02-17 08:00:42	2014-02-17 08:00:42
615	1	275	NO COMMENT	\N	2014-02-26 21:16:52	2014-02-26 21:16:52
616	7	276	NO COMMENT	\N	2014-01-12 23:30:24	2014-01-12 23:30:24
617	1	276	NO COMMENT	\N	2014-02-10 16:31:53	2014-02-10 16:31:53
618	17	276	NO COMMENT	\N	2014-02-19 08:01:41	2014-02-19 08:01:41
619	15	276	NO COMMENT	\N	2014-03-01 12:48:37	2014-03-01 12:48:37
620	1	278	NO COMMENT	\N	2013-11-28 09:53:09	2013-11-28 09:53:09
621	7	278	NO COMMENT	\N	2014-02-23 10:45:47	2014-02-23 10:45:47
622	7	279	NO COMMENT	\N	2014-01-18 11:17:33	2014-01-18 11:17:33
623	1	279	NO COMMENT	\N	2014-03-11 09:04:01	2014-03-11 09:04:01
624	1	304	NO COMMENT	\N	2014-02-21 10:58:31	2014-02-21 10:58:31
625	9	304	NO COMMENT	\N	2014-02-22 21:14:00	2014-02-22 21:14:00
626	5	304	NO COMMENT	\N	2014-03-14 00:05:14	2014-03-14 00:05:14
627	7	304	NO COMMENT	\N	2014-03-17 22:28:16	2014-03-17 22:28:16
628	7	282	NO COMMENT	\N	2013-08-19 05:47:48	2013-08-19 05:47:48
629	1	282	NO COMMENT	\N	2013-09-27 02:49:11	2013-09-27 02:49:11
630	1	283	NO COMMENT	\N	2013-10-21 15:27:10	2013-10-21 15:27:10
631	7	283	NO COMMENT	\N	2014-02-20 15:07:39	2014-02-20 15:07:39
632	7	284	NO COMMENT	\N	2014-02-24 12:26:20	2014-02-24 12:26:20
633	1	285	NO COMMENT	\N	2014-01-15 06:33:44	2014-01-15 06:33:44
634	7	285	NO COMMENT	\N	2014-01-25 06:19:00	2014-01-25 06:19:00
635	1	286	NO COMMENT	\N	2013-12-17 10:58:02	2013-12-17 10:58:02
636	7	286	NO COMMENT	\N	2014-02-09 12:13:34	2014-02-09 12:13:34
637	1	288	NO COMMENT	\N	2013-09-24 23:12:19	2013-09-24 23:12:19
638	28	288	NO COMMENT	\N	2013-10-16 20:48:18	2013-10-16 20:48:18
639	7	288	NO COMMENT	\N	2013-10-31 01:47:34	2013-10-31 01:47:34
640	48	289	NO COMMENT	\N	2014-02-12 06:15:06	2014-02-12 06:15:06
641	1	289	NO COMMENT	\N	2014-02-13 08:13:09	2014-02-13 08:13:09
642	17	289	NO COMMENT	\N	2014-02-14 15:13:29	2014-02-14 15:13:29
643	12	289	NO COMMENT	\N	2014-03-18 09:39:03	2014-03-18 09:39:03
644	7	289	NO COMMENT	\N	2014-03-20 01:12:25	2014-03-20 01:12:25
645	1	290	NO COMMENT	\N	2013-10-01 20:38:24	2013-10-01 20:38:24
646	7	290	NO COMMENT	\N	2013-10-22 00:45:28	2013-10-22 00:45:28
647	7	291	NO COMMENT	\N	2013-12-27 14:00:20	2013-12-27 14:00:20
648	1	291	NO COMMENT	\N	2014-02-14 19:42:11	2014-02-14 19:42:11
649	7	293	NO COMMENT	\N	2013-12-08 09:19:51	2013-12-08 09:19:51
650	1	293	NO COMMENT	\N	2014-01-12 02:24:29	2014-01-12 02:24:29
651	7	295	NO COMMENT	\N	2013-09-13 17:09:21	2013-09-13 17:09:21
652	1	295	NO COMMENT	\N	2013-12-08 12:41:52	2013-12-08 12:41:52
653	1	296	NO COMMENT	\N	2013-12-24 03:20:12	2013-12-24 03:20:12
654	7	296	NO COMMENT	\N	2014-02-24 22:55:49	2014-02-24 22:55:49
655	7	297	NO COMMENT	\N	2013-10-23 17:10:13	2013-10-23 17:10:13
656	1	297	NO COMMENT	\N	2013-10-24 07:35:56	2013-10-24 07:35:56
657	1	298	NO COMMENT	\N	2013-11-05 00:43:41	2013-11-05 00:43:41
658	7	301	NO COMMENT	\N	2014-02-04 11:35:17	2014-02-04 11:35:17
659	1	301	NO COMMENT	\N	2014-03-12 15:21:55	2014-03-12 15:21:55
660	1	302	NO COMMENT	\N	2014-01-06 13:18:02	2014-01-06 13:18:02
661	7	302	NO COMMENT	\N	2014-03-09 04:19:21	2014-03-09 04:19:21
662	1	303	NO COMMENT	\N	2014-02-16 21:05:04	2014-02-16 21:05:04
663	9	303	NO COMMENT	\N	2014-02-18 01:49:44	2014-02-18 01:49:44
664	7	303	NO COMMENT	\N	2014-03-09 05:01:11	2014-03-09 05:01:11
665	7	305	NO COMMENT	\N	2014-01-23 08:37:42	2014-01-23 08:37:42
666	1	306	NO COMMENT	\N	2014-01-20 20:52:49	2014-01-20 20:52:49
667	7	306	NO COMMENT	\N	2014-03-12 11:49:52	2014-03-12 11:49:52
668	7	307	NO COMMENT	\N	2013-12-12 20:35:02	2013-12-12 20:35:02
669	1	307	NO COMMENT	\N	2014-02-28 09:04:53	2014-02-28 09:04:53
670	1	308	NO COMMENT	\N	2014-01-19 03:06:51	2014-01-19 03:06:51
671	7	308	NO COMMENT	\N	2014-02-16 05:48:05	2014-02-16 05:48:05
672	1	311	NO COMMENT	\N	2013-12-29 00:53:25	2013-12-29 00:53:25
673	7	311	NO COMMENT	\N	2013-12-31 13:03:42	2013-12-31 13:03:42
674	1	312	NO COMMENT	\N	2013-11-24 06:18:26	2013-11-24 06:18:26
675	7	312	NO COMMENT	\N	2014-02-16 08:24:21	2014-02-16 08:24:21
676	7	313	NO COMMENT	\N	2013-12-05 05:33:05	2013-12-05 05:33:05
677	1	313	NO COMMENT	\N	2014-03-15 05:02:05	2014-03-15 05:02:05
678	7	314	NO COMMENT	\N	2014-01-30 15:25:31	2014-01-30 15:25:31
679	1	314	NO COMMENT	\N	2014-02-15 10:08:01	2014-02-15 10:08:01
680	7	315	NO COMMENT	\N	2013-10-29 06:47:16	2013-10-29 06:47:16
681	1	315	NO COMMENT	\N	2013-12-07 21:44:44	2013-12-07 21:44:44
682	7	316	NO COMMENT	\N	2014-01-23 20:04:10	2014-01-23 20:04:10
683	1	316	NO COMMENT	\N	2014-02-07 14:56:49	2014-02-07 14:56:49
684	7	317	NO COMMENT	\N	2013-10-01 03:06:58	2013-10-01 03:06:58
685	1	317	NO COMMENT	\N	2013-12-10 04:27:52	2013-12-10 04:27:52
686	1	318	NO COMMENT	\N	2013-11-12 17:31:48	2013-11-12 17:31:48
687	7	318	NO COMMENT	\N	2013-12-05 19:19:50	2013-12-05 19:19:50
688	7	319	NO COMMENT	\N	2013-12-20 16:48:59	2013-12-20 16:48:59
689	1	319	NO COMMENT	\N	2014-02-18 20:23:42	2014-02-18 20:23:42
690	19	319	NO COMMENT	\N	2014-03-14 03:19:39	2014-03-14 03:19:39
691	7	320	NO COMMENT	\N	2014-01-13 03:59:59	2014-01-13 03:59:59
692	1	320	NO COMMENT	\N	2014-03-05 18:05:38	2014-03-05 18:05:38
693	1	346	NO COMMENT	\N	2013-12-21 09:17:34	2013-12-21 09:17:34
694	14	346	NO COMMENT	\N	2014-01-04 15:10:55	2014-01-04 15:10:55
695	7	346	NO COMMENT	\N	2014-03-15 18:40:19	2014-03-15 18:40:19
696	7	321	NO COMMENT	\N	2013-11-14 08:59:35	2013-11-14 08:59:35
697	1	321	NO COMMENT	\N	2013-11-25 04:17:02	2013-11-25 04:17:02
698	7	322	NO COMMENT	\N	2014-01-08 18:35:30	2014-01-08 18:35:30
699	1	322	NO COMMENT	\N	2014-02-18 20:33:17	2014-02-18 20:33:17
700	1	323	NO COMMENT	\N	2013-11-14 00:53:56	2013-11-14 00:53:56
701	28	323	NO COMMENT	\N	2013-12-28 02:18:34	2013-12-28 02:18:34
702	7	323	NO COMMENT	\N	2013-12-29 16:32:09	2013-12-29 16:32:09
703	7	324	NO COMMENT	\N	2014-03-19 06:53:55	2014-03-19 06:53:55
704	1	325	NO COMMENT	\N	2014-02-07 14:55:44	2014-02-07 14:55:44
705	7	325	NO COMMENT	\N	2014-02-13 20:39:39	2014-02-13 20:39:39
706	7	327	NO COMMENT	\N	2014-02-18 05:01:53	2014-02-18 05:01:53
707	19	327	NO COMMENT	\N	2014-02-26 11:25:22	2014-02-26 11:25:22
708	1	327	NO COMMENT	\N	2014-03-15 22:11:36	2014-03-15 22:11:36
709	1	329	NO COMMENT	\N	2014-02-14 16:38:21	2014-02-14 16:38:21
710	18	329	NO COMMENT	\N	2014-02-23 13:57:43	2014-02-23 13:57:43
711	6	329	NO COMMENT	\N	2014-02-26 21:32:16	2014-02-26 21:32:16
712	7	329	NO COMMENT	\N	2014-02-27 23:27:24	2014-02-27 23:27:24
713	22	329	NO COMMENT	\N	2014-03-07 01:28:25	2014-03-07 01:28:25
714	35	329	NO COMMENT	\N	2014-03-11 20:33:06	2014-03-11 20:33:06
715	7	330	NO COMMENT	\N	2014-02-04 01:13:07	2014-02-04 01:13:07
716	1	330	NO COMMENT	\N	2014-03-01 20:03:29	2014-03-01 20:03:29
717	7	331	NO COMMENT	\N	2014-02-07 22:23:54	2014-02-07 22:23:54
718	1	331	NO COMMENT	\N	2014-02-21 20:39:22	2014-02-21 20:39:22
719	7	332	NO COMMENT	\N	2013-12-13 15:46:44	2013-12-13 15:46:44
720	1	332	NO COMMENT	\N	2014-01-15 06:44:32	2014-01-15 06:44:32
721	44	1164	NO COMMENT	\N	2014-02-28 23:24:21	2014-02-28 23:24:21
722	10	1164	NO COMMENT	\N	2014-03-10 12:03:58	2014-03-10 12:03:58
723	7	333	NO COMMENT	\N	2013-12-04 13:15:22	2013-12-04 13:15:22
724	7	335	NO COMMENT	\N	2014-03-04 10:42:00	2014-03-04 10:42:00
725	1	335	NO COMMENT	\N	2014-03-10 15:08:27	2014-03-10 15:08:27
726	7	337	NO COMMENT	\N	2014-03-02 22:45:49	2014-03-02 22:45:49
727	1	337	NO COMMENT	\N	2014-03-15 22:37:52	2014-03-15 22:37:52
728	1	338	NO COMMENT	\N	2013-12-26 08:16:11	2013-12-26 08:16:11
729	7	338	NO COMMENT	\N	2014-02-17 02:22:01	2014-02-17 02:22:01
730	47	340	NO COMMENT	\N	2014-01-14 08:49:56	2014-01-14 08:49:56
731	1	340	NO COMMENT	\N	2014-01-26 08:01:00	2014-01-26 08:01:00
732	35	340	NO COMMENT	\N	2014-02-13 14:09:38	2014-02-13 14:09:38
733	7	340	NO COMMENT	\N	2014-02-26 12:02:07	2014-02-26 12:02:07
734	1	341	NO COMMENT	\N	2013-11-23 00:14:54	2013-11-23 00:14:54
735	7	341	NO COMMENT	\N	2013-12-05 23:15:30	2013-12-05 23:15:30
736	7	342	NO COMMENT	\N	2014-02-05 20:49:47	2014-02-05 20:49:47
737	1	342	NO COMMENT	\N	2014-02-19 09:04:11	2014-02-19 09:04:11
738	1	343	NO COMMENT	\N	2013-11-16 08:33:45	2013-11-16 08:33:45
739	7	345	NO COMMENT	\N	2013-12-19 16:08:41	2013-12-19 16:08:41
740	1	345	NO COMMENT	\N	2013-12-22 14:10:52	2013-12-22 14:10:52
741	14	345	NO COMMENT	\N	2014-02-13 18:25:40	2014-02-13 18:25:40
742	7	347	NO COMMENT	\N	2014-01-02 13:54:46	2014-01-02 13:54:46
743	14	347	NO COMMENT	\N	2014-03-08 19:05:35	2014-03-08 19:05:35
744	1	347	NO COMMENT	\N	2014-03-15 22:29:13	2014-03-15 22:29:13
745	1	348	NO COMMENT	\N	2014-01-21 21:34:02	2014-01-21 21:34:02
746	7	348	NO COMMENT	\N	2014-02-05 06:27:02	2014-02-05 06:27:02
747	14	348	NO COMMENT	\N	2014-02-07 04:18:47	2014-02-07 04:18:47
748	1	349	NO COMMENT	\N	2014-02-21 01:07:17	2014-02-21 01:07:17
749	14	349	NO COMMENT	\N	2014-03-15 08:39:42	2014-03-15 08:39:42
750	7	349	NO COMMENT	\N	2014-03-19 22:58:51	2014-03-19 22:58:51
751	7	350	NO COMMENT	\N	2014-01-23 22:40:08	2014-01-23 22:40:08
752	24	350	NO COMMENT	\N	2014-01-29 06:19:08	2014-01-29 06:19:08
753	45	350	NO COMMENT	\N	2014-02-05 17:31:46	2014-02-05 17:31:46
754	14	350	NO COMMENT	\N	2014-02-14 10:39:40	2014-02-14 10:39:40
755	1	350	NO COMMENT	\N	2014-02-22 18:12:00	2014-02-22 18:12:00
756	6	350	NO COMMENT	\N	2014-02-26 05:56:27	2014-02-26 05:56:27
757	6	351	NO COMMENT	\N	2014-02-20 05:55:51	2014-02-20 05:55:51
758	7	351	NO COMMENT	\N	2014-02-20 06:03:30	2014-02-20 06:03:30
759	14	351	NO COMMENT	\N	2014-02-21 05:26:17	2014-02-21 05:26:17
760	17	351	NO COMMENT	\N	2014-02-26 21:31:03	2014-02-26 21:31:03
761	45	351	NO COMMENT	\N	2014-03-02 01:42:05	2014-03-02 01:42:05
762	24	351	NO COMMENT	\N	2014-03-02 08:29:52	2014-03-02 08:29:52
763	1	351	NO COMMENT	\N	2014-03-12 22:08:53	2014-03-12 22:08:53
764	7	352	NO COMMENT	\N	2014-01-10 00:16:40	2014-01-10 00:16:40
765	1	352	NO COMMENT	\N	2014-01-16 03:43:37	2014-01-16 03:43:37
766	1	354	NO COMMENT	\N	2013-12-25 15:27:30	2013-12-25 15:27:30
767	7	354	NO COMMENT	\N	2014-01-04 04:28:05	2014-01-04 04:28:05
768	7	355	NO COMMENT	\N	2014-02-19 05:52:51	2014-02-19 05:52:51
769	44	356	NO COMMENT	\N	2014-03-10 09:55:40	2014-03-10 09:55:40
770	7	357	NO COMMENT	\N	2014-02-21 10:45:19	2014-02-21 10:45:19
771	1	357	NO COMMENT	\N	2014-03-14 07:42:51	2014-03-14 07:42:51
772	1	358	NO COMMENT	\N	2014-02-06 15:19:52	2014-02-06 15:19:52
773	7	358	NO COMMENT	\N	2014-03-04 01:42:12	2014-03-04 01:42:12
774	7	359	NO COMMENT	\N	2014-02-18 20:53:13	2014-02-18 20:53:13
775	1	360	NO COMMENT	\N	2013-10-19 19:43:15	2013-10-19 19:43:15
776	7	360	NO COMMENT	\N	2013-10-29 18:40:17	2013-10-29 18:40:17
777	7	361	NO COMMENT	\N	2013-10-30 11:40:00	2013-10-30 11:40:00
778	1	361	NO COMMENT	\N	2014-03-09 16:41:22	2014-03-09 16:41:22
779	1	362	NO COMMENT	\N	2013-11-12 14:13:20	2013-11-12 14:13:20
780	7	362	NO COMMENT	\N	2014-02-03 05:33:36	2014-02-03 05:33:36
781	1	365	NO COMMENT	\N	2013-12-25 10:34:58	2013-12-25 10:34:58
782	7	365	NO COMMENT	\N	2014-03-16 14:29:27	2014-03-16 14:29:27
783	1	368	NO COMMENT	\N	2014-01-09 22:40:40	2014-01-09 22:40:40
784	1	369	NO COMMENT	\N	2014-01-15 19:21:25	2014-01-15 19:21:25
785	44	369	NO COMMENT	\N	2014-02-03 07:15:57	2014-02-03 07:15:57
786	19	369	NO COMMENT	\N	2014-02-08 13:46:17	2014-02-08 13:46:17
787	7	369	NO COMMENT	\N	2014-03-06 16:19:05	2014-03-06 16:19:05
788	1	372	NO COMMENT	\N	2014-03-04 19:19:52	2014-03-04 19:19:52
789	7	372	NO COMMENT	\N	2014-03-17 14:04:56	2014-03-17 14:04:56
790	16	373	NO COMMENT	\N	2014-02-17 23:20:09	2014-02-17 23:20:09
791	24	373	NO COMMENT	\N	2014-02-19 01:29:08	2014-02-19 01:29:08
792	17	373	NO COMMENT	\N	2014-03-05 13:53:45	2014-03-05 13:53:45
793	15	373	NO COMMENT	\N	2014-03-07 01:21:18	2014-03-07 01:21:18
794	7	373	NO COMMENT	\N	2014-03-09 19:35:08	2014-03-09 19:35:08
795	1	373	NO COMMENT	\N	2014-03-16 20:21:22	2014-03-16 20:21:22
796	1	374	NO COMMENT	\N	2014-02-25 15:08:58	2014-02-25 15:08:58
797	15	374	NO COMMENT	\N	2014-02-26 08:24:00	2014-02-26 08:24:00
798	7	374	NO COMMENT	\N	2014-03-03 17:01:02	2014-03-03 17:01:02
799	16	374	NO COMMENT	\N	2014-03-07 05:26:47	2014-03-07 05:26:47
800	46	375	NO COMMENT	\N	2014-03-16 03:14:27	2014-03-16 03:14:27
801	15	375	NO COMMENT	\N	2014-03-19 02:26:11	2014-03-19 02:26:11
802	11	375	NO COMMENT	\N	2014-03-19 04:21:33	2014-03-19 04:21:33
803	17	375	NO COMMENT	\N	2014-03-20 00:23:28	2014-03-20 00:23:28
804	1	376	NO COMMENT	\N	2014-03-09 15:26:17	2014-03-09 15:26:17
805	1	377	NO COMMENT	\N	2014-03-06 19:22:17	2014-03-06 19:22:17
806	7	377	NO COMMENT	\N	2014-03-10 20:28:35	2014-03-10 20:28:35
807	18	378	NO COMMENT	\N	2014-02-14 11:13:42	2014-02-14 11:13:42
808	35	378	NO COMMENT	\N	2014-02-15 09:55:24	2014-02-15 09:55:24
809	1	378	NO COMMENT	\N	2014-02-21 09:34:54	2014-02-21 09:34:54
810	7	378	NO COMMENT	\N	2014-03-01 22:05:30	2014-03-01 22:05:30
811	6	378	NO COMMENT	\N	2014-03-13 02:57:28	2014-03-13 02:57:28
812	18	379	NO COMMENT	\N	2014-02-26 01:41:15	2014-02-26 01:41:15
813	7	379	NO COMMENT	\N	2014-03-03 04:43:09	2014-03-03 04:43:09
814	1	379	NO COMMENT	\N	2014-03-15 07:45:05	2014-03-15 07:45:05
815	10	382	NO COMMENT	\N	2014-03-15 01:52:49	2014-03-15 01:52:49
816	6	382	NO COMMENT	\N	2014-03-15 06:06:45	2014-03-15 06:06:45
817	22	382	NO COMMENT	\N	2014-03-15 07:17:30	2014-03-15 07:17:30
818	43	382	NO COMMENT	\N	2014-03-15 07:45:28	2014-03-15 07:45:28
819	24	382	NO COMMENT	\N	2014-03-15 07:57:13	2014-03-15 07:57:13
820	35	382	NO COMMENT	\N	2014-03-15 20:09:18	2014-03-15 20:09:18
821	33	382	NO COMMENT	\N	2014-03-17 01:33:59	2014-03-17 01:33:59
822	1	382	NO COMMENT	\N	2014-03-17 13:19:52	2014-03-17 13:19:52
823	18	382	NO COMMENT	\N	2014-03-17 14:09:03	2014-03-17 14:09:03
824	23	382	NO COMMENT	\N	2014-03-18 04:12:59	2014-03-18 04:12:59
825	21	382	NO COMMENT	\N	2014-03-18 14:45:55	2014-03-18 14:45:55
826	15	382	NO COMMENT	\N	2014-03-18 23:21:57	2014-03-18 23:21:57
827	7	382	NO COMMENT	\N	2014-03-19 10:31:23	2014-03-19 10:31:23
828	17	382	NO COMMENT	\N	2014-03-19 12:02:15	2014-03-19 12:02:15
829	46	382	NO COMMENT	\N	2014-03-19 13:54:23	2014-03-19 13:54:23
830	34	382	NO COMMENT	\N	2014-03-19 14:53:56	2014-03-19 14:53:56
831	19	382	NO COMMENT	\N	2014-03-20 07:19:32	2014-03-20 07:19:32
832	22	384	NO COMMENT	\N	2014-03-15 10:18:42	2014-03-15 10:18:42
833	7	384	NO COMMENT	\N	2014-03-15 22:34:32	2014-03-15 22:34:32
834	1	384	NO COMMENT	\N	2014-03-17 20:35:03	2014-03-17 20:35:03
835	1	385	NO COMMENT	\N	2014-02-27 10:08:33	2014-02-27 10:08:33
836	7	385	NO COMMENT	\N	2014-03-05 11:57:41	2014-03-05 11:57:41
837	1	387	NO COMMENT	\N	2014-03-15 21:31:00	2014-03-15 21:31:00
838	12	387	NO COMMENT	\N	2014-03-18 01:44:17	2014-03-18 01:44:17
839	7	387	NO COMMENT	\N	2014-03-19 17:51:50	2014-03-19 17:51:50
840	17	388	NO COMMENT	\N	2014-02-28 19:07:03	2014-02-28 19:07:03
841	12	388	NO COMMENT	\N	2014-03-12 01:07:17	2014-03-12 01:07:17
842	28	388	NO COMMENT	\N	2014-03-12 01:14:02	2014-03-12 01:14:02
843	7	388	NO COMMENT	\N	2014-03-14 10:05:21	2014-03-14 10:05:21
844	1	388	NO COMMENT	\N	2014-03-15 11:31:10	2014-03-15 11:31:10
845	17	389	NO COMMENT	\N	2014-02-18 18:45:53	2014-02-18 18:45:53
846	12	389	NO COMMENT	\N	2014-02-22 01:04:14	2014-02-22 01:04:14
847	28	389	NO COMMENT	\N	2014-02-27 18:13:35	2014-02-27 18:13:35
848	1	389	NO COMMENT	\N	2014-03-02 10:22:52	2014-03-02 10:22:52
849	48	389	NO COMMENT	\N	2014-03-02 17:16:07	2014-03-02 17:16:07
850	7	389	NO COMMENT	\N	2014-03-05 06:50:06	2014-03-05 06:50:06
851	22	389	NO COMMENT	\N	2014-03-11 15:07:09	2014-03-11 15:07:09
852	1	390	NO COMMENT	\N	2014-03-03 04:44:08	2014-03-03 04:44:08
853	12	390	NO COMMENT	\N	2014-03-14 03:53:54	2014-03-14 03:53:54
854	48	390	NO COMMENT	\N	2014-03-15 08:26:17	2014-03-15 08:26:17
855	1	391	NO COMMENT	\N	2014-03-12 20:15:55	2014-03-12 20:15:55
856	26	391	NO COMMENT	\N	2014-03-13 07:49:26	2014-03-13 07:49:26
857	28	391	NO COMMENT	\N	2014-03-17 14:45:44	2014-03-17 14:45:44
858	24	407	NO COMMENT	\N	2014-02-22 11:23:15	2014-02-22 11:23:15
859	7	407	NO COMMENT	\N	2014-03-04 13:55:49	2014-03-04 13:55:49
860	1	407	NO COMMENT	\N	2014-03-11 12:48:15	2014-03-11 12:48:15
861	28	407	NO COMMENT	\N	2014-03-12 11:09:10	2014-03-12 11:09:10
862	13	393	NO COMMENT	\N	2014-03-02 01:47:06	2014-03-02 01:47:06
863	1	393	NO COMMENT	\N	2014-03-10 11:51:46	2014-03-10 11:51:46
864	27	393	NO COMMENT	\N	2014-03-17 03:13:42	2014-03-17 03:13:42
865	44	395	NO COMMENT	\N	2014-02-19 06:24:05	2014-02-19 06:24:05
866	26	395	NO COMMENT	\N	2014-02-25 20:58:00	2014-02-25 20:58:00
867	20	395	NO COMMENT	\N	2014-03-15 10:43:50	2014-03-15 10:43:50
868	1	395	NO COMMENT	\N	2014-03-16 18:24:56	2014-03-16 18:24:56
869	36	396	NO COMMENT	\N	2014-03-08 23:15:38	2014-03-08 23:15:38
870	42	396	NO COMMENT	\N	2014-03-09 15:32:35	2014-03-09 15:32:35
871	14	396	NO COMMENT	\N	2014-03-10 10:02:57	2014-03-10 10:02:57
872	35	396	NO COMMENT	\N	2014-03-10 19:14:06	2014-03-10 19:14:06
873	31	396	NO COMMENT	\N	2014-03-11 12:05:16	2014-03-11 12:05:16
874	17	396	NO COMMENT	\N	2014-03-13 08:20:22	2014-03-13 08:20:22
875	41	396	NO COMMENT	\N	2014-03-16 00:06:57	2014-03-16 00:06:57
876	16	396	NO COMMENT	\N	2014-03-16 06:11:23	2014-03-16 06:11:23
877	7	396	NO COMMENT	\N	2014-03-16 06:54:46	2014-03-16 06:54:46
878	20	396	NO COMMENT	\N	2014-03-17 08:43:40	2014-03-17 08:43:40
879	5	396	NO COMMENT	\N	2014-03-18 02:40:04	2014-03-18 02:40:04
880	17	397	NO COMMENT	\N	2014-03-12 03:33:27	2014-03-12 03:33:27
881	26	397	NO COMMENT	\N	2014-03-12 23:25:52	2014-03-12 23:25:52
882	42	397	NO COMMENT	\N	2014-03-13 05:07:14	2014-03-13 05:07:14
883	1	397	NO COMMENT	\N	2014-03-13 19:44:38	2014-03-13 19:44:38
884	28	397	NO COMMENT	\N	2014-03-14 03:06:41	2014-03-14 03:06:41
885	35	397	NO COMMENT	\N	2014-03-15 01:46:36	2014-03-15 01:46:36
886	14	397	NO COMMENT	\N	2014-03-16 01:49:31	2014-03-16 01:49:31
887	16	397	NO COMMENT	\N	2014-03-16 05:07:46	2014-03-16 05:07:46
888	34	397	NO COMMENT	\N	2014-03-17 06:49:09	2014-03-17 06:49:09
889	24	397	NO COMMENT	\N	2014-03-17 12:48:09	2014-03-17 12:48:09
890	22	397	NO COMMENT	\N	2014-03-17 18:27:38	2014-03-17 18:27:38
891	44	397	NO COMMENT	\N	2014-03-18 20:21:32	2014-03-18 20:21:32
892	39	397	NO COMMENT	\N	2014-03-19 04:12:20	2014-03-19 04:12:20
893	7	397	NO COMMENT	\N	2014-03-19 12:57:37	2014-03-19 12:57:37
894	41	397	NO COMMENT	\N	2014-03-19 15:06:57	2014-03-19 15:06:57
895	45	397	NO COMMENT	\N	2014-03-20 00:20:35	2014-03-20 00:20:35
896	20	397	NO COMMENT	\N	2014-03-20 01:25:29	2014-03-20 01:25:29
897	29	398	NO COMMENT	\N	2014-03-17 23:19:57	2014-03-17 23:19:57
898	10	399	NO COMMENT	\N	2014-03-15 18:40:23	2014-03-15 18:40:23
899	13	399	NO COMMENT	\N	2014-03-17 03:03:25	2014-03-17 03:03:25
900	45	400	NO COMMENT	\N	2014-02-15 05:38:12	2014-02-15 05:38:12
901	1	400	NO COMMENT	\N	2014-02-23 02:20:22	2014-02-23 02:20:22
902	14	400	NO COMMENT	\N	2014-03-01 02:32:46	2014-03-01 02:32:46
903	41	401	NO COMMENT	\N	2014-02-18 05:16:17	2014-02-18 05:16:17
904	27	401	NO COMMENT	\N	2014-02-21 03:38:08	2014-02-21 03:38:08
905	28	401	NO COMMENT	\N	2014-02-22 03:17:45	2014-02-22 03:17:45
906	45	401	NO COMMENT	\N	2014-02-28 18:10:30	2014-02-28 18:10:30
907	7	401	NO COMMENT	\N	2014-03-02 10:30:02	2014-03-02 10:30:02
908	1	401	NO COMMENT	\N	2014-03-15 03:08:28	2014-03-15 03:08:28
909	23	401	NO COMMENT	\N	2014-03-17 05:14:39	2014-03-17 05:14:39
910	15	402	NO COMMENT	\N	2014-03-07 07:31:53	2014-03-07 07:31:53
911	1	402	NO COMMENT	\N	2014-03-14 02:45:38	2014-03-14 02:45:38
912	7	403	NO COMMENT	\N	2014-03-10 00:06:29	2014-03-10 00:06:29
913	15	403	NO COMMENT	\N	2014-03-17 03:23:15	2014-03-17 03:23:15
914	1	403	NO COMMENT	\N	2014-03-19 03:26:27	2014-03-19 03:26:27
915	1	404	NO COMMENT	\N	2014-02-22 02:47:31	2014-02-22 02:47:31
916	23	405	NO COMMENT	\N	2014-02-26 06:26:44	2014-02-26 06:26:44
917	7	409	NO COMMENT	\N	2014-01-26 07:30:25	2014-01-26 07:30:25
918	19	409	NO COMMENT	\N	2014-02-03 09:29:49	2014-02-03 09:29:49
919	1	409	NO COMMENT	\N	2014-02-20 14:47:25	2014-02-20 14:47:25
920	24	412	NO COMMENT	\N	2014-02-11 19:49:59	2014-02-11 19:49:59
921	6	412	NO COMMENT	\N	2014-02-12 22:38:05	2014-02-12 22:38:05
922	14	412	NO COMMENT	\N	2014-02-24 10:22:41	2014-02-24 10:22:41
923	17	412	NO COMMENT	\N	2014-03-01 12:01:28	2014-03-01 12:01:28
924	45	412	NO COMMENT	\N	2014-03-04 13:02:02	2014-03-04 13:02:02
925	1	412	NO COMMENT	\N	2014-03-06 16:24:13	2014-03-06 16:24:13
926	7	412	NO COMMENT	\N	2014-03-19 03:35:48	2014-03-19 03:35:48
927	1	413	NO COMMENT	\N	2014-01-18 05:33:18	2014-01-18 05:33:18
928	35	413	NO COMMENT	\N	2014-02-04 07:18:39	2014-02-04 07:18:39
929	47	413	NO COMMENT	\N	2014-02-26 11:36:31	2014-02-26 11:36:31
930	7	413	NO COMMENT	\N	2014-03-14 05:35:02	2014-03-14 05:35:02
931	1	415	NO COMMENT	\N	2014-03-08 21:40:22	2014-03-08 21:40:22
932	1	418	NO COMMENT	\N	2014-01-12 15:36:05	2014-01-12 15:36:05
933	7	418	NO COMMENT	\N	2014-02-21 16:31:07	2014-02-21 16:31:07
934	7	419	NO COMMENT	\N	2014-02-10 23:28:09	2014-02-10 23:28:09
935	1	419	NO COMMENT	\N	2014-03-03 06:24:45	2014-03-03 06:24:45
936	1	420	NO COMMENT	\N	2014-02-02 23:12:15	2014-02-02 23:12:15
937	7	420	NO COMMENT	\N	2014-02-19 06:43:45	2014-02-19 06:43:45
938	7	421	NO COMMENT	\N	2014-03-01 10:50:38	2014-03-01 10:50:38
939	1	421	NO COMMENT	\N	2014-03-20 13:06:08	2014-03-20 13:06:08
940	1	422	NO COMMENT	\N	2014-01-01 12:57:17	2014-01-01 12:57:17
941	7	422	NO COMMENT	\N	2014-01-05 09:12:59	2014-01-05 09:12:59
942	7	423	NO COMMENT	\N	2014-02-04 22:22:05	2014-02-04 22:22:05
943	1	423	NO COMMENT	\N	2014-03-02 04:55:16	2014-03-02 04:55:16
944	7	424	NO COMMENT	\N	2014-01-20 22:01:34	2014-01-20 22:01:34
945	1	424	NO COMMENT	\N	2014-02-20 12:02:15	2014-02-20 12:02:15
946	1	425	NO COMMENT	\N	2014-01-07 00:32:29	2014-01-07 00:32:29
947	7	425	NO COMMENT	\N	2014-02-06 18:51:33	2014-02-06 18:51:33
948	7	427	NO COMMENT	\N	2014-02-14 16:20:41	2014-02-14 16:20:41
949	1	427	NO COMMENT	\N	2014-02-23 09:37:06	2014-02-23 09:37:06
950	7	429	NO COMMENT	\N	2014-02-01 04:29:07	2014-02-01 04:29:07
951	1	429	NO COMMENT	\N	2014-03-01 01:01:26	2014-03-01 01:01:26
952	7	430	NO COMMENT	\N	2014-01-25 08:44:52	2014-01-25 08:44:52
953	1	430	NO COMMENT	\N	2014-02-24 21:46:58	2014-02-24 21:46:58
954	1	433	NO COMMENT	\N	2014-01-13 10:42:46	2014-01-13 10:42:46
955	7	433	NO COMMENT	\N	2014-02-12 16:01:20	2014-02-12 16:01:20
956	7	434	NO COMMENT	\N	2014-01-16 22:11:11	2014-01-16 22:11:11
957	1	434	NO COMMENT	\N	2014-01-29 19:31:49	2014-01-29 19:31:49
958	24	435	NO COMMENT	\N	2014-02-22 06:27:30	2014-02-22 06:27:30
959	1	435	NO COMMENT	\N	2014-02-26 19:09:17	2014-02-26 19:09:17
960	44	435	NO COMMENT	\N	2014-02-27 06:47:57	2014-02-27 06:47:57
961	7	435	NO COMMENT	\N	2014-02-28 11:00:54	2014-02-28 11:00:54
962	43	436	NO COMMENT	\N	2014-02-28 07:52:21	2014-02-28 07:52:21
963	30	436	NO COMMENT	\N	2014-03-03 07:48:09	2014-03-03 07:48:09
964	44	436	NO COMMENT	\N	2014-03-05 08:48:20	2014-03-05 08:48:20
965	7	436	NO COMMENT	\N	2014-03-06 15:05:05	2014-03-06 15:05:05
966	46	436	NO COMMENT	\N	2014-03-10 08:27:56	2014-03-10 08:27:56
967	39	436	NO COMMENT	\N	2014-03-11 03:15:04	2014-03-11 03:15:04
968	1	436	NO COMMENT	\N	2014-03-12 14:56:59	2014-03-12 14:56:59
969	21	436	NO COMMENT	\N	2014-03-13 17:13:36	2014-03-13 17:13:36
970	28	436	NO COMMENT	\N	2014-03-14 07:05:57	2014-03-14 07:05:57
971	24	436	NO COMMENT	\N	2014-03-20 08:28:54	2014-03-20 08:28:54
972	1	437	NO COMMENT	\N	2014-01-17 22:32:01	2014-01-17 22:32:01
973	7	437	NO COMMENT	\N	2014-01-26 05:53:23	2014-01-26 05:53:23
974	7	438	NO COMMENT	\N	2014-02-19 23:23:24	2014-02-19 23:23:24
975	1	438	NO COMMENT	\N	2014-02-28 17:53:01	2014-02-28 17:53:01
976	1	439	NO COMMENT	\N	2014-01-31 23:52:23	2014-01-31 23:52:23
977	7	439	NO COMMENT	\N	2014-02-10 07:35:07	2014-02-10 07:35:07
978	44	440	NO COMMENT	\N	2014-02-09 03:54:56	2014-02-09 03:54:56
979	7	440	NO COMMENT	\N	2014-02-24 10:25:29	2014-02-24 10:25:29
980	1	440	NO COMMENT	\N	2014-03-11 19:21:31	2014-03-11 19:21:31
981	13	440	NO COMMENT	\N	2014-03-17 20:29:00	2014-03-17 20:29:00
982	1	441	NO COMMENT	\N	2013-12-06 17:38:09	2013-12-06 17:38:09
983	7	441	NO COMMENT	\N	2014-02-01 07:23:44	2014-02-01 07:23:44
984	7	442	NO COMMENT	\N	2014-02-10 21:08:15	2014-02-10 21:08:15
985	1	442	NO COMMENT	\N	2014-02-12 12:31:26	2014-02-12 12:31:26
986	44	442	NO COMMENT	\N	2014-02-28 13:52:41	2014-02-28 13:52:41
987	1	443	NO COMMENT	\N	2014-02-15 02:48:27	2014-02-15 02:48:27
988	44	443	NO COMMENT	\N	2014-02-24 09:21:31	2014-02-24 09:21:31
989	7	443	NO COMMENT	\N	2014-03-04 02:02:36	2014-03-04 02:02:36
990	10	443	NO COMMENT	\N	2014-03-15 18:32:31	2014-03-15 18:32:31
991	1	444	NO COMMENT	\N	2013-12-05 23:11:59	2013-12-05 23:11:59
992	7	444	NO COMMENT	\N	2014-02-27 23:22:36	2014-02-27 23:22:36
993	7	445	NO COMMENT	\N	2013-12-29 07:44:49	2013-12-29 07:44:49
994	42	445	NO COMMENT	\N	2014-02-01 14:06:45	2014-02-01 14:06:45
995	1	445	NO COMMENT	\N	2014-02-23 03:27:45	2014-02-23 03:27:45
996	1	446	NO COMMENT	\N	2014-03-07 23:57:40	2014-03-07 23:57:40
997	42	446	NO COMMENT	\N	2014-03-20 17:12:28	2014-03-20 17:12:28
998	6	448	NO COMMENT	\N	2014-03-16 21:26:07	2014-03-16 21:26:07
999	7	449	NO COMMENT	\N	2013-11-30 03:40:42	2013-11-30 03:40:42
1000	14	451	NO COMMENT	\N	2014-02-22 21:48:41	2014-02-22 21:48:41
1001	17	451	NO COMMENT	\N	2014-02-23 02:58:04	2014-02-23 02:58:04
1002	6	451	NO COMMENT	\N	2014-02-26 15:01:12	2014-02-26 15:01:12
1003	45	451	NO COMMENT	\N	2014-02-27 11:05:13	2014-02-27 11:05:13
1004	7	451	NO COMMENT	\N	2014-02-28 08:44:32	2014-02-28 08:44:32
1005	24	451	NO COMMENT	\N	2014-03-07 01:46:10	2014-03-07 01:46:10
1006	7	453	NO COMMENT	\N	2014-01-15 07:04:38	2014-01-15 07:04:38
1007	41	453	NO COMMENT	\N	2014-01-23 10:54:30	2014-01-23 10:54:30
1008	22	453	NO COMMENT	\N	2014-03-10 21:26:29	2014-03-10 21:26:29
1009	7	454	NO COMMENT	\N	2014-02-19 20:33:02	2014-02-19 20:33:02
1010	44	454	NO COMMENT	\N	2014-02-28 17:53:11	2014-02-28 17:53:11
1011	22	454	NO COMMENT	\N	2014-03-15 18:15:02	2014-03-15 18:15:02
1012	41	454	NO COMMENT	\N	2014-03-18 05:39:46	2014-03-18 05:39:46
1013	7	455	NO COMMENT	\N	2014-02-16 08:16:30	2014-02-16 08:16:30
1014	7	456	NO COMMENT	\N	2014-03-08 02:34:22	2014-03-08 02:34:22
1015	7	457	NO COMMENT	\N	2014-03-10 04:03:10	2014-03-10 04:03:10
1016	7	458	NO COMMENT	\N	2013-11-17 23:13:10	2013-11-17 23:13:10
1017	7	459	NO COMMENT	\N	2014-01-09 06:07:32	2014-01-09 06:07:32
1018	7	460	NO COMMENT	\N	2014-02-04 10:20:33	2014-02-04 10:20:33
1019	7	461	NO COMMENT	\N	2014-03-02 11:07:15	2014-03-02 11:07:15
1020	7	474	NO COMMENT	\N	2014-02-01 07:09:57	2014-02-01 07:09:57
1021	44	474	NO COMMENT	\N	2014-02-08 06:03:51	2014-02-08 06:03:51
1022	13	474	NO COMMENT	\N	2014-03-11 17:34:51	2014-03-11 17:34:51
1023	7	462	NO COMMENT	\N	2014-03-14 22:17:41	2014-03-14 22:17:41
1024	9	463	NO COMMENT	\N	2014-01-22 13:54:34	2014-01-22 13:54:34
1025	7	463	NO COMMENT	\N	2014-03-02 01:44:04	2014-03-02 01:44:04
1026	7	464	NO COMMENT	\N	2014-02-04 23:58:18	2014-02-04 23:58:18
1027	9	464	NO COMMENT	\N	2014-02-17 16:43:55	2014-02-17 16:43:55
1028	7	466	NO COMMENT	\N	2014-02-28 00:19:07	2014-02-28 00:19:07
1029	9	467	NO COMMENT	\N	2014-03-01 03:50:40	2014-03-01 03:50:40
1030	7	467	NO COMMENT	\N	2014-03-11 03:00:14	2014-03-11 03:00:14
1031	7	468	NO COMMENT	\N	2014-02-17 12:02:11	2014-02-17 12:02:11
1032	9	468	NO COMMENT	\N	2014-03-01 15:58:42	2014-03-01 15:58:42
1033	7	469	NO COMMENT	\N	2014-02-09 01:44:34	2014-02-09 01:44:34
1034	7	470	NO COMMENT	\N	2014-02-26 19:14:58	2014-02-26 19:14:58
1035	13	471	NO COMMENT	\N	2014-01-01 19:04:42	2014-01-01 19:04:42
1036	7	471	NO COMMENT	\N	2014-01-29 21:51:29	2014-01-29 21:51:29
1037	13	472	NO COMMENT	\N	2014-01-22 16:43:14	2014-01-22 16:43:14
1038	7	472	NO COMMENT	\N	2014-03-19 15:05:25	2014-03-19 15:05:25
1039	13	473	NO COMMENT	\N	2014-02-17 08:29:30	2014-02-17 08:29:30
1040	41	525	NO COMMENT	\N	2014-03-20 05:22:31	2014-03-20 05:22:31
1041	45	525	NO COMMENT	\N	2014-03-20 06:20:36	2014-03-20 06:20:36
1042	46	525	NO COMMENT	\N	2014-03-20 15:43:46	2014-03-20 15:43:46
1043	43	525	NO COMMENT	\N	2014-03-20 19:45:55	2014-03-20 19:45:55
1044	7	477	NO COMMENT	\N	2014-02-06 02:08:14	2014-02-06 02:08:14
1045	7	479	NO COMMENT	\N	2014-02-14 21:46:26	2014-02-14 21:46:26
1046	7	481	NO COMMENT	\N	2014-02-01 19:32:19	2014-02-01 19:32:19
1047	7	482	NO COMMENT	\N	2014-03-08 14:38:11	2014-03-08 14:38:11
1048	7	483	NO COMMENT	\N	2014-02-28 07:07:59	2014-02-28 07:07:59
1049	7	484	NO COMMENT	\N	2014-03-13 15:02:53	2014-03-13 15:02:53
1050	7	486	NO COMMENT	\N	2013-12-14 23:52:41	2013-12-14 23:52:41
1051	2	488	NO COMMENT	\N	2013-12-30 17:29:26	2013-12-30 17:29:26
1052	1	488	NO COMMENT	\N	2014-01-19 04:44:28	2014-01-19 04:44:28
1053	7	488	NO COMMENT	\N	2014-03-07 17:30:59	2014-03-07 17:30:59
1054	7	489	NO COMMENT	\N	2013-12-22 21:31:34	2013-12-22 21:31:34
1055	1	489	NO COMMENT	\N	2014-01-06 09:07:14	2014-01-06 09:07:14
1056	18	489	NO COMMENT	\N	2014-02-15 21:49:22	2014-02-15 21:49:22
1057	2	489	NO COMMENT	\N	2014-03-14 11:59:01	2014-03-14 11:59:01
1058	7	490	NO COMMENT	\N	2014-01-24 01:37:18	2014-01-24 01:37:18
1059	2	490	NO COMMENT	\N	2014-02-01 17:35:36	2014-02-01 17:35:36
1060	1	490	NO COMMENT	\N	2014-02-17 12:52:50	2014-02-17 12:52:50
1061	18	490	NO COMMENT	\N	2014-03-13 01:53:37	2014-03-13 01:53:37
1062	7	491	NO COMMENT	\N	2014-02-27 01:34:33	2014-02-27 01:34:33
1063	21	491	NO COMMENT	\N	2014-03-08 15:28:31	2014-03-08 15:28:31
1064	1	491	NO COMMENT	\N	2014-03-12 02:30:52	2014-03-12 02:30:52
1065	14	491	NO COMMENT	\N	2014-03-19 04:48:02	2014-03-19 04:48:02
1066	18	491	NO COMMENT	\N	2014-03-20 10:53:18	2014-03-20 10:53:18
1067	7	492	NO COMMENT	\N	2014-01-18 12:08:29	2014-01-18 12:08:29
1068	2	492	NO COMMENT	\N	2014-01-28 00:56:15	2014-01-28 00:56:15
1069	1	492	NO COMMENT	\N	2014-03-12 16:05:18	2014-03-12 16:05:18
1070	13	492	NO COMMENT	\N	2014-03-19 03:23:34	2014-03-19 03:23:34
1071	14	494	NO COMMENT	\N	2014-01-15 12:04:03	2014-01-15 12:04:03
1072	7	494	NO COMMENT	\N	2014-01-24 22:45:08	2014-01-24 22:45:08
1073	2	494	NO COMMENT	\N	2014-02-02 16:15:40	2014-02-02 16:15:40
1074	45	494	NO COMMENT	\N	2014-02-13 14:21:48	2014-02-13 14:21:48
1075	1	494	NO COMMENT	\N	2014-02-13 17:14:06	2014-02-13 17:14:06
1076	13	526	NO COMMENT	\N	2014-03-18 09:37:13	2014-03-18 09:37:13
1077	11	526	NO COMMENT	\N	2014-03-18 17:47:55	2014-03-18 17:47:55
1078	2	526	NO COMMENT	\N	2014-03-18 21:32:06	2014-03-18 21:32:06
1079	25	526	NO COMMENT	\N	2014-03-20 10:09:22	2014-03-20 10:09:22
1080	47	526	NO COMMENT	\N	2014-03-20 16:27:23	2014-03-20 16:27:23
1081	1	495	NO COMMENT	\N	2014-01-22 13:13:21	2014-01-22 13:13:21
1082	1	496	NO COMMENT	\N	2014-02-07 20:30:59	2014-02-07 20:30:59
1083	2	496	NO COMMENT	\N	2014-02-18 04:29:42	2014-02-18 04:29:42
1084	7	496	NO COMMENT	\N	2014-03-13 12:37:31	2014-03-13 12:37:31
1085	7	497	NO COMMENT	\N	2014-01-28 15:12:40	2014-01-28 15:12:40
1086	1	497	NO COMMENT	\N	2014-03-08 01:30:05	2014-03-08 01:30:05
1087	1	499	NO COMMENT	\N	2013-12-14 07:41:25	2013-12-14 07:41:25
1088	7	499	NO COMMENT	\N	2013-12-30 06:29:03	2013-12-30 06:29:03
1089	2	499	NO COMMENT	\N	2014-03-04 16:41:00	2014-03-04 16:41:00
1090	1	500	NO COMMENT	\N	2013-12-25 03:21:56	2013-12-25 03:21:56
1091	2	500	NO COMMENT	\N	2014-01-04 02:55:16	2014-01-04 02:55:16
1092	7	500	NO COMMENT	\N	2014-01-27 23:48:21	2014-01-27 23:48:21
1093	1	501	NO COMMENT	\N	2014-01-27 17:15:01	2014-01-27 17:15:01
1094	2	501	NO COMMENT	\N	2014-02-09 21:20:43	2014-02-09 21:20:43
1095	7	501	NO COMMENT	\N	2014-02-10 20:49:50	2014-02-10 20:49:50
1096	22	501	NO COMMENT	\N	2014-02-15 14:54:27	2014-02-15 14:54:27
1097	43	527	NO COMMENT	\N	2014-03-19 02:59:55	2014-03-19 02:59:55
1098	26	527	NO COMMENT	\N	2014-03-20 00:01:11	2014-03-20 00:01:11
1099	15	527	NO COMMENT	\N	2014-03-20 04:53:58	2014-03-20 04:53:58
1100	7	527	NO COMMENT	\N	2014-03-20 09:45:37	2014-03-20 09:45:37
1101	13	527	NO COMMENT	\N	2014-03-20 14:46:22	2014-03-20 14:46:22
1102	7	502	NO COMMENT	\N	2014-02-11 22:11:08	2014-02-11 22:11:08
1103	2	503	NO COMMENT	\N	2013-11-26 15:28:23	2013-11-26 15:28:23
1104	1	503	NO COMMENT	\N	2014-01-01 06:38:12	2014-01-01 06:38:12
1105	7	504	NO COMMENT	\N	2014-02-16 03:59:21	2014-02-16 03:59:21
1106	1	504	NO COMMENT	\N	2014-03-19 04:04:59	2014-03-19 04:04:59
1107	7	505	NO COMMENT	\N	2014-01-15 09:12:04	2014-01-15 09:12:04
1108	1	506	NO COMMENT	\N	2014-02-27 21:03:46	2014-02-27 21:03:46
1109	7	506	NO COMMENT	\N	2014-03-02 05:55:52	2014-03-02 05:55:52
1110	2	506	NO COMMENT	\N	2014-03-12 12:10:46	2014-03-12 12:10:46
1111	2	507	NO COMMENT	\N	2014-01-11 11:16:35	2014-01-11 11:16:35
1112	2	508	NO COMMENT	\N	2014-01-23 22:39:09	2014-01-23 22:39:09
1113	1	508	NO COMMENT	\N	2014-02-18 21:16:41	2014-02-18 21:16:41
1114	7	508	NO COMMENT	\N	2014-03-09 15:17:15	2014-03-09 15:17:15
1115	1	509	NO COMMENT	\N	2013-12-10 04:15:09	2013-12-10 04:15:09
1116	2	509	NO COMMENT	\N	2013-12-17 09:29:50	2013-12-17 09:29:50
1117	7	509	NO COMMENT	\N	2013-12-29 17:05:22	2013-12-29 17:05:22
1118	2	510	NO COMMENT	\N	2014-01-02 19:37:01	2014-01-02 19:37:01
1119	1	510	NO COMMENT	\N	2014-02-26 21:40:04	2014-02-26 21:40:04
1120	2	512	NO COMMENT	\N	2014-01-04 15:14:16	2014-01-04 15:14:16
1121	2	514	NO COMMENT	\N	2014-03-13 02:34:10	2014-03-13 02:34:10
1122	7	514	NO COMMENT	\N	2014-03-13 06:46:55	2014-03-13 06:46:55
1123	1	514	NO COMMENT	\N	2014-03-19 15:03:48	2014-03-19 15:03:48
1124	1	515	NO COMMENT	\N	2014-01-13 06:19:24	2014-01-13 06:19:24
1125	7	515	NO COMMENT	\N	2014-01-23 11:21:43	2014-01-23 11:21:43
1126	2	515	NO COMMENT	\N	2014-02-12 22:35:28	2014-02-12 22:35:28
1127	28	516	NO COMMENT	\N	2013-12-02 04:22:11	2013-12-02 04:22:11
1128	1	516	NO COMMENT	\N	2013-12-02 05:42:11	2013-12-02 05:42:11
1129	2	516	NO COMMENT	\N	2014-01-30 22:17:14	2014-01-30 22:17:14
1130	7	516	NO COMMENT	\N	2014-03-15 00:31:38	2014-03-15 00:31:38
1131	22	517	NO COMMENT	\N	2013-12-25 10:02:36	2013-12-25 10:02:36
1132	28	517	NO COMMENT	\N	2014-01-06 06:34:04	2014-01-06 06:34:04
1133	2	517	NO COMMENT	\N	2014-01-17 19:11:54	2014-01-17 19:11:54
1134	1	517	NO COMMENT	\N	2014-01-29 05:34:15	2014-01-29 05:34:15
1135	7	517	NO COMMENT	\N	2014-02-21 10:29:43	2014-02-21 10:29:43
1136	24	518	NO COMMENT	\N	2014-01-27 18:33:06	2014-01-27 18:33:06
1137	28	518	NO COMMENT	\N	2014-01-27 21:18:11	2014-01-27 21:18:11
1138	2	518	NO COMMENT	\N	2014-02-14 02:42:48	2014-02-14 02:42:48
1139	7	518	NO COMMENT	\N	2014-03-07 15:12:42	2014-03-07 15:12:42
1140	1	518	NO COMMENT	\N	2014-03-09 14:55:14	2014-03-09 14:55:14
1141	7	519	NO COMMENT	\N	2013-12-30 19:47:48	2013-12-30 19:47:48
1142	2	519	NO COMMENT	\N	2014-01-29 11:58:03	2014-01-29 11:58:03
1143	1	519	NO COMMENT	\N	2014-02-21 07:07:55	2014-02-21 07:07:55
1144	16	520	NO COMMENT	\N	2014-03-17 20:52:03	2014-03-17 20:52:03
1145	43	520	NO COMMENT	\N	2014-03-17 21:55:21	2014-03-17 21:55:21
1146	1	520	NO COMMENT	\N	2014-03-18 00:06:19	2014-03-18 00:06:19
1147	7	520	NO COMMENT	\N	2014-03-18 13:05:32	2014-03-18 13:05:32
1148	23	520	NO COMMENT	\N	2014-03-19 04:05:01	2014-03-19 04:05:01
1149	2	520	NO COMMENT	\N	2014-03-20 12:19:06	2014-03-20 12:19:06
1150	34	520	NO COMMENT	\N	2014-03-20 12:24:36	2014-03-20 12:24:36
1151	33	520	NO COMMENT	\N	2014-03-20 18:22:06	2014-03-20 18:22:06
1152	7	522	NO COMMENT	\N	2014-03-19 20:48:19	2014-03-19 20:48:19
1153	2	522	NO COMMENT	\N	2014-03-19 21:43:19	2014-03-19 21:43:19
1154	1	522	NO COMMENT	\N	2014-03-20 04:02:28	2014-03-20 04:02:28
1155	15	522	NO COMMENT	\N	2014-03-20 12:14:08	2014-03-20 12:14:08
1156	41	522	NO COMMENT	\N	2014-03-20 18:36:47	2014-03-20 18:36:47
1157	37	523	NO COMMENT	\N	2014-03-19 05:03:56	2014-03-19 05:03:56
1158	7	523	NO COMMENT	\N	2014-03-20 00:09:24	2014-03-20 00:09:24
1159	46	523	NO COMMENT	\N	2014-03-20 16:45:08	2014-03-20 16:45:08
1160	47	529	NO COMMENT	\N	2014-03-20 00:28:03	2014-03-20 00:28:03
1161	23	529	NO COMMENT	\N	2014-03-20 02:33:46	2014-03-20 02:33:46
1162	11	529	NO COMMENT	\N	2014-03-20 02:59:59	2014-03-20 02:59:59
1163	43	529	NO COMMENT	\N	2014-03-20 11:51:41	2014-03-20 11:51:41
1164	42	529	NO COMMENT	\N	2014-03-20 16:03:31	2014-03-20 16:03:31
1165	20	530	NO COMMENT	\N	2014-03-20 10:12:47	2014-03-20 10:12:47
1166	42	530	NO COMMENT	\N	2014-03-20 10:42:28	2014-03-20 10:42:28
1167	31	530	NO COMMENT	\N	2014-03-20 12:31:57	2014-03-20 12:31:57
1168	47	530	NO COMMENT	\N	2014-03-20 17:39:09	2014-03-20 17:39:09
1169	35	531	NO COMMENT	\N	2014-03-18 02:27:55	2014-03-18 02:27:55
1170	7	531	NO COMMENT	\N	2014-03-18 04:04:30	2014-03-18 04:04:30
1171	22	531	NO COMMENT	\N	2014-03-18 10:25:57	2014-03-18 10:25:57
1172	15	531	NO COMMENT	\N	2014-03-18 11:31:40	2014-03-18 11:31:40
1173	24	531	NO COMMENT	\N	2014-03-18 13:53:00	2014-03-18 13:53:00
1174	28	531	NO COMMENT	\N	2014-03-19 00:13:45	2014-03-19 00:13:45
1175	30	531	NO COMMENT	\N	2014-03-19 09:39:28	2014-03-19 09:39:28
1176	23	531	NO COMMENT	\N	2014-03-19 19:20:12	2014-03-19 19:20:12
1177	32	531	NO COMMENT	\N	2014-03-20 03:16:49	2014-03-20 03:16:49
1178	21	531	NO COMMENT	\N	2014-03-20 09:38:01	2014-03-20 09:38:01
1179	36	533	NO COMMENT	\N	2014-03-20 12:07:37	2014-03-20 12:07:37
1180	1	534	NO COMMENT	\N	2014-03-19 03:27:42	2014-03-19 03:27:42
1181	7	534	NO COMMENT	\N	2014-03-20 11:15:18	2014-03-20 11:15:18
1182	2	534	NO COMMENT	\N	2014-03-20 13:37:13	2014-03-20 13:37:13
1183	1	535	NO COMMENT	\N	2014-03-20 01:40:16	2014-03-20 01:40:16
1184	2	535	NO COMMENT	\N	2014-03-20 09:44:42	2014-03-20 09:44:42
1185	7	535	NO COMMENT	\N	2014-03-20 11:20:11	2014-03-20 11:20:11
1186	1	537	NO COMMENT	\N	2014-03-20 06:12:11	2014-03-20 06:12:11
1187	41	537	NO COMMENT	\N	2014-03-20 18:34:24	2014-03-20 18:34:24
1188	46	539	NO COMMENT	\N	2014-03-19 20:08:36	2014-03-19 20:08:36
1189	7	571	NO COMMENT	\N	2013-12-15 03:02:17	2013-12-15 03:02:17
1190	18	571	NO COMMENT	\N	2014-02-22 00:40:16	2014-02-22 00:40:16
1191	46	540	NO COMMENT	\N	2014-03-20 17:38:09	2014-03-20 17:38:09
1192	2	542	NO COMMENT	\N	2014-03-18 21:09:20	2014-03-18 21:09:20
1193	1	543	NO COMMENT	\N	2014-03-17 19:30:29	2014-03-17 19:30:29
1194	10	543	NO COMMENT	\N	2014-03-18 00:27:17	2014-03-18 00:27:17
1195	42	543	NO COMMENT	\N	2014-03-18 13:05:01	2014-03-18 13:05:01
1196	2	544	NO COMMENT	\N	2014-03-20 12:27:27	2014-03-20 12:27:27
1197	10	544	NO COMMENT	\N	2014-03-20 13:27:42	2014-03-20 13:27:42
1198	7	544	NO COMMENT	\N	2014-03-20 18:38:44	2014-03-20 18:38:44
1199	37	545	NO COMMENT	\N	2014-03-19 21:35:26	2014-03-19 21:35:26
1200	35	545	NO COMMENT	\N	2014-03-20 00:00:24	2014-03-20 00:00:24
1201	1	545	NO COMMENT	\N	2014-03-20 04:46:10	2014-03-20 04:46:10
1202	42	545	NO COMMENT	\N	2014-03-20 08:46:25	2014-03-20 08:46:25
1203	7	545	NO COMMENT	\N	2014-03-20 09:02:00	2014-03-20 09:02:00
1204	7	547	NO COMMENT	\N	2013-12-13 16:30:23	2013-12-13 16:30:23
1205	7	572	NO COMMENT	\N	2013-12-29 14:15:35	2013-12-29 14:15:35
1206	18	572	NO COMMENT	\N	2014-02-02 03:30:26	2014-02-02 03:30:26
1207	7	549	NO COMMENT	\N	2014-01-28 10:33:02	2014-01-28 10:33:02
1208	7	550	NO COMMENT	\N	2014-03-05 14:53:16	2014-03-05 14:53:16
1209	7	551	NO COMMENT	\N	2014-02-15 13:33:58	2014-02-15 13:33:58
1210	7	552	NO COMMENT	\N	2014-03-02 09:44:19	2014-03-02 09:44:19
1211	7	553	NO COMMENT	\N	2014-02-13 17:51:15	2014-02-13 17:51:15
1212	36	553	NO COMMENT	\N	2014-03-02 22:45:43	2014-03-02 22:45:43
1213	47	554	NO COMMENT	\N	2014-02-13 19:41:58	2014-02-13 19:41:58
1214	7	554	NO COMMENT	\N	2014-02-20 04:58:50	2014-02-20 04:58:50
1215	36	554	NO COMMENT	\N	2014-02-20 09:33:01	2014-02-20 09:33:01
1216	16	554	NO COMMENT	\N	2014-03-12 00:57:09	2014-03-12 00:57:09
1217	7	555	NO COMMENT	\N	2013-12-20 06:39:28	2013-12-20 06:39:28
1218	18	555	NO COMMENT	\N	2013-12-28 20:50:05	2013-12-28 20:50:05
1219	7	557	NO COMMENT	\N	2014-02-09 21:16:11	2014-02-09 21:16:11
1220	7	558	NO COMMENT	\N	2014-02-27 23:40:13	2014-02-27 23:40:13
1221	7	559	NO COMMENT	\N	2014-01-21 09:58:12	2014-01-21 09:58:12
1222	7	560	NO COMMENT	\N	2014-01-30 22:58:29	2014-01-30 22:58:29
1223	7	561	NO COMMENT	\N	2014-01-16 19:44:59	2014-01-16 19:44:59
1224	22	561	NO COMMENT	\N	2014-02-08 14:17:39	2014-02-08 14:17:39
1225	41	562	NO COMMENT	\N	2014-02-17 06:37:47	2014-02-17 06:37:47
1226	44	562	NO COMMENT	\N	2014-03-13 17:17:04	2014-03-13 17:17:04
1227	14	563	NO COMMENT	\N	2014-03-15 12:18:22	2014-03-15 12:18:22
1228	24	563	NO COMMENT	\N	2014-03-19 01:55:08	2014-03-19 01:55:08
1229	36	563	NO COMMENT	\N	2014-03-19 05:42:19	2014-03-19 05:42:19
1230	22	563	NO COMMENT	\N	2014-03-19 05:55:50	2014-03-19 05:55:50
1231	39	563	NO COMMENT	\N	2014-03-19 12:36:24	2014-03-19 12:36:24
1232	7	565	NO COMMENT	\N	2013-12-24 06:00:00	2013-12-24 06:00:00
1233	7	566	NO COMMENT	\N	2014-02-05 20:52:24	2014-02-05 20:52:24
1234	7	567	NO COMMENT	\N	2014-01-14 00:10:10	2014-01-14 00:10:10
1235	7	568	NO COMMENT	\N	2014-01-26 13:21:04	2014-01-26 13:21:04
1236	7	569	NO COMMENT	\N	2014-01-29 05:32:19	2014-01-29 05:32:19
1237	7	574	NO COMMENT	\N	2014-02-06 11:17:10	2014-02-06 11:17:10
1238	7	575	NO COMMENT	\N	2014-03-09 20:48:44	2014-03-09 20:48:44
1239	7	576	NO COMMENT	\N	2014-01-21 11:10:52	2014-01-21 11:10:52
1240	7	577	NO COMMENT	\N	2014-01-21 14:49:37	2014-01-21 14:49:37
1241	44	578	NO COMMENT	\N	2014-02-13 01:49:14	2014-02-13 01:49:14
1242	7	578	NO COMMENT	\N	2014-03-05 04:00:58	2014-03-05 04:00:58
1243	7	579	NO COMMENT	\N	2014-02-28 09:05:24	2014-02-28 09:05:24
1244	7	581	NO COMMENT	\N	2014-01-26 12:53:09	2014-01-26 12:53:09
1245	7	583	NO COMMENT	\N	2013-11-06 23:54:46	2013-11-06 23:54:46
1246	7	584	NO COMMENT	\N	2014-02-01 22:20:40	2014-02-01 22:20:40
1247	26	585	NO COMMENT	\N	2014-03-10 20:02:48	2014-03-10 20:02:48
1248	18	585	NO COMMENT	\N	2014-03-15 09:40:33	2014-03-15 09:40:33
1249	7	585	NO COMMENT	\N	2014-03-20 06:57:01	2014-03-20 06:57:01
1250	7	586	NO COMMENT	\N	2013-12-07 05:49:59	2013-12-07 05:49:59
1251	7	587	NO COMMENT	\N	2014-02-15 16:35:18	2014-02-15 16:35:18
1252	7	588	NO COMMENT	\N	2013-11-16 11:06:17	2013-11-16 11:06:17
1253	1	588	NO COMMENT	\N	2014-01-03 12:54:37	2014-01-03 12:54:37
1254	2	588	NO COMMENT	\N	2014-02-11 01:37:12	2014-02-11 01:37:12
1255	2	589	NO COMMENT	\N	2013-10-15 06:19:14	2013-10-15 06:19:14
1256	1	589	NO COMMENT	\N	2013-11-26 11:35:59	2013-11-26 11:35:59
1257	7	589	NO COMMENT	\N	2014-01-28 02:15:55	2014-01-28 02:15:55
1258	7	591	NO COMMENT	\N	2014-02-05 03:38:35	2014-02-05 03:38:35
1259	1	591	NO COMMENT	\N	2014-02-16 21:01:06	2014-02-16 21:01:06
1260	2	591	NO COMMENT	\N	2014-03-18 06:11:17	2014-03-18 06:11:17
1261	2	592	NO COMMENT	\N	2014-01-07 20:55:08	2014-01-07 20:55:08
1262	7	592	NO COMMENT	\N	2014-01-08 05:18:15	2014-01-08 05:18:15
1263	1	592	NO COMMENT	\N	2014-03-17 06:49:01	2014-03-17 06:49:01
1264	7	593	NO COMMENT	\N	2014-02-17 13:52:25	2014-02-17 13:52:25
1265	2	593	NO COMMENT	\N	2014-02-27 02:25:37	2014-02-27 02:25:37
1266	1	593	NO COMMENT	\N	2014-03-18 23:42:26	2014-03-18 23:42:26
1267	1	594	NO COMMENT	\N	2014-02-07 21:53:02	2014-02-07 21:53:02
1268	2	594	NO COMMENT	\N	2014-02-23 16:20:10	2014-02-23 16:20:10
1269	7	594	NO COMMENT	\N	2014-02-27 21:38:21	2014-02-27 21:38:21
1270	1	595	NO COMMENT	\N	2013-11-13 07:23:06	2013-11-13 07:23:06
1271	7	595	NO COMMENT	\N	2013-12-21 10:28:30	2013-12-21 10:28:30
1272	2	595	NO COMMENT	\N	2014-01-23 17:33:13	2014-01-23 17:33:13
1273	2	596	NO COMMENT	\N	2014-03-10 18:47:49	2014-03-10 18:47:49
1274	7	597	NO COMMENT	\N	2013-12-22 06:29:57	2013-12-22 06:29:57
1275	2	597	NO COMMENT	\N	2014-02-13 00:14:46	2014-02-13 00:14:46
1276	1	597	NO COMMENT	\N	2014-03-08 19:54:07	2014-03-08 19:54:07
1277	1	598	NO COMMENT	\N	2014-01-12 21:33:05	2014-01-12 21:33:05
1278	7	598	NO COMMENT	\N	2014-01-18 19:22:47	2014-01-18 19:22:47
1279	2	599	NO COMMENT	\N	2014-01-15 16:39:23	2014-01-15 16:39:23
1280	1	599	NO COMMENT	\N	2014-02-10 00:40:39	2014-02-10 00:40:39
1281	7	599	NO COMMENT	\N	2014-02-17 10:32:21	2014-02-17 10:32:21
1282	2	600	NO COMMENT	\N	2013-12-24 23:59:31	2013-12-24 23:59:31
1283	1	600	NO COMMENT	\N	2014-01-13 06:32:40	2014-01-13 06:32:40
1284	7	600	NO COMMENT	\N	2014-03-12 21:52:00	2014-03-12 21:52:00
1285	7	601	NO COMMENT	\N	2013-12-17 11:26:16	2013-12-17 11:26:16
1286	2	601	NO COMMENT	\N	2013-12-18 15:23:34	2013-12-18 15:23:34
1287	19	602	NO COMMENT	\N	2014-01-21 08:19:14	2014-01-21 08:19:14
1288	2	602	NO COMMENT	\N	2014-02-27 22:30:12	2014-02-27 22:30:12
1289	7	602	NO COMMENT	\N	2014-03-14 15:35:04	2014-03-14 15:35:04
1290	1	602	NO COMMENT	\N	2014-03-15 14:48:57	2014-03-15 14:48:57
1291	7	603	NO COMMENT	\N	2014-02-26 00:07:20	2014-02-26 00:07:20
1292	2	604	NO COMMENT	\N	2014-01-02 21:06:22	2014-01-02 21:06:22
1293	1	604	NO COMMENT	\N	2014-01-07 11:19:03	2014-01-07 11:19:03
1294	7	604	NO COMMENT	\N	2014-01-09 07:19:05	2014-01-09 07:19:05
1295	44	605	NO COMMENT	\N	2014-01-23 14:35:53	2014-01-23 14:35:53
1296	2	607	NO COMMENT	\N	2013-12-07 08:06:17	2013-12-07 08:06:17
1297	7	607	NO COMMENT	\N	2013-12-09 01:09:07	2013-12-09 01:09:07
1298	1	607	NO COMMENT	\N	2014-01-23 08:26:17	2014-01-23 08:26:17
1299	7	608	NO COMMENT	\N	2014-01-09 19:15:14	2014-01-09 19:15:14
1300	2	608	NO COMMENT	\N	2014-02-09 11:28:47	2014-02-09 11:28:47
1301	1	608	NO COMMENT	\N	2014-03-19 23:10:34	2014-03-19 23:10:34
1302	7	987	NO COMMENT	\N	2013-11-02 14:26:19	2013-11-02 14:26:19
1303	1	987	NO COMMENT	\N	2013-12-05 21:26:00	2013-12-05 21:26:00
1304	2	987	NO COMMENT	\N	2013-12-31 23:20:42	2013-12-31 23:20:42
1305	1	609	NO COMMENT	\N	2013-12-01 16:52:32	2013-12-01 16:52:32
1306	2	609	NO COMMENT	\N	2013-12-13 12:26:29	2013-12-13 12:26:29
1307	7	609	NO COMMENT	\N	2014-03-12 12:24:43	2014-03-12 12:24:43
1308	7	611	NO COMMENT	\N	2014-02-05 00:55:33	2014-02-05 00:55:33
1309	14	611	NO COMMENT	\N	2014-02-19 03:46:37	2014-02-19 03:46:37
1310	18	611	NO COMMENT	\N	2014-03-01 16:12:37	2014-03-01 16:12:37
1311	1	611	NO COMMENT	\N	2014-03-09 10:10:47	2014-03-09 10:10:47
1312	2	611	NO COMMENT	\N	2014-03-14 04:08:33	2014-03-14 04:08:33
1313	7	612	NO COMMENT	\N	2013-11-05 19:05:21	2013-11-05 19:05:21
1314	1	612	NO COMMENT	\N	2014-01-11 21:54:25	2014-01-11 21:54:25
1315	2	612	NO COMMENT	\N	2014-02-15 05:43:38	2014-02-15 05:43:38
1316	1	614	NO COMMENT	\N	2013-10-07 16:41:08	2013-10-07 16:41:08
1317	7	614	NO COMMENT	\N	2014-02-04 16:07:42	2014-02-04 16:07:42
1318	2	614	NO COMMENT	\N	2014-03-08 10:29:11	2014-03-08 10:29:11
1319	7	616	NO COMMENT	\N	2013-12-21 04:15:57	2013-12-21 04:15:57
1320	1	616	NO COMMENT	\N	2014-02-21 17:31:40	2014-02-21 17:31:40
1321	2	616	NO COMMENT	\N	2014-02-28 01:46:50	2014-02-28 01:46:50
1322	7	617	NO COMMENT	\N	2013-12-02 08:48:37	2013-12-02 08:48:37
1323	1	617	NO COMMENT	\N	2014-02-18 17:56:19	2014-02-18 17:56:19
1324	7	619	NO COMMENT	\N	2014-02-02 07:13:22	2014-02-02 07:13:22
1325	18	620	NO COMMENT	\N	2014-02-18 16:54:11	2014-02-18 16:54:11
1326	35	620	NO COMMENT	\N	2014-03-11 06:37:54	2014-03-11 06:37:54
1327	13	620	NO COMMENT	\N	2014-03-11 13:54:52	2014-03-11 13:54:52
1328	1	621	NO COMMENT	\N	2013-11-29 06:25:41	2013-11-29 06:25:41
1329	7	621	NO COMMENT	\N	2013-12-24 16:27:45	2013-12-24 16:27:45
1330	2	621	NO COMMENT	\N	2014-01-09 03:33:31	2014-01-09 03:33:31
1331	1	622	NO COMMENT	\N	2013-12-26 16:16:35	2013-12-26 16:16:35
1332	1	623	NO COMMENT	\N	2013-12-09 15:16:33	2013-12-09 15:16:33
1333	2	623	NO COMMENT	\N	2014-01-30 13:48:10	2014-01-30 13:48:10
1334	7	623	NO COMMENT	\N	2014-02-21 13:27:43	2014-02-21 13:27:43
1335	1	624	NO COMMENT	\N	2013-10-21 13:03:08	2013-10-21 13:03:08
1336	2	624	NO COMMENT	\N	2013-11-15 00:29:08	2013-11-15 00:29:08
1337	7	624	NO COMMENT	\N	2014-02-09 19:10:18	2014-02-09 19:10:18
1338	2	625	NO COMMENT	\N	2014-01-29 23:34:42	2014-01-29 23:34:42
1339	7	625	NO COMMENT	\N	2014-02-15 04:37:08	2014-02-15 04:37:08
1340	1	625	NO COMMENT	\N	2014-03-05 22:33:51	2014-03-05 22:33:51
1341	7	626	NO COMMENT	\N	2014-01-09 02:17:44	2014-01-09 02:17:44
1342	2	626	NO COMMENT	\N	2014-01-23 23:08:39	2014-01-23 23:08:39
1343	1	627	NO COMMENT	\N	2013-12-05 15:46:15	2013-12-05 15:46:15
1344	2	627	NO COMMENT	\N	2013-12-17 23:06:43	2013-12-17 23:06:43
1345	7	627	NO COMMENT	\N	2014-03-03 23:37:23	2014-03-03 23:37:23
1346	1	628	NO COMMENT	\N	2014-01-15 02:59:39	2014-01-15 02:59:39
1347	7	628	NO COMMENT	\N	2014-01-27 21:19:01	2014-01-27 21:19:01
1348	2	628	NO COMMENT	\N	2014-02-23 13:20:55	2014-02-23 13:20:55
1349	2	629	NO COMMENT	\N	2014-03-11 11:08:15	2014-03-11 11:08:15
1350	1	629	NO COMMENT	\N	2014-03-14 02:51:15	2014-03-14 02:51:15
1351	7	630	NO COMMENT	\N	2014-03-06 18:30:15	2014-03-06 18:30:15
1352	1	630	NO COMMENT	\N	2014-03-11 19:42:47	2014-03-11 19:42:47
1353	1	631	NO COMMENT	\N	2014-03-15 08:18:37	2014-03-15 08:18:37
1354	20	631	NO COMMENT	\N	2014-03-17 16:44:33	2014-03-17 16:44:33
1355	7	631	NO COMMENT	\N	2014-03-20 12:44:56	2014-03-20 12:44:56
1356	7	632	NO COMMENT	\N	2014-02-07 00:35:16	2014-02-07 00:35:16
1357	1	632	NO COMMENT	\N	2014-02-16 10:00:37	2014-02-16 10:00:37
1358	7	633	NO COMMENT	\N	2014-02-12 03:21:21	2014-02-12 03:21:21
1359	1	633	NO COMMENT	\N	2014-03-18 04:06:01	2014-03-18 04:06:01
1360	1	634	NO COMMENT	\N	2014-03-02 00:17:29	2014-03-02 00:17:29
1361	40	634	NO COMMENT	\N	2014-03-06 05:23:34	2014-03-06 05:23:34
1362	47	634	NO COMMENT	\N	2014-03-07 02:09:39	2014-03-07 02:09:39
1363	16	634	NO COMMENT	\N	2014-03-09 04:37:11	2014-03-09 04:37:11
1364	36	634	NO COMMENT	\N	2014-03-12 21:18:34	2014-03-12 21:18:34
1365	7	634	NO COMMENT	\N	2014-03-17 01:20:34	2014-03-17 01:20:34
1366	16	635	NO COMMENT	\N	2014-02-28 23:22:34	2014-02-28 23:22:34
1367	7	635	NO COMMENT	\N	2014-03-06 03:55:29	2014-03-06 03:55:29
1368	36	635	NO COMMENT	\N	2014-03-09 04:26:24	2014-03-09 04:26:24
1369	24	635	NO COMMENT	\N	2014-03-11 19:06:24	2014-03-11 19:06:24
1370	40	635	NO COMMENT	\N	2014-03-18 02:12:55	2014-03-18 02:12:55
1371	7	636	NO COMMENT	\N	2014-02-11 20:17:06	2014-02-11 20:17:06
1372	44	636	NO COMMENT	\N	2014-03-16 04:13:52	2014-03-16 04:13:52
1373	7	637	NO COMMENT	\N	2014-03-03 20:00:02	2014-03-03 20:00:02
1374	1	637	NO COMMENT	\N	2014-03-11 21:53:35	2014-03-11 21:53:35
1375	10	637	NO COMMENT	\N	2014-03-13 22:50:40	2014-03-13 22:50:40
1376	9	637	NO COMMENT	\N	2014-03-14 11:32:32	2014-03-14 11:32:32
1377	44	637	NO COMMENT	\N	2014-03-19 02:04:48	2014-03-19 02:04:48
1378	15	638	NO COMMENT	\N	2014-03-20 13:44:51	2014-03-20 13:44:51
1379	1	639	NO COMMENT	\N	2014-02-23 13:17:23	2014-02-23 13:17:23
1380	7	639	NO COMMENT	\N	2014-03-10 08:48:33	2014-03-10 08:48:33
1381	1	640	NO COMMENT	\N	2014-02-11 03:04:44	2014-02-11 03:04:44
1382	44	640	NO COMMENT	\N	2014-02-15 15:05:43	2014-02-15 15:05:43
1383	7	640	NO COMMENT	\N	2014-02-25 11:48:21	2014-02-25 11:48:21
1384	22	640	NO COMMENT	\N	2014-02-28 00:18:17	2014-02-28 00:18:17
1385	41	640	NO COMMENT	\N	2014-03-19 11:15:45	2014-03-19 11:15:45
1386	42	641	NO COMMENT	\N	2014-02-20 04:54:12	2014-02-20 04:54:12
1387	26	641	NO COMMENT	\N	2014-02-23 01:13:31	2014-02-23 01:13:31
1388	17	641	NO COMMENT	\N	2014-02-27 14:13:08	2014-02-27 14:13:08
1389	22	641	NO COMMENT	\N	2014-03-11 21:35:26	2014-03-11 21:35:26
1390	1	641	NO COMMENT	\N	2014-03-19 10:32:01	2014-03-19 10:32:01
1391	17	642	NO COMMENT	\N	2014-02-22 13:28:18	2014-02-22 13:28:18
1392	20	642	NO COMMENT	\N	2014-03-03 16:23:06	2014-03-03 16:23:06
1393	1	642	NO COMMENT	\N	2014-03-04 14:57:53	2014-03-04 14:57:53
1394	41	642	NO COMMENT	\N	2014-03-13 20:22:42	2014-03-13 20:22:42
1395	44	643	NO COMMENT	\N	2014-02-25 02:38:51	2014-02-25 02:38:51
1396	41	643	NO COMMENT	\N	2014-03-07 10:14:23	2014-03-07 10:14:23
1397	7	643	NO COMMENT	\N	2014-03-10 16:11:48	2014-03-10 16:11:48
1398	20	643	NO COMMENT	\N	2014-03-16 03:38:31	2014-03-16 03:38:31
1399	20	644	NO COMMENT	\N	2014-03-11 10:03:22	2014-03-11 10:03:22
1400	14	644	NO COMMENT	\N	2014-03-12 21:02:01	2014-03-12 21:02:01
1401	39	644	NO COMMENT	\N	2014-03-12 23:46:12	2014-03-12 23:46:12
1402	31	644	NO COMMENT	\N	2014-03-13 00:40:40	2014-03-13 00:40:40
1403	10	644	NO COMMENT	\N	2014-03-14 03:00:40	2014-03-14 03:00:40
1404	1	644	NO COMMENT	\N	2014-03-14 03:55:10	2014-03-14 03:55:10
1405	7	644	NO COMMENT	\N	2014-03-14 05:06:01	2014-03-14 05:06:01
1406	23	644	NO COMMENT	\N	2014-03-14 15:18:14	2014-03-14 15:18:14
1407	26	644	NO COMMENT	\N	2014-03-14 20:22:06	2014-03-14 20:22:06
1408	47	644	NO COMMENT	\N	2014-03-16 05:46:35	2014-03-16 05:46:35
1409	13	644	NO COMMENT	\N	2014-03-16 23:59:20	2014-03-16 23:59:20
1410	42	644	NO COMMENT	\N	2014-03-17 21:35:09	2014-03-17 21:35:09
1411	15	644	NO COMMENT	\N	2014-03-17 23:03:18	2014-03-17 23:03:18
1412	24	644	NO COMMENT	\N	2014-03-18 13:35:45	2014-03-18 13:35:45
1413	1	645	NO COMMENT	\N	2014-02-18 04:34:22	2014-02-18 04:34:22
1414	13	645	NO COMMENT	\N	2014-02-25 09:12:28	2014-02-25 09:12:28
1415	6	645	NO COMMENT	\N	2014-03-02 04:44:33	2014-03-02 04:44:33
1416	22	645	NO COMMENT	\N	2014-03-08 15:38:12	2014-03-08 15:38:12
1417	19	645	NO COMMENT	\N	2014-03-10 11:10:15	2014-03-10 11:10:15
1418	18	645	NO COMMENT	\N	2014-03-13 21:38:42	2014-03-13 21:38:42
1419	35	645	NO COMMENT	\N	2014-03-14 17:29:44	2014-03-14 17:29:44
1420	1	646	NO COMMENT	\N	2014-02-01 10:51:24	2014-02-01 10:51:24
1421	33	646	NO COMMENT	\N	2014-02-06 12:37:46	2014-02-06 12:37:46
1422	26	646	NO COMMENT	\N	2014-02-14 10:04:09	2014-02-14 10:04:09
1423	45	646	NO COMMENT	\N	2014-02-20 04:42:50	2014-02-20 04:42:50
1424	7	646	NO COMMENT	\N	2014-03-04 22:05:50	2014-03-04 22:05:50
1425	7	647	NO COMMENT	\N	2014-03-02 19:36:51	2014-03-02 19:36:51
1426	10	647	NO COMMENT	\N	2014-03-03 00:41:21	2014-03-03 00:41:21
1427	18	647	NO COMMENT	\N	2014-03-04 07:14:39	2014-03-04 07:14:39
1428	44	647	NO COMMENT	\N	2014-03-05 01:08:00	2014-03-05 01:08:00
1429	1	647	NO COMMENT	\N	2014-03-06 02:24:46	2014-03-06 02:24:46
1430	46	647	NO COMMENT	\N	2014-03-11 02:23:04	2014-03-11 02:23:04
1431	21	647	NO COMMENT	\N	2014-03-13 21:13:36	2014-03-13 21:13:36
1432	41	647	NO COMMENT	\N	2014-03-19 14:29:52	2014-03-19 14:29:52
1433	7	649	NO COMMENT	\N	2014-02-26 01:08:54	2014-02-26 01:08:54
1434	23	649	NO COMMENT	\N	2014-03-03 08:10:31	2014-03-03 08:10:31
1435	15	649	NO COMMENT	\N	2014-03-17 11:24:45	2014-03-17 11:24:45
1436	1	649	NO COMMENT	\N	2014-03-19 06:35:23	2014-03-19 06:35:23
1437	7	650	NO COMMENT	\N	2014-03-04 21:19:39	2014-03-04 21:19:39
1438	6	650	NO COMMENT	\N	2014-03-05 09:05:47	2014-03-05 09:05:47
1439	1	650	NO COMMENT	\N	2014-03-05 10:29:34	2014-03-05 10:29:34
1440	33	650	NO COMMENT	\N	2014-03-06 22:01:04	2014-03-06 22:01:04
1441	26	650	NO COMMENT	\N	2014-03-06 23:56:01	2014-03-06 23:56:01
1442	31	650	NO COMMENT	\N	2014-03-09 18:03:18	2014-03-09 18:03:18
1443	45	650	NO COMMENT	\N	2014-03-09 18:58:00	2014-03-09 18:58:00
1444	14	650	NO COMMENT	\N	2014-03-10 02:31:19	2014-03-10 02:31:19
1445	24	650	NO COMMENT	\N	2014-03-10 04:08:44	2014-03-10 04:08:44
1446	46	650	NO COMMENT	\N	2014-03-10 04:42:00	2014-03-10 04:42:00
1447	20	650	NO COMMENT	\N	2014-03-10 17:58:26	2014-03-10 17:58:26
1448	17	650	NO COMMENT	\N	2014-03-13 23:34:47	2014-03-13 23:34:47
1449	23	650	NO COMMENT	\N	2014-03-14 01:31:02	2014-03-14 01:31:02
1450	48	650	NO COMMENT	\N	2014-03-17 08:58:20	2014-03-17 08:58:20
1451	34	650	NO COMMENT	\N	2014-03-18 11:31:13	2014-03-18 11:31:13
1452	1	651	NO COMMENT	\N	2014-03-11 18:36:55	2014-03-11 18:36:55
1453	7	651	NO COMMENT	\N	2014-03-14 18:21:42	2014-03-14 18:21:42
1454	7	652	NO COMMENT	\N	2014-03-11 00:14:08	2014-03-11 00:14:08
1455	1	652	NO COMMENT	\N	2014-03-18 21:11:58	2014-03-18 21:11:58
1456	16	654	NO COMMENT	\N	2014-03-01 09:04:42	2014-03-01 09:04:42
1457	1	654	NO COMMENT	\N	2014-03-20 04:57:38	2014-03-20 04:57:38
1458	1	655	NO COMMENT	\N	2014-02-11 07:31:13	2014-02-11 07:31:13
1459	15	655	NO COMMENT	\N	2014-02-20 11:38:12	2014-02-20 11:38:12
1460	18	655	NO COMMENT	\N	2014-02-26 03:21:54	2014-02-26 03:21:54
1461	9	655	NO COMMENT	\N	2014-02-28 17:46:23	2014-02-28 17:46:23
1462	7	655	NO COMMENT	\N	2014-03-04 02:44:53	2014-03-04 02:44:53
1463	6	656	NO COMMENT	\N	2014-02-23 09:37:31	2014-02-23 09:37:31
1464	1	656	NO COMMENT	\N	2014-02-26 19:21:56	2014-02-26 19:21:56
1465	27	656	NO COMMENT	\N	2014-03-04 08:06:08	2014-03-04 08:06:08
1466	7	656	NO COMMENT	\N	2014-03-20 10:42:42	2014-03-20 10:42:42
1467	28	658	NO COMMENT	\N	2013-11-24 03:04:49	2013-11-24 03:04:49
1468	7	658	NO COMMENT	\N	2014-02-23 11:34:15	2014-02-23 11:34:15
1469	28	659	NO COMMENT	\N	2013-11-17 18:28:44	2013-11-17 18:28:44
1470	7	659	NO COMMENT	\N	2014-03-04 19:23:58	2014-03-04 19:23:58
1471	7	660	NO COMMENT	\N	2013-12-29 16:19:57	2013-12-29 16:19:57
1472	14	678	NO COMMENT	\N	2014-02-14 13:34:22	2014-02-14 13:34:22
1473	7	678	NO COMMENT	\N	2014-03-04 23:08:34	2014-03-04 23:08:34
1474	18	678	NO COMMENT	\N	2014-03-06 02:22:53	2014-03-06 02:22:53
1475	7	661	NO COMMENT	\N	2013-12-31 18:01:30	2013-12-31 18:01:30
1476	14	662	NO COMMENT	\N	2014-02-21 15:16:54	2014-02-21 15:16:54
1477	7	662	NO COMMENT	\N	2014-03-03 11:36:24	2014-03-03 11:36:24
1478	7	664	NO COMMENT	\N	2013-10-21 12:40:59	2013-10-21 12:40:59
1479	7	667	NO COMMENT	\N	2014-02-03 23:21:47	2014-02-03 23:21:47
1480	7	679	NO COMMENT	\N	2014-02-19 00:27:05	2014-02-19 00:27:05
1481	18	679	NO COMMENT	\N	2014-02-20 00:39:42	2014-02-20 00:39:42
1482	14	679	NO COMMENT	\N	2014-02-26 07:17:48	2014-02-26 07:17:48
1483	7	668	NO COMMENT	\N	2013-12-31 22:03:15	2013-12-31 22:03:15
1484	7	669	NO COMMENT	\N	2013-11-16 07:41:12	2013-11-16 07:41:12
1485	7	670	NO COMMENT	\N	2013-12-31 02:39:07	2013-12-31 02:39:07
1486	7	671	NO COMMENT	\N	2013-12-06 18:34:15	2013-12-06 18:34:15
1487	7	672	NO COMMENT	\N	2013-12-27 15:15:09	2013-12-27 15:15:09
1488	7	673	NO COMMENT	\N	2014-02-05 17:56:36	2014-02-05 17:56:36
1489	7	674	NO COMMENT	\N	2013-12-05 14:22:14	2013-12-05 14:22:14
1490	18	674	NO COMMENT	\N	2014-01-30 06:54:30	2014-01-30 06:54:30
1491	7	675	NO COMMENT	\N	2013-12-21 00:34:51	2013-12-21 00:34:51
1492	18	675	NO COMMENT	\N	2014-01-16 03:34:41	2014-01-16 03:34:41
1493	7	676	NO COMMENT	\N	2013-12-14 05:16:19	2013-12-14 05:16:19
1494	18	676	NO COMMENT	\N	2014-03-14 14:08:20	2014-03-14 14:08:20
1495	7	677	NO COMMENT	\N	2013-12-28 12:10:27	2013-12-28 12:10:27
1496	10	680	NO COMMENT	\N	2014-02-25 14:26:21	2014-02-25 14:26:21
1497	14	680	NO COMMENT	\N	2014-03-05 08:00:58	2014-03-05 08:00:58
1498	41	680	NO COMMENT	\N	2014-03-13 03:59:19	2014-03-13 03:59:19
1499	10	681	NO COMMENT	\N	2014-02-24 21:40:07	2014-02-24 21:40:07
1500	44	681	NO COMMENT	\N	2014-03-10 17:22:09	2014-03-10 17:22:09
1501	41	681	NO COMMENT	\N	2014-03-16 01:24:05	2014-03-16 01:24:05
1502	7	684	NO COMMENT	\N	2014-01-11 14:20:46	2014-01-11 14:20:46
1503	7	685	NO COMMENT	\N	2014-01-16 11:37:47	2014-01-16 11:37:47
1504	7	686	NO COMMENT	\N	2013-12-17 16:11:13	2013-12-17 16:11:13
1505	7	687	NO COMMENT	\N	2014-02-09 22:25:00	2014-02-09 22:25:00
1506	7	688	NO COMMENT	\N	2014-01-18 08:16:49	2014-01-18 08:16:49
1507	18	690	NO COMMENT	\N	2013-11-11 01:27:43	2013-11-11 01:27:43
1508	7	690	NO COMMENT	\N	2014-01-07 03:13:55	2014-01-07 03:13:55
1509	7	692	NO COMMENT	\N	2014-01-15 17:17:43	2014-01-15 17:17:43
1510	1	692	NO COMMENT	\N	2014-01-25 02:50:31	2014-01-25 02:50:31
1511	1	693	NO COMMENT	\N	2013-11-24 13:30:12	2013-11-24 13:30:12
1512	7	693	NO COMMENT	\N	2014-01-23 06:53:54	2014-01-23 06:53:54
1513	1	776	NO COMMENT	\N	2014-02-07 14:39:23	2014-02-07 14:39:23
1514	7	776	NO COMMENT	\N	2014-02-15 06:26:44	2014-02-15 06:26:44
1515	2	776	NO COMMENT	\N	2014-03-16 05:40:16	2014-03-16 05:40:16
1516	7	694	NO COMMENT	\N	2014-02-04 16:50:02	2014-02-04 16:50:02
1517	1	694	NO COMMENT	\N	2014-03-17 09:47:01	2014-03-17 09:47:01
1518	7	695	NO COMMENT	\N	2014-02-13 12:14:32	2014-02-13 12:14:32
1519	1	695	NO COMMENT	\N	2014-03-16 15:34:04	2014-03-16 15:34:04
1520	7	697	NO COMMENT	\N	2014-02-05 05:29:19	2014-02-05 05:29:19
1521	1	697	NO COMMENT	\N	2014-03-17 13:50:11	2014-03-17 13:50:11
1522	1	698	NO COMMENT	\N	2013-12-19 17:03:21	2013-12-19 17:03:21
1523	7	698	NO COMMENT	\N	2014-01-24 00:14:30	2014-01-24 00:14:30
1524	7	700	NO COMMENT	\N	2013-11-28 03:33:20	2013-11-28 03:33:20
1525	1	700	NO COMMENT	\N	2013-12-04 23:15:24	2013-12-04 23:15:24
1526	28	700	NO COMMENT	\N	2014-01-31 13:31:18	2014-01-31 13:31:18
1527	7	701	NO COMMENT	\N	2013-12-22 04:24:17	2013-12-22 04:24:17
1528	1	701	NO COMMENT	\N	2014-03-17 20:50:36	2014-03-17 20:50:36
1529	7	702	NO COMMENT	\N	2014-02-13 13:27:27	2014-02-13 13:27:27
1530	9	702	NO COMMENT	\N	2014-02-23 02:53:59	2014-02-23 02:53:59
1531	1	702	NO COMMENT	\N	2014-02-25 03:51:29	2014-02-25 03:51:29
1532	2	798	NO COMMENT	\N	2014-01-25 23:03:28	2014-01-25 23:03:28
1533	7	798	NO COMMENT	\N	2014-02-24 23:31:06	2014-02-24 23:31:06
1534	1	798	NO COMMENT	\N	2014-03-20 17:49:00	2014-03-20 17:49:00
1535	7	703	NO COMMENT	\N	2013-09-25 04:28:39	2013-09-25 04:28:39
1536	1	703	NO COMMENT	\N	2013-12-01 11:11:22	2013-12-01 11:11:22
1537	19	704	NO COMMENT	\N	2014-01-04 22:38:26	2014-01-04 22:38:26
1538	7	704	NO COMMENT	\N	2014-01-26 06:03:51	2014-01-26 06:03:51
1539	1	704	NO COMMENT	\N	2014-03-09 08:27:42	2014-03-09 08:27:42
1540	7	705	NO COMMENT	\N	2014-02-25 04:04:19	2014-02-25 04:04:19
1541	1	705	NO COMMENT	\N	2014-02-27 09:57:41	2014-02-27 09:57:41
1542	7	707	NO COMMENT	\N	2013-12-10 12:01:12	2013-12-10 12:01:12
1543	1	707	NO COMMENT	\N	2014-01-28 18:56:47	2014-01-28 18:56:47
1544	1	709	NO COMMENT	\N	2013-12-21 05:20:27	2013-12-21 05:20:27
1545	7	709	NO COMMENT	\N	2013-12-21 08:09:57	2013-12-21 08:09:57
1546	7	710	NO COMMENT	\N	2014-02-08 20:14:43	2014-02-08 20:14:43
1547	1	710	NO COMMENT	\N	2014-03-08 16:55:27	2014-03-08 16:55:27
1548	7	711	NO COMMENT	\N	2014-02-09 13:46:06	2014-02-09 13:46:06
1549	1	711	NO COMMENT	\N	2014-03-03 10:11:59	2014-03-03 10:11:59
1550	27	712	NO COMMENT	\N	2014-03-03 00:49:53	2014-03-03 00:49:53
1551	1	712	NO COMMENT	\N	2014-03-06 18:45:15	2014-03-06 18:45:15
1552	7	712	NO COMMENT	\N	2014-03-15 11:38:10	2014-03-15 11:38:10
1553	7	716	NO COMMENT	\N	2014-01-01 14:44:44	2014-01-01 14:44:44
1554	1	716	NO COMMENT	\N	2014-01-04 11:07:05	2014-01-04 11:07:05
1555	1	717	NO COMMENT	\N	2013-09-30 12:13:27	2013-09-30 12:13:27
1556	7	717	NO COMMENT	\N	2013-10-23 07:48:06	2013-10-23 07:48:06
1557	26	718	NO COMMENT	\N	2014-01-20 02:53:37	2014-01-20 02:53:37
1558	7	720	NO COMMENT	\N	2013-12-16 23:48:32	2013-12-16 23:48:32
1559	18	720	NO COMMENT	\N	2014-01-29 22:36:49	2014-01-29 22:36:49
1560	1	720	NO COMMENT	\N	2014-01-31 11:21:29	2014-01-31 11:21:29
1561	7	722	NO COMMENT	\N	2013-12-30 09:32:36	2013-12-30 09:32:36
1562	45	722	NO COMMENT	\N	2014-02-01 23:40:35	2014-02-01 23:40:35
1563	1	722	NO COMMENT	\N	2014-02-23 13:48:16	2014-02-23 13:48:16
1564	18	722	NO COMMENT	\N	2014-03-15 12:30:47	2014-03-15 12:30:47
1565	7	723	NO COMMENT	\N	2014-01-31 03:52:02	2014-01-31 03:52:02
1566	45	723	NO COMMENT	\N	2014-02-03 19:21:05	2014-02-03 19:21:05
1567	1	723	NO COMMENT	\N	2014-02-04 09:38:12	2014-02-04 09:38:12
1568	18	723	NO COMMENT	\N	2014-02-10 15:15:47	2014-02-10 15:15:47
1569	1	724	NO COMMENT	\N	2013-11-15 05:03:01	2013-11-15 05:03:01
1570	7	724	NO COMMENT	\N	2013-12-18 17:05:28	2013-12-18 17:05:28
1571	7	727	NO COMMENT	\N	2013-12-01 03:49:07	2013-12-01 03:49:07
1572	1	727	NO COMMENT	\N	2014-01-16 12:14:51	2014-01-16 12:14:51
1573	7	729	NO COMMENT	\N	2014-01-15 10:48:31	2014-01-15 10:48:31
1574	1	729	NO COMMENT	\N	2014-02-17 07:33:15	2014-02-17 07:33:15
1575	7	730	NO COMMENT	\N	2013-12-29 18:56:45	2013-12-29 18:56:45
1576	1	730	NO COMMENT	\N	2014-01-02 09:46:45	2014-01-02 09:46:45
1577	1	731	NO COMMENT	\N	2014-01-05 08:26:55	2014-01-05 08:26:55
1578	7	732	NO COMMENT	\N	2014-01-20 06:03:03	2014-01-20 06:03:03
1579	1	732	NO COMMENT	\N	2014-03-09 23:56:37	2014-03-09 23:56:37
1580	7	799	NO COMMENT	\N	2014-02-15 14:41:13	2014-02-15 14:41:13
1581	2	799	NO COMMENT	\N	2014-02-21 14:04:21	2014-02-21 14:04:21
1582	1	799	NO COMMENT	\N	2014-03-08 21:48:45	2014-03-08 21:48:45
1583	1	734	NO COMMENT	\N	2013-12-07 06:32:11	2013-12-07 06:32:11
1584	2	734	NO COMMENT	\N	2013-12-25 19:49:44	2013-12-25 19:49:44
1585	1	735	NO COMMENT	\N	2013-12-25 00:57:40	2013-12-25 00:57:40
1586	7	735	NO COMMENT	\N	2013-12-28 09:16:06	2013-12-28 09:16:06
1587	2	735	NO COMMENT	\N	2014-03-03 15:11:19	2014-03-03 15:11:19
1588	7	736	NO COMMENT	\N	2014-02-19 04:42:24	2014-02-19 04:42:24
1589	2	736	NO COMMENT	\N	2014-03-08 15:05:49	2014-03-08 15:05:49
1590	44	736	NO COMMENT	\N	2014-03-10 11:56:24	2014-03-10 11:56:24
1591	1	736	NO COMMENT	\N	2014-03-12 12:18:15	2014-03-12 12:18:15
1592	1	737	NO COMMENT	\N	2013-12-12 05:31:03	2013-12-12 05:31:03
1593	2	737	NO COMMENT	\N	2013-12-13 16:53:46	2013-12-13 16:53:46
1594	7	737	NO COMMENT	\N	2014-03-20 09:40:20	2014-03-20 09:40:20
1595	1	738	NO COMMENT	\N	2013-11-27 07:53:52	2013-11-27 07:53:52
1596	7	738	NO COMMENT	\N	2014-01-23 11:20:07	2014-01-23 11:20:07
1597	2	738	NO COMMENT	\N	2014-02-25 19:36:52	2014-02-25 19:36:52
1598	1	739	NO COMMENT	\N	2014-03-02 00:07:33	2014-03-02 00:07:33
1599	26	739	NO COMMENT	\N	2014-03-15 16:23:25	2014-03-15 16:23:25
1600	7	739	NO COMMENT	\N	2014-03-18 17:45:34	2014-03-18 17:45:34
1601	7	740	NO COMMENT	\N	2013-10-16 08:42:33	2013-10-16 08:42:33
1602	1	740	NO COMMENT	\N	2014-01-10 23:04:03	2014-01-10 23:04:03
1603	2	740	NO COMMENT	\N	2014-03-19 05:36:40	2014-03-19 05:36:40
1604	2	741	NO COMMENT	\N	2013-10-18 12:52:09	2013-10-18 12:52:09
1605	1	741	NO COMMENT	\N	2013-11-18 01:09:25	2013-11-18 01:09:25
1606	7	741	NO COMMENT	\N	2014-02-19 06:42:46	2014-02-19 06:42:46
1607	7	743	NO COMMENT	\N	2013-12-26 06:45:49	2013-12-26 06:45:49
1608	1	743	NO COMMENT	\N	2014-01-12 08:22:23	2014-01-12 08:22:23
1609	2	743	NO COMMENT	\N	2014-01-14 20:48:47	2014-01-14 20:48:47
1610	2	744	NO COMMENT	\N	2014-01-18 08:23:58	2014-01-18 08:23:58
1611	1	744	NO COMMENT	\N	2014-02-06 11:36:04	2014-02-06 11:36:04
1612	7	744	NO COMMENT	\N	2014-03-03 23:22:14	2014-03-03 23:22:14
1613	2	745	NO COMMENT	\N	2013-12-22 03:50:58	2013-12-22 03:50:58
1614	1	745	NO COMMENT	\N	2014-02-27 07:55:54	2014-02-27 07:55:54
1615	7	745	NO COMMENT	\N	2014-03-11 02:56:06	2014-03-11 02:56:06
1616	7	747	NO COMMENT	\N	2014-01-14 10:53:02	2014-01-14 10:53:02
1617	1	747	NO COMMENT	\N	2014-01-15 06:40:14	2014-01-15 06:40:14
1618	2	747	NO COMMENT	\N	2014-03-18 01:15:40	2014-03-18 01:15:40
1619	7	748	NO COMMENT	\N	2013-09-16 13:32:01	2013-09-16 13:32:01
1620	2	748	NO COMMENT	\N	2013-10-12 03:43:57	2013-10-12 03:43:57
1621	1	748	NO COMMENT	\N	2014-01-19 11:28:39	2014-01-19 11:28:39
1622	7	749	NO COMMENT	\N	2013-12-03 17:44:22	2013-12-03 17:44:22
1623	2	749	NO COMMENT	\N	2014-03-07 13:06:20	2014-03-07 13:06:20
1624	1	749	NO COMMENT	\N	2014-03-12 09:01:23	2014-03-12 09:01:23
1625	2	751	NO COMMENT	\N	2013-11-23 13:05:46	2013-11-23 13:05:46
1626	1	751	NO COMMENT	\N	2013-12-12 20:53:25	2013-12-12 20:53:25
1627	7	751	NO COMMENT	\N	2014-01-10 12:21:44	2014-01-10 12:21:44
1628	2	752	NO COMMENT	\N	2013-10-17 04:41:50	2013-10-17 04:41:50
1629	1	752	NO COMMENT	\N	2013-12-19 11:34:39	2013-12-19 11:34:39
1630	7	752	NO COMMENT	\N	2014-01-01 03:53:54	2014-01-01 03:53:54
1631	2	754	NO COMMENT	\N	2013-12-17 15:19:14	2013-12-17 15:19:14
1632	1	754	NO COMMENT	\N	2014-02-01 10:54:42	2014-02-01 10:54:42
1633	7	754	NO COMMENT	\N	2014-02-16 10:26:24	2014-02-16 10:26:24
1634	2	755	NO COMMENT	\N	2013-11-19 16:07:07	2013-11-19 16:07:07
1635	23	758	NO COMMENT	\N	2014-01-12 14:27:27	2014-01-12 14:27:27
1636	2	758	NO COMMENT	\N	2014-01-16 05:39:35	2014-01-16 05:39:35
1637	1	758	NO COMMENT	\N	2014-01-31 23:01:10	2014-01-31 23:01:10
1638	7	758	NO COMMENT	\N	2014-02-11 17:15:21	2014-02-11 17:15:21
1639	1	759	NO COMMENT	\N	2014-01-15 17:04:34	2014-01-15 17:04:34
1640	42	759	NO COMMENT	\N	2014-01-18 05:35:52	2014-01-18 05:35:52
1641	26	759	NO COMMENT	\N	2014-01-19 06:27:04	2014-01-19 06:27:04
1642	7	759	NO COMMENT	\N	2014-01-20 01:01:40	2014-01-20 01:01:40
1643	2	759	NO COMMENT	\N	2014-01-22 15:10:58	2014-01-22 15:10:58
1644	2	760	NO COMMENT	\N	2014-01-16 07:58:54	2014-01-16 07:58:54
1645	7	760	NO COMMENT	\N	2014-02-18 04:08:04	2014-02-18 04:08:04
1646	1	760	NO COMMENT	\N	2014-02-27 17:32:19	2014-02-27 17:32:19
1647	2	761	NO COMMENT	\N	2014-01-25 17:20:51	2014-01-25 17:20:51
1648	7	761	NO COMMENT	\N	2014-02-06 04:52:33	2014-02-06 04:52:33
1649	45	761	NO COMMENT	\N	2014-02-18 22:12:45	2014-02-18 22:12:45
1650	1	761	NO COMMENT	\N	2014-02-24 01:31:45	2014-02-24 01:31:45
1651	2	762	NO COMMENT	\N	2013-12-09 04:40:29	2013-12-09 04:40:29
1652	7	762	NO COMMENT	\N	2014-01-01 19:25:21	2014-01-01 19:25:21
1653	1	762	NO COMMENT	\N	2014-02-25 20:31:01	2014-02-25 20:31:01
1654	2	763	NO COMMENT	\N	2014-01-19 18:26:19	2014-01-19 18:26:19
1655	7	763	NO COMMENT	\N	2014-01-21 17:57:03	2014-01-21 17:57:03
1656	1	763	NO COMMENT	\N	2014-02-05 02:23:49	2014-02-05 02:23:49
1657	35	763	NO COMMENT	\N	2014-02-26 13:09:09	2014-02-26 13:09:09
1658	7	764	NO COMMENT	\N	2014-01-19 05:43:11	2014-01-19 05:43:11
1659	35	764	NO COMMENT	\N	2014-02-14 07:35:56	2014-02-14 07:35:56
1660	2	764	NO COMMENT	\N	2014-02-14 11:43:22	2014-02-14 11:43:22
1661	47	764	NO COMMENT	\N	2014-02-16 23:42:45	2014-02-16 23:42:45
1662	1	764	NO COMMENT	\N	2014-02-24 12:24:31	2014-02-24 12:24:31
1663	7	765	NO COMMENT	\N	2014-02-15 09:41:02	2014-02-15 09:41:02
1664	2	765	NO COMMENT	\N	2014-02-17 04:29:39	2014-02-17 04:29:39
1665	1	765	NO COMMENT	\N	2014-02-21 23:53:29	2014-02-21 23:53:29
1666	35	765	NO COMMENT	\N	2014-03-17 20:45:22	2014-03-17 20:45:22
1667	1	766	NO COMMENT	\N	2014-02-24 05:09:42	2014-02-24 05:09:42
1668	23	766	NO COMMENT	\N	2014-03-18 13:33:47	2014-03-18 13:33:47
1669	1	767	NO COMMENT	\N	2013-12-16 02:07:07	2013-12-16 02:07:07
1670	7	767	NO COMMENT	\N	2014-01-13 02:11:26	2014-01-13 02:11:26
1671	2	767	NO COMMENT	\N	2014-02-11 07:04:11	2014-02-11 07:04:11
1672	45	768	NO COMMENT	\N	2014-01-01 16:17:46	2014-01-01 16:17:46
1673	7	768	NO COMMENT	\N	2014-01-10 04:16:20	2014-01-10 04:16:20
1674	1	768	NO COMMENT	\N	2014-01-11 06:40:44	2014-01-11 06:40:44
1675	2	768	NO COMMENT	\N	2014-01-15 16:57:08	2014-01-15 16:57:08
1676	18	768	NO COMMENT	\N	2014-01-21 02:49:34	2014-01-21 02:49:34
1677	2	769	NO COMMENT	\N	2014-02-18 06:34:01	2014-02-18 06:34:01
1678	18	769	NO COMMENT	\N	2014-03-01 07:14:47	2014-03-01 07:14:47
1679	1	770	NO COMMENT	\N	2014-03-07 10:49:25	2014-03-07 10:49:25
1680	1	771	NO COMMENT	\N	2014-01-03 04:15:23	2014-01-03 04:15:23
1681	2	771	NO COMMENT	\N	2014-01-28 03:27:42	2014-01-28 03:27:42
1682	7	771	NO COMMENT	\N	2014-02-18 04:01:10	2014-02-18 04:01:10
1683	1	772	NO COMMENT	\N	2014-02-17 23:44:39	2014-02-17 23:44:39
1684	7	772	NO COMMENT	\N	2014-02-19 14:41:12	2014-02-19 14:41:12
1685	2	773	NO COMMENT	\N	2014-01-24 06:31:37	2014-01-24 06:31:37
1686	1	773	NO COMMENT	\N	2014-02-02 05:37:14	2014-02-02 05:37:14
1687	7	773	NO COMMENT	\N	2014-03-17 10:26:56	2014-03-17 10:26:56
1688	7	775	NO COMMENT	\N	2014-01-10 15:15:25	2014-01-10 15:15:25
1689	1	775	NO COMMENT	\N	2014-02-11 16:34:23	2014-02-11 16:34:23
1690	2	775	NO COMMENT	\N	2014-03-16 16:30:39	2014-03-16 16:30:39
1691	2	777	NO COMMENT	\N	2014-02-19 02:41:18	2014-02-19 02:41:18
1692	44	777	NO COMMENT	\N	2014-02-21 22:07:36	2014-02-21 22:07:36
1693	10	777	NO COMMENT	\N	2014-02-26 10:21:22	2014-02-26 10:21:22
1694	1	777	NO COMMENT	\N	2014-03-01 00:05:02	2014-03-01 00:05:02
1695	7	777	NO COMMENT	\N	2014-03-11 01:13:10	2014-03-11 01:13:10
1696	7	778	NO COMMENT	\N	2013-12-19 23:13:16	2013-12-19 23:13:16
1697	2	778	NO COMMENT	\N	2014-01-07 06:36:20	2014-01-07 06:36:20
1698	2	779	NO COMMENT	\N	2014-02-06 21:15:45	2014-02-06 21:15:45
1699	7	779	NO COMMENT	\N	2014-02-18 23:16:45	2014-02-18 23:16:45
1700	1	779	NO COMMENT	\N	2014-02-19 14:19:08	2014-02-19 14:19:08
1701	2	780	NO COMMENT	\N	2014-01-04 18:50:17	2014-01-04 18:50:17
1702	7	780	NO COMMENT	\N	2014-02-10 11:04:43	2014-02-10 11:04:43
1703	1	781	NO COMMENT	\N	2014-02-19 01:44:31	2014-02-19 01:44:31
1704	2	781	NO COMMENT	\N	2014-02-20 10:20:46	2014-02-20 10:20:46
1705	1	783	NO COMMENT	\N	2013-12-25 10:06:12	2013-12-25 10:06:12
1706	2	783	NO COMMENT	\N	2013-12-29 09:54:05	2013-12-29 09:54:05
1707	7	783	NO COMMENT	\N	2014-02-06 08:55:44	2014-02-06 08:55:44
1708	9	784	NO COMMENT	\N	2014-02-19 01:06:34	2014-02-19 01:06:34
1709	18	784	NO COMMENT	\N	2014-03-03 16:23:39	2014-03-03 16:23:39
1710	2	784	NO COMMENT	\N	2014-03-05 01:38:25	2014-03-05 01:38:25
1711	1	784	NO COMMENT	\N	2014-03-08 15:12:12	2014-03-08 15:12:12
1712	7	784	NO COMMENT	\N	2014-03-20 01:07:53	2014-03-20 01:07:53
1713	9	785	NO COMMENT	\N	2014-02-11 18:07:05	2014-02-11 18:07:05
1714	2	785	NO COMMENT	\N	2014-02-16 22:57:20	2014-02-16 22:57:20
1715	7	785	NO COMMENT	\N	2014-03-02 17:42:29	2014-03-02 17:42:29
1716	18	785	NO COMMENT	\N	2014-03-16 18:28:06	2014-03-16 18:28:06
1717	1	800	NO COMMENT	\N	2014-01-20 17:22:11	2014-01-20 17:22:11
1718	7	800	NO COMMENT	\N	2014-03-17 19:15:41	2014-03-17 19:15:41
1719	2	800	NO COMMENT	\N	2014-03-19 10:30:22	2014-03-19 10:30:22
1720	7	787	NO COMMENT	\N	2014-02-06 22:31:31	2014-02-06 22:31:31
1721	2	787	NO COMMENT	\N	2014-02-11 20:55:38	2014-02-11 20:55:38
1722	28	787	NO COMMENT	\N	2014-02-11 21:10:34	2014-02-11 21:10:34
1723	19	789	NO COMMENT	\N	2013-12-29 05:46:49	2013-12-29 05:46:49
1724	2	789	NO COMMENT	\N	2014-02-24 18:44:09	2014-02-24 18:44:09
1725	1	789	NO COMMENT	\N	2014-03-07 11:21:45	2014-03-07 11:21:45
1726	7	790	NO COMMENT	\N	2014-02-22 12:18:51	2014-02-22 12:18:51
1727	1	790	NO COMMENT	\N	2014-02-23 21:07:40	2014-02-23 21:07:40
1728	2	790	NO COMMENT	\N	2014-03-06 01:10:40	2014-03-06 01:10:40
1729	19	790	NO COMMENT	\N	2014-03-17 09:41:07	2014-03-17 09:41:07
1730	2	791	NO COMMENT	\N	2014-01-20 00:53:13	2014-01-20 00:53:13
1731	7	791	NO COMMENT	\N	2014-02-08 23:48:01	2014-02-08 23:48:01
1732	19	791	NO COMMENT	\N	2014-03-06 11:38:12	2014-03-06 11:38:12
1733	35	791	NO COMMENT	\N	2014-03-09 08:14:04	2014-03-09 08:14:04
1734	1	791	NO COMMENT	\N	2014-03-16 12:35:41	2014-03-16 12:35:41
1735	19	792	NO COMMENT	\N	2014-02-04 08:39:02	2014-02-04 08:39:02
1736	22	792	NO COMMENT	\N	2014-02-04 15:22:19	2014-02-04 15:22:19
1737	6	792	NO COMMENT	\N	2014-02-09 14:48:19	2014-02-09 14:48:19
1738	1	792	NO COMMENT	\N	2014-02-15 21:55:28	2014-02-15 21:55:28
1739	7	792	NO COMMENT	\N	2014-02-18 11:01:15	2014-02-18 11:01:15
1740	2	792	NO COMMENT	\N	2014-03-07 18:09:49	2014-03-07 18:09:49
1741	35	792	NO COMMENT	\N	2014-03-19 00:40:47	2014-03-19 00:40:47
1742	22	794	NO COMMENT	\N	2014-02-26 03:43:42	2014-02-26 03:43:42
1743	19	794	NO COMMENT	\N	2014-02-27 14:43:43	2014-02-27 14:43:43
1744	18	794	NO COMMENT	\N	2014-03-01 13:35:58	2014-03-01 13:35:58
1745	35	794	NO COMMENT	\N	2014-03-02 01:00:18	2014-03-02 01:00:18
1746	7	794	NO COMMENT	\N	2014-03-16 15:17:52	2014-03-16 15:17:52
1747	6	794	NO COMMENT	\N	2014-03-16 19:35:52	2014-03-16 19:35:52
1748	19	795	NO COMMENT	\N	2014-03-02 04:30:43	2014-03-02 04:30:43
1749	33	795	NO COMMENT	\N	2014-03-03 15:43:22	2014-03-03 15:43:22
1750	34	795	NO COMMENT	\N	2014-03-11 06:58:16	2014-03-11 06:58:16
1751	7	795	NO COMMENT	\N	2014-03-12 16:15:09	2014-03-12 16:15:09
1752	22	795	NO COMMENT	\N	2014-03-12 22:04:50	2014-03-12 22:04:50
1753	18	795	NO COMMENT	\N	2014-03-15 03:30:24	2014-03-15 03:30:24
1754	1	796	NO COMMENT	\N	2014-02-23 07:52:41	2014-02-23 07:52:41
1755	2	796	NO COMMENT	\N	2014-03-08 14:15:57	2014-03-08 14:15:57
1756	7	796	NO COMMENT	\N	2014-03-12 03:42:43	2014-03-12 03:42:43
1757	2	797	NO COMMENT	\N	2014-03-17 23:42:17	2014-03-17 23:42:17
1758	1	797	NO COMMENT	\N	2014-03-20 03:40:35	2014-03-20 03:40:35
1759	7	797	NO COMMENT	\N	2014-03-20 15:08:25	2014-03-20 15:08:25
1760	7	801	NO COMMENT	\N	2014-01-07 16:41:25	2014-01-07 16:41:25
1761	1	801	NO COMMENT	\N	2014-01-10 09:28:17	2014-01-10 09:28:17
1762	2	801	NO COMMENT	\N	2014-02-20 21:56:27	2014-02-20 21:56:27
1763	1	802	NO COMMENT	\N	2014-01-10 00:56:44	2014-01-10 00:56:44
1764	7	802	NO COMMENT	\N	2014-03-06 20:34:03	2014-03-06 20:34:03
1765	1	803	NO COMMENT	\N	2014-01-02 01:10:30	2014-01-02 01:10:30
1766	2	803	NO COMMENT	\N	2014-02-23 12:31:36	2014-02-23 12:31:36
1767	7	803	NO COMMENT	\N	2014-03-19 01:08:59	2014-03-19 01:08:59
1768	2	805	NO COMMENT	\N	2014-02-21 01:40:35	2014-02-21 01:40:35
1769	35	808	NO COMMENT	\N	2014-01-31 23:47:06	2014-01-31 23:47:06
1770	2	808	NO COMMENT	\N	2014-02-24 17:38:50	2014-02-24 17:38:50
1771	1	808	NO COMMENT	\N	2014-03-06 19:32:48	2014-03-06 19:32:48
1772	18	808	NO COMMENT	\N	2014-03-14 00:34:20	2014-03-14 00:34:20
1773	7	808	NO COMMENT	\N	2014-03-20 00:57:09	2014-03-20 00:57:09
1774	35	809	NO COMMENT	\N	2014-01-29 09:05:00	2014-01-29 09:05:00
1775	18	809	NO COMMENT	\N	2014-01-29 19:18:36	2014-01-29 19:18:36
1776	2	809	NO COMMENT	\N	2014-02-28 16:58:30	2014-02-28 16:58:30
1777	1	809	NO COMMENT	\N	2014-03-09 10:54:31	2014-03-09 10:54:31
1778	2	810	NO COMMENT	\N	2014-02-18 06:17:19	2014-02-18 06:17:19
1779	1	810	NO COMMENT	\N	2014-03-02 11:32:06	2014-03-02 11:32:06
1780	35	810	NO COMMENT	\N	2014-03-12 19:25:26	2014-03-12 19:25:26
1781	7	810	NO COMMENT	\N	2014-03-15 17:24:57	2014-03-15 17:24:57
1782	18	810	NO COMMENT	\N	2014-03-17 00:01:48	2014-03-17 00:01:48
1783	1	811	NO COMMENT	\N	2014-03-14 19:55:17	2014-03-14 19:55:17
1784	7	811	NO COMMENT	\N	2014-03-17 15:00:34	2014-03-17 15:00:34
1785	1	813	NO COMMENT	\N	2013-12-28 04:10:41	2013-12-28 04:10:41
1786	7	813	NO COMMENT	\N	2014-02-26 14:13:58	2014-02-26 14:13:58
1787	1	814	NO COMMENT	\N	2013-12-04 05:36:04	2013-12-04 05:36:04
1788	7	814	NO COMMENT	\N	2013-12-06 15:07:00	2013-12-06 15:07:00
1789	2	814	NO COMMENT	\N	2014-02-22 12:33:44	2014-02-22 12:33:44
1790	2	815	NO COMMENT	\N	2014-02-15 03:12:31	2014-02-15 03:12:31
1791	7	815	NO COMMENT	\N	2014-02-20 12:54:25	2014-02-20 12:54:25
1792	1	815	NO COMMENT	\N	2014-03-05 07:58:29	2014-03-05 07:58:29
1793	32	815	NO COMMENT	\N	2014-03-10 10:12:08	2014-03-10 10:12:08
1794	13	815	NO COMMENT	\N	2014-03-17 05:17:45	2014-03-17 05:17:45
1795	2	826	NO COMMENT	\N	2014-03-02 04:30:16	2014-03-02 04:30:16
1796	31	826	NO COMMENT	\N	2014-03-02 16:10:15	2014-03-02 16:10:15
1797	33	826	NO COMMENT	\N	2014-03-04 15:28:11	2014-03-04 15:28:11
1798	48	826	NO COMMENT	\N	2014-03-08 13:19:40	2014-03-08 13:19:40
1799	1	826	NO COMMENT	\N	2014-03-11 14:58:16	2014-03-11 14:58:16
1800	34	826	NO COMMENT	\N	2014-03-15 13:21:43	2014-03-15 13:21:43
1801	14	826	NO COMMENT	\N	2014-03-15 22:25:30	2014-03-15 22:25:30
1802	17	826	NO COMMENT	\N	2014-03-16 01:00:48	2014-03-16 01:00:48
1803	26	826	NO COMMENT	\N	2014-03-18 20:24:57	2014-03-18 20:24:57
1804	7	974	NO COMMENT	\N	2013-09-23 10:39:38	2013-09-23 10:39:38
1805	1	974	NO COMMENT	\N	2014-03-09 21:14:07	2014-03-09 21:14:07
1806	2	974	NO COMMENT	\N	2014-03-16 16:47:38	2014-03-16 16:47:38
1807	1	816	NO COMMENT	\N	2014-02-21 11:25:26	2014-02-21 11:25:26
1808	7	816	NO COMMENT	\N	2014-02-24 01:08:02	2014-02-24 01:08:02
1809	2	816	NO COMMENT	\N	2014-03-03 18:04:48	2014-03-03 18:04:48
1810	7	817	NO COMMENT	\N	2014-02-05 01:13:40	2014-02-05 01:13:40
1811	2	817	NO COMMENT	\N	2014-02-11 17:15:08	2014-02-11 17:15:08
1812	1	817	NO COMMENT	\N	2014-03-13 01:38:24	2014-03-13 01:38:24
1813	2	818	NO COMMENT	\N	2014-01-04 07:57:10	2014-01-04 07:57:10
1814	7	818	NO COMMENT	\N	2014-01-30 05:26:34	2014-01-30 05:26:34
1815	1	818	NO COMMENT	\N	2014-02-01 18:48:34	2014-02-01 18:48:34
1816	2	819	NO COMMENT	\N	2013-12-30 17:22:02	2013-12-30 17:22:02
1817	7	819	NO COMMENT	\N	2014-02-04 15:15:50	2014-02-04 15:15:50
1818	1	819	NO COMMENT	\N	2014-02-05 11:57:40	2014-02-05 11:57:40
1819	19	819	NO COMMENT	\N	2014-03-15 04:05:18	2014-03-15 04:05:18
1820	1	820	NO COMMENT	\N	2014-02-05 20:06:47	2014-02-05 20:06:47
1821	7	820	NO COMMENT	\N	2014-02-07 07:05:07	2014-02-07 07:05:07
1822	2	820	NO COMMENT	\N	2014-02-18 19:16:34	2014-02-18 19:16:34
1823	1	821	NO COMMENT	\N	2014-02-18 10:27:23	2014-02-18 10:27:23
1824	47	821	NO COMMENT	\N	2014-02-20 19:14:26	2014-02-20 19:14:26
1825	2	822	NO COMMENT	\N	2013-12-29 10:55:55	2013-12-29 10:55:55
1826	7	822	NO COMMENT	\N	2014-01-31 03:14:08	2014-01-31 03:14:08
1827	1	822	NO COMMENT	\N	2014-02-11 05:03:52	2014-02-11 05:03:52
1828	42	822	NO COMMENT	\N	2014-03-10 10:49:34	2014-03-10 10:49:34
1829	7	823	NO COMMENT	\N	2014-01-13 23:21:18	2014-01-13 23:21:18
1830	2	823	NO COMMENT	\N	2014-02-12 17:30:39	2014-02-12 17:30:39
1831	1	823	NO COMMENT	\N	2014-03-03 10:24:40	2014-03-03 10:24:40
1832	7	824	NO COMMENT	\N	2014-02-02 05:07:11	2014-02-02 05:07:11
1833	2	824	NO COMMENT	\N	2014-02-04 15:50:52	2014-02-04 15:50:52
1834	45	824	NO COMMENT	\N	2014-02-06 08:30:13	2014-02-06 08:30:13
1835	14	824	NO COMMENT	\N	2014-03-04 05:34:31	2014-03-04 05:34:31
1836	6	824	NO COMMENT	\N	2014-03-07 22:28:16	2014-03-07 22:28:16
1837	1	824	NO COMMENT	\N	2014-03-08 01:56:47	2014-03-08 01:56:47
1838	1	828	NO COMMENT	\N	2014-02-16 11:04:50	2014-02-16 11:04:50
1839	9	828	NO COMMENT	\N	2014-03-05 08:40:55	2014-03-05 08:40:55
1840	18	829	NO COMMENT	\N	2014-03-07 17:02:09	2014-03-07 17:02:09
1841	21	829	NO COMMENT	\N	2014-03-11 22:31:24	2014-03-11 22:31:24
1842	30	829	NO COMMENT	\N	2014-03-12 17:52:04	2014-03-12 17:52:04
1843	9	829	NO COMMENT	\N	2014-03-13 19:36:35	2014-03-13 19:36:35
1844	29	829	NO COMMENT	\N	2014-03-15 17:54:34	2014-03-15 17:54:34
1845	1	829	NO COMMENT	\N	2014-03-15 20:46:33	2014-03-15 20:46:33
1846	7	829	NO COMMENT	\N	2014-03-18 06:16:47	2014-03-18 06:16:47
1847	15	829	NO COMMENT	\N	2014-03-18 12:00:30	2014-03-18 12:00:30
1848	2	829	NO COMMENT	\N	2014-03-19 01:32:47	2014-03-19 01:32:47
1849	11	829	NO COMMENT	\N	2014-03-19 09:55:22	2014-03-19 09:55:22
1850	7	830	NO COMMENT	\N	2014-02-02 21:15:39	2014-02-02 21:15:39
1851	1	830	NO COMMENT	\N	2014-02-09 23:46:55	2014-02-09 23:46:55
1852	2	830	NO COMMENT	\N	2014-03-19 07:19:03	2014-03-19 07:19:03
1853	15	831	NO COMMENT	\N	2014-01-10 11:47:25	2014-01-10 11:47:25
1854	2	831	NO COMMENT	\N	2014-02-23 07:01:48	2014-02-23 07:01:48
1855	7	831	NO COMMENT	\N	2014-03-09 01:24:04	2014-03-09 01:24:04
1856	1	831	NO COMMENT	\N	2014-03-11 06:35:21	2014-03-11 06:35:21
1857	15	832	NO COMMENT	\N	2014-01-26 22:43:38	2014-01-26 22:43:38
1858	7	832	NO COMMENT	\N	2014-01-27 02:18:19	2014-01-27 02:18:19
1859	1	832	NO COMMENT	\N	2014-03-11 18:04:08	2014-03-11 18:04:08
1860	1	833	NO COMMENT	\N	2014-01-10 02:03:02	2014-01-10 02:03:02
1861	7	833	NO COMMENT	\N	2014-02-01 09:13:59	2014-02-01 09:13:59
1862	2	833	NO COMMENT	\N	2014-03-15 00:46:15	2014-03-15 00:46:15
1863	1	834	NO COMMENT	\N	2013-12-25 02:47:13	2013-12-25 02:47:13
1864	2	834	NO COMMENT	\N	2013-12-29 15:29:26	2013-12-29 15:29:26
1865	7	834	NO COMMENT	\N	2014-01-06 15:43:17	2014-01-06 15:43:17
1866	2	836	NO COMMENT	\N	2014-02-17 23:36:16	2014-02-17 23:36:16
1867	2	837	NO COMMENT	\N	2013-12-21 00:27:59	2013-12-21 00:27:59
1868	1	837	NO COMMENT	\N	2014-02-27 10:24:28	2014-02-27 10:24:28
1869	7	837	NO COMMENT	\N	2014-03-13 13:27:30	2014-03-13 13:27:30
1870	1	838	NO COMMENT	\N	2013-12-05 02:15:58	2013-12-05 02:15:58
1871	2	838	NO COMMENT	\N	2014-01-13 13:59:03	2014-01-13 13:59:03
1872	7	838	NO COMMENT	\N	2014-01-17 17:20:29	2014-01-17 17:20:29
1873	7	839	NO COMMENT	\N	2014-02-10 20:27:38	2014-02-10 20:27:38
1874	2	839	NO COMMENT	\N	2014-02-11 05:54:12	2014-02-11 05:54:12
1875	1	839	NO COMMENT	\N	2014-03-18 16:53:47	2014-03-18 16:53:47
1876	7	840	NO COMMENT	\N	2014-01-13 05:06:29	2014-01-13 05:06:29
1877	2	840	NO COMMENT	\N	2014-02-18 00:22:48	2014-02-18 00:22:48
1878	1	840	NO COMMENT	\N	2014-02-21 15:23:35	2014-02-21 15:23:35
1879	1	843	NO COMMENT	\N	2013-11-22 21:58:47	2013-11-22 21:58:47
1880	1	844	NO COMMENT	\N	2014-02-15 01:14:10	2014-02-15 01:14:10
1881	42	844	NO COMMENT	\N	2014-02-21 10:51:05	2014-02-21 10:51:05
1882	7	844	NO COMMENT	\N	2014-03-02 14:08:10	2014-03-02 14:08:10
1883	2	844	NO COMMENT	\N	2014-03-11 00:58:40	2014-03-11 00:58:40
1884	14	844	NO COMMENT	\N	2014-03-13 07:57:13	2014-03-13 07:57:13
1885	1	845	NO COMMENT	\N	2013-11-11 17:22:24	2013-11-11 17:22:24
1886	2	845	NO COMMENT	\N	2013-12-17 19:01:01	2013-12-17 19:01:01
1887	7	845	NO COMMENT	\N	2014-02-17 04:23:48	2014-02-17 04:23:48
1888	7	846	NO COMMENT	\N	2014-01-11 14:57:50	2014-01-11 14:57:50
1889	1	847	NO COMMENT	\N	2013-12-05 19:15:26	2013-12-05 19:15:26
1890	2	847	NO COMMENT	\N	2013-12-16 14:49:17	2013-12-16 14:49:17
1891	7	847	NO COMMENT	\N	2014-03-13 06:58:02	2014-03-13 06:58:02
1892	7	848	NO COMMENT	\N	2014-01-27 04:39:44	2014-01-27 04:39:44
1893	2	848	NO COMMENT	\N	2014-02-18 05:32:40	2014-02-18 05:32:40
1894	1	848	NO COMMENT	\N	2014-03-17 11:14:02	2014-03-17 11:14:02
1895	7	849	NO COMMENT	\N	2014-01-28 23:11:43	2014-01-28 23:11:43
1896	19	849	NO COMMENT	\N	2014-02-09 08:30:15	2014-02-09 08:30:15
1897	1	849	NO COMMENT	\N	2014-02-10 08:21:48	2014-02-10 08:21:48
1898	2	849	NO COMMENT	\N	2014-02-12 07:07:54	2014-02-12 07:07:54
1899	2	850	NO COMMENT	\N	2013-12-28 19:18:41	2013-12-28 19:18:41
1900	1	850	NO COMMENT	\N	2014-01-13 18:29:15	2014-01-13 18:29:15
1901	19	850	NO COMMENT	\N	2014-02-22 16:07:56	2014-02-22 16:07:56
1902	7	850	NO COMMENT	\N	2014-03-11 15:49:20	2014-03-11 15:49:20
1903	2	851	NO COMMENT	\N	2013-12-20 00:49:10	2013-12-20 00:49:10
1904	7	851	NO COMMENT	\N	2014-01-14 19:09:43	2014-01-14 19:09:43
1905	1	851	NO COMMENT	\N	2014-01-26 18:01:56	2014-01-26 18:01:56
1906	19	851	NO COMMENT	\N	2014-02-28 04:49:31	2014-02-28 04:49:31
1907	1	852	NO COMMENT	\N	2014-02-03 18:59:54	2014-02-03 18:59:54
1908	2	852	NO COMMENT	\N	2014-02-09 19:06:10	2014-02-09 19:06:10
1909	35	852	NO COMMENT	\N	2014-02-12 13:36:52	2014-02-12 13:36:52
1910	6	852	NO COMMENT	\N	2014-02-14 20:22:39	2014-02-14 20:22:39
1911	7	852	NO COMMENT	\N	2014-03-09 22:44:21	2014-03-09 22:44:21
1912	19	852	NO COMMENT	\N	2014-03-11 18:22:12	2014-03-11 18:22:12
1913	44	868	NO COMMENT	\N	2014-03-08 11:37:53	2014-03-08 11:37:53
1914	27	868	NO COMMENT	\N	2014-03-12 10:40:58	2014-03-12 10:40:58
1915	1	868	NO COMMENT	\N	2014-03-12 18:45:22	2014-03-12 18:45:22
1916	5	868	NO COMMENT	\N	2014-03-14 06:14:13	2014-03-14 06:14:13
1917	2	868	NO COMMENT	\N	2014-03-15 23:25:47	2014-03-15 23:25:47
1918	26	868	NO COMMENT	\N	2014-03-17 10:41:43	2014-03-17 10:41:43
1919	10	868	NO COMMENT	\N	2014-03-19 02:51:32	2014-03-19 02:51:32
1920	28	868	NO COMMENT	\N	2014-03-20 05:11:21	2014-03-20 05:11:21
1921	2	854	NO COMMENT	\N	2014-03-14 05:44:34	2014-03-14 05:44:34
1922	15	854	NO COMMENT	\N	2014-03-17 14:23:15	2014-03-17 14:23:15
1923	10	854	NO COMMENT	\N	2014-03-19 13:01:56	2014-03-19 13:01:56
1924	2	855	NO COMMENT	\N	2014-01-13 06:09:06	2014-01-13 06:09:06
1925	7	855	NO COMMENT	\N	2014-02-02 20:11:09	2014-02-02 20:11:09
1926	2	856	NO COMMENT	\N	2013-12-17 22:09:28	2013-12-17 22:09:28
1927	1	856	NO COMMENT	\N	2013-12-25 18:50:34	2013-12-25 18:50:34
1928	7	856	NO COMMENT	\N	2013-12-26 10:45:28	2013-12-26 10:45:28
1929	1	857	NO COMMENT	\N	2014-01-17 12:42:34	2014-01-17 12:42:34
1930	7	857	NO COMMENT	\N	2014-02-22 19:56:25	2014-02-22 19:56:25
1931	2	857	NO COMMENT	\N	2014-03-05 08:19:28	2014-03-05 08:19:28
1932	2	859	NO COMMENT	\N	2014-02-09 04:14:55	2014-02-09 04:14:55
1933	1	859	NO COMMENT	\N	2014-03-04 12:05:06	2014-03-04 12:05:06
1934	7	860	NO COMMENT	\N	2014-03-03 23:03:43	2014-03-03 23:03:43
1935	7	861	NO COMMENT	\N	2013-12-13 19:33:42	2013-12-13 19:33:42
1936	2	861	NO COMMENT	\N	2014-02-22 11:54:17	2014-02-22 11:54:17
1937	1	861	NO COMMENT	\N	2014-03-13 05:58:50	2014-03-13 05:58:50
1938	44	862	NO COMMENT	\N	2014-01-25 17:02:39	2014-01-25 17:02:39
1939	2	862	NO COMMENT	\N	2014-01-28 14:12:03	2014-01-28 14:12:03
1940	7	862	NO COMMENT	\N	2014-01-30 11:19:03	2014-01-30 11:19:03
1941	1	862	NO COMMENT	\N	2014-02-25 18:22:39	2014-02-25 18:22:39
1942	1	863	NO COMMENT	\N	2014-02-23 23:38:52	2014-02-23 23:38:52
1943	2	863	NO COMMENT	\N	2014-03-07 14:15:13	2014-03-07 14:15:13
1944	7	863	NO COMMENT	\N	2014-03-13 22:05:29	2014-03-13 22:05:29
1945	44	863	NO COMMENT	\N	2014-03-16 01:36:05	2014-03-16 01:36:05
1946	9	863	NO COMMENT	\N	2014-03-17 09:02:53	2014-03-17 09:02:53
1947	10	863	NO COMMENT	\N	2014-03-19 15:59:09	2014-03-19 15:59:09
1948	7	864	NO COMMENT	\N	2014-03-04 14:20:51	2014-03-04 14:20:51
1949	26	864	NO COMMENT	\N	2014-03-11 02:25:29	2014-03-11 02:25:29
1950	2	864	NO COMMENT	\N	2014-03-14 17:28:16	2014-03-14 17:28:16
1951	7	866	NO COMMENT	\N	2013-12-31 13:10:40	2013-12-31 13:10:40
1952	1	866	NO COMMENT	\N	2014-01-10 08:40:06	2014-01-10 08:40:06
1953	2	866	NO COMMENT	\N	2014-01-21 20:09:10	2014-01-21 20:09:10
1954	22	866	NO COMMENT	\N	2014-02-07 11:34:34	2014-02-07 11:34:34
1955	28	866	NO COMMENT	\N	2014-03-06 05:48:56	2014-03-06 05:48:56
1956	7	867	NO COMMENT	\N	2014-01-25 04:59:52	2014-01-25 04:59:52
1957	2	867	NO COMMENT	\N	2014-02-12 13:07:44	2014-02-12 13:07:44
1958	1	867	NO COMMENT	\N	2014-03-07 18:14:11	2014-03-07 18:14:11
1959	6	867	NO COMMENT	\N	2014-03-11 09:58:17	2014-03-11 09:58:17
1960	2	975	NO COMMENT	\N	2013-09-08 11:39:36	2013-09-08 11:39:36
1961	7	975	NO COMMENT	\N	2013-11-26 09:38:13	2013-11-26 09:38:13
1962	1	975	NO COMMENT	\N	2014-02-22 21:39:03	2014-02-22 21:39:03
1963	1	870	NO COMMENT	\N	2013-09-22 09:30:19	2013-09-22 09:30:19
1964	7	870	NO COMMENT	\N	2014-01-08 01:01:47	2014-01-08 01:01:47
1965	1	871	NO COMMENT	\N	2014-01-03 11:12:52	2014-01-03 11:12:52
1966	7	871	NO COMMENT	\N	2014-02-25 18:30:50	2014-02-25 18:30:50
1967	28	871	NO COMMENT	\N	2014-03-08 13:10:38	2014-03-08 13:10:38
1968	2	872	NO COMMENT	\N	2013-11-13 15:34:07	2013-11-13 15:34:07
1969	7	872	NO COMMENT	\N	2014-01-13 15:16:03	2014-01-13 15:16:03
1970	1	872	NO COMMENT	\N	2014-03-04 15:55:51	2014-03-04 15:55:51
1971	1	873	NO COMMENT	\N	2014-02-03 10:59:14	2014-02-03 10:59:14
1972	7	873	NO COMMENT	\N	2014-03-05 06:44:27	2014-03-05 06:44:27
1973	2	873	NO COMMENT	\N	2014-03-13 21:14:24	2014-03-13 21:14:24
1974	18	874	NO COMMENT	\N	2013-10-25 05:08:09	2013-10-25 05:08:09
1975	2	874	NO COMMENT	\N	2013-11-19 13:31:30	2013-11-19 13:31:30
1976	7	874	NO COMMENT	\N	2013-11-21 18:20:23	2013-11-21 18:20:23
1977	1	874	NO COMMENT	\N	2014-01-03 23:39:35	2014-01-03 23:39:35
1978	13	875	NO COMMENT	\N	2014-02-07 10:54:51	2014-02-07 10:54:51
1979	32	875	NO COMMENT	\N	2014-02-10 14:15:50	2014-02-10 14:15:50
1980	7	875	NO COMMENT	\N	2014-02-25 22:16:08	2014-02-25 22:16:08
1981	1	875	NO COMMENT	\N	2014-03-04 20:46:42	2014-03-04 20:46:42
1982	2	875	NO COMMENT	\N	2014-03-19 20:30:30	2014-03-19 20:30:30
1983	7	877	NO COMMENT	\N	2014-02-01 19:39:53	2014-02-01 19:39:53
1984	1	877	NO COMMENT	\N	2014-02-01 21:59:59	2014-02-01 21:59:59
1985	2	877	NO COMMENT	\N	2014-03-06 20:20:56	2014-03-06 20:20:56
1986	19	878	NO COMMENT	\N	2014-02-26 10:46:55	2014-02-26 10:46:55
1987	7	878	NO COMMENT	\N	2014-02-27 04:01:15	2014-02-27 04:01:15
1988	1	879	NO COMMENT	\N	2014-01-15 04:15:07	2014-01-15 04:15:07
1989	7	879	NO COMMENT	\N	2014-02-17 04:05:14	2014-02-17 04:05:14
1990	19	879	NO COMMENT	\N	2014-03-17 02:42:27	2014-03-17 02:42:27
1991	2	879	NO COMMENT	\N	2014-03-19 07:44:04	2014-03-19 07:44:04
1992	7	880	NO COMMENT	\N	2013-11-02 01:09:59	2013-11-02 01:09:59
1993	2	880	NO COMMENT	\N	2013-11-08 20:57:51	2013-11-08 20:57:51
1994	1	880	NO COMMENT	\N	2014-02-26 19:29:37	2014-02-26 19:29:37
1995	2	986	NO COMMENT	\N	2013-09-15 20:05:55	2013-09-15 20:05:55
1996	7	986	NO COMMENT	\N	2013-11-22 09:38:26	2013-11-22 09:38:26
1997	1	986	NO COMMENT	\N	2013-12-10 02:19:09	2013-12-10 02:19:09
1998	7	881	NO COMMENT	\N	2013-08-28 16:35:53	2013-08-28 16:35:53
1999	2	881	NO COMMENT	\N	2014-01-11 17:21:47	2014-01-11 17:21:47
2000	7	882	NO COMMENT	\N	2013-10-15 07:46:07	2013-10-15 07:46:07
2001	2	882	NO COMMENT	\N	2014-02-03 09:31:10	2014-02-03 09:31:10
2002	7	883	NO COMMENT	\N	2014-02-04 02:48:15	2014-02-04 02:48:15
2003	2	883	NO COMMENT	\N	2014-03-11 02:24:31	2014-03-11 02:24:31
2004	1	883	NO COMMENT	\N	2014-03-20 12:23:05	2014-03-20 12:23:05
2005	1	885	NO COMMENT	\N	2013-12-10 09:33:51	2013-12-10 09:33:51
2006	2	885	NO COMMENT	\N	2014-01-15 19:14:20	2014-01-15 19:14:20
2007	7	885	NO COMMENT	\N	2014-03-01 22:01:27	2014-03-01 22:01:27
2008	2	887	NO COMMENT	\N	2014-02-05 22:12:44	2014-02-05 22:12:44
2009	44	887	NO COMMENT	\N	2014-02-13 22:07:23	2014-02-13 22:07:23
2010	1	887	NO COMMENT	\N	2014-03-14 16:09:14	2014-03-14 16:09:14
2011	7	887	NO COMMENT	\N	2014-03-17 15:56:01	2014-03-17 15:56:01
2012	2	888	NO COMMENT	\N	2013-11-25 00:51:27	2013-11-25 00:51:27
2013	42	888	NO COMMENT	\N	2014-01-22 19:51:50	2014-01-22 19:51:50
2014	1	888	NO COMMENT	\N	2014-02-08 11:55:09	2014-02-08 11:55:09
2015	7	888	NO COMMENT	\N	2014-03-12 03:01:51	2014-03-12 03:01:51
2016	1	890	NO COMMENT	\N	2013-12-07 08:41:04	2013-12-07 08:41:04
2017	2	890	NO COMMENT	\N	2014-01-11 21:23:56	2014-01-11 21:23:56
2018	42	890	NO COMMENT	\N	2014-02-20 00:51:24	2014-02-20 00:51:24
2019	7	890	NO COMMENT	\N	2014-03-02 20:43:48	2014-03-02 20:43:48
2020	7	891	NO COMMENT	\N	2013-09-10 10:19:50	2013-09-10 10:19:50
2021	1	891	NO COMMENT	\N	2013-10-14 02:58:00	2013-10-14 02:58:00
2022	2	891	NO COMMENT	\N	2013-11-13 17:28:28	2013-11-13 17:28:28
2023	2	892	NO COMMENT	\N	2014-01-11 06:17:04	2014-01-11 06:17:04
2024	1	892	NO COMMENT	\N	2014-02-22 18:03:17	2014-02-22 18:03:17
2025	7	892	NO COMMENT	\N	2014-03-20 02:24:33	2014-03-20 02:24:33
2026	7	893	NO COMMENT	\N	2014-02-23 11:34:53	2014-02-23 11:34:53
2027	28	893	NO COMMENT	\N	2014-03-10 17:03:50	2014-03-10 17:03:50
2028	2	893	NO COMMENT	\N	2014-03-18 19:20:46	2014-03-18 19:20:46
2029	1	893	NO COMMENT	\N	2014-03-20 03:55:25	2014-03-20 03:55:25
2030	1	894	NO COMMENT	\N	2013-12-15 14:54:14	2013-12-15 14:54:14
2031	7	894	NO COMMENT	\N	2013-12-31 08:26:02	2013-12-31 08:26:02
2032	2	894	NO COMMENT	\N	2014-01-25 13:01:58	2014-01-25 13:01:58
2033	7	896	NO COMMENT	\N	2013-11-15 14:31:04	2013-11-15 14:31:04
2034	7	897	NO COMMENT	\N	2013-09-02 14:23:03	2013-09-02 14:23:03
2035	7	898	NO COMMENT	\N	2014-01-17 10:52:27	2014-01-17 10:52:27
2036	7	927	NO COMMENT	\N	2013-12-31 14:06:29	2013-12-31 14:06:29
2037	7	899	NO COMMENT	\N	2014-02-02 01:21:55	2014-02-02 01:21:55
2038	7	901	NO COMMENT	\N	2013-09-30 10:54:40	2013-09-30 10:54:40
2039	28	901	NO COMMENT	\N	2014-01-05 20:23:04	2014-01-05 20:23:04
2040	28	902	NO COMMENT	\N	2013-11-28 18:32:46	2013-11-28 18:32:46
2041	7	902	NO COMMENT	\N	2014-02-15 04:30:30	2014-02-15 04:30:30
2042	28	903	NO COMMENT	\N	2014-02-02 02:14:43	2014-02-02 02:14:43
2043	12	903	NO COMMENT	\N	2014-02-08 05:40:10	2014-02-08 05:40:10
2044	48	903	NO COMMENT	\N	2014-02-21 13:03:54	2014-02-21 13:03:54
2045	7	903	NO COMMENT	\N	2014-03-18 23:56:00	2014-03-18 23:56:00
2046	17	903	NO COMMENT	\N	2014-03-19 00:41:32	2014-03-19 00:41:32
2047	7	904	NO COMMENT	\N	2013-10-22 18:40:42	2013-10-22 18:40:42
2048	7	905	NO COMMENT	\N	2014-01-26 19:37:43	2014-01-26 19:37:43
2049	7	908	NO COMMENT	\N	2014-02-05 20:33:49	2014-02-05 20:33:49
2050	41	909	NO COMMENT	\N	2014-02-04 03:51:25	2014-02-04 03:51:25
2051	45	909	NO COMMENT	\N	2014-02-06 18:43:53	2014-02-06 18:43:53
2052	7	909	NO COMMENT	\N	2014-02-12 15:29:36	2014-02-12 15:29:36
2053	28	909	NO COMMENT	\N	2014-02-16 04:44:37	2014-02-16 04:44:37
2054	7	910	NO COMMENT	\N	2014-02-14 05:37:45	2014-02-14 05:37:45
2055	7	913	NO COMMENT	\N	2013-10-15 12:57:43	2013-10-15 12:57:43
2056	7	914	NO COMMENT	\N	2013-12-17 20:53:11	2013-12-17 20:53:11
2057	7	916	NO COMMENT	\N	2014-01-28 07:50:06	2014-01-28 07:50:06
2058	7	917	NO COMMENT	\N	2013-12-25 22:45:08	2013-12-25 22:45:08
2059	7	918	NO COMMENT	\N	2014-03-06 02:08:36	2014-03-06 02:08:36
2060	20	919	NO COMMENT	\N	2014-03-03 14:25:16	2014-03-03 14:25:16
2061	9	919	NO COMMENT	\N	2014-03-08 21:47:59	2014-03-08 21:47:59
2062	5	919	NO COMMENT	\N	2014-03-14 18:39:18	2014-03-14 18:39:18
2063	7	919	NO COMMENT	\N	2014-03-19 07:51:55	2014-03-19 07:51:55
2064	7	921	NO COMMENT	\N	2014-01-22 18:52:14	2014-01-22 18:52:14
2065	7	924	NO COMMENT	\N	2013-11-21 10:12:24	2013-11-21 10:12:24
2066	7	925	NO COMMENT	\N	2013-10-17 10:25:12	2013-10-17 10:25:12
2067	7	926	NO COMMENT	\N	2013-12-20 11:29:34	2013-12-20 11:29:34
2068	2	929	NO COMMENT	\N	2013-09-30 20:31:56	2013-09-30 20:31:56
2069	1	929	NO COMMENT	\N	2013-11-03 13:56:29	2013-11-03 13:56:29
2070	7	929	NO COMMENT	\N	2014-02-23 11:06:33	2014-02-23 11:06:33
2071	1	930	NO COMMENT	\N	2013-09-12 16:09:40	2013-09-12 16:09:40
2072	2	930	NO COMMENT	\N	2013-10-13 12:12:24	2013-10-13 12:12:24
2073	7	930	NO COMMENT	\N	2014-03-08 05:03:02	2014-03-08 05:03:02
2074	1	931	NO COMMENT	\N	2013-11-14 23:20:39	2013-11-14 23:20:39
2075	24	932	NO COMMENT	\N	2014-03-01 18:22:39	2014-03-01 18:22:39
2076	17	932	NO COMMENT	\N	2014-03-08 20:06:42	2014-03-08 20:06:42
2077	26	933	NO COMMENT	\N	2014-03-08 03:40:40	2014-03-08 03:40:40
2078	1	933	NO COMMENT	\N	2014-03-09 18:22:53	2014-03-09 18:22:53
2079	31	933	NO COMMENT	\N	2014-03-10 07:59:26	2014-03-10 07:59:26
2080	34	933	NO COMMENT	\N	2014-03-13 12:33:08	2014-03-13 12:33:08
2081	33	933	NO COMMENT	\N	2014-03-18 07:05:56	2014-03-18 07:05:56
2082	1	934	NO COMMENT	\N	2013-11-17 01:07:49	2013-11-17 01:07:49
2083	7	935	NO COMMENT	\N	2013-12-30 10:21:40	2013-12-30 10:21:40
2084	2	935	NO COMMENT	\N	2014-01-31 15:56:34	2014-01-31 15:56:34
2085	1	935	NO COMMENT	\N	2014-03-16 00:13:21	2014-03-16 00:13:21
2086	1	936	NO COMMENT	\N	2014-01-13 07:28:17	2014-01-13 07:28:17
2087	7	936	NO COMMENT	\N	2014-03-03 19:06:20	2014-03-03 19:06:20
2088	2	936	NO COMMENT	\N	2014-03-07 21:38:06	2014-03-07 21:38:06
2089	2	937	NO COMMENT	\N	2014-02-09 14:50:04	2014-02-09 14:50:04
2090	7	937	NO COMMENT	\N	2014-03-10 14:29:11	2014-03-10 14:29:11
2091	1	937	NO COMMENT	\N	2014-03-18 19:46:02	2014-03-18 19:46:02
2092	2	940	NO COMMENT	\N	2014-02-08 21:18:13	2014-02-08 21:18:13
2093	1	940	NO COMMENT	\N	2014-02-17 06:22:05	2014-02-17 06:22:05
2094	7	940	NO COMMENT	\N	2014-03-08 04:00:51	2014-03-08 04:00:51
2095	2	942	NO COMMENT	\N	2014-03-09 17:57:36	2014-03-09 17:57:36
2096	7	943	NO COMMENT	\N	2013-11-29 05:14:44	2013-11-29 05:14:44
2097	1	943	NO COMMENT	\N	2014-01-06 08:24:40	2014-01-06 08:24:40
2098	2	943	NO COMMENT	\N	2014-02-22 01:42:45	2014-02-22 01:42:45
2099	7	944	NO COMMENT	\N	2013-11-06 12:02:47	2013-11-06 12:02:47
2100	2	944	NO COMMENT	\N	2013-11-30 12:28:35	2013-11-30 12:28:35
2101	1	944	NO COMMENT	\N	2014-02-05 10:05:04	2014-02-05 10:05:04
2102	1	945	NO COMMENT	\N	2014-02-10 15:28:53	2014-02-10 15:28:53
2103	2	945	NO COMMENT	\N	2014-02-23 01:42:42	2014-02-23 01:42:42
2104	7	945	NO COMMENT	\N	2014-03-18 20:07:54	2014-03-18 20:07:54
2105	29	946	NO COMMENT	\N	2014-01-09 21:14:54	2014-01-09 21:14:54
2106	2	946	NO COMMENT	\N	2014-02-15 21:41:58	2014-02-15 21:41:58
2107	7	946	NO COMMENT	\N	2014-03-02 21:05:02	2014-03-02 21:05:02
2108	1	946	NO COMMENT	\N	2014-03-05 16:54:26	2014-03-05 16:54:26
2109	1	972	NO COMMENT	\N	2013-08-25 12:13:02	2013-08-25 12:13:02
2110	2	972	NO COMMENT	\N	2014-01-14 11:23:13	2014-01-14 11:23:13
2111	7	972	NO COMMENT	\N	2014-03-08 08:06:24	2014-03-08 08:06:24
2112	1	949	NO COMMENT	\N	2013-10-21 12:15:40	2013-10-21 12:15:40
2113	2	950	NO COMMENT	\N	2013-10-18 07:04:31	2013-10-18 07:04:31
2114	7	950	NO COMMENT	\N	2013-11-30 15:41:33	2013-11-30 15:41:33
2115	1	950	NO COMMENT	\N	2014-03-02 04:05:26	2014-03-02 04:05:26
2116	1	951	NO COMMENT	\N	2014-01-03 13:29:36	2014-01-03 13:29:36
2117	2	951	NO COMMENT	\N	2014-01-09 20:10:17	2014-01-09 20:10:17
2118	44	951	NO COMMENT	\N	2014-01-12 14:16:02	2014-01-12 14:16:02
2119	7	951	NO COMMENT	\N	2014-03-11 21:35:45	2014-03-11 21:35:45
2120	7	952	NO COMMENT	\N	2013-09-25 22:37:58	2013-09-25 22:37:58
2121	2	952	NO COMMENT	\N	2013-11-29 04:53:30	2013-11-29 04:53:30
2122	1	952	NO COMMENT	\N	2014-02-18 19:32:52	2014-02-18 19:32:52
2123	2	953	NO COMMENT	\N	2014-01-18 08:16:54	2014-01-18 08:16:54
2124	1	953	NO COMMENT	\N	2014-02-24 03:08:50	2014-02-24 03:08:50
2125	7	953	NO COMMENT	\N	2014-03-18 10:49:32	2014-03-18 10:49:32
2126	7	954	NO COMMENT	\N	2013-09-23 04:16:45	2013-09-23 04:16:45
2127	2	954	NO COMMENT	\N	2013-11-21 12:34:53	2013-11-21 12:34:53
2128	1	954	NO COMMENT	\N	2014-02-09 11:14:38	2014-02-09 11:14:38
2129	7	955	NO COMMENT	\N	2013-10-18 10:08:03	2013-10-18 10:08:03
2130	2	955	NO COMMENT	\N	2013-10-19 22:49:54	2013-10-19 22:49:54
2131	1	955	NO COMMENT	\N	2014-01-16 21:17:30	2014-01-16 21:17:30
2132	1	956	NO COMMENT	\N	2014-02-15 20:58:24	2014-02-15 20:58:24
2133	19	956	NO COMMENT	\N	2014-03-18 02:19:13	2014-03-18 02:19:13
2134	19	957	NO COMMENT	\N	2014-01-17 12:23:07	2014-01-17 12:23:07
2135	7	957	NO COMMENT	\N	2014-01-24 00:33:37	2014-01-24 00:33:37
2136	2	957	NO COMMENT	\N	2014-02-22 07:30:31	2014-02-22 07:30:31
2137	1	957	NO COMMENT	\N	2014-03-08 09:36:41	2014-03-08 09:36:41
2138	1	958	NO COMMENT	\N	2014-01-08 18:51:08	2014-01-08 18:51:08
2139	1	960	NO COMMENT	\N	2013-12-22 14:43:54	2013-12-22 14:43:54
2140	2	960	NO COMMENT	\N	2014-03-20 04:49:15	2014-03-20 04:49:15
2141	2	961	NO COMMENT	\N	2013-08-22 18:45:52	2013-08-22 18:45:52
2142	7	961	NO COMMENT	\N	2013-12-03 05:07:02	2013-12-03 05:07:02
2143	1	962	NO COMMENT	\N	2013-11-16 07:20:01	2013-11-16 07:20:01
2144	7	962	NO COMMENT	\N	2014-01-10 07:41:45	2014-01-10 07:41:45
2145	1	963	NO COMMENT	\N	2013-12-05 19:50:48	2013-12-05 19:50:48
2146	7	963	NO COMMENT	\N	2014-01-03 08:15:26	2014-01-03 08:15:26
2147	2	963	NO COMMENT	\N	2014-02-22 04:49:43	2014-02-22 04:49:43
2148	2	964	NO COMMENT	\N	2014-01-23 14:25:31	2014-01-23 14:25:31
2149	7	964	NO COMMENT	\N	2014-01-27 14:12:25	2014-01-27 14:12:25
2150	1	964	NO COMMENT	\N	2014-03-10 21:27:10	2014-03-10 21:27:10
2151	1	965	NO COMMENT	\N	2014-02-10 03:05:59	2014-02-10 03:05:59
2152	11	965	NO COMMENT	\N	2014-02-25 11:17:15	2014-02-25 11:17:15
2153	2	965	NO COMMENT	\N	2014-03-02 10:52:42	2014-03-02 10:52:42
2154	26	965	NO COMMENT	\N	2014-03-09 18:59:57	2014-03-09 18:59:57
2155	33	965	NO COMMENT	\N	2014-03-10 17:34:58	2014-03-10 17:34:58
2156	45	965	NO COMMENT	\N	2014-03-12 13:18:07	2014-03-12 13:18:07
2157	7	965	NO COMMENT	\N	2014-03-16 11:21:11	2014-03-16 11:21:11
2158	2	966	NO COMMENT	\N	2013-09-11 13:50:12	2013-09-11 13:50:12
2159	1	966	NO COMMENT	\N	2013-10-03 11:09:55	2013-10-03 11:09:55
2160	7	966	NO COMMENT	\N	2014-02-28 05:07:34	2014-02-28 05:07:34
2161	2	967	NO COMMENT	\N	2014-01-31 12:17:47	2014-01-31 12:17:47
2162	7	970	NO COMMENT	\N	2014-01-03 14:49:19	2014-01-03 14:49:19
2163	2	970	NO COMMENT	\N	2014-03-08 17:16:06	2014-03-08 17:16:06
2164	1	970	NO COMMENT	\N	2014-03-14 22:05:48	2014-03-14 22:05:48
2165	2	971	NO COMMENT	\N	2013-10-22 17:36:35	2013-10-22 17:36:35
2166	1	971	NO COMMENT	\N	2013-11-30 20:05:43	2013-11-30 20:05:43
2167	7	971	NO COMMENT	\N	2014-03-11 13:34:04	2014-03-11 13:34:04
2168	42	1469	NO COMMENT	\N	2014-03-11 11:17:03	2014-03-11 11:17:03
2169	2	1469	NO COMMENT	\N	2014-03-12 01:15:03	2014-03-12 01:15:03
2170	33	1469	NO COMMENT	\N	2014-03-16 12:07:46	2014-03-16 12:07:46
2171	22	1469	NO COMMENT	\N	2014-03-17 02:20:42	2014-03-17 02:20:42
2172	2	976	NO COMMENT	\N	2013-11-13 23:09:41	2013-11-13 23:09:41
2173	1	977	NO COMMENT	\N	2013-10-01 05:47:06	2013-10-01 05:47:06
2174	7	978	NO COMMENT	\N	2013-12-30 21:26:46	2013-12-30 21:26:46
2175	2	978	NO COMMENT	\N	2014-01-27 11:35:53	2014-01-27 11:35:53
2176	1	978	NO COMMENT	\N	2014-03-09 20:31:32	2014-03-09 20:31:32
2177	7	979	NO COMMENT	\N	2014-01-16 04:43:12	2014-01-16 04:43:12
2178	1	979	NO COMMENT	\N	2014-02-13 17:18:00	2014-02-13 17:18:00
2179	2	979	NO COMMENT	\N	2014-02-24 06:22:00	2014-02-24 06:22:00
2180	2	980	NO COMMENT	\N	2014-01-27 20:27:46	2014-01-27 20:27:46
2181	2	981	NO COMMENT	\N	2013-10-05 23:27:57	2013-10-05 23:27:57
2182	1	981	NO COMMENT	\N	2013-12-14 16:41:36	2013-12-14 16:41:36
2183	7	981	NO COMMENT	\N	2014-03-17 20:54:05	2014-03-17 20:54:05
2184	2	982	NO COMMENT	\N	2013-10-24 14:45:12	2013-10-24 14:45:12
2185	7	982	NO COMMENT	\N	2014-03-03 21:07:19	2014-03-03 21:07:19
2186	1	982	NO COMMENT	\N	2014-03-04 17:35:14	2014-03-04 17:35:14
2187	7	983	NO COMMENT	\N	2014-01-05 08:50:21	2014-01-05 08:50:21
2188	2	983	NO COMMENT	\N	2014-03-02 17:41:10	2014-03-02 17:41:10
2189	2	984	NO COMMENT	\N	2013-10-14 03:51:45	2013-10-14 03:51:45
2190	1	984	NO COMMENT	\N	2013-10-31 13:25:39	2013-10-31 13:25:39
2191	7	984	NO COMMENT	\N	2014-02-23 18:21:04	2014-02-23 18:21:04
2192	13	985	NO COMMENT	\N	2013-12-16 23:46:31	2013-12-16 23:46:31
2193	1	985	NO COMMENT	\N	2013-12-27 08:50:31	2013-12-27 08:50:31
2194	2	985	NO COMMENT	\N	2014-02-03 16:46:26	2014-02-03 16:46:26
2195	7	985	NO COMMENT	\N	2014-03-06 18:35:41	2014-03-06 18:35:41
2196	1	988	NO COMMENT	\N	2013-08-07 23:18:42	2013-08-07 23:18:42
2197	7	988	NO COMMENT	\N	2014-01-14 05:51:40	2014-01-14 05:51:40
2198	2	988	NO COMMENT	\N	2014-02-15 13:43:20	2014-02-15 13:43:20
2199	2	989	NO COMMENT	\N	2013-11-05 10:11:21	2013-11-05 10:11:21
2200	7	989	NO COMMENT	\N	2014-01-02 17:46:34	2014-01-02 17:46:34
2201	1	989	NO COMMENT	\N	2014-02-16 19:54:37	2014-02-16 19:54:37
2202	7	991	NO COMMENT	\N	2013-12-18 15:10:41	2013-12-18 15:10:41
2203	1	991	NO COMMENT	\N	2013-12-29 15:46:13	2013-12-29 15:46:13
2204	2	991	NO COMMENT	\N	2014-02-08 14:40:33	2014-02-08 14:40:33
2205	1	992	NO COMMENT	\N	2014-02-01 10:42:43	2014-02-01 10:42:43
2206	2	992	NO COMMENT	\N	2014-02-21 21:13:45	2014-02-21 21:13:45
2207	7	992	NO COMMENT	\N	2014-03-19 22:59:00	2014-03-19 22:59:00
2208	2	993	NO COMMENT	\N	2013-12-03 21:08:57	2013-12-03 21:08:57
2209	1	993	NO COMMENT	\N	2013-12-20 06:45:54	2013-12-20 06:45:54
2210	7	993	NO COMMENT	\N	2013-12-31 02:09:56	2013-12-31 02:09:56
2211	1	994	NO COMMENT	\N	2014-01-09 06:05:02	2014-01-09 06:05:02
2212	2	994	NO COMMENT	\N	2014-02-25 03:17:19	2014-02-25 03:17:19
2213	7	994	NO COMMENT	\N	2014-03-11 12:13:03	2014-03-11 12:13:03
2214	2	995	NO COMMENT	\N	2014-01-21 09:45:05	2014-01-21 09:45:05
2215	1	996	NO COMMENT	\N	2014-02-15 00:03:00	2014-02-15 00:03:00
2216	1	997	NO COMMENT	\N	2014-03-09 14:09:45	2014-03-09 14:09:45
2217	1	998	NO COMMENT	\N	2014-03-01 13:03:51	2014-03-01 13:03:51
2218	7	998	NO COMMENT	\N	2014-03-01 23:10:51	2014-03-01 23:10:51
2219	18	998	NO COMMENT	\N	2014-03-07 12:01:24	2014-03-07 12:01:24
2220	15	998	NO COMMENT	\N	2014-03-13 17:03:16	2014-03-13 17:03:16
2221	21	998	NO COMMENT	\N	2014-03-19 12:29:11	2014-03-19 12:29:11
2222	1	999	NO COMMENT	\N	2014-03-17 06:12:13	2014-03-17 06:12:13
2223	20	999	NO COMMENT	\N	2014-03-18 09:57:33	2014-03-18 09:57:33
2224	22	999	NO COMMENT	\N	2014-03-18 11:58:17	2014-03-18 11:58:17
2225	26	999	NO COMMENT	\N	2014-03-20 09:50:45	2014-03-20 09:50:45
2226	7	1000	NO COMMENT	\N	2014-02-11 12:05:42	2014-02-11 12:05:42
2227	1	1000	NO COMMENT	\N	2014-02-17 14:20:26	2014-02-17 14:20:26
2228	24	1000	NO COMMENT	\N	2014-02-23 16:59:56	2014-02-23 16:59:56
2229	45	1000	NO COMMENT	\N	2014-03-03 23:03:57	2014-03-03 23:03:57
2230	14	1000	NO COMMENT	\N	2014-03-12 04:25:16	2014-03-12 04:25:16
2231	45	1001	NO COMMENT	\N	2014-02-14 15:20:33	2014-02-14 15:20:33
2232	7	1001	NO COMMENT	\N	2014-02-18 09:10:53	2014-02-18 09:10:53
2233	6	1001	NO COMMENT	\N	2014-02-18 09:19:04	2014-02-18 09:19:04
2234	24	1001	NO COMMENT	\N	2014-02-18 21:39:12	2014-02-18 21:39:12
2235	1	1001	NO COMMENT	\N	2014-02-28 05:28:49	2014-02-28 05:28:49
2236	2	1001	NO COMMENT	\N	2014-03-01 23:40:20	2014-03-01 23:40:20
2237	17	1001	NO COMMENT	\N	2014-03-03 06:13:45	2014-03-03 06:13:45
2238	14	1001	NO COMMENT	\N	2014-03-07 04:44:55	2014-03-07 04:44:55
2239	45	1002	NO COMMENT	\N	2014-03-02 21:00:14	2014-03-02 21:00:14
2240	2	1002	NO COMMENT	\N	2014-03-16 04:09:32	2014-03-16 04:09:32
2241	46	1003	NO COMMENT	\N	2014-03-04 12:41:00	2014-03-04 12:41:00
2242	23	1003	NO COMMENT	\N	2014-03-05 17:19:22	2014-03-05 17:19:22
2243	31	1003	NO COMMENT	\N	2014-03-15 07:54:38	2014-03-15 07:54:38
2244	7	1003	NO COMMENT	\N	2014-03-15 07:57:25	2014-03-15 07:57:25
2245	1	1003	NO COMMENT	\N	2014-03-18 10:28:44	2014-03-18 10:28:44
2246	33	1004	NO COMMENT	\N	2014-03-01 16:10:31	2014-03-01 16:10:31
2247	20	1004	NO COMMENT	\N	2014-03-01 18:11:40	2014-03-01 18:11:40
2248	26	1004	NO COMMENT	\N	2014-03-03 02:05:47	2014-03-03 02:05:47
2249	34	1004	NO COMMENT	\N	2014-03-09 08:03:23	2014-03-09 08:03:23
2250	14	1004	NO COMMENT	\N	2014-03-11 09:50:57	2014-03-11 09:50:57
2251	24	1004	NO COMMENT	\N	2014-03-15 04:15:39	2014-03-15 04:15:39
2252	46	1005	NO COMMENT	\N	2014-03-13 10:59:32	2014-03-13 10:59:32
2253	2	1005	NO COMMENT	\N	2014-03-15 13:30:49	2014-03-15 13:30:49
2254	31	1005	NO COMMENT	\N	2014-03-15 18:07:33	2014-03-15 18:07:33
2255	23	1005	NO COMMENT	\N	2014-03-16 14:53:39	2014-03-16 14:53:39
2256	26	1005	NO COMMENT	\N	2014-03-16 16:55:24	2014-03-16 16:55:24
2257	20	1005	NO COMMENT	\N	2014-03-17 10:59:19	2014-03-17 10:59:19
2258	1	1005	NO COMMENT	\N	2014-03-18 03:51:12	2014-03-18 03:51:12
2259	14	1005	NO COMMENT	\N	2014-03-18 05:57:10	2014-03-18 05:57:10
2260	45	1005	NO COMMENT	\N	2014-03-19 02:38:11	2014-03-19 02:38:11
2261	48	1005	NO COMMENT	\N	2014-03-19 12:34:09	2014-03-19 12:34:09
2262	17	1005	NO COMMENT	\N	2014-03-19 15:13:29	2014-03-19 15:13:29
2263	24	1005	NO COMMENT	\N	2014-03-20 18:52:30	2014-03-20 18:52:30
2264	2	1006	NO COMMENT	\N	2014-02-20 19:04:29	2014-02-20 19:04:29
2265	7	1006	NO COMMENT	\N	2014-02-26 18:49:10	2014-02-26 18:49:10
2266	1	1006	NO COMMENT	\N	2014-03-19 03:04:42	2014-03-19 03:04:42
2267	6	1006	NO COMMENT	\N	2014-03-20 15:28:53	2014-03-20 15:28:53
2268	1	1008	NO COMMENT	\N	2014-03-11 14:35:37	2014-03-11 14:35:37
2269	6	1008	NO COMMENT	\N	2014-03-16 06:28:42	2014-03-16 06:28:42
2270	7	1008	NO COMMENT	\N	2014-03-18 22:16:02	2014-03-18 22:16:02
2271	29	1009	NO COMMENT	\N	2014-03-14 03:57:52	2014-03-14 03:57:52
2272	6	1009	NO COMMENT	\N	2014-03-15 08:54:47	2014-03-15 08:54:47
2273	1	1009	NO COMMENT	\N	2014-03-17 16:16:21	2014-03-17 16:16:21
2274	46	1010	NO COMMENT	\N	2014-02-26 06:01:06	2014-02-26 06:01:06
2275	5	1010	NO COMMENT	\N	2014-02-28 04:30:54	2014-02-28 04:30:54
2276	1	1010	NO COMMENT	\N	2014-03-02 06:17:34	2014-03-02 06:17:34
2277	7	1010	NO COMMENT	\N	2014-03-07 23:08:59	2014-03-07 23:08:59
2278	2	1010	NO COMMENT	\N	2014-03-12 10:23:51	2014-03-12 10:23:51
2279	9	1010	NO COMMENT	\N	2014-03-14 07:55:48	2014-03-14 07:55:48
2280	35	1010	NO COMMENT	\N	2014-03-14 19:32:13	2014-03-14 19:32:13
2281	2	1012	NO COMMENT	\N	2014-03-10 07:55:22	2014-03-10 07:55:22
2282	7	1012	NO COMMENT	\N	2014-03-16 13:21:57	2014-03-16 13:21:57
2283	1	1012	NO COMMENT	\N	2014-03-17 12:59:43	2014-03-17 12:59:43
2284	7	1013	NO COMMENT	\N	2014-03-12 18:03:25	2014-03-12 18:03:25
2285	2	1013	NO COMMENT	\N	2014-03-14 20:37:34	2014-03-14 20:37:34
2286	1	1013	NO COMMENT	\N	2014-03-20 20:39:35	2014-03-20 20:39:35
2287	7	1014	NO COMMENT	\N	2014-02-26 00:48:40	2014-02-26 00:48:40
2288	13	1014	NO COMMENT	\N	2014-03-01 22:48:44	2014-03-01 22:48:44
2289	2	1014	NO COMMENT	\N	2014-03-02 08:30:38	2014-03-02 08:30:38
2290	16	1014	NO COMMENT	\N	2014-03-20 10:30:03	2014-03-20 10:30:03
2291	13	1015	NO COMMENT	\N	2014-02-27 23:35:12	2014-02-27 23:35:12
2292	26	1015	NO COMMENT	\N	2014-03-03 03:15:44	2014-03-03 03:15:44
2293	2	1015	NO COMMENT	\N	2014-03-05 08:19:41	2014-03-05 08:19:41
2294	46	1016	NO COMMENT	\N	2014-03-03 04:26:28	2014-03-03 04:26:28
2295	46	1017	NO COMMENT	\N	2014-03-08 01:56:12	2014-03-08 01:56:12
2296	1	1017	NO COMMENT	\N	2014-03-09 16:36:43	2014-03-09 16:36:43
2297	16	1017	NO COMMENT	\N	2014-03-13 10:23:08	2014-03-13 10:23:08
2298	2	1017	NO COMMENT	\N	2014-03-15 04:08:03	2014-03-15 04:08:03
2299	7	1017	NO COMMENT	\N	2014-03-15 09:01:56	2014-03-15 09:01:56
2300	13	1017	NO COMMENT	\N	2014-03-18 21:01:07	2014-03-18 21:01:07
2301	26	1017	NO COMMENT	\N	2014-03-20 13:54:55	2014-03-20 13:54:55
2302	35	1018	NO COMMENT	\N	2014-02-07 19:57:38	2014-02-07 19:57:38
2303	6	1018	NO COMMENT	\N	2014-02-19 08:02:12	2014-02-19 08:02:12
2304	22	1018	NO COMMENT	\N	2014-03-01 08:33:31	2014-03-01 08:33:31
2305	19	1018	NO COMMENT	\N	2014-03-02 07:35:02	2014-03-02 07:35:02
2306	2	1018	NO COMMENT	\N	2014-03-07 21:31:21	2014-03-07 21:31:21
2307	7	1018	NO COMMENT	\N	2014-03-15 15:31:03	2014-03-15 15:31:03
2308	1	1018	NO COMMENT	\N	2014-03-18 07:54:38	2014-03-18 07:54:38
2309	2	1020	NO COMMENT	\N	2014-02-25 15:48:50	2014-02-25 15:48:50
2310	1	1020	NO COMMENT	\N	2014-02-28 09:13:10	2014-02-28 09:13:10
2311	7	1020	NO COMMENT	\N	2014-03-05 07:53:53	2014-03-05 07:53:53
2312	41	1020	NO COMMENT	\N	2014-03-11 02:41:36	2014-03-11 02:41:36
2313	9	1023	NO COMMENT	\N	2014-02-16 11:21:39	2014-02-16 11:21:39
2314	1	1023	NO COMMENT	\N	2014-02-22 07:07:28	2014-02-22 07:07:28
2315	7	1023	NO COMMENT	\N	2014-02-23 20:37:39	2014-02-23 20:37:39
2316	2	1023	NO COMMENT	\N	2014-02-28 17:49:24	2014-02-28 17:49:24
2317	7	1025	NO COMMENT	\N	2014-03-07 15:34:43	2014-03-07 15:34:43
2318	2	1025	NO COMMENT	\N	2014-03-09 17:43:47	2014-03-09 17:43:47
2319	5	1025	NO COMMENT	\N	2014-03-12 01:43:47	2014-03-12 01:43:47
2320	9	1025	NO COMMENT	\N	2014-03-13 04:56:33	2014-03-13 04:56:33
2321	20	1025	NO COMMENT	\N	2014-03-16 22:28:23	2014-03-16 22:28:23
2322	1	1025	NO COMMENT	\N	2014-03-19 16:36:15	2014-03-19 16:36:15
2323	32	1027	NO COMMENT	\N	2014-02-20 07:10:02	2014-02-20 07:10:02
2324	5	1027	NO COMMENT	\N	2014-03-03 07:32:35	2014-03-03 07:32:35
2325	45	1027	NO COMMENT	\N	2014-03-16 20:38:16	2014-03-16 20:38:16
2326	1	1028	NO COMMENT	\N	2014-03-09 01:29:37	2014-03-09 01:29:37
2327	2	1028	NO COMMENT	\N	2014-03-12 02:54:11	2014-03-12 02:54:11
2328	7	1028	NO COMMENT	\N	2014-03-12 06:00:48	2014-03-12 06:00:48
2329	1	1029	NO COMMENT	\N	2014-03-16 00:31:23	2014-03-16 00:31:23
2330	7	1029	NO COMMENT	\N	2014-03-16 14:53:43	2014-03-16 14:53:43
2331	26	1030	NO COMMENT	\N	2014-02-28 21:12:38	2014-02-28 21:12:38
2332	39	1030	NO COMMENT	\N	2014-03-03 00:14:18	2014-03-03 00:14:18
2333	1	1031	NO COMMENT	\N	2014-02-27 15:36:49	2014-02-27 15:36:49
2334	2	1031	NO COMMENT	\N	2014-03-16 14:12:55	2014-03-16 14:12:55
2335	7	1031	NO COMMENT	\N	2014-03-18 03:14:43	2014-03-18 03:14:43
2336	44	1031	NO COMMENT	\N	2014-03-19 05:41:38	2014-03-19 05:41:38
2337	44	1033	NO COMMENT	\N	2014-03-18 13:08:22	2014-03-18 13:08:22
2338	7	1033	NO COMMENT	\N	2014-03-19 04:48:39	2014-03-19 04:48:39
2339	1	1033	NO COMMENT	\N	2014-03-19 05:20:27	2014-03-19 05:20:27
2340	2	1033	NO COMMENT	\N	2014-03-20 01:50:42	2014-03-20 01:50:42
2341	5	1035	NO COMMENT	\N	2014-03-13 08:04:45	2014-03-13 08:04:45
2342	1	1035	NO COMMENT	\N	2014-03-14 18:12:12	2014-03-14 18:12:12
2343	7	1037	NO COMMENT	\N	2014-03-05 05:26:17	2014-03-05 05:26:17
2344	29	1037	NO COMMENT	\N	2014-03-12 11:14:57	2014-03-12 11:14:57
2345	35	1038	NO COMMENT	\N	2014-02-16 09:01:48	2014-02-16 09:01:48
2346	2	1038	NO COMMENT	\N	2014-03-03 22:35:55	2014-03-03 22:35:55
2347	47	1038	NO COMMENT	\N	2014-03-10 15:06:36	2014-03-10 15:06:36
2348	1	1038	NO COMMENT	\N	2014-03-10 22:26:47	2014-03-10 22:26:47
2349	7	1038	NO COMMENT	\N	2014-03-14 10:24:51	2014-03-14 10:24:51
2350	42	1038	NO COMMENT	\N	2014-03-17 23:46:25	2014-03-17 23:46:25
2351	6	1040	NO COMMENT	\N	2014-03-03 20:47:28	2014-03-03 20:47:28
2352	23	1040	NO COMMENT	\N	2014-03-04 20:08:21	2014-03-04 20:08:21
2353	31	1040	NO COMMENT	\N	2014-03-04 23:20:18	2014-03-04 23:20:18
2354	7	1040	NO COMMENT	\N	2014-03-05 01:54:26	2014-03-05 01:54:26
2355	24	1040	NO COMMENT	\N	2014-03-06 10:36:53	2014-03-06 10:36:53
2356	1	1040	NO COMMENT	\N	2014-03-07 15:32:17	2014-03-07 15:32:17
2357	34	1040	NO COMMENT	\N	2014-03-07 17:01:31	2014-03-07 17:01:31
2358	46	1040	NO COMMENT	\N	2014-03-09 03:50:13	2014-03-09 03:50:13
2359	48	1040	NO COMMENT	\N	2014-03-09 11:16:53	2014-03-09 11:16:53
2360	2	1040	NO COMMENT	\N	2014-03-09 15:22:43	2014-03-09 15:22:43
2361	33	1040	NO COMMENT	\N	2014-03-10 15:02:26	2014-03-10 15:02:26
2362	17	1040	NO COMMENT	\N	2014-03-11 23:00:46	2014-03-11 23:00:46
2363	20	1040	NO COMMENT	\N	2014-03-13 19:42:29	2014-03-13 19:42:29
2364	14	1040	NO COMMENT	\N	2014-03-16 04:29:26	2014-03-16 04:29:26
2365	26	1040	NO COMMENT	\N	2014-03-16 08:06:27	2014-03-16 08:06:27
2366	45	1040	NO COMMENT	\N	2014-03-19 22:36:04	2014-03-19 22:36:04
2367	32	1042	NO COMMENT	\N	2014-02-21 16:53:45	2014-02-21 16:53:45
2368	7	1042	NO COMMENT	\N	2014-02-22 19:27:09	2014-02-22 19:27:09
2369	2	1042	NO COMMENT	\N	2014-02-24 15:27:20	2014-02-24 15:27:20
2370	42	1042	NO COMMENT	\N	2014-03-09 05:47:22	2014-03-09 05:47:22
2371	1	1042	NO COMMENT	\N	2014-03-13 17:11:39	2014-03-13 17:11:39
2372	1	1043	NO COMMENT	\N	2014-03-06 08:21:57	2014-03-06 08:21:57
2373	2	1043	NO COMMENT	\N	2014-03-14 17:19:28	2014-03-14 17:19:28
2374	7	1045	NO COMMENT	\N	2014-03-12 13:40:30	2014-03-12 13:40:30
2375	32	1045	NO COMMENT	\N	2014-03-12 17:28:21	2014-03-12 17:28:21
2376	33	1045	NO COMMENT	\N	2014-03-13 14:50:03	2014-03-13 14:50:03
2377	42	1045	NO COMMENT	\N	2014-03-13 17:34:03	2014-03-13 17:34:03
2378	36	1045	NO COMMENT	\N	2014-03-15 00:52:06	2014-03-15 00:52:06
2379	48	1045	NO COMMENT	\N	2014-03-17 04:50:49	2014-03-17 04:50:49
2380	1	1045	NO COMMENT	\N	2014-03-17 08:12:53	2014-03-17 08:12:53
2381	2	1045	NO COMMENT	\N	2014-03-17 08:23:36	2014-03-17 08:23:36
2382	32	1046	NO COMMENT	\N	2014-03-10 05:47:02	2014-03-10 05:47:02
2383	42	1047	NO COMMENT	\N	2014-03-14 04:49:47	2014-03-14 04:49:47
2384	7	1047	NO COMMENT	\N	2014-03-17 07:25:05	2014-03-17 07:25:05
2385	1	1047	NO COMMENT	\N	2014-03-18 06:05:30	2014-03-18 06:05:30
2386	1	1048	NO COMMENT	\N	2014-03-13 09:19:20	2014-03-13 09:19:20
2387	2	1048	NO COMMENT	\N	2014-03-13 22:11:33	2014-03-13 22:11:33
2388	1	1075	NO COMMENT	\N	2014-02-21 07:10:00	2014-02-21 07:10:00
2389	7	1075	NO COMMENT	\N	2014-02-27 10:17:02	2014-02-27 10:17:02
2390	28	1075	NO COMMENT	\N	2014-03-05 03:28:14	2014-03-05 03:28:14
2391	2	1075	NO COMMENT	\N	2014-03-07 11:16:08	2014-03-07 11:16:08
2392	2	1049	NO COMMENT	\N	2014-03-13 03:36:58	2014-03-13 03:36:58
2393	1	1049	NO COMMENT	\N	2014-03-14 03:56:30	2014-03-14 03:56:30
2394	7	1049	NO COMMENT	\N	2014-03-18 11:46:20	2014-03-18 11:46:20
2395	43	1050	NO COMMENT	\N	2014-03-12 17:15:04	2014-03-12 17:15:04
2396	21	1050	NO COMMENT	\N	2014-03-13 06:41:47	2014-03-13 06:41:47
2397	18	1050	NO COMMENT	\N	2014-03-13 18:18:09	2014-03-13 18:18:09
2398	14	1050	NO COMMENT	\N	2014-03-13 18:59:26	2014-03-13 18:59:26
2399	46	1050	NO COMMENT	\N	2014-03-14 05:24:27	2014-03-14 05:24:27
2400	1	1050	NO COMMENT	\N	2014-03-14 15:01:23	2014-03-14 15:01:23
2401	6	1050	NO COMMENT	\N	2014-03-15 16:33:08	2014-03-15 16:33:08
2402	10	1050	NO COMMENT	\N	2014-03-16 08:32:12	2014-03-16 08:32:12
2403	44	1050	NO COMMENT	\N	2014-03-16 10:26:24	2014-03-16 10:26:24
2404	7	1050	NO COMMENT	\N	2014-03-16 12:55:19	2014-03-16 12:55:19
2405	41	1050	NO COMMENT	\N	2014-03-17 06:24:20	2014-03-17 06:24:20
2406	22	1050	NO COMMENT	\N	2014-03-17 08:09:01	2014-03-17 08:09:01
2407	2	1050	NO COMMENT	\N	2014-03-18 23:47:16	2014-03-18 23:47:16
2408	14	1051	NO COMMENT	\N	2014-03-13 06:55:24	2014-03-13 06:55:24
2409	22	1051	NO COMMENT	\N	2014-03-13 11:27:37	2014-03-13 11:27:37
2410	12	1051	NO COMMENT	\N	2014-03-13 16:50:23	2014-03-13 16:50:23
2411	21	1051	NO COMMENT	\N	2014-03-14 11:30:08	2014-03-14 11:30:08
2412	44	1051	NO COMMENT	\N	2014-03-14 16:11:20	2014-03-14 16:11:20
2413	18	1051	NO COMMENT	\N	2014-03-15 16:49:34	2014-03-15 16:49:34
2414	1	1051	NO COMMENT	\N	2014-03-16 03:17:09	2014-03-16 03:17:09
2415	6	1051	NO COMMENT	\N	2014-03-16 19:58:58	2014-03-16 19:58:58
2416	43	1051	NO COMMENT	\N	2014-03-17 12:16:05	2014-03-17 12:16:05
2417	46	1051	NO COMMENT	\N	2014-03-19 07:13:49	2014-03-19 07:13:49
2418	41	1051	NO COMMENT	\N	2014-03-19 08:46:44	2014-03-19 08:46:44
2419	10	1051	NO COMMENT	\N	2014-03-19 17:54:17	2014-03-19 17:54:17
2420	7	1051	NO COMMENT	\N	2014-03-20 05:01:31	2014-03-20 05:01:31
2421	2	1051	NO COMMENT	\N	2014-03-20 18:28:36	2014-03-20 18:28:36
2422	7	1052	NO COMMENT	\N	2014-03-18 18:30:34	2014-03-18 18:30:34
2423	41	1052	NO COMMENT	\N	2014-03-20 00:46:47	2014-03-20 00:46:47
2424	46	1052	NO COMMENT	\N	2014-03-20 08:22:28	2014-03-20 08:22:28
2425	6	1052	NO COMMENT	\N	2014-03-20 10:19:42	2014-03-20 10:19:42
2426	43	1052	NO COMMENT	\N	2014-03-20 11:57:27	2014-03-20 11:57:27
2427	44	1052	NO COMMENT	\N	2014-03-20 16:40:33	2014-03-20 16:40:33
2428	10	1053	NO COMMENT	\N	2014-03-20 04:21:49	2014-03-20 04:21:49
2429	46	1053	NO COMMENT	\N	2014-03-20 06:18:24	2014-03-20 06:18:24
2430	7	1053	NO COMMENT	\N	2014-03-20 06:52:26	2014-03-20 06:52:26
2431	6	1053	NO COMMENT	\N	2014-03-20 08:42:29	2014-03-20 08:42:29
2432	44	1053	NO COMMENT	\N	2014-03-20 09:08:03	2014-03-20 09:08:03
2433	14	1053	NO COMMENT	\N	2014-03-20 10:09:25	2014-03-20 10:09:25
2434	43	1053	NO COMMENT	\N	2014-03-20 11:16:44	2014-03-20 11:16:44
2435	1	1053	NO COMMENT	\N	2014-03-20 12:23:29	2014-03-20 12:23:29
2436	2	1053	NO COMMENT	\N	2014-03-20 15:13:43	2014-03-20 15:13:43
2437	21	1053	NO COMMENT	\N	2014-03-20 15:20:32	2014-03-20 15:20:32
2438	41	1053	NO COMMENT	\N	2014-03-20 16:56:37	2014-03-20 16:56:37
2439	22	1053	NO COMMENT	\N	2014-03-20 17:39:40	2014-03-20 17:39:40
2440	45	1053	NO COMMENT	\N	2014-03-20 18:02:54	2014-03-20 18:02:54
2441	12	1053	NO COMMENT	\N	2014-03-20 18:38:00	2014-03-20 18:38:00
2442	18	1053	NO COMMENT	\N	2014-03-20 19:52:14	2014-03-20 19:52:14
2443	44	1054	NO COMMENT	\N	2014-02-21 16:32:54	2014-02-21 16:32:54
2444	19	1054	NO COMMENT	\N	2014-03-03 04:19:22	2014-03-03 04:19:22
2445	1	1055	NO COMMENT	\N	2014-03-06 23:42:10	2014-03-06 23:42:10
2446	19	1055	NO COMMENT	\N	2014-03-09 06:49:02	2014-03-09 06:49:02
2447	24	1055	NO COMMENT	\N	2014-03-12 16:48:03	2014-03-12 16:48:03
2448	7	1055	NO COMMENT	\N	2014-03-14 02:59:30	2014-03-14 02:59:30
2449	2	1055	NO COMMENT	\N	2014-03-18 14:45:49	2014-03-18 14:45:49
2450	18	1056	NO COMMENT	\N	2014-02-22 16:16:05	2014-02-22 16:16:05
2451	1	1056	NO COMMENT	\N	2014-02-28 07:10:27	2014-02-28 07:10:27
2452	7	1056	NO COMMENT	\N	2014-03-05 19:08:57	2014-03-05 19:08:57
2453	2	1056	NO COMMENT	\N	2014-03-12 09:40:10	2014-03-12 09:40:10
2454	11	1058	NO COMMENT	\N	2014-03-05 19:00:52	2014-03-05 19:00:52
2455	9	1060	NO COMMENT	\N	2014-03-02 06:05:21	2014-03-02 06:05:21
2456	29	1060	NO COMMENT	\N	2014-03-05 16:08:26	2014-03-05 16:08:26
2457	7	1076	NO COMMENT	\N	2014-03-07 18:01:53	2014-03-07 18:01:53
2458	1	1076	NO COMMENT	\N	2014-03-10 01:11:51	2014-03-10 01:11:51
2459	28	1076	NO COMMENT	\N	2014-03-14 06:27:04	2014-03-14 06:27:04
2460	2	1076	NO COMMENT	\N	2014-03-20 08:45:39	2014-03-20 08:45:39
2461	13	1091	NO COMMENT	\N	2013-11-21 05:56:02	2013-11-21 05:56:02
2462	7	1091	NO COMMENT	\N	2013-12-27 22:19:13	2013-12-27 22:19:13
2463	1	1091	NO COMMENT	\N	2014-01-20 01:16:49	2014-01-20 01:16:49
2464	2	1091	NO COMMENT	\N	2014-02-25 00:01:10	2014-02-25 00:01:10
2465	27	1061	NO COMMENT	\N	2014-02-17 17:05:38	2014-02-17 17:05:38
2466	7	1061	NO COMMENT	\N	2014-02-27 08:52:25	2014-02-27 08:52:25
2467	2	1061	NO COMMENT	\N	2014-03-01 00:12:18	2014-03-01 00:12:18
2468	1	1061	NO COMMENT	\N	2014-03-14 22:08:12	2014-03-14 22:08:12
2469	6	1063	NO COMMENT	\N	2014-02-23 03:09:20	2014-02-23 03:09:20
2470	1	1063	NO COMMENT	\N	2014-02-26 23:35:01	2014-02-26 23:35:01
2471	2	1063	NO COMMENT	\N	2014-03-10 03:56:45	2014-03-10 03:56:45
2472	7	1063	NO COMMENT	\N	2014-03-10 10:36:37	2014-03-10 10:36:37
2473	27	1063	NO COMMENT	\N	2014-03-12 18:20:47	2014-03-12 18:20:47
2474	7	1064	NO COMMENT	\N	2014-02-27 01:49:58	2014-02-27 01:49:58
2475	27	1064	NO COMMENT	\N	2014-02-27 16:16:48	2014-02-27 16:16:48
2476	1	1064	NO COMMENT	\N	2014-03-02 06:15:56	2014-03-02 06:15:56
2477	2	1064	NO COMMENT	\N	2014-03-04 14:59:27	2014-03-04 14:59:27
2478	6	1064	NO COMMENT	\N	2014-03-15 07:10:33	2014-03-15 07:10:33
2479	7	1065	NO COMMENT	\N	2014-03-04 23:15:11	2014-03-04 23:15:11
2480	2	1065	NO COMMENT	\N	2014-03-05 05:57:08	2014-03-05 05:57:08
2481	23	1065	NO COMMENT	\N	2014-03-08 20:24:33	2014-03-08 20:24:33
2482	27	1065	NO COMMENT	\N	2014-03-10 02:59:32	2014-03-10 02:59:32
2483	1	1065	NO COMMENT	\N	2014-03-14 01:09:31	2014-03-14 01:09:31
2484	13	1065	NO COMMENT	\N	2014-03-15 12:04:42	2014-03-15 12:04:42
2485	12	1065	NO COMMENT	\N	2014-03-16 13:46:07	2014-03-16 13:46:07
2486	6	1065	NO COMMENT	\N	2014-03-19 01:51:25	2014-03-19 01:51:25
2487	2	1066	NO COMMENT	\N	2014-02-28 16:14:42	2014-02-28 16:14:42
2488	45	1066	NO COMMENT	\N	2014-03-05 11:10:48	2014-03-05 11:10:48
2489	15	1066	NO COMMENT	\N	2014-03-08 12:00:06	2014-03-08 12:00:06
2490	7	1066	NO COMMENT	\N	2014-03-16 18:23:35	2014-03-16 18:23:35
2491	7	1069	NO COMMENT	\N	2014-03-05 10:22:31	2014-03-05 10:22:31
2492	1	1069	NO COMMENT	\N	2014-03-06 01:22:04	2014-03-06 01:22:04
2493	26	1069	NO COMMENT	\N	2014-03-14 08:06:52	2014-03-14 08:06:52
2494	26	1070	NO COMMENT	\N	2014-03-03 17:43:41	2014-03-03 17:43:41
2495	1	1070	NO COMMENT	\N	2014-03-09 05:34:05	2014-03-09 05:34:05
2496	7	1070	NO COMMENT	\N	2014-03-18 02:30:31	2014-03-18 02:30:31
2497	26	1071	NO COMMENT	\N	2014-03-05 11:06:21	2014-03-05 11:06:21
2498	7	1071	NO COMMENT	\N	2014-03-06 04:10:05	2014-03-06 04:10:05
2499	2	1071	NO COMMENT	\N	2014-03-09 13:54:08	2014-03-09 13:54:08
2500	1	1071	NO COMMENT	\N	2014-03-12 03:52:10	2014-03-12 03:52:10
2501	26	1072	NO COMMENT	\N	2014-03-11 22:36:26	2014-03-11 22:36:26
2502	1	1072	NO COMMENT	\N	2014-03-12 07:22:54	2014-03-12 07:22:54
2503	2	1072	NO COMMENT	\N	2014-03-14 20:01:27	2014-03-14 20:01:27
2504	7	1072	NO COMMENT	\N	2014-03-16 17:22:07	2014-03-16 17:22:07
2505	28	1074	NO COMMENT	\N	2014-02-20 15:11:56	2014-02-20 15:11:56
2506	1	1074	NO COMMENT	\N	2014-03-03 19:52:32	2014-03-03 19:52:32
2507	7	1074	NO COMMENT	\N	2014-03-06 22:57:43	2014-03-06 22:57:43
2508	2	1074	NO COMMENT	\N	2014-03-13 03:18:11	2014-03-13 03:18:11
2509	2	1077	NO COMMENT	\N	2014-03-09 10:38:11	2014-03-09 10:38:11
2510	7	1078	NO COMMENT	\N	2013-11-18 11:09:02	2013-11-18 11:09:02
2511	2	1078	NO COMMENT	\N	2013-11-18 15:49:52	2013-11-18 15:49:52
2512	1	1078	NO COMMENT	\N	2014-02-10 12:08:18	2014-02-10 12:08:18
2513	7	1079	NO COMMENT	\N	2013-11-20 19:40:31	2013-11-20 19:40:31
2514	1	1079	NO COMMENT	\N	2014-01-22 12:37:54	2014-01-22 12:37:54
2515	2	1080	NO COMMENT	\N	2013-11-28 05:12:33	2013-11-28 05:12:33
2516	1	1080	NO COMMENT	\N	2014-01-05 22:19:25	2014-01-05 22:19:25
2517	7	1080	NO COMMENT	\N	2014-02-02 22:12:20	2014-02-02 22:12:20
2518	26	1081	NO COMMENT	\N	2014-01-27 17:54:03	2014-01-27 17:54:03
2519	2	1081	NO COMMENT	\N	2014-02-03 05:27:18	2014-02-03 05:27:18
2520	44	1081	NO COMMENT	\N	2014-02-25 10:11:37	2014-02-25 10:11:37
2521	1	1081	NO COMMENT	\N	2014-03-07 22:52:01	2014-03-07 22:52:01
2522	7	1081	NO COMMENT	\N	2014-03-08 01:07:32	2014-03-08 01:07:32
2523	7	1082	NO COMMENT	\N	2013-11-17 11:52:17	2013-11-17 11:52:17
2524	1	1082	NO COMMENT	\N	2013-11-30 15:47:37	2013-11-30 15:47:37
2525	18	1082	NO COMMENT	\N	2014-02-04 07:49:53	2014-02-04 07:49:53
2526	2	1082	NO COMMENT	\N	2014-03-16 11:49:20	2014-03-16 11:49:20
2527	2	1083	NO COMMENT	\N	2013-12-08 13:59:08	2013-12-08 13:59:08
2528	18	1083	NO COMMENT	\N	2013-12-18 02:55:13	2013-12-18 02:55:13
2529	7	1083	NO COMMENT	\N	2014-02-18 01:51:57	2014-02-18 01:51:57
2530	1	1083	NO COMMENT	\N	2014-03-01 18:17:05	2014-03-01 18:17:05
2531	1	1084	NO COMMENT	\N	2014-02-25 19:26:35	2014-02-25 19:26:35
2532	18	1084	NO COMMENT	\N	2014-03-07 06:35:01	2014-03-07 06:35:01
2533	2	1084	NO COMMENT	\N	2014-03-10 19:57:02	2014-03-10 19:57:02
2534	7	1084	NO COMMENT	\N	2014-03-13 05:04:03	2014-03-13 05:04:03
2535	14	1084	NO COMMENT	\N	2014-03-14 04:43:45	2014-03-14 04:43:45
2536	28	1085	NO COMMENT	\N	2013-10-27 16:29:23	2013-10-27 16:29:23
2537	1	1085	NO COMMENT	\N	2013-12-11 04:43:40	2013-12-11 04:43:40
2538	7	1085	NO COMMENT	\N	2014-02-17 07:49:45	2014-02-17 07:49:45
2539	2	1085	NO COMMENT	\N	2014-03-02 18:40:05	2014-03-02 18:40:05
2540	7	1086	NO COMMENT	\N	2013-12-18 17:09:56	2013-12-18 17:09:56
2541	28	1086	NO COMMENT	\N	2014-01-02 08:18:38	2014-01-02 08:18:38
2542	2	1086	NO COMMENT	\N	2014-02-06 01:54:32	2014-02-06 01:54:32
2543	1	1086	NO COMMENT	\N	2014-02-21 19:32:46	2014-02-21 19:32:46
2544	1	1087	NO COMMENT	\N	2014-02-24 00:01:04	2014-02-24 00:01:04
2545	28	1087	NO COMMENT	\N	2014-03-03 01:27:43	2014-03-03 01:27:43
2546	7	1087	NO COMMENT	\N	2014-03-07 16:37:56	2014-03-07 16:37:56
2547	2	1087	NO COMMENT	\N	2014-03-11 19:42:16	2014-03-11 19:42:16
2548	7	1088	NO COMMENT	\N	2013-12-21 09:06:46	2013-12-21 09:06:46
2549	2	1088	NO COMMENT	\N	2014-01-04 22:51:46	2014-01-04 22:51:46
2550	1	1088	NO COMMENT	\N	2014-02-01 04:31:27	2014-02-01 04:31:27
2551	7	1089	NO COMMENT	\N	2014-01-08 19:06:12	2014-01-08 19:06:12
2552	2	1089	NO COMMENT	\N	2014-03-09 17:59:35	2014-03-09 17:59:35
2553	1	1089	NO COMMENT	\N	2014-03-14 21:32:34	2014-03-14 21:32:34
2554	18	1089	NO COMMENT	\N	2014-03-20 03:47:13	2014-03-20 03:47:13
2555	1	1090	NO COMMENT	\N	2014-01-20 08:37:07	2014-01-20 08:37:07
2556	7	1090	NO COMMENT	\N	2014-03-15 12:55:05	2014-03-15 12:55:05
2557	16	1165	NO COMMENT	\N	2014-03-06 20:22:52	2014-03-06 20:22:52
2558	41	1165	NO COMMENT	\N	2014-03-10 06:17:16	2014-03-10 06:17:16
2559	24	1165	NO COMMENT	\N	2014-03-16 20:39:07	2014-03-16 20:39:07
2560	33	1165	NO COMMENT	\N	2014-03-17 02:17:45	2014-03-17 02:17:45
2561	20	1165	NO COMMENT	\N	2014-03-19 18:59:02	2014-03-19 18:59:02
2562	1	1092	NO COMMENT	\N	2014-02-14 14:08:26	2014-02-14 14:08:26
2563	44	1092	NO COMMENT	\N	2014-02-15 10:19:04	2014-02-15 10:19:04
2564	13	1092	NO COMMENT	\N	2014-02-24 01:52:53	2014-02-24 01:52:53
2565	7	1092	NO COMMENT	\N	2014-03-05 23:15:06	2014-03-05 23:15:06
2566	2	1092	NO COMMENT	\N	2014-03-18 15:04:37	2014-03-18 15:04:37
2567	1	1093	NO COMMENT	\N	2014-01-10 17:37:02	2014-01-10 17:37:02
2568	2	1094	NO COMMENT	\N	2013-11-30 04:43:26	2013-11-30 04:43:26
2569	7	1094	NO COMMENT	\N	2014-02-07 19:55:32	2014-02-07 19:55:32
2570	1	1094	NO COMMENT	\N	2014-02-19 08:46:01	2014-02-19 08:46:01
2571	1	1095	NO COMMENT	\N	2014-01-10 20:38:28	2014-01-10 20:38:28
2572	7	1095	NO COMMENT	\N	2014-01-31 02:58:32	2014-01-31 02:58:32
2573	2	1095	NO COMMENT	\N	2014-02-11 21:41:06	2014-02-11 21:41:06
2574	2	1096	NO COMMENT	\N	2014-01-05 16:42:06	2014-01-05 16:42:06
2575	1	1096	NO COMMENT	\N	2014-03-14 11:33:39	2014-03-14 11:33:39
2576	7	1098	NO COMMENT	\N	2014-03-20 18:55:19	2014-03-20 18:55:19
2577	7	1099	NO COMMENT	\N	2013-11-12 10:36:02	2013-11-12 10:36:02
2578	2	1099	NO COMMENT	\N	2013-11-26 04:23:26	2013-11-26 04:23:26
2579	1	1099	NO COMMENT	\N	2014-02-23 17:21:16	2014-02-23 17:21:16
2580	2	1100	NO COMMENT	\N	2014-01-31 16:08:24	2014-01-31 16:08:24
2581	1	1100	NO COMMENT	\N	2014-03-14 09:27:05	2014-03-14 09:27:05
2582	7	1100	NO COMMENT	\N	2014-03-17 15:28:58	2014-03-17 15:28:58
2583	7	1101	NO COMMENT	\N	2014-01-02 02:24:59	2014-01-02 02:24:59
2584	1	1101	NO COMMENT	\N	2014-02-08 11:10:28	2014-02-08 11:10:28
2585	2	1101	NO COMMENT	\N	2014-02-18 08:36:36	2014-02-18 08:36:36
2586	14	1103	NO COMMENT	\N	2014-02-21 20:33:06	2014-02-21 20:33:06
2587	7	1104	NO COMMENT	\N	2014-02-28 04:01:55	2014-02-28 04:01:55
2588	7	1105	NO COMMENT	\N	2014-01-23 15:05:13	2014-01-23 15:05:13
2589	14	1105	NO COMMENT	\N	2014-01-24 17:02:55	2014-01-24 17:02:55
2590	1	1105	NO COMMENT	\N	2014-01-28 18:21:03	2014-01-28 18:21:03
2591	45	1105	NO COMMENT	\N	2014-02-07 06:08:46	2014-02-07 06:08:46
2592	24	1105	NO COMMENT	\N	2014-02-10 18:13:27	2014-02-10 18:13:27
2593	2	1105	NO COMMENT	\N	2014-03-06 18:31:31	2014-03-06 18:31:31
2594	6	1105	NO COMMENT	\N	2014-03-16 12:53:23	2014-03-16 12:53:23
2595	17	1107	NO COMMENT	\N	2014-03-12 08:39:27	2014-03-12 08:39:27
2596	16	1107	NO COMMENT	\N	2014-03-13 21:51:58	2014-03-13 21:51:58
2597	7	1107	NO COMMENT	\N	2014-03-17 18:33:46	2014-03-17 18:33:46
2598	24	1107	NO COMMENT	\N	2014-03-18 02:58:11	2014-03-18 02:58:11
2599	23	1107	NO COMMENT	\N	2014-03-19 18:35:25	2014-03-19 18:35:25
2600	1	1108	NO COMMENT	\N	2013-12-31 19:48:09	2013-12-31 19:48:09
2601	2	1108	NO COMMENT	\N	2014-03-08 19:28:54	2014-03-08 19:28:54
2602	1	1110	NO COMMENT	\N	2013-12-30 09:31:16	2013-12-30 09:31:16
2603	2	1110	NO COMMENT	\N	2014-01-03 04:19:35	2014-01-03 04:19:35
2604	7	1110	NO COMMENT	\N	2014-02-05 22:47:31	2014-02-05 22:47:31
2605	13	1110	NO COMMENT	\N	2014-03-08 11:34:11	2014-03-08 11:34:11
2606	2	1115	NO COMMENT	\N	2014-01-04 10:41:19	2014-01-04 10:41:19
2607	7	1115	NO COMMENT	\N	2014-01-16 09:56:12	2014-01-16 09:56:12
2608	1	1115	NO COMMENT	\N	2014-03-16 01:45:50	2014-03-16 01:45:50
2609	42	1116	NO COMMENT	\N	2014-01-22 20:56:56	2014-01-22 20:56:56
2610	1	1116	NO COMMENT	\N	2014-02-20 16:57:08	2014-02-20 16:57:08
2611	7	1116	NO COMMENT	\N	2014-02-26 08:18:57	2014-02-26 08:18:57
2612	2	1116	NO COMMENT	\N	2014-03-05 06:24:29	2014-03-05 06:24:29
2613	1	1117	NO COMMENT	\N	2014-01-31 01:21:03	2014-01-31 01:21:03
2614	7	1117	NO COMMENT	\N	2014-02-04 09:41:12	2014-02-04 09:41:12
2615	42	1117	NO COMMENT	\N	2014-02-22 23:00:37	2014-02-22 23:00:37
2616	14	1117	NO COMMENT	\N	2014-02-28 17:22:48	2014-02-28 17:22:48
2617	7	1118	NO COMMENT	\N	2014-02-03 00:44:15	2014-02-03 00:44:15
2618	2	1118	NO COMMENT	\N	2014-02-25 00:51:53	2014-02-25 00:51:53
2619	1	1118	NO COMMENT	\N	2014-03-11 15:41:38	2014-03-11 15:41:38
2620	44	1166	NO COMMENT	\N	2014-03-19 15:08:38	2014-03-19 15:08:38
2621	7	1119	NO COMMENT	\N	2014-01-15 16:13:22	2014-01-15 16:13:22
2622	1	1119	NO COMMENT	\N	2014-01-24 14:13:12	2014-01-24 14:13:12
2623	2	1119	NO COMMENT	\N	2014-02-26 03:14:59	2014-02-26 03:14:59
2624	2	1120	NO COMMENT	\N	2014-02-10 07:43:12	2014-02-10 07:43:12
2625	7	1120	NO COMMENT	\N	2014-02-12 11:58:09	2014-02-12 11:58:09
2626	1	1120	NO COMMENT	\N	2014-02-15 00:03:46	2014-02-15 00:03:46
2627	27	1120	NO COMMENT	\N	2014-02-18 11:15:27	2014-02-18 11:15:27
2628	1	1122	NO COMMENT	\N	2014-01-17 13:56:27	2014-01-17 13:56:27
2629	2	1122	NO COMMENT	\N	2014-01-26 14:54:07	2014-01-26 14:54:07
2630	7	1122	NO COMMENT	\N	2014-03-03 04:59:49	2014-03-03 04:59:49
2631	1	1124	NO COMMENT	\N	2014-01-14 07:38:24	2014-01-14 07:38:24
2632	7	1124	NO COMMENT	\N	2014-01-24 20:34:55	2014-01-24 20:34:55
2633	2	1124	NO COMMENT	\N	2014-03-10 08:02:28	2014-03-10 08:02:28
2634	2	1125	NO COMMENT	\N	2013-11-13 13:42:42	2013-11-13 13:42:42
2635	7	1125	NO COMMENT	\N	2013-11-14 02:05:04	2013-11-14 02:05:04
2636	1	1125	NO COMMENT	\N	2014-01-22 08:47:55	2014-01-22 08:47:55
2637	7	1126	NO COMMENT	\N	2013-12-02 22:17:46	2013-12-02 22:17:46
2638	2	1126	NO COMMENT	\N	2013-12-11 06:48:23	2013-12-11 06:48:23
2639	1	1126	NO COMMENT	\N	2014-01-11 04:46:09	2014-01-11 04:46:09
2640	7	1127	NO COMMENT	\N	2013-12-06 06:10:25	2013-12-06 06:10:25
2641	2	1127	NO COMMENT	\N	2013-12-07 08:12:50	2013-12-07 08:12:50
2642	1	1128	NO COMMENT	\N	2014-02-13 00:35:02	2014-02-13 00:35:02
2643	7	1128	NO COMMENT	\N	2014-02-26 16:58:40	2014-02-26 16:58:40
2644	2	1128	NO COMMENT	\N	2014-03-11 18:20:52	2014-03-11 18:20:52
2645	1	1148	NO COMMENT	\N	2014-01-24 07:50:14	2014-01-24 07:50:14
2646	2	1148	NO COMMENT	\N	2014-02-07 22:48:00	2014-02-07 22:48:00
2647	7	1148	NO COMMENT	\N	2014-02-20 15:54:00	2014-02-20 15:54:00
2648	7	1163	NO COMMENT	\N	2014-03-01 03:02:27	2014-03-01 03:02:27
2649	7	1131	NO COMMENT	\N	2013-12-31 19:44:59	2013-12-31 19:44:59
2650	2	1131	NO COMMENT	\N	2014-01-29 01:11:20	2014-01-29 01:11:20
2651	1	1131	NO COMMENT	\N	2014-02-17 02:30:33	2014-02-17 02:30:33
2652	2	1132	NO COMMENT	\N	2013-11-28 00:52:13	2013-11-28 00:52:13
2653	7	1132	NO COMMENT	\N	2013-12-18 13:53:52	2013-12-18 13:53:52
2654	1	1132	NO COMMENT	\N	2014-02-04 17:30:01	2014-02-04 17:30:01
2655	2	1133	NO COMMENT	\N	2014-01-19 08:11:24	2014-01-19 08:11:24
2656	7	1133	NO COMMENT	\N	2014-02-24 09:04:08	2014-02-24 09:04:08
2657	1	1133	NO COMMENT	\N	2014-03-13 20:17:36	2014-03-13 20:17:36
2658	1	1136	NO COMMENT	\N	2014-01-02 12:40:47	2014-01-02 12:40:47
2659	7	1136	NO COMMENT	\N	2014-02-21 12:08:50	2014-02-21 12:08:50
2660	2	1136	NO COMMENT	\N	2014-02-21 13:14:31	2014-02-21 13:14:31
2661	47	1161	NO COMMENT	\N	2014-03-04 03:21:57	2014-03-04 03:21:57
2662	23	1161	NO COMMENT	\N	2014-03-09 05:50:54	2014-03-09 05:50:54
2663	6	1161	NO COMMENT	\N	2014-03-13 22:57:55	2014-03-13 22:57:55
2664	7	1161	NO COMMENT	\N	2014-03-18 08:43:52	2014-03-18 08:43:52
2665	7	1137	NO COMMENT	\N	2014-01-05 10:25:59	2014-01-05 10:25:59
2666	18	1137	NO COMMENT	\N	2014-02-11 06:04:25	2014-02-11 06:04:25
2667	1	1137	NO COMMENT	\N	2014-03-11 10:22:11	2014-03-11 10:22:11
2668	2	1137	NO COMMENT	\N	2014-03-19 20:58:12	2014-03-19 20:58:12
2669	14	1138	NO COMMENT	\N	2014-02-04 23:20:15	2014-02-04 23:20:15
2670	2	1139	NO COMMENT	\N	2014-02-13 22:45:45	2014-02-13 22:45:45
2671	7	1139	NO COMMENT	\N	2014-02-22 16:19:16	2014-02-22 16:19:16
2672	18	1139	NO COMMENT	\N	2014-03-08 07:13:11	2014-03-08 07:13:11
2673	1	1139	NO COMMENT	\N	2014-03-12 16:53:53	2014-03-12 16:53:53
2674	46	1139	NO COMMENT	\N	2014-03-20 02:45:34	2014-03-20 02:45:34
2675	7	1140	NO COMMENT	\N	2013-10-24 10:09:19	2013-10-24 10:09:19
2676	2	1140	NO COMMENT	\N	2014-01-28 21:48:54	2014-01-28 21:48:54
2677	1	1140	NO COMMENT	\N	2014-01-30 06:38:46	2014-01-30 06:38:46
2678	7	1142	NO COMMENT	\N	2013-11-21 21:19:34	2013-11-21 21:19:34
2679	2	1142	NO COMMENT	\N	2013-11-27 18:38:49	2013-11-27 18:38:49
2680	1	1142	NO COMMENT	\N	2013-12-09 11:34:12	2013-12-09 11:34:12
2681	1	1143	NO COMMENT	\N	2013-11-29 22:31:27	2013-11-29 22:31:27
2682	2	1143	NO COMMENT	\N	2014-02-20 01:41:53	2014-02-20 01:41:53
2683	7	1143	NO COMMENT	\N	2014-02-26 20:53:18	2014-02-26 20:53:18
2684	2	1144	NO COMMENT	\N	2014-03-01 01:55:15	2014-03-01 01:55:15
2685	1	1144	NO COMMENT	\N	2014-03-02 01:09:31	2014-03-02 01:09:31
2686	7	1144	NO COMMENT	\N	2014-03-17 20:36:15	2014-03-17 20:36:15
2687	7	1145	NO COMMENT	\N	2013-12-31 21:18:37	2013-12-31 21:18:37
2688	2	1145	NO COMMENT	\N	2014-01-01 22:00:58	2014-01-01 22:00:58
2689	1	1145	NO COMMENT	\N	2014-03-18 18:10:24	2014-03-18 18:10:24
2690	1	1147	NO COMMENT	\N	2013-10-22 00:45:50	2013-10-22 00:45:50
2691	2	1147	NO COMMENT	\N	2013-11-03 14:06:04	2013-11-03 14:06:04
2692	7	1147	NO COMMENT	\N	2013-12-02 01:28:11	2013-12-02 01:28:11
2693	7	1149	NO COMMENT	\N	2014-01-11 23:43:42	2014-01-11 23:43:42
2694	2	1149	NO COMMENT	\N	2014-02-02 11:30:21	2014-02-02 11:30:21
2695	1	1149	NO COMMENT	\N	2014-03-08 02:15:48	2014-03-08 02:15:48
2696	2	1150	NO COMMENT	\N	2013-11-14 14:27:27	2013-11-14 14:27:27
2697	1	1150	NO COMMENT	\N	2013-12-07 03:58:33	2013-12-07 03:58:33
2698	7	1150	NO COMMENT	\N	2013-12-22 10:05:07	2013-12-22 10:05:07
2699	2	1151	NO COMMENT	\N	2014-01-21 15:32:24	2014-01-21 15:32:24
2700	7	1151	NO COMMENT	\N	2014-02-06 00:52:19	2014-02-06 00:52:19
2701	1	1151	NO COMMENT	\N	2014-03-10 11:21:27	2014-03-10 11:21:27
2702	2	1152	NO COMMENT	\N	2013-10-21 20:19:23	2013-10-21 20:19:23
2703	7	1152	NO COMMENT	\N	2013-10-23 00:59:25	2013-10-23 00:59:25
2704	1	1152	NO COMMENT	\N	2013-11-15 12:51:54	2013-11-15 12:51:54
2705	7	1153	NO COMMENT	\N	2014-01-14 01:04:02	2014-01-14 01:04:02
2706	1	1153	NO COMMENT	\N	2014-02-06 11:49:07	2014-02-06 11:49:07
2707	2	1153	NO COMMENT	\N	2014-03-14 22:55:07	2014-03-14 22:55:07
2708	2	1154	NO COMMENT	\N	2014-01-08 14:26:12	2014-01-08 14:26:12
2709	7	1154	NO COMMENT	\N	2014-01-08 15:08:33	2014-01-08 15:08:33
2710	1	1154	NO COMMENT	\N	2014-01-21 12:49:15	2014-01-21 12:49:15
2711	7	1156	NO COMMENT	\N	2013-12-11 08:25:37	2013-12-11 08:25:37
2712	1	1156	NO COMMENT	\N	2014-01-28 00:37:16	2014-01-28 00:37:16
2713	2	1156	NO COMMENT	\N	2014-03-19 03:07:44	2014-03-19 03:07:44
2714	2	1157	NO COMMENT	\N	2013-11-12 22:46:21	2013-11-12 22:46:21
2715	7	1157	NO COMMENT	\N	2013-11-25 00:57:05	2013-11-25 00:57:05
2716	1	1157	NO COMMENT	\N	2013-12-29 17:59:40	2013-12-29 17:59:40
2717	6	1159	NO COMMENT	\N	2014-02-04 01:59:15	2014-02-04 01:59:15
2718	23	1159	NO COMMENT	\N	2014-02-14 07:05:40	2014-02-14 07:05:40
2719	7	1159	NO COMMENT	\N	2014-02-20 07:20:32	2014-02-20 07:20:32
2720	23	1160	NO COMMENT	\N	2014-03-12 01:41:17	2014-03-12 01:41:17
2721	47	1160	NO COMMENT	\N	2014-03-13 16:44:19	2014-03-13 16:44:19
2722	7	1160	NO COMMENT	\N	2014-03-14 21:26:48	2014-03-14 21:26:48
2723	24	1167	NO COMMENT	\N	2014-02-10 10:48:51	2014-02-10 10:48:51
2724	45	1167	NO COMMENT	\N	2014-02-26 07:35:42	2014-02-26 07:35:42
2725	7	1168	NO COMMENT	\N	2014-02-19 10:56:26	2014-02-19 10:56:26
2726	6	1168	NO COMMENT	\N	2014-03-03 03:52:33	2014-03-03 03:52:33
2727	45	1168	NO COMMENT	\N	2014-03-09 11:36:44	2014-03-09 11:36:44
2728	14	1168	NO COMMENT	\N	2014-03-17 18:47:45	2014-03-17 18:47:45
2729	7	1169	NO COMMENT	\N	2014-02-26 04:59:36	2014-02-26 04:59:36
2730	14	1169	NO COMMENT	\N	2014-02-26 22:26:43	2014-02-26 22:26:43
2731	46	1169	NO COMMENT	\N	2014-03-06 02:44:21	2014-03-06 02:44:21
2732	45	1169	NO COMMENT	\N	2014-03-07 20:40:07	2014-03-07 20:40:07
2733	23	1169	NO COMMENT	\N	2014-03-11 15:24:16	2014-03-11 15:24:16
2734	17	1169	NO COMMENT	\N	2014-03-12 05:55:49	2014-03-12 05:55:49
2735	31	1169	NO COMMENT	\N	2014-03-20 21:00:12	2014-03-20 21:00:12
2736	31	1171	NO COMMENT	\N	2014-03-11 20:16:05	2014-03-11 20:16:05
2737	6	1171	NO COMMENT	\N	2014-03-12 01:24:27	2014-03-12 01:24:27
2738	24	1171	NO COMMENT	\N	2014-03-15 10:11:40	2014-03-15 10:11:40
2739	34	1171	NO COMMENT	\N	2014-03-20 10:39:44	2014-03-20 10:39:44
2740	7	1172	NO COMMENT	\N	2014-02-15 21:29:15	2014-02-15 21:29:15
2741	7	1174	NO COMMENT	\N	2014-03-11 11:33:52	2014-03-11 11:33:52
2742	19	1175	NO COMMENT	\N	2014-02-27 07:57:49	2014-02-27 07:57:49
2743	7	1175	NO COMMENT	\N	2014-03-20 20:35:40	2014-03-20 20:35:40
2744	7	1176	NO COMMENT	\N	2014-02-05 16:15:38	2014-02-05 16:15:38
2745	19	1176	NO COMMENT	\N	2014-03-03 05:32:24	2014-03-03 05:32:24
2746	35	1176	NO COMMENT	\N	2014-03-15 06:58:36	2014-03-15 06:58:36
2747	9	1177	NO COMMENT	\N	2014-03-02 07:42:48	2014-03-02 07:42:48
2748	7	1178	NO COMMENT	\N	2014-01-24 03:27:01	2014-01-24 03:27:01
2749	14	1178	NO COMMENT	\N	2014-03-07 16:09:13	2014-03-07 16:09:13
2750	18	1178	NO COMMENT	\N	2014-03-15 19:43:15	2014-03-15 19:43:15
2751	18	1179	NO COMMENT	\N	2014-02-11 20:12:26	2014-02-11 20:12:26
2752	7	1179	NO COMMENT	\N	2014-02-14 20:18:17	2014-02-14 20:18:17
2753	14	1179	NO COMMENT	\N	2014-03-01 11:47:27	2014-03-01 11:47:27
2754	7	1180	NO COMMENT	\N	2014-02-11 09:08:48	2014-02-11 09:08:48
2755	18	1180	NO COMMENT	\N	2014-02-16 19:11:29	2014-02-16 19:11:29
2756	14	1180	NO COMMENT	\N	2014-03-08 20:51:57	2014-03-08 20:51:57
2757	7	1181	NO COMMENT	\N	2014-02-10 09:51:14	2014-02-10 09:51:14
2758	18	1181	NO COMMENT	\N	2014-02-12 06:47:51	2014-02-12 06:47:51
2759	14	1181	NO COMMENT	\N	2014-02-20 00:38:04	2014-02-20 00:38:04
2760	41	1182	NO COMMENT	\N	2014-02-27 09:15:14	2014-02-27 09:15:14
2761	21	1182	NO COMMENT	\N	2014-03-10 22:04:38	2014-03-10 22:04:38
2762	18	1182	NO COMMENT	\N	2014-03-13 13:30:23	2014-03-13 13:30:23
2763	46	1182	NO COMMENT	\N	2014-03-16 18:10:29	2014-03-16 18:10:29
2764	10	1182	NO COMMENT	\N	2014-03-18 10:03:48	2014-03-18 10:03:48
2765	7	1184	NO COMMENT	\N	2014-02-16 11:46:07	2014-02-16 11:46:07
2766	7	1185	NO COMMENT	\N	2014-02-16 11:51:43	2014-02-16 11:51:43
2767	12	1187	NO COMMENT	\N	2014-01-28 20:15:45	2014-01-28 20:15:45
2768	7	1188	NO COMMENT	\N	2014-02-04 16:31:40	2014-02-04 16:31:40
2769	28	1188	NO COMMENT	\N	2014-02-13 10:42:37	2014-02-13 10:42:37
2770	17	1188	NO COMMENT	\N	2014-02-25 18:09:09	2014-02-25 18:09:09
2771	12	1188	NO COMMENT	\N	2014-02-26 05:29:17	2014-02-26 05:29:17
2772	22	1188	NO COMMENT	\N	2014-03-01 16:06:53	2014-03-01 16:06:53
2773	48	1188	NO COMMENT	\N	2014-03-03 02:44:56	2014-03-03 02:44:56
2774	19	1191	NO COMMENT	\N	2014-02-07 21:19:42	2014-02-07 21:19:42
2775	44	1191	NO COMMENT	\N	2014-03-07 05:51:41	2014-03-07 05:51:41
2776	7	1191	NO COMMENT	\N	2014-03-18 05:53:29	2014-03-18 05:53:29
2777	7	1193	NO COMMENT	\N	2014-03-03 00:46:28	2014-03-03 00:46:28
2778	29	1193	NO COMMENT	\N	2014-03-03 11:20:04	2014-03-03 11:20:04
2779	29	1194	NO COMMENT	\N	2014-01-28 22:07:27	2014-01-28 22:07:27
2780	7	1194	NO COMMENT	\N	2014-02-13 22:14:42	2014-02-13 22:14:42
2781	29	1196	NO COMMENT	\N	2014-02-12 15:03:25	2014-02-12 15:03:25
2782	7	1196	NO COMMENT	\N	2014-02-19 19:53:39	2014-02-19 19:53:39
2783	7	1197	NO COMMENT	\N	2014-03-07 22:40:59	2014-03-07 22:40:59
2784	7	1198	NO COMMENT	\N	2013-11-20 10:13:48	2013-11-20 10:13:48
2785	7	1199	NO COMMENT	\N	2013-10-03 23:36:47	2013-10-03 23:36:47
2786	7	1200	NO COMMENT	\N	2014-01-27 00:48:11	2014-01-27 00:48:11
2787	7	1201	NO COMMENT	\N	2014-02-16 12:39:19	2014-02-16 12:39:19
2788	7	1202	NO COMMENT	\N	2013-12-07 04:33:51	2013-12-07 04:33:51
2789	7	1203	NO COMMENT	\N	2014-02-27 08:17:41	2014-02-27 08:17:41
2790	7	1217	NO COMMENT	\N	2013-10-09 08:24:16	2013-10-09 08:24:16
2791	7	1204	NO COMMENT	\N	2014-03-11 10:35:32	2014-03-11 10:35:32
2792	7	1206	NO COMMENT	\N	2013-10-21 17:02:23	2013-10-21 17:02:23
2793	7	1207	NO COMMENT	\N	2013-09-03 20:18:53	2013-09-03 20:18:53
2794	7	1208	NO COMMENT	\N	2014-01-06 17:16:50	2014-01-06 17:16:50
2795	7	1209	NO COMMENT	\N	2014-02-24 15:07:10	2014-02-24 15:07:10
2796	7	1210	NO COMMENT	\N	2014-03-10 09:26:28	2014-03-10 09:26:28
2797	7	1212	NO COMMENT	\N	2013-11-29 15:40:08	2013-11-29 15:40:08
2798	13	1213	NO COMMENT	\N	2013-12-23 23:34:50	2013-12-23 23:34:50
2799	7	1213	NO COMMENT	\N	2014-02-06 00:10:54	2014-02-06 00:10:54
2800	7	1214	NO COMMENT	\N	2013-12-16 12:28:27	2013-12-16 12:28:27
2801	18	1215	NO COMMENT	\N	2014-01-03 15:55:02	2014-01-03 15:55:02
2802	7	1215	NO COMMENT	\N	2014-01-08 00:00:48	2014-01-08 00:00:48
2803	7	1216	NO COMMENT	\N	2014-01-04 19:40:54	2014-01-04 19:40:54
2804	18	1216	NO COMMENT	\N	2014-01-15 01:01:18	2014-01-15 01:01:18
2805	7	1218	NO COMMENT	\N	2013-09-12 14:31:53	2013-09-12 14:31:53
2806	22	1219	NO COMMENT	\N	2014-01-25 19:27:51	2014-01-25 19:27:51
2807	28	1219	NO COMMENT	\N	2014-01-27 14:55:48	2014-01-27 14:55:48
2808	7	1219	NO COMMENT	\N	2014-02-23 13:08:50	2014-02-23 13:08:50
2809	7	1220	NO COMMENT	\N	2013-11-01 16:29:16	2013-11-01 16:29:16
2810	7	1221	NO COMMENT	\N	2013-10-27 07:41:14	2013-10-27 07:41:14
2811	7	1222	NO COMMENT	\N	2013-12-25 13:23:56	2013-12-25 13:23:56
2812	7	1224	NO COMMENT	\N	2014-02-24 12:26:54	2014-02-24 12:26:54
2813	22	1224	NO COMMENT	\N	2014-03-01 13:46:01	2014-03-01 13:46:01
2814	41	1224	NO COMMENT	\N	2014-03-15 20:57:42	2014-03-15 20:57:42
2815	7	1225	NO COMMENT	\N	2013-12-06 22:10:59	2013-12-06 22:10:59
2816	13	1225	NO COMMENT	\N	2014-03-12 08:45:34	2014-03-12 08:45:34
2817	7	1227	NO COMMENT	\N	2014-02-16 05:38:22	2014-02-16 05:38:22
2818	13	1227	NO COMMENT	\N	2014-03-07 19:48:04	2014-03-07 19:48:04
2819	7	1228	NO COMMENT	\N	2014-01-25 20:13:23	2014-01-25 20:13:23
2820	44	1228	NO COMMENT	\N	2014-02-03 09:02:17	2014-02-03 09:02:17
2821	13	1228	NO COMMENT	\N	2014-02-06 20:51:09	2014-02-06 20:51:09
2822	13	1229	NO COMMENT	\N	2014-02-05 13:45:49	2014-02-05 13:45:49
2823	7	1229	NO COMMENT	\N	2014-02-11 20:43:04	2014-02-11 20:43:04
2824	44	1229	NO COMMENT	\N	2014-02-24 01:15:41	2014-02-24 01:15:41
2825	7	1230	NO COMMENT	\N	2013-12-29 14:07:44	2013-12-29 14:07:44
2826	7	1232	NO COMMENT	\N	2014-03-11 09:36:31	2014-03-11 09:36:31
2827	44	1233	NO COMMENT	\N	2014-02-08 00:40:03	2014-02-08 00:40:03
2828	7	1233	NO COMMENT	\N	2014-03-11 12:52:14	2014-03-11 12:52:14
2829	22	1233	NO COMMENT	\N	2014-03-14 02:55:02	2014-03-14 02:55:02
2830	20	1234	NO COMMENT	\N	2014-03-13 17:56:56	2014-03-13 17:56:56
2831	28	1234	NO COMMENT	\N	2014-03-14 01:38:19	2014-03-14 01:38:19
2832	33	1234	NO COMMENT	\N	2014-03-19 00:41:16	2014-03-19 00:41:16
2833	41	1235	NO COMMENT	\N	2013-12-31 14:56:46	2013-12-31 14:56:46
2834	7	1235	NO COMMENT	\N	2014-01-11 13:26:34	2014-01-11 13:26:34
2835	28	1235	NO COMMENT	\N	2014-02-22 11:00:10	2014-02-22 11:00:10
2836	7	1236	NO COMMENT	\N	2014-01-08 19:21:05	2014-01-08 19:21:05
2837	7	1237	NO COMMENT	\N	2014-02-28 07:44:49	2014-02-28 07:44:49
2838	7	1238	NO COMMENT	\N	2014-02-27 13:01:11	2014-02-27 13:01:11
2839	7	1239	NO COMMENT	\N	2014-01-11 06:50:52	2014-01-11 06:50:52
2840	7	1240	NO COMMENT	\N	2014-02-19 20:02:03	2014-02-19 20:02:03
2841	7	1241	NO COMMENT	\N	2014-01-22 05:13:51	2014-01-22 05:13:51
2842	10	1241	NO COMMENT	\N	2014-03-06 06:50:56	2014-03-06 06:50:56
2843	7	1242	NO COMMENT	\N	2014-01-31 00:26:32	2014-01-31 00:26:32
2844	7	1243	NO COMMENT	\N	2014-03-09 13:04:25	2014-03-09 13:04:25
2845	10	1243	NO COMMENT	\N	2014-03-16 01:48:45	2014-03-16 01:48:45
2846	20	1243	NO COMMENT	\N	2014-03-18 01:09:08	2014-03-18 01:09:08
2847	7	1244	NO COMMENT	\N	2013-12-07 21:48:35	2013-12-07 21:48:35
2848	7	1246	NO COMMENT	\N	2013-12-17 12:29:17	2013-12-17 12:29:17
2849	14	1247	NO COMMENT	\N	2014-01-02 13:24:28	2014-01-02 13:24:28
2850	7	1247	NO COMMENT	\N	2014-02-18 01:01:06	2014-02-18 01:01:06
2851	14	1248	NO COMMENT	\N	2014-02-16 17:36:48	2014-02-16 17:36:48
2852	7	1248	NO COMMENT	\N	2014-03-02 16:34:51	2014-03-02 16:34:51
2853	14	1249	NO COMMENT	\N	2014-01-27 16:39:35	2014-01-27 16:39:35
2854	7	1249	NO COMMENT	\N	2014-02-16 22:14:21	2014-02-16 22:14:21
2855	7	1250	NO COMMENT	\N	2014-03-17 04:41:34	2014-03-17 04:41:34
2856	7	1251	NO COMMENT	\N	2014-02-25 08:43:57	2014-02-25 08:43:57
2857	7	1253	NO COMMENT	\N	2014-02-05 19:52:44	2014-02-05 19:52:44
2858	7	1254	NO COMMENT	\N	2013-12-30 03:50:07	2013-12-30 03:50:07
2859	7	1255	NO COMMENT	\N	2014-03-02 12:14:23	2014-03-02 12:14:23
2860	7	1256	NO COMMENT	\N	2014-03-20 07:12:54	2014-03-20 07:12:54
2861	7	1257	NO COMMENT	\N	2013-12-14 09:31:23	2013-12-14 09:31:23
2862	7	1258	NO COMMENT	\N	2014-02-28 13:08:45	2014-02-28 13:08:45
2863	7	1259	NO COMMENT	\N	2013-12-23 22:52:35	2013-12-23 22:52:35
2864	7	1263	NO COMMENT	\N	2013-11-21 20:59:09	2013-11-21 20:59:09
2865	7	1264	NO COMMENT	\N	2014-01-29 00:48:04	2014-01-29 00:48:04
2866	7	1265	NO COMMENT	\N	2013-12-19 15:22:56	2013-12-19 15:22:56
2867	7	1266	NO COMMENT	\N	2014-01-02 11:20:34	2014-01-02 11:20:34
2868	20	1269	NO COMMENT	\N	2014-02-18 08:10:46	2014-02-18 08:10:46
2869	1	1269	NO COMMENT	\N	2014-02-22 10:56:49	2014-02-22 10:56:49
2870	2	1269	NO COMMENT	\N	2014-03-16 21:12:28	2014-03-16 21:12:28
2871	7	1270	NO COMMENT	\N	2014-02-27 12:16:40	2014-02-27 12:16:40
2872	2	1271	NO COMMENT	\N	2014-02-25 15:48:14	2014-02-25 15:48:14
2873	7	1274	NO COMMENT	\N	2014-03-03 10:54:27	2014-03-03 10:54:27
2874	2	1274	NO COMMENT	\N	2014-03-08 20:32:15	2014-03-08 20:32:15
2875	1	1274	NO COMMENT	\N	2014-03-14 01:05:57	2014-03-14 01:05:57
2876	44	1275	NO COMMENT	\N	2014-02-16 13:44:56	2014-02-16 13:44:56
2877	1	1275	NO COMMENT	\N	2014-02-19 20:53:23	2014-02-19 20:53:23
2878	2	1275	NO COMMENT	\N	2014-02-22 20:07:04	2014-02-22 20:07:04
2879	24	1275	NO COMMENT	\N	2014-03-20 02:16:22	2014-03-20 02:16:22
2880	7	1276	NO COMMENT	\N	2014-02-14 13:29:25	2014-02-14 13:29:25
2881	35	1276	NO COMMENT	\N	2014-02-17 19:37:05	2014-02-17 19:37:05
2882	47	1276	NO COMMENT	\N	2014-02-22 13:33:05	2014-02-22 13:33:05
2883	2	1276	NO COMMENT	\N	2014-02-26 23:40:04	2014-02-26 23:40:04
2884	1	1276	NO COMMENT	\N	2014-03-11 08:09:05	2014-03-11 08:09:05
2885	19	1277	NO COMMENT	\N	2014-02-13 12:26:57	2014-02-13 12:26:57
2886	1	1277	NO COMMENT	\N	2014-02-16 12:02:00	2014-02-16 12:02:00
2887	7	1277	NO COMMENT	\N	2014-03-02 16:20:29	2014-03-02 16:20:29
2888	2	1277	NO COMMENT	\N	2014-03-10 13:52:18	2014-03-10 13:52:18
2889	35	1277	NO COMMENT	\N	2014-03-19 00:06:32	2014-03-19 00:06:32
2890	19	1278	NO COMMENT	\N	2014-02-27 12:53:15	2014-02-27 12:53:15
2891	33	1278	NO COMMENT	\N	2014-02-28 08:09:55	2014-02-28 08:09:55
2892	18	1278	NO COMMENT	\N	2014-03-01 07:41:18	2014-03-01 07:41:18
2893	13	1278	NO COMMENT	\N	2014-03-02 13:07:23	2014-03-02 13:07:23
2894	6	1278	NO COMMENT	\N	2014-03-02 16:05:46	2014-03-02 16:05:46
2895	7	1278	NO COMMENT	\N	2014-03-06 02:35:29	2014-03-06 02:35:29
2896	35	1278	NO COMMENT	\N	2014-03-06 20:39:47	2014-03-06 20:39:47
2897	22	1278	NO COMMENT	\N	2014-03-06 21:03:52	2014-03-06 21:03:52
2898	1	1278	NO COMMENT	\N	2014-03-12 00:28:14	2014-03-12 00:28:14
2899	43	1278	NO COMMENT	\N	2014-03-18 14:28:50	2014-03-18 14:28:50
2900	2	1278	NO COMMENT	\N	2014-03-19 04:01:16	2014-03-19 04:01:16
2901	18	1279	NO COMMENT	\N	2014-03-09 07:17:35	2014-03-09 07:17:35
2902	22	1279	NO COMMENT	\N	2014-03-15 16:16:49	2014-03-15 16:16:49
2903	2	1280	NO COMMENT	\N	2014-01-19 21:12:21	2014-01-19 21:12:21
2904	1	1280	NO COMMENT	\N	2014-02-09 16:28:43	2014-02-09 16:28:43
2905	7	1280	NO COMMENT	\N	2014-02-19 04:01:30	2014-02-19 04:01:30
2906	5	1280	NO COMMENT	\N	2014-02-19 12:07:59	2014-02-19 12:07:59
2907	1	1281	NO COMMENT	\N	2014-01-11 02:26:34	2014-01-11 02:26:34
2908	2	1281	NO COMMENT	\N	2014-02-11 19:21:43	2014-02-11 19:21:43
2909	7	1281	NO COMMENT	\N	2014-03-10 23:10:36	2014-03-10 23:10:36
2910	2	1282	NO COMMENT	\N	2014-01-21 04:02:47	2014-01-21 04:02:47
2911	1	1282	NO COMMENT	\N	2014-02-17 16:03:31	2014-02-17 16:03:31
2912	7	1282	NO COMMENT	\N	2014-02-28 21:20:33	2014-02-28 21:20:33
2913	7	1284	NO COMMENT	\N	2014-02-09 05:19:57	2014-02-09 05:19:57
2914	2	1284	NO COMMENT	\N	2014-03-05 01:11:01	2014-03-05 01:11:01
2915	7	1312	NO COMMENT	\N	2014-01-03 00:13:12	2014-01-03 00:13:12
2916	42	1312	NO COMMENT	\N	2014-02-25 04:01:33	2014-02-25 04:01:33
2917	5	1420	NO COMMENT	\N	2014-02-13 11:09:01	2014-02-13 11:09:01
2918	1	1285	NO COMMENT	\N	2014-01-31 03:44:04	2014-01-31 03:44:04
2919	7	1285	NO COMMENT	\N	2014-02-14 03:40:46	2014-02-14 03:40:46
2920	2	1285	NO COMMENT	\N	2014-02-23 22:27:46	2014-02-23 22:27:46
2921	7	1286	NO COMMENT	\N	2014-01-25 16:36:22	2014-01-25 16:36:22
2922	42	1286	NO COMMENT	\N	2014-02-03 18:02:41	2014-02-03 18:02:41
2923	2	1286	NO COMMENT	\N	2014-02-23 14:27:49	2014-02-23 14:27:49
2924	1	1286	NO COMMENT	\N	2014-03-12 01:55:35	2014-03-12 01:55:35
2925	1	1287	NO COMMENT	\N	2014-01-31 15:42:14	2014-01-31 15:42:14
2926	7	1287	NO COMMENT	\N	2014-02-06 20:18:54	2014-02-06 20:18:54
2927	44	1287	NO COMMENT	\N	2014-02-09 23:26:26	2014-02-09 23:26:26
2928	13	1287	NO COMMENT	\N	2014-02-27 11:18:34	2014-02-27 11:18:34
2929	2	1287	NO COMMENT	\N	2014-03-05 08:03:12	2014-03-05 08:03:12
2930	13	1289	NO COMMENT	\N	2014-02-22 19:47:05	2014-02-22 19:47:05
2931	7	1289	NO COMMENT	\N	2014-02-24 02:28:55	2014-02-24 02:28:55
2932	45	1289	NO COMMENT	\N	2014-02-26 01:09:13	2014-02-26 01:09:13
2933	1	1289	NO COMMENT	\N	2014-02-28 03:45:32	2014-02-28 03:45:32
2934	2	1289	NO COMMENT	\N	2014-03-05 19:10:55	2014-03-05 19:10:55
2935	5	1289	NO COMMENT	\N	2014-03-06 12:20:49	2014-03-06 12:20:49
2936	20	1290	NO COMMENT	\N	2014-03-05 05:16:25	2014-03-05 05:16:25
2937	44	1290	NO COMMENT	\N	2014-03-11 21:27:25	2014-03-11 21:27:25
2938	26	1290	NO COMMENT	\N	2014-03-17 15:41:58	2014-03-17 15:41:58
2939	20	1291	NO COMMENT	\N	2014-03-04 18:59:08	2014-03-04 18:59:08
2940	1	1291	NO COMMENT	\N	2014-03-06 21:32:22	2014-03-06 21:32:22
2941	26	1291	NO COMMENT	\N	2014-03-15 00:46:22	2014-03-15 00:46:22
2942	45	1291	NO COMMENT	\N	2014-03-15 18:14:33	2014-03-15 18:14:33
2943	13	1291	NO COMMENT	\N	2014-03-16 18:00:14	2014-03-16 18:00:14
2944	20	1292	NO COMMENT	\N	2014-02-24 17:08:17	2014-02-24 17:08:17
2945	5	1292	NO COMMENT	\N	2014-02-27 21:48:27	2014-02-27 21:48:27
2946	1	1292	NO COMMENT	\N	2014-03-01 07:43:58	2014-03-01 07:43:58
2947	7	1292	NO COMMENT	\N	2014-03-09 04:45:20	2014-03-09 04:45:20
2948	2	1292	NO COMMENT	\N	2014-03-19 02:11:40	2014-03-19 02:11:40
2949	9	1292	NO COMMENT	\N	2014-03-20 07:20:38	2014-03-20 07:20:38
2950	2	1293	NO COMMENT	\N	2014-02-08 18:37:52	2014-02-08 18:37:52
2951	7	1293	NO COMMENT	\N	2014-03-11 00:09:46	2014-03-11 00:09:46
2952	2	1294	NO COMMENT	\N	2014-02-16 00:26:14	2014-02-16 00:26:14
2953	7	1294	NO COMMENT	\N	2014-02-26 11:35:06	2014-02-26 11:35:06
2954	1	1294	NO COMMENT	\N	2014-03-10 23:44:07	2014-03-10 23:44:07
2955	1	1295	NO COMMENT	\N	2014-02-10 05:48:31	2014-02-10 05:48:31
2956	13	1295	NO COMMENT	\N	2014-03-06 16:01:18	2014-03-06 16:01:18
2957	2	1295	NO COMMENT	\N	2014-03-10 09:25:21	2014-03-10 09:25:21
2958	7	1295	NO COMMENT	\N	2014-03-15 00:15:50	2014-03-15 00:15:50
2959	7	1296	NO COMMENT	\N	2014-03-13 14:14:40	2014-03-13 14:14:40
2960	1	1296	NO COMMENT	\N	2014-03-17 17:45:18	2014-03-17 17:45:18
2961	2	1296	NO COMMENT	\N	2014-03-20 19:24:17	2014-03-20 19:24:17
2962	2	1298	NO COMMENT	\N	2014-02-21 01:12:31	2014-02-21 01:12:31
2963	7	1298	NO COMMENT	\N	2014-03-08 18:14:00	2014-03-08 18:14:00
2964	1	1298	NO COMMENT	\N	2014-03-11 22:33:18	2014-03-11 22:33:18
2965	1	1299	NO COMMENT	\N	2014-02-08 23:12:49	2014-02-08 23:12:49
2966	2	1299	NO COMMENT	\N	2014-02-19 07:47:16	2014-02-19 07:47:16
2967	7	1299	NO COMMENT	\N	2014-03-02 12:02:30	2014-03-02 12:02:30
2968	42	1299	NO COMMENT	\N	2014-03-15 15:40:01	2014-03-15 15:40:01
2969	17	1300	NO COMMENT	\N	2014-02-16 04:52:03	2014-02-16 04:52:03
2970	1	1300	NO COMMENT	\N	2014-02-24 04:57:28	2014-02-24 04:57:28
2971	2	1300	NO COMMENT	\N	2014-02-25 16:30:30	2014-02-25 16:30:30
2972	14	1301	NO COMMENT	\N	2014-01-30 11:24:03	2014-01-30 11:24:03
2973	2	1301	NO COMMENT	\N	2014-02-13 11:47:18	2014-02-13 11:47:18
2974	7	1301	NO COMMENT	\N	2014-02-20 07:33:26	2014-02-20 07:33:26
2975	1	1301	NO COMMENT	\N	2014-03-01 16:24:54	2014-03-01 16:24:54
2976	1	1302	NO COMMENT	\N	2014-02-05 15:08:02	2014-02-05 15:08:02
2977	6	1302	NO COMMENT	\N	2014-02-13 00:41:58	2014-02-13 00:41:58
2978	2	1302	NO COMMENT	\N	2014-02-14 21:46:05	2014-02-14 21:46:05
2979	7	1302	NO COMMENT	\N	2014-02-16 20:15:23	2014-02-16 20:15:23
2980	14	1302	NO COMMENT	\N	2014-02-26 18:49:52	2014-02-26 18:49:52
2981	45	1302	NO COMMENT	\N	2014-03-02 15:25:51	2014-03-02 15:25:51
2982	24	1302	NO COMMENT	\N	2014-03-06 18:09:03	2014-03-06 18:09:03
2983	17	1302	NO COMMENT	\N	2014-03-16 20:55:42	2014-03-16 20:55:42
2984	1	1304	NO COMMENT	\N	2014-01-25 07:18:31	2014-01-25 07:18:31
2985	28	1304	NO COMMENT	\N	2014-01-30 05:43:44	2014-01-30 05:43:44
2986	44	1304	NO COMMENT	\N	2014-01-30 18:32:42	2014-01-30 18:32:42
2987	2	1304	NO COMMENT	\N	2014-03-18 13:49:58	2014-03-18 13:49:58
2988	7	1304	NO COMMENT	\N	2014-03-20 06:32:19	2014-03-20 06:32:19
2989	28	1305	NO COMMENT	\N	2014-01-26 22:42:59	2014-01-26 22:42:59
2990	2	1305	NO COMMENT	\N	2014-01-28 12:23:53	2014-01-28 12:23:53
2991	7	1305	NO COMMENT	\N	2014-02-13 23:13:06	2014-02-13 23:13:06
2992	44	1305	NO COMMENT	\N	2014-02-14 22:52:32	2014-02-14 22:52:32
2993	1	1305	NO COMMENT	\N	2014-03-02 16:37:11	2014-03-02 16:37:11
2994	7	1306	NO COMMENT	\N	2014-02-24 13:18:23	2014-02-24 13:18:23
2995	28	1306	NO COMMENT	\N	2014-02-26 07:49:09	2014-02-26 07:49:09
2996	44	1306	NO COMMENT	\N	2014-03-02 20:41:28	2014-03-02 20:41:28
2997	2	1306	NO COMMENT	\N	2014-03-14 22:33:59	2014-03-14 22:33:59
2998	1	1306	NO COMMENT	\N	2014-03-15 19:23:57	2014-03-15 19:23:57
2999	5	1308	NO COMMENT	\N	2014-03-13 12:42:04	2014-03-13 12:42:04
3000	44	1308	NO COMMENT	\N	2014-03-13 14:50:14	2014-03-13 14:50:14
3001	17	1308	NO COMMENT	\N	2014-03-15 05:01:31	2014-03-15 05:01:31
3002	26	1308	NO COMMENT	\N	2014-03-18 16:12:08	2014-03-18 16:12:08
3003	7	1313	NO COMMENT	\N	2014-03-08 22:29:17	2014-03-08 22:29:17
3004	7	1315	NO COMMENT	\N	2014-01-21 08:54:23	2014-01-21 08:54:23
3005	28	1315	NO COMMENT	\N	2014-02-07 06:07:10	2014-02-07 06:07:10
3006	7	1316	NO COMMENT	\N	2014-01-17 05:32:26	2014-01-17 05:32:26
3007	42	1316	NO COMMENT	\N	2014-03-06 21:33:00	2014-03-06 21:33:00
3008	35	1316	NO COMMENT	\N	2014-03-11 12:29:23	2014-03-11 12:29:23
3009	14	1317	NO COMMENT	\N	2014-01-29 14:23:56	2014-01-29 14:23:56
3010	26	1317	NO COMMENT	\N	2014-02-01 14:39:20	2014-02-01 14:39:20
3011	42	1317	NO COMMENT	\N	2014-03-02 07:42:55	2014-03-02 07:42:55
3012	7	1318	NO COMMENT	\N	2013-12-31 05:29:15	2013-12-31 05:29:15
3013	7	1321	NO COMMENT	\N	2014-02-20 23:26:52	2014-02-20 23:26:52
3014	18	1321	NO COMMENT	\N	2014-03-08 18:53:00	2014-03-08 18:53:00
3015	7	1322	NO COMMENT	\N	2014-02-01 16:05:34	2014-02-01 16:05:34
3016	7	1323	NO COMMENT	\N	2014-03-06 06:24:58	2014-03-06 06:24:58
3017	7	1324	NO COMMENT	\N	2014-01-07 14:40:49	2014-01-07 14:40:49
3018	7	1325	NO COMMENT	\N	2014-03-08 00:52:39	2014-03-08 00:52:39
3019	15	1327	NO COMMENT	\N	2014-02-23 14:26:57	2014-02-23 14:26:57
3020	7	1327	NO COMMENT	\N	2014-03-12 06:26:38	2014-03-12 06:26:38
3021	7	1328	NO COMMENT	\N	2014-03-20 18:47:06	2014-03-20 18:47:06
3022	7	1329	NO COMMENT	\N	2013-12-13 01:06:40	2013-12-13 01:06:40
3023	7	1330	NO COMMENT	\N	2013-12-21 05:31:59	2013-12-21 05:31:59
3024	7	1331	NO COMMENT	\N	2014-03-04 18:17:00	2014-03-04 18:17:00
3025	7	1332	NO COMMENT	\N	2014-02-23 06:59:02	2014-02-23 06:59:02
3026	7	1334	NO COMMENT	\N	2014-03-14 18:37:53	2014-03-14 18:37:53
3027	7	1335	NO COMMENT	\N	2014-03-16 00:57:19	2014-03-16 00:57:19
3028	7	1336	NO COMMENT	\N	2014-03-20 09:48:02	2014-03-20 09:48:02
3029	7	1337	NO COMMENT	\N	2014-01-28 21:08:13	2014-01-28 21:08:13
3030	7	1338	NO COMMENT	\N	2014-03-02 17:51:16	2014-03-02 17:51:16
3031	7	1339	NO COMMENT	\N	2014-03-09 20:48:25	2014-03-09 20:48:25
3032	6	1340	NO COMMENT	\N	2014-01-19 11:13:55	2014-01-19 11:13:55
3033	14	1340	NO COMMENT	\N	2014-02-05 07:19:04	2014-02-05 07:19:04
3034	45	1340	NO COMMENT	\N	2014-02-28 21:56:53	2014-02-28 21:56:53
3035	7	1340	NO COMMENT	\N	2014-03-19 13:08:01	2014-03-19 13:08:01
3036	37	1422	NO COMMENT	\N	2014-03-19 15:12:27	2014-03-19 15:12:27
3037	43	1422	NO COMMENT	\N	2014-03-20 02:58:25	2014-03-20 02:58:25
3038	46	1422	NO COMMENT	\N	2014-03-20 05:05:27	2014-03-20 05:05:27
3039	9	1422	NO COMMENT	\N	2014-03-20 17:37:24	2014-03-20 17:37:24
3040	7	1341	NO COMMENT	\N	2014-02-03 02:55:10	2014-02-03 02:55:10
3041	14	1341	NO COMMENT	\N	2014-02-14 11:29:15	2014-02-14 11:29:15
3042	45	1341	NO COMMENT	\N	2014-02-15 15:50:37	2014-02-15 15:50:37
3043	6	1341	NO COMMENT	\N	2014-02-22 10:21:40	2014-02-22 10:21:40
3044	24	1341	NO COMMENT	\N	2014-03-07 02:28:59	2014-03-07 02:28:59
3045	14	1342	NO COMMENT	\N	2014-02-19 22:50:22	2014-02-19 22:50:22
3046	7	1342	NO COMMENT	\N	2014-02-22 02:13:58	2014-02-22 02:13:58
3047	45	1342	NO COMMENT	\N	2014-02-23 23:54:43	2014-02-23 23:54:43
3048	6	1342	NO COMMENT	\N	2014-02-26 09:09:36	2014-02-26 09:09:36
3049	17	1342	NO COMMENT	\N	2014-03-08 23:30:34	2014-03-08 23:30:34
3050	24	1342	NO COMMENT	\N	2014-03-09 07:17:39	2014-03-09 07:17:39
3051	7	1344	NO COMMENT	\N	2014-02-14 09:36:27	2014-02-14 09:36:27
3052	7	1346	NO COMMENT	\N	2014-01-16 04:43:36	2014-01-16 04:43:36
3053	22	1347	NO COMMENT	\N	2014-02-03 18:16:44	2014-02-03 18:16:44
3054	22	1348	NO COMMENT	\N	2014-01-31 10:29:52	2014-01-31 10:29:52
3055	41	1348	NO COMMENT	\N	2014-02-17 20:12:40	2014-02-17 20:12:40
3056	7	1348	NO COMMENT	\N	2014-03-08 01:20:33	2014-03-08 01:20:33
3057	22	1349	NO COMMENT	\N	2014-02-14 21:49:30	2014-02-14 21:49:30
3058	7	1349	NO COMMENT	\N	2014-02-16 18:54:48	2014-02-16 18:54:48
3059	20	1349	NO COMMENT	\N	2014-02-17 18:58:56	2014-02-17 18:58:56
3060	44	1349	NO COMMENT	\N	2014-02-21 17:59:02	2014-02-21 17:59:02
3061	17	1349	NO COMMENT	\N	2014-02-25 01:48:40	2014-02-25 01:48:40
3062	42	1349	NO COMMENT	\N	2014-02-28 20:28:36	2014-02-28 20:28:36
3063	41	1349	NO COMMENT	\N	2014-03-02 23:50:03	2014-03-02 23:50:03
3064	28	1349	NO COMMENT	\N	2014-03-07 04:26:38	2014-03-07 04:26:38
3065	26	1349	NO COMMENT	\N	2014-03-12 20:22:21	2014-03-12 20:22:21
3066	44	1350	NO COMMENT	\N	2014-03-07 14:52:52	2014-03-07 14:52:52
3067	20	1350	NO COMMENT	\N	2014-03-15 21:17:36	2014-03-15 21:17:36
3068	41	1350	NO COMMENT	\N	2014-03-16 09:58:37	2014-03-16 09:58:37
3069	44	1351	NO COMMENT	\N	2014-03-02 07:00:14	2014-03-02 07:00:14
3070	42	1351	NO COMMENT	\N	2014-03-06 05:24:43	2014-03-06 05:24:43
3071	36	1351	NO COMMENT	\N	2014-03-14 03:00:26	2014-03-14 03:00:26
3072	22	1352	NO COMMENT	\N	2013-12-31 15:49:37	2013-12-31 15:49:37
3073	7	1352	NO COMMENT	\N	2014-02-13 03:21:23	2014-02-13 03:21:23
3074	28	1352	NO COMMENT	\N	2014-02-16 00:52:17	2014-02-16 00:52:17
3075	7	1353	NO COMMENT	\N	2014-02-15 01:42:13	2014-02-15 01:42:13
3076	7	1354	NO COMMENT	\N	2014-02-08 18:08:42	2014-02-08 18:08:42
3077	7	1355	NO COMMENT	\N	2014-01-29 19:29:41	2014-01-29 19:29:41
3078	19	1356	NO COMMENT	\N	2014-01-19 14:54:11	2014-01-19 14:54:11
3079	7	1356	NO COMMENT	\N	2014-02-13 02:30:23	2014-02-13 02:30:23
3080	44	1356	NO COMMENT	\N	2014-02-26 10:15:19	2014-02-26 10:15:19
3081	7	1357	NO COMMENT	\N	2014-02-10 00:25:10	2014-02-10 00:25:10
3082	44	1357	NO COMMENT	\N	2014-03-13 16:09:19	2014-03-13 16:09:19
3083	19	1357	NO COMMENT	\N	2014-03-19 10:48:23	2014-03-19 10:48:23
3084	7	1358	NO COMMENT	\N	2014-03-02 17:52:40	2014-03-02 17:52:40
3085	19	1358	NO COMMENT	\N	2014-03-06 09:35:15	2014-03-06 09:35:15
3086	44	1358	NO COMMENT	\N	2014-03-06 16:12:35	2014-03-06 16:12:35
3087	24	1358	NO COMMENT	\N	2014-03-15 02:33:03	2014-03-15 02:33:03
3088	7	1359	NO COMMENT	\N	2014-03-12 12:24:23	2014-03-12 12:24:23
3089	37	1359	NO COMMENT	\N	2014-03-15 08:05:41	2014-03-15 08:05:41
3090	23	1359	NO COMMENT	\N	2014-03-16 05:37:13	2014-03-16 05:37:13
3091	19	1359	NO COMMENT	\N	2014-03-16 06:21:26	2014-03-16 06:21:26
3092	24	1359	NO COMMENT	\N	2014-03-16 19:49:10	2014-03-16 19:49:10
3093	44	1359	NO COMMENT	\N	2014-03-19 10:10:44	2014-03-19 10:10:44
3094	43	1359	NO COMMENT	\N	2014-03-20 13:57:56	2014-03-20 13:57:56
3095	7	1360	NO COMMENT	\N	2014-01-25 01:07:21	2014-01-25 01:07:21
3096	16	1360	NO COMMENT	\N	2014-03-08 07:59:52	2014-03-08 07:59:52
3097	16	1361	NO COMMENT	\N	2014-01-23 03:13:35	2014-01-23 03:13:35
3098	7	1361	NO COMMENT	\N	2014-02-05 17:40:54	2014-02-05 17:40:54
3099	7	1362	NO COMMENT	\N	2014-03-15 23:42:52	2014-03-15 23:42:52
3100	7	1363	NO COMMENT	\N	2014-03-18 09:06:34	2014-03-18 09:06:34
3101	7	1364	NO COMMENT	\N	2014-03-02 23:12:48	2014-03-02 23:12:48
3102	7	1365	NO COMMENT	\N	2014-02-11 19:52:17	2014-02-11 19:52:17
3103	7	1366	NO COMMENT	\N	2014-02-10 14:05:45	2014-02-10 14:05:45
3104	35	1366	NO COMMENT	\N	2014-03-10 11:27:16	2014-03-10 11:27:16
3105	45	1368	NO COMMENT	\N	2014-02-08 17:19:56	2014-02-08 17:19:56
3106	33	1368	NO COMMENT	\N	2014-02-26 23:52:03	2014-02-26 23:52:03
3107	26	1368	NO COMMENT	\N	2014-03-11 17:36:24	2014-03-11 17:36:24
3108	7	1368	NO COMMENT	\N	2014-03-11 19:07:21	2014-03-11 19:07:21
3109	13	1370	NO COMMENT	\N	2014-03-20 01:15:52	2014-03-20 01:15:52
3110	13	1372	NO COMMENT	\N	2014-02-21 21:52:05	2014-02-21 21:52:05
3111	7	1372	NO COMMENT	\N	2014-03-08 13:51:01	2014-03-08 13:51:01
3112	33	1373	NO COMMENT	\N	2014-01-27 03:26:58	2014-01-27 03:26:58
3113	7	1373	NO COMMENT	\N	2014-02-16 14:21:03	2014-02-16 14:21:03
3114	32	1373	NO COMMENT	\N	2014-02-17 11:59:43	2014-02-17 11:59:43
3115	42	1374	NO COMMENT	\N	2014-01-21 12:17:23	2014-01-21 12:17:23
3116	32	1374	NO COMMENT	\N	2014-02-28 11:05:40	2014-02-28 11:05:40
3117	32	1375	NO COMMENT	\N	2014-01-12 01:48:48	2014-01-12 01:48:48
3118	42	1375	NO COMMENT	\N	2014-02-06 10:38:45	2014-02-06 10:38:45
3119	7	1375	NO COMMENT	\N	2014-03-01 05:31:56	2014-03-01 05:31:56
3120	33	1375	NO COMMENT	\N	2014-03-14 14:20:29	2014-03-14 14:20:29
3121	1	1377	NO COMMENT	\N	2013-12-19 17:18:12	2013-12-19 17:18:12
3122	2	1377	NO COMMENT	\N	2014-01-12 15:31:29	2014-01-12 15:31:29
3123	7	1377	NO COMMENT	\N	2014-01-18 16:36:34	2014-01-18 16:36:34
3124	2	1378	NO COMMENT	\N	2013-12-08 10:17:42	2013-12-08 10:17:42
3125	14	1378	NO COMMENT	\N	2013-12-16 12:43:31	2013-12-16 12:43:31
3126	1	1378	NO COMMENT	\N	2014-02-27 14:06:59	2014-02-27 14:06:59
3127	2	1381	NO COMMENT	\N	2014-01-21 01:51:40	2014-01-21 01:51:40
3128	14	1381	NO COMMENT	\N	2014-01-27 21:17:41	2014-01-27 21:17:41
3129	1	1381	NO COMMENT	\N	2014-02-03 00:20:21	2014-02-03 00:20:21
3130	7	1381	NO COMMENT	\N	2014-02-28 21:03:34	2014-02-28 21:03:34
3131	1	1382	NO COMMENT	\N	2014-02-06 21:11:41	2014-02-06 21:11:41
3132	7	1382	NO COMMENT	\N	2014-02-20 04:17:07	2014-02-20 04:17:07
3133	6	1382	NO COMMENT	\N	2014-03-07 06:27:15	2014-03-07 06:27:15
3134	17	1383	NO COMMENT	\N	2014-02-19 22:45:07	2014-02-19 22:45:07
3135	24	1383	NO COMMENT	\N	2014-02-25 10:25:30	2014-02-25 10:25:30
3136	45	1383	NO COMMENT	\N	2014-03-07 10:58:50	2014-03-07 10:58:50
3137	7	1383	NO COMMENT	\N	2014-03-12 08:32:14	2014-03-12 08:32:14
3138	7	1384	NO COMMENT	\N	2013-12-13 02:38:42	2013-12-13 02:38:42
3139	2	1384	NO COMMENT	\N	2013-12-31 15:02:34	2013-12-31 15:02:34
3140	1	1384	NO COMMENT	\N	2014-03-04 03:01:47	2014-03-04 03:01:47
3141	7	1385	NO COMMENT	\N	2014-01-17 13:51:09	2014-01-17 13:51:09
3142	1	1387	NO COMMENT	\N	2013-12-30 05:25:47	2013-12-30 05:25:47
3143	2	1387	NO COMMENT	\N	2014-02-12 08:55:53	2014-02-12 08:55:53
3144	47	1387	NO COMMENT	\N	2014-02-19 08:39:20	2014-02-19 08:39:20
3145	7	1387	NO COMMENT	\N	2014-03-13 15:02:21	2014-03-13 15:02:21
3146	35	1388	NO COMMENT	\N	2014-01-22 05:45:46	2014-01-22 05:45:46
3147	47	1388	NO COMMENT	\N	2014-01-26 08:00:53	2014-01-26 08:00:53
3148	7	1388	NO COMMENT	\N	2014-02-18 19:02:05	2014-02-18 19:02:05
3149	2	1388	NO COMMENT	\N	2014-03-15 00:14:07	2014-03-15 00:14:07
3150	7	1389	NO COMMENT	\N	2013-11-05 17:13:20	2013-11-05 17:13:20
3151	1	1389	NO COMMENT	\N	2014-01-06 21:13:12	2014-01-06 21:13:12
3152	2	1389	NO COMMENT	\N	2014-03-04 11:54:06	2014-03-04 11:54:06
3153	2	1390	NO COMMENT	\N	2014-01-08 00:34:01	2014-01-08 00:34:01
3154	7	1390	NO COMMENT	\N	2014-02-23 16:42:09	2014-02-23 16:42:09
3155	1	1390	NO COMMENT	\N	2014-03-18 06:24:23	2014-03-18 06:24:23
3156	41	1391	NO COMMENT	\N	2014-02-22 13:46:52	2014-02-22 13:46:52
3157	17	1391	NO COMMENT	\N	2014-03-04 12:36:13	2014-03-04 12:36:13
3158	20	1391	NO COMMENT	\N	2014-03-05 00:02:51	2014-03-05 00:02:51
3159	28	1391	NO COMMENT	\N	2014-03-06 07:42:09	2014-03-06 07:42:09
3160	2	1391	NO COMMENT	\N	2014-03-09 08:02:48	2014-03-09 08:02:48
3161	22	1391	NO COMMENT	\N	2014-03-17 21:30:14	2014-03-17 21:30:14
3162	2	1392	NO COMMENT	\N	2014-02-24 11:27:09	2014-02-24 11:27:09
3163	27	1392	NO COMMENT	\N	2014-03-17 12:43:23	2014-03-17 12:43:23
3164	7	1392	NO COMMENT	\N	2014-03-19 11:43:52	2014-03-19 11:43:52
3165	33	1467	NO COMMENT	\N	2014-02-06 12:40:00	2014-02-06 12:40:00
3166	2	1467	NO COMMENT	\N	2014-02-08 03:53:32	2014-02-08 03:53:32
3167	42	1467	NO COMMENT	\N	2014-03-04 09:25:36	2014-03-04 09:25:36
3168	7	1393	NO COMMENT	\N	2014-03-02 05:05:31	2014-03-02 05:05:31
3169	2	1394	NO COMMENT	\N	2014-01-27 00:00:40	2014-01-27 00:00:40
3170	1	1394	NO COMMENT	\N	2014-02-15 19:03:17	2014-02-15 19:03:17
3171	34	1395	NO COMMENT	\N	2014-02-18 03:15:02	2014-02-18 03:15:02
3172	2	1395	NO COMMENT	\N	2014-03-13 14:12:23	2014-03-13 14:12:23
3173	45	1395	NO COMMENT	\N	2014-03-19 01:52:51	2014-03-19 01:52:51
3174	22	1396	NO COMMENT	\N	2014-02-15 12:45:33	2014-02-15 12:45:33
3175	41	1396	NO COMMENT	\N	2014-03-02 06:10:13	2014-03-02 06:10:13
3176	2	1396	NO COMMENT	\N	2014-03-15 23:31:36	2014-03-15 23:31:36
3177	2	1397	NO COMMENT	\N	2014-02-06 03:56:38	2014-02-06 03:56:38
3178	44	1397	NO COMMENT	\N	2014-02-18 08:19:14	2014-02-18 08:19:14
3179	41	1397	NO COMMENT	\N	2014-03-19 17:00:37	2014-03-19 17:00:37
3180	22	1397	NO COMMENT	\N	2014-03-19 19:16:51	2014-03-19 19:16:51
3181	2	1398	NO COMMENT	\N	2014-02-10 18:16:08	2014-02-10 18:16:08
3182	44	1398	NO COMMENT	\N	2014-02-24 09:57:33	2014-02-24 09:57:33
3183	20	1398	NO COMMENT	\N	2014-03-19 05:49:53	2014-03-19 05:49:53
3184	28	1399	NO COMMENT	\N	2014-02-17 02:49:05	2014-02-17 02:49:05
3185	26	1399	NO COMMENT	\N	2014-02-19 06:56:13	2014-02-19 06:56:13
3186	17	1399	NO COMMENT	\N	2014-02-23 20:34:04	2014-02-23 20:34:04
3187	44	1399	NO COMMENT	\N	2014-02-28 23:04:28	2014-02-28 23:04:28
3188	41	1399	NO COMMENT	\N	2014-03-08 04:58:17	2014-03-08 04:58:17
3189	42	1399	NO COMMENT	\N	2014-03-12 19:44:38	2014-03-12 19:44:38
3190	20	1399	NO COMMENT	\N	2014-03-13 18:38:47	2014-03-13 18:38:47
3191	22	1399	NO COMMENT	\N	2014-03-14 03:40:59	2014-03-14 03:40:59
3192	2	1399	NO COMMENT	\N	2014-03-20 14:51:06	2014-03-20 14:51:06
3193	28	1400	NO COMMENT	\N	2014-02-28 15:38:29	2014-02-28 15:38:29
3194	26	1400	NO COMMENT	\N	2014-03-01 14:10:06	2014-03-01 14:10:06
3195	17	1400	NO COMMENT	\N	2014-03-05 11:55:46	2014-03-05 11:55:46
3196	20	1400	NO COMMENT	\N	2014-03-07 17:20:26	2014-03-07 17:20:26
3197	22	1400	NO COMMENT	\N	2014-03-08 13:19:24	2014-03-08 13:19:24
3198	31	1400	NO COMMENT	\N	2014-03-08 16:36:42	2014-03-08 16:36:42
3199	44	1400	NO COMMENT	\N	2014-03-11 21:42:35	2014-03-11 21:42:35
3200	24	1401	NO COMMENT	\N	2014-03-12 23:38:47	2014-03-12 23:38:47
3201	42	1401	NO COMMENT	\N	2014-03-13 16:04:58	2014-03-13 16:04:58
3202	22	1401	NO COMMENT	\N	2014-03-18 22:58:07	2014-03-18 22:58:07
3203	14	1403	NO COMMENT	\N	2014-02-23 17:26:24	2014-02-23 17:26:24
3204	17	1403	NO COMMENT	\N	2014-03-01 09:58:59	2014-03-01 09:58:59
3205	33	1468	NO COMMENT	\N	2014-02-20 11:02:13	2014-02-20 11:02:13
3206	22	1468	NO COMMENT	\N	2014-03-01 19:07:59	2014-03-01 19:07:59
3207	2	1468	NO COMMENT	\N	2014-03-02 09:46:19	2014-03-02 09:46:19
3208	42	1468	NO COMMENT	\N	2014-03-04 20:58:48	2014-03-04 20:58:48
3209	2	1406	NO COMMENT	\N	2014-02-14 09:54:31	2014-02-14 09:54:31
3210	5	1406	NO COMMENT	\N	2014-03-14 11:25:28	2014-03-14 11:25:28
3211	2	1407	NO COMMENT	\N	2014-02-24 12:14:31	2014-02-24 12:14:31
3212	5	1407	NO COMMENT	\N	2014-03-19 20:32:06	2014-03-19 20:32:06
3213	5	1408	NO COMMENT	\N	2014-02-12 18:58:47	2014-02-12 18:58:47
3214	2	1408	NO COMMENT	\N	2014-03-20 04:34:10	2014-03-20 04:34:10
3215	14	1409	NO COMMENT	\N	2014-02-09 11:37:33	2014-02-09 11:37:33
3216	2	1409	NO COMMENT	\N	2014-02-11 20:39:12	2014-02-11 20:39:12
3217	13	1409	NO COMMENT	\N	2014-03-05 23:15:28	2014-03-05 23:15:28
3218	26	1409	NO COMMENT	\N	2014-03-08 19:58:49	2014-03-08 19:58:49
3219	29	1410	NO COMMENT	\N	2014-03-02 23:08:11	2014-03-02 23:08:11
3220	2	1411	NO COMMENT	\N	2014-03-12 22:11:28	2014-03-12 22:11:28
3221	2	1412	NO COMMENT	\N	2014-02-09 01:35:11	2014-02-09 01:35:11
3222	44	1412	NO COMMENT	\N	2014-03-07 12:49:35	2014-03-07 12:49:35
3223	47	1413	NO COMMENT	\N	2014-02-01 09:53:54	2014-02-01 09:53:54
3224	2	1413	NO COMMENT	\N	2014-02-03 17:09:54	2014-02-03 17:09:54
3225	35	1413	NO COMMENT	\N	2014-02-26 03:19:30	2014-02-26 03:19:30
3226	2	1414	NO COMMENT	\N	2014-02-15 15:11:59	2014-02-15 15:11:59
3227	47	1414	NO COMMENT	\N	2014-02-27 11:01:21	2014-02-27 11:01:21
3228	35	1414	NO COMMENT	\N	2014-03-18 04:58:11	2014-03-18 04:58:11
3229	2	1415	NO COMMENT	\N	2014-03-05 06:34:12	2014-03-05 06:34:12
3230	47	1415	NO COMMENT	\N	2014-03-14 00:04:50	2014-03-14 00:04:50
3231	35	1415	NO COMMENT	\N	2014-03-15 21:13:59	2014-03-15 21:13:59
3232	2	1416	NO COMMENT	\N	2014-02-26 12:56:21	2014-02-26 12:56:21
3233	20	1416	NO COMMENT	\N	2014-03-02 09:30:02	2014-03-02 09:30:02
3234	35	1416	NO COMMENT	\N	2014-03-03 23:06:55	2014-03-03 23:06:55
3235	47	1416	NO COMMENT	\N	2014-03-12 12:43:02	2014-03-12 12:43:02
3236	40	1416	NO COMMENT	\N	2014-03-12 23:39:02	2014-03-12 23:39:02
3237	36	1417	NO COMMENT	\N	2014-02-18 09:06:38	2014-02-18 09:06:38
3238	16	1417	NO COMMENT	\N	2014-02-21 10:34:28	2014-02-21 10:34:28
3239	47	1417	NO COMMENT	\N	2014-03-11 23:23:04	2014-03-11 23:23:04
3240	2	1417	NO COMMENT	\N	2014-03-19 13:06:21	2014-03-19 13:06:21
3241	16	1418	NO COMMENT	\N	2014-03-12 19:15:04	2014-03-12 19:15:04
3242	5	1419	NO COMMENT	\N	2014-02-07 16:30:31	2014-02-07 16:30:31
3243	9	1419	NO COMMENT	\N	2014-02-24 03:21:02	2014-02-24 03:21:02
3244	2	1419	NO COMMENT	\N	2014-03-03 15:57:50	2014-03-03 15:57:50
3245	2	1423	NO COMMENT	\N	2014-03-06 11:25:17	2014-03-06 11:25:17
3246	31	1423	NO COMMENT	\N	2014-03-07 23:23:24	2014-03-07 23:23:24
3247	20	1423	NO COMMENT	\N	2014-03-09 14:31:45	2014-03-09 14:31:45
3248	2	1425	NO COMMENT	\N	2014-02-26 06:08:56	2014-02-26 06:08:56
3249	42	1426	NO COMMENT	\N	2014-02-15 04:33:13	2014-02-15 04:33:13
3250	2	1426	NO COMMENT	\N	2014-02-19 19:46:05	2014-02-19 19:46:05
3251	33	1426	NO COMMENT	\N	2014-03-04 15:36:34	2014-03-04 15:36:34
3252	22	1426	NO COMMENT	\N	2014-03-08 00:08:23	2014-03-08 00:08:23
3253	22	1427	NO COMMENT	\N	2014-02-26 07:12:47	2014-02-26 07:12:47
3254	42	1427	NO COMMENT	\N	2014-03-02 14:02:34	2014-03-02 14:02:34
3255	33	1427	NO COMMENT	\N	2014-03-06 08:20:59	2014-03-06 08:20:59
3256	2	1427	NO COMMENT	\N	2014-03-19 15:13:30	2014-03-19 15:13:30
3257	42	1428	NO COMMENT	\N	2014-02-14 23:36:54	2014-02-14 23:36:54
3258	2	1428	NO COMMENT	\N	2014-02-18 06:20:19	2014-02-18 06:20:19
3259	26	1428	NO COMMENT	\N	2014-03-04 15:07:52	2014-03-04 15:07:52
3260	20	1428	NO COMMENT	\N	2014-03-05 08:08:24	2014-03-05 08:08:24
3261	22	1428	NO COMMENT	\N	2014-03-15 22:27:25	2014-03-15 22:27:25
3262	17	1429	NO COMMENT	\N	2014-02-26 09:43:28	2014-02-26 09:43:28
3263	42	1429	NO COMMENT	\N	2014-02-26 10:04:13	2014-02-26 10:04:13
3264	20	1429	NO COMMENT	\N	2014-02-28 12:17:17	2014-02-28 12:17:17
3265	44	1429	NO COMMENT	\N	2014-03-04 17:35:25	2014-03-04 17:35:25
3266	2	1429	NO COMMENT	\N	2014-03-20 19:22:29	2014-03-20 19:22:29
3267	42	1430	NO COMMENT	\N	2014-02-25 02:51:44	2014-02-25 02:51:44
3268	22	1430	NO COMMENT	\N	2014-03-16 03:32:12	2014-03-16 03:32:12
3269	2	1431	NO COMMENT	\N	2014-02-26 08:54:24	2014-02-26 08:54:24
3270	26	1431	NO COMMENT	\N	2014-02-26 10:01:13	2014-02-26 10:01:13
3271	36	1431	NO COMMENT	\N	2014-02-28 12:22:45	2014-02-28 12:22:45
3272	41	1431	NO COMMENT	\N	2014-02-28 16:25:35	2014-02-28 16:25:35
3273	28	1431	NO COMMENT	\N	2014-03-01 17:24:30	2014-03-01 17:24:30
3274	44	1431	NO COMMENT	\N	2014-03-03 22:19:23	2014-03-03 22:19:23
3275	31	1431	NO COMMENT	\N	2014-03-06 02:15:03	2014-03-06 02:15:03
3276	22	1431	NO COMMENT	\N	2014-03-10 12:47:48	2014-03-10 12:47:48
3277	17	1431	NO COMMENT	\N	2014-03-16 18:56:44	2014-03-16 18:56:44
3278	42	1431	NO COMMENT	\N	2014-03-19 09:41:23	2014-03-19 09:41:23
3279	20	1431	NO COMMENT	\N	2014-03-20 09:27:48	2014-03-20 09:27:48
3280	41	1432	NO COMMENT	\N	2014-03-04 21:04:24	2014-03-04 21:04:24
3281	26	1432	NO COMMENT	\N	2014-03-07 13:21:02	2014-03-07 13:21:02
3282	31	1432	NO COMMENT	\N	2014-03-08 11:56:29	2014-03-08 11:56:29
3283	20	1432	NO COMMENT	\N	2014-03-09 00:18:36	2014-03-09 00:18:36
3284	33	1432	NO COMMENT	\N	2014-03-09 03:53:39	2014-03-09 03:53:39
3285	22	1432	NO COMMENT	\N	2014-03-16 12:00:22	2014-03-16 12:00:22
3286	24	1432	NO COMMENT	\N	2014-03-16 22:53:42	2014-03-16 22:53:42
3287	2	1432	NO COMMENT	\N	2014-03-17 07:08:47	2014-03-17 07:08:47
3288	14	1432	NO COMMENT	\N	2014-03-17 20:31:38	2014-03-17 20:31:38
3289	42	1432	NO COMMENT	\N	2014-03-20 03:09:53	2014-03-20 03:09:53
3290	17	1433	NO COMMENT	\N	2014-02-18 09:05:38	2014-02-18 09:05:38
3291	14	1433	NO COMMENT	\N	2014-02-18 23:33:49	2014-02-18 23:33:49
3292	45	1433	NO COMMENT	\N	2014-03-09 23:40:50	2014-03-09 23:40:50
3293	2	1433	NO COMMENT	\N	2014-03-11 06:28:13	2014-03-11 06:28:13
3294	2	1435	NO COMMENT	\N	2014-03-12 21:54:42	2014-03-12 21:54:42
3295	16	1439	NO COMMENT	\N	2014-02-09 21:44:17	2014-02-09 21:44:17
3296	2	1439	NO COMMENT	\N	2014-02-15 04:45:22	2014-02-15 04:45:22
3297	33	1441	NO COMMENT	\N	2014-02-25 17:42:01	2014-02-25 17:42:01
3298	35	1441	NO COMMENT	\N	2014-03-03 16:04:02	2014-03-03 16:04:02
3299	2	1441	NO COMMENT	\N	2014-03-04 04:10:10	2014-03-04 04:10:10
3300	18	1441	NO COMMENT	\N	2014-03-11 09:00:49	2014-03-11 09:00:49
3301	6	1441	NO COMMENT	\N	2014-03-18 08:23:52	2014-03-18 08:23:52
3302	37	1442	NO COMMENT	\N	2014-03-15 07:18:42	2014-03-15 07:18:42
3303	2	1443	NO COMMENT	\N	2014-01-15 03:06:24	2014-01-15 03:06:24
3304	13	1443	NO COMMENT	\N	2014-02-28 15:57:07	2014-02-28 15:57:07
3305	2	1447	NO COMMENT	\N	2014-01-10 02:40:09	2014-01-10 02:40:09
3306	2	1448	NO COMMENT	\N	2014-02-19 21:02:04	2014-02-19 21:02:04
3307	2	1449	NO COMMENT	\N	2014-02-21 09:12:04	2014-02-21 09:12:04
3308	2	1450	NO COMMENT	\N	2014-03-15 13:12:40	2014-03-15 13:12:40
3309	2	1451	NO COMMENT	\N	2014-01-21 22:04:53	2014-01-21 22:04:53
3310	35	1451	NO COMMENT	\N	2014-03-14 11:51:23	2014-03-14 11:51:23
3311	19	1451	NO COMMENT	\N	2014-03-19 13:56:58	2014-03-19 13:56:58
3312	35	1452	NO COMMENT	\N	2014-02-05 14:07:43	2014-02-05 14:07:43
3313	2	1452	NO COMMENT	\N	2014-02-14 13:23:55	2014-02-14 13:23:55
3314	19	1452	NO COMMENT	\N	2014-03-14 22:30:20	2014-03-14 22:30:20
3315	22	1453	NO COMMENT	\N	2014-01-30 00:15:05	2014-01-30 00:15:05
3316	2	1453	NO COMMENT	\N	2014-02-25 15:22:33	2014-02-25 15:22:33
3317	41	1453	NO COMMENT	\N	2014-03-05 03:47:37	2014-03-05 03:47:37
3318	2	1454	NO COMMENT	\N	2014-03-06 08:11:29	2014-03-06 08:11:29
3319	44	1454	NO COMMENT	\N	2014-03-08 20:14:10	2014-03-08 20:14:10
3320	2	1455	NO COMMENT	\N	2014-03-12 04:22:21	2014-03-12 04:22:21
3321	2	1457	NO COMMENT	\N	2014-01-14 00:01:54	2014-01-14 00:01:54
3322	23	1458	NO COMMENT	\N	2014-02-20 03:24:20	2014-02-20 03:24:20
3323	14	1458	NO COMMENT	\N	2014-02-24 19:53:24	2014-02-24 19:53:24
3324	42	1458	NO COMMENT	\N	2014-02-27 23:31:53	2014-02-27 23:31:53
3325	26	1458	NO COMMENT	\N	2014-02-28 18:15:26	2014-02-28 18:15:26
3326	15	1458	NO COMMENT	\N	2014-03-17 01:36:23	2014-03-17 01:36:23
3327	35	1459	NO COMMENT	\N	2014-02-14 07:29:55	2014-02-14 07:29:55
3328	2	1459	NO COMMENT	\N	2014-02-27 14:53:52	2014-02-27 14:53:52
3329	47	1459	NO COMMENT	\N	2014-03-15 21:39:59	2014-03-15 21:39:59
3330	35	1460	NO COMMENT	\N	2014-03-05 20:11:21	2014-03-05 20:11:21
3331	2	1460	NO COMMENT	\N	2014-03-12 13:38:53	2014-03-12 13:38:53
3332	47	1460	NO COMMENT	\N	2014-03-13 07:21:28	2014-03-13 07:21:28
3333	35	1461	NO COMMENT	\N	2014-02-14 11:57:59	2014-02-14 11:57:59
3334	47	1461	NO COMMENT	\N	2014-02-24 01:38:21	2014-02-24 01:38:21
3335	2	1461	NO COMMENT	\N	2014-03-18 11:36:28	2014-03-18 11:36:28
3336	35	1462	NO COMMENT	\N	2014-02-15 12:39:19	2014-02-15 12:39:19
3337	47	1462	NO COMMENT	\N	2014-03-01 21:12:47	2014-03-01 21:12:47
3338	2	1462	NO COMMENT	\N	2014-03-16 06:35:58	2014-03-16 06:35:58
3339	12	1464	NO COMMENT	\N	2014-02-14 06:26:44	2014-02-14 06:26:44
3340	47	1464	NO COMMENT	\N	2014-02-16 23:17:29	2014-02-16 23:17:29
3341	35	1464	NO COMMENT	\N	2014-02-17 14:11:24	2014-02-17 14:11:24
3342	10	1464	NO COMMENT	\N	2014-03-05 21:16:34	2014-03-05 21:16:34
3343	2	1464	NO COMMENT	\N	2014-03-10 15:59:56	2014-03-10 15:59:56
3344	35	1465	NO COMMENT	\N	2014-02-20 13:29:30	2014-02-20 13:29:30
3345	12	1465	NO COMMENT	\N	2014-02-22 04:38:12	2014-02-22 04:38:12
3346	10	1465	NO COMMENT	\N	2014-02-24 18:03:12	2014-02-24 18:03:12
3347	2	1465	NO COMMENT	\N	2014-02-27 09:54:47	2014-02-27 09:54:47
3348	47	1465	NO COMMENT	\N	2014-03-11 19:05:46	2014-03-11 19:05:46
3349	2	1466	NO COMMENT	\N	2014-01-27 07:00:12	2014-01-27 07:00:12
3350	42	1466	NO COMMENT	\N	2014-02-17 14:55:47	2014-02-17 14:55:47
3351	33	1470	NO COMMENT	\N	2014-02-27 14:16:03	2014-02-27 14:16:03
3352	2	1470	NO COMMENT	\N	2014-03-07 00:51:13	2014-03-07 00:51:13
3353	32	1470	NO COMMENT	\N	2014-03-11 12:46:39	2014-03-11 12:46:39
3354	42	1470	NO COMMENT	\N	2014-03-18 08:29:20	2014-03-18 08:29:20
3355	2	1471	NO COMMENT	\N	2013-12-13 17:19:41	2013-12-13 17:19:41
3356	2	1473	NO COMMENT	\N	2013-12-04 05:40:18	2013-12-04 05:40:18
3357	2	1474	NO COMMENT	\N	2014-01-18 13:03:22	2014-01-18 13:03:22
3358	14	1474	NO COMMENT	\N	2014-03-05 05:46:49	2014-03-05 05:46:49
3359	14	1475	NO COMMENT	\N	2013-12-18 18:23:14	2013-12-18 18:23:14
3360	2	1475	NO COMMENT	\N	2014-01-06 12:51:07	2014-01-06 12:51:07
3361	2	1476	NO COMMENT	\N	2014-03-20 07:20:04	2014-03-20 07:20:04
3362	2	1477	NO COMMENT	\N	2013-11-19 12:51:33	2013-11-19 12:51:33
3363	2	1478	NO COMMENT	\N	2013-09-26 17:07:32	2013-09-26 17:07:32
3364	2	1480	NO COMMENT	\N	2013-11-02 20:22:53	2013-11-02 20:22:53
3365	2	1481	NO COMMENT	\N	2013-11-06 15:49:02	2013-11-06 15:49:02
3366	2	1482	NO COMMENT	\N	2013-11-24 11:25:28	2013-11-24 11:25:28
3367	19	1483	NO COMMENT	\N	2014-01-20 06:02:03	2014-01-20 06:02:03
3368	35	1483	NO COMMENT	\N	2014-03-16 23:14:12	2014-03-16 23:14:12
3369	2	1483	NO COMMENT	\N	2014-03-17 23:05:54	2014-03-17 23:05:54
3370	2	1485	NO COMMENT	\N	2014-03-13 04:54:29	2014-03-13 04:54:29
3371	42	1486	NO COMMENT	\N	2014-03-02 16:46:46	2014-03-02 16:46:46
3372	14	1486	NO COMMENT	\N	2014-03-03 03:30:10	2014-03-03 03:30:10
3373	2	1486	NO COMMENT	\N	2014-03-07 01:38:55	2014-03-07 01:38:55
3374	26	1486	NO COMMENT	\N	2014-03-12 23:30:53	2014-03-12 23:30:53
3375	2	1487	NO COMMENT	\N	2013-11-01 13:11:26	2013-11-01 13:11:26
3376	2	1488	NO COMMENT	\N	2013-11-28 08:19:32	2013-11-28 08:19:32
3377	2	1489	NO COMMENT	\N	2013-12-15 14:06:16	2013-12-15 14:06:16
3378	2	1490	NO COMMENT	\N	2013-12-19 17:34:59	2013-12-19 17:34:59
3379	2	1491	NO COMMENT	\N	2014-01-29 12:06:10	2014-01-29 12:06:10
3380	47	1491	NO COMMENT	\N	2014-02-21 16:56:21	2014-02-21 16:56:21
3381	35	1491	NO COMMENT	\N	2014-03-15 13:26:55	2014-03-15 13:26:55
3382	35	1492	NO COMMENT	\N	2014-02-25 11:23:26	2014-02-25 11:23:26
3383	47	1492	NO COMMENT	\N	2014-03-02 04:17:48	2014-03-02 04:17:48
3384	2	1492	NO COMMENT	\N	2014-03-09 01:54:40	2014-03-09 01:54:40
3385	35	1494	NO COMMENT	\N	2014-02-28 02:30:52	2014-02-28 02:30:52
3386	10	1494	NO COMMENT	\N	2014-03-05 07:58:30	2014-03-05 07:58:30
3387	23	1494	NO COMMENT	\N	2014-03-08 21:23:22	2014-03-08 21:23:22
3388	47	1494	NO COMMENT	\N	2014-03-11 11:53:53	2014-03-11 11:53:53
3389	2	1494	NO COMMENT	\N	2014-03-20 16:52:40	2014-03-20 16:52:40
3390	2	1496	NO COMMENT	\N	2013-12-18 11:42:59	2013-12-18 11:42:59
3391	2	1497	NO COMMENT	\N	2014-02-19 17:58:26	2014-02-19 17:58:26
3392	2	1499	NO COMMENT	\N	2013-12-23 20:00:10	2013-12-23 20:00:10
3393	13	1500	NO COMMENT	\N	2014-01-17 11:51:01	2014-01-17 11:51:01
3394	2	1500	NO COMMENT	\N	2014-03-04 02:47:48	2014-03-04 02:47:48
3395	45	1501	NO COMMENT	\N	2013-12-30 11:13:09	2013-12-30 11:13:09
3396	2	1501	NO COMMENT	\N	2014-01-10 14:54:32	2014-01-10 14:54:32
3397	45	1502	NO COMMENT	\N	2014-03-01 23:23:20	2014-03-01 23:23:20
3398	2	1502	NO COMMENT	\N	2014-03-13 16:52:21	2014-03-13 16:52:21
3399	2	1503	NO COMMENT	\N	2014-01-14 14:20:02	2014-01-14 14:20:02
3400	45	1503	NO COMMENT	\N	2014-01-28 02:52:47	2014-01-28 02:52:47
3401	1	1504	NO COMMENT	\N	2014-01-09 10:21:30	2014-01-09 10:21:30
3402	7	1504	NO COMMENT	\N	2014-01-26 18:17:50	2014-01-26 18:17:50
3403	2	1505	NO COMMENT	\N	2014-01-06 09:10:17	2014-01-06 09:10:17
3404	1	1505	NO COMMENT	\N	2014-01-23 20:52:45	2014-01-23 20:52:45
3405	2	1506	NO COMMENT	\N	2014-02-18 04:48:47	2014-02-18 04:48:47
3406	7	1506	NO COMMENT	\N	2014-03-02 19:05:12	2014-03-02 19:05:12
3407	14	1506	NO COMMENT	\N	2014-03-09 18:34:55	2014-03-09 18:34:55
3408	24	1506	NO COMMENT	\N	2014-03-15 15:41:07	2014-03-15 15:41:07
3409	17	1506	NO COMMENT	\N	2014-03-19 02:20:16	2014-03-19 02:20:16
3410	1	1508	NO COMMENT	\N	2013-12-23 02:35:19	2013-12-23 02:35:19
3411	7	1508	NO COMMENT	\N	2013-12-30 19:49:43	2013-12-30 19:49:43
3412	7	1509	NO COMMENT	\N	2013-12-14 18:21:36	2013-12-14 18:21:36
3413	1	1509	NO COMMENT	\N	2014-01-24 13:39:52	2014-01-24 13:39:52
3414	2	1509	NO COMMENT	\N	2014-02-11 03:59:26	2014-02-11 03:59:26
3415	42	1509	NO COMMENT	\N	2014-03-07 17:47:59	2014-03-07 17:47:59
3416	1	1511	NO COMMENT	\N	2014-01-24 18:31:59	2014-01-24 18:31:59
3417	2	1511	NO COMMENT	\N	2014-01-29 07:25:48	2014-01-29 07:25:48
3418	7	1511	NO COMMENT	\N	2014-01-29 09:59:25	2014-01-29 09:59:25
3419	2	1512	NO COMMENT	\N	2014-01-06 17:56:36	2014-01-06 17:56:36
3420	7	1512	NO COMMENT	\N	2014-01-25 08:45:38	2014-01-25 08:45:38
3421	1	1512	NO COMMENT	\N	2014-03-20 15:37:58	2014-03-20 15:37:58
3422	42	1513	NO COMMENT	\N	2014-02-23 11:45:50	2014-02-23 11:45:50
3423	47	1513	NO COMMENT	\N	2014-03-06 17:33:42	2014-03-06 17:33:42
3424	1	1513	NO COMMENT	\N	2014-03-14 18:33:26	2014-03-14 18:33:26
3425	10	1513	NO COMMENT	\N	2014-03-16 08:42:42	2014-03-16 08:42:42
3426	26	1513	NO COMMENT	\N	2014-03-19 14:47:41	2014-03-19 14:47:41
3427	2	1515	NO COMMENT	\N	2014-02-01 07:58:34	2014-02-01 07:58:34
3428	29	1515	NO COMMENT	\N	2014-02-17 18:55:20	2014-02-17 18:55:20
3429	1	1515	NO COMMENT	\N	2014-02-20 08:44:01	2014-02-20 08:44:01
3430	7	1515	NO COMMENT	\N	2014-03-08 23:43:48	2014-03-08 23:43:48
3431	2	1517	NO COMMENT	\N	2014-01-06 15:25:07	2014-01-06 15:25:07
3432	19	1517	NO COMMENT	\N	2014-01-24 20:09:28	2014-01-24 20:09:28
3433	7	1517	NO COMMENT	\N	2014-02-23 09:16:49	2014-02-23 09:16:49
3434	1	1517	NO COMMENT	\N	2014-03-13 10:53:22	2014-03-13 10:53:22
3435	2	1518	NO COMMENT	\N	2013-12-12 20:17:57	2013-12-12 20:17:57
3436	1	1518	NO COMMENT	\N	2014-01-13 03:19:45	2014-01-13 03:19:45
3437	7	1518	NO COMMENT	\N	2014-03-03 00:48:19	2014-03-03 00:48:19
3438	2	1519	NO COMMENT	\N	2014-01-02 15:09:35	2014-01-02 15:09:35
3439	1	1519	NO COMMENT	\N	2014-01-07 05:37:47	2014-01-07 05:37:47
3440	7	1519	NO COMMENT	\N	2014-01-18 06:17:50	2014-01-18 06:17:50
3441	1	1520	NO COMMENT	\N	2014-01-27 23:14:56	2014-01-27 23:14:56
3442	7	1520	NO COMMENT	\N	2014-02-25 15:55:01	2014-02-25 15:55:01
3443	2	1520	NO COMMENT	\N	2014-03-20 04:13:11	2014-03-20 04:13:11
3444	1	1521	NO COMMENT	\N	2014-01-16 06:59:18	2014-01-16 06:59:18
3445	7	1521	NO COMMENT	\N	2014-01-19 03:50:48	2014-01-19 03:50:48
3446	2	1521	NO COMMENT	\N	2014-02-28 02:10:55	2014-02-28 02:10:55
3447	7	1522	NO COMMENT	\N	2013-12-05 10:08:54	2013-12-05 10:08:54
3448	1	1522	NO COMMENT	\N	2013-12-26 23:57:59	2013-12-26 23:57:59
3449	2	1522	NO COMMENT	\N	2014-03-05 14:55:11	2014-03-05 14:55:11
3450	45	1523	NO COMMENT	\N	2014-01-29 10:45:11	2014-01-29 10:45:11
3451	1	1523	NO COMMENT	\N	2014-01-30 03:37:43	2014-01-30 03:37:43
3452	7	1523	NO COMMENT	\N	2014-02-12 08:33:55	2014-02-12 08:33:55
3453	2	1523	NO COMMENT	\N	2014-02-22 18:36:31	2014-02-22 18:36:31
3454	31	1524	NO COMMENT	\N	2014-02-02 05:06:58	2014-02-02 05:06:58
3455	2	1524	NO COMMENT	\N	2014-02-09 09:40:02	2014-02-09 09:40:02
3456	1	1524	NO COMMENT	\N	2014-02-12 04:10:02	2014-02-12 04:10:02
3457	7	1524	NO COMMENT	\N	2014-03-12 06:15:39	2014-03-12 06:15:39
3458	1	1525	NO COMMENT	\N	2013-12-02 12:48:08	2013-12-02 12:48:08
3459	2	1525	NO COMMENT	\N	2014-01-24 18:06:00	2014-01-24 18:06:00
3460	7	1525	NO COMMENT	\N	2014-03-14 09:17:43	2014-03-14 09:17:43
3461	2	1566	NO COMMENT	\N	2013-12-19 10:02:21	2013-12-19 10:02:21
3462	1	1526	NO COMMENT	\N	2014-01-10 05:49:09	2014-01-10 05:49:09
3463	7	1526	NO COMMENT	\N	2014-01-28 07:54:32	2014-01-28 07:54:32
3464	2	1526	NO COMMENT	\N	2014-03-09 11:16:14	2014-03-09 11:16:14
3465	2	1527	NO COMMENT	\N	2013-11-25 14:32:19	2013-11-25 14:32:19
3466	7	1527	NO COMMENT	\N	2014-01-19 00:22:37	2014-01-19 00:22:37
3467	1	1527	NO COMMENT	\N	2014-01-30 01:42:25	2014-01-30 01:42:25
3468	1	1528	NO COMMENT	\N	2013-11-24 08:59:46	2013-11-24 08:59:46
3469	7	1528	NO COMMENT	\N	2013-12-02 18:30:06	2013-12-02 18:30:06
3470	2	1528	NO COMMENT	\N	2014-02-07 23:31:06	2014-02-07 23:31:06
3471	2	1529	NO COMMENT	\N	2014-02-20 22:03:41	2014-02-20 22:03:41
3472	7	1530	NO COMMENT	\N	2013-12-27 16:22:49	2013-12-27 16:22:49
3473	1	1530	NO COMMENT	\N	2014-01-25 01:37:03	2014-01-25 01:37:03
3474	2	1530	NO COMMENT	\N	2014-02-15 12:48:05	2014-02-15 12:48:05
3475	2	1531	NO COMMENT	\N	2014-01-06 01:57:30	2014-01-06 01:57:30
3476	7	1531	NO COMMENT	\N	2014-01-22 08:44:51	2014-01-22 08:44:51
3477	1	1531	NO COMMENT	\N	2014-01-30 16:10:07	2014-01-30 16:10:07
3478	41	1532	NO COMMENT	\N	2014-01-21 15:21:16	2014-01-21 15:21:16
3479	2	1532	NO COMMENT	\N	2014-02-03 05:19:45	2014-02-03 05:19:45
3480	7	1532	NO COMMENT	\N	2014-02-11 07:08:37	2014-02-11 07:08:37
3481	1	1532	NO COMMENT	\N	2014-03-06 20:48:27	2014-03-06 20:48:27
3482	1	1533	NO COMMENT	\N	2014-01-29 19:43:37	2014-01-29 19:43:37
3483	2	1533	NO COMMENT	\N	2014-01-31 21:10:16	2014-01-31 21:10:16
3484	41	1533	NO COMMENT	\N	2014-02-04 20:11:22	2014-02-04 20:11:22
3485	22	1533	NO COMMENT	\N	2014-02-11 12:51:13	2014-02-11 12:51:13
3486	7	1533	NO COMMENT	\N	2014-02-16 22:36:27	2014-02-16 22:36:27
3487	7	1534	NO COMMENT	\N	2014-02-09 20:58:04	2014-02-09 20:58:04
3488	41	1534	NO COMMENT	\N	2014-03-08 23:55:01	2014-03-08 23:55:01
3489	1	1534	NO COMMENT	\N	2014-03-10 17:15:07	2014-03-10 17:15:07
3490	41	1535	NO COMMENT	\N	2014-02-28 21:20:03	2014-02-28 21:20:03
3491	7	1535	NO COMMENT	\N	2014-03-05 09:43:33	2014-03-05 09:43:33
3492	26	1535	NO COMMENT	\N	2014-03-13 22:40:16	2014-03-13 22:40:16
3493	42	1535	NO COMMENT	\N	2014-03-15 16:26:32	2014-03-15 16:26:32
3494	20	1536	NO COMMENT	\N	2014-03-03 06:31:49	2014-03-03 06:31:49
3495	17	1536	NO COMMENT	\N	2014-03-04 10:20:16	2014-03-04 10:20:16
3496	7	1536	NO COMMENT	\N	2014-03-09 23:09:40	2014-03-09 23:09:40
3497	1	1536	NO COMMENT	\N	2014-03-12 15:50:41	2014-03-12 15:50:41
3498	41	1536	NO COMMENT	\N	2014-03-14 22:11:20	2014-03-14 22:11:20
3499	2	1538	NO COMMENT	\N	2014-01-02 11:55:00	2014-01-02 11:55:00
3500	45	1605	NO COMMENT	\N	2014-02-10 00:39:46	2014-02-10 00:39:46
3501	2	1605	NO COMMENT	\N	2014-03-06 22:41:09	2014-03-06 22:41:09
3502	2	1539	NO COMMENT	\N	2013-10-04 13:48:09	2013-10-04 13:48:09
3503	2	1540	NO COMMENT	\N	2013-10-13 03:59:26	2013-10-13 03:59:26
3504	2	1541	NO COMMENT	\N	2014-02-02 23:52:54	2014-02-02 23:52:54
3505	2	1542	NO COMMENT	\N	2013-12-19 08:43:29	2013-12-19 08:43:29
3506	2	1543	NO COMMENT	\N	2013-10-13 20:55:28	2013-10-13 20:55:28
3507	2	1545	NO COMMENT	\N	2014-03-10 14:34:08	2014-03-10 14:34:08
3508	2	1546	NO COMMENT	\N	2014-01-17 16:49:12	2014-01-17 16:49:12
3509	31	1549	NO COMMENT	\N	2014-03-14 01:11:56	2014-03-14 01:11:56
3510	20	1549	NO COMMENT	\N	2014-03-14 03:59:06	2014-03-14 03:59:06
3511	2	1549	NO COMMENT	\N	2014-03-15 15:05:49	2014-03-15 15:05:49
3512	2	1550	NO COMMENT	\N	2014-03-01 23:21:30	2014-03-01 23:21:30
3513	44	1550	NO COMMENT	\N	2014-03-09 08:10:20	2014-03-09 08:10:20
3514	2	1551	NO COMMENT	\N	2014-02-06 08:22:40	2014-02-06 08:22:40
3515	2	1552	NO COMMENT	\N	2014-02-26 19:16:16	2014-02-26 19:16:16
3516	2	1553	NO COMMENT	\N	2013-11-17 14:48:51	2013-11-17 14:48:51
3517	2	1555	NO COMMENT	\N	2014-03-13 11:50:01	2014-03-13 11:50:01
3518	2	1559	NO COMMENT	\N	2014-03-04 01:35:02	2014-03-04 01:35:02
3519	14	1561	NO COMMENT	\N	2013-11-26 04:19:55	2013-11-26 04:19:55
3520	2	1561	NO COMMENT	\N	2014-02-16 10:17:34	2014-02-16 10:17:34
3521	2	1562	NO COMMENT	\N	2013-10-21 02:16:38	2013-10-21 02:16:38
3522	2	1563	NO COMMENT	\N	2014-02-02 17:09:45	2014-02-02 17:09:45
3523	2	1564	NO COMMENT	\N	2014-02-19 01:05:32	2014-02-19 01:05:32
3524	2	1565	NO COMMENT	\N	2014-02-22 03:44:54	2014-02-22 03:44:54
3525	2	1567	NO COMMENT	\N	2014-01-27 02:06:02	2014-01-27 02:06:02
3526	19	1567	NO COMMENT	\N	2014-02-20 09:18:57	2014-02-20 09:18:57
3527	2	1568	NO COMMENT	\N	2013-10-05 22:10:36	2013-10-05 22:10:36
3528	2	1569	NO COMMENT	\N	2013-11-19 22:30:49	2013-11-19 22:30:49
3529	35	1570	NO COMMENT	\N	2014-02-20 09:45:49	2014-02-20 09:45:49
3530	2	1570	NO COMMENT	\N	2014-02-21 22:11:38	2014-02-21 22:11:38
3531	47	1570	NO COMMENT	\N	2014-02-22 20:33:23	2014-02-22 20:33:23
3532	2	1571	NO COMMENT	\N	2013-10-26 14:06:35	2013-10-26 14:06:35
3533	2	1572	NO COMMENT	\N	2013-10-26 16:44:14	2013-10-26 16:44:14
3534	2	1573	NO COMMENT	\N	2014-01-21 23:23:40	2014-01-21 23:23:40
3535	26	1574	NO COMMENT	\N	2014-02-22 16:20:45	2014-02-22 16:20:45
3536	26	1575	NO COMMENT	\N	2014-02-02 14:28:43	2014-02-02 14:28:43
3537	2	1575	NO COMMENT	\N	2014-02-02 17:18:48	2014-02-02 17:18:48
3538	45	1575	NO COMMENT	\N	2014-02-21 06:31:21	2014-02-21 06:31:21
3539	2	1577	NO COMMENT	\N	2014-02-14 02:38:22	2014-02-14 02:38:22
3540	47	1577	NO COMMENT	\N	2014-02-25 06:31:51	2014-02-25 06:31:51
3541	35	1577	NO COMMENT	\N	2014-02-28 17:18:38	2014-02-28 17:18:38
3542	14	1579	NO COMMENT	\N	2014-01-25 15:14:35	2014-01-25 15:14:35
3543	17	1580	NO COMMENT	\N	2014-02-18 16:54:52	2014-02-18 16:54:52
3544	24	1580	NO COMMENT	\N	2014-02-22 03:30:49	2014-02-22 03:30:49
3545	31	1580	NO COMMENT	\N	2014-02-24 13:34:43	2014-02-24 13:34:43
3546	14	1580	NO COMMENT	\N	2014-02-28 14:14:18	2014-02-28 14:14:18
3547	2	1580	NO COMMENT	\N	2014-03-17 03:18:34	2014-03-17 03:18:34
3548	14	1581	NO COMMENT	\N	2014-02-20 10:24:04	2014-02-20 10:24:04
3549	17	1581	NO COMMENT	\N	2014-02-21 18:29:25	2014-02-21 18:29:25
3550	45	1581	NO COMMENT	\N	2014-02-25 08:22:25	2014-02-25 08:22:25
3551	24	1581	NO COMMENT	\N	2014-03-07 06:17:55	2014-03-07 06:17:55
3552	2	1581	NO COMMENT	\N	2014-03-14 20:48:06	2014-03-14 20:48:06
3553	6	1582	NO COMMENT	\N	2014-03-10 10:45:19	2014-03-10 10:45:19
3554	2	1582	NO COMMENT	\N	2014-03-16 13:35:36	2014-03-16 13:35:36
3555	34	1584	NO COMMENT	\N	2014-03-14 23:43:20	2014-03-14 23:43:20
3556	48	1584	NO COMMENT	\N	2014-03-16 23:27:40	2014-03-16 23:27:40
3557	24	1584	NO COMMENT	\N	2014-03-20 12:35:58	2014-03-20 12:35:58
3558	5	1585	NO COMMENT	\N	2014-02-19 00:48:17	2014-02-19 00:48:17
3559	2	1585	NO COMMENT	\N	2014-03-06 13:50:09	2014-03-06 13:50:09
3560	14	1586	NO COMMENT	\N	2014-03-07 11:57:28	2014-03-07 11:57:28
3561	41	1586	NO COMMENT	\N	2014-03-16 16:49:13	2014-03-16 16:49:13
3562	2	1586	NO COMMENT	\N	2014-03-17 12:53:54	2014-03-17 12:53:54
3563	26	1587	NO COMMENT	\N	2014-03-09 19:37:45	2014-03-09 19:37:45
3564	2	1587	NO COMMENT	\N	2014-03-10 18:32:14	2014-03-10 18:32:14
3565	22	1587	NO COMMENT	\N	2014-03-16 04:28:48	2014-03-16 04:28:48
3566	13	1591	NO COMMENT	\N	2014-02-17 01:34:17	2014-02-17 01:34:17
3567	22	1591	NO COMMENT	\N	2014-02-20 17:34:54	2014-02-20 17:34:54
3568	2	1591	NO COMMENT	\N	2014-02-24 11:59:43	2014-02-24 11:59:43
3569	35	1591	NO COMMENT	\N	2014-03-10 23:47:23	2014-03-10 23:47:23
3570	19	1591	NO COMMENT	\N	2014-03-18 12:43:59	2014-03-18 12:43:59
3571	6	1591	NO COMMENT	\N	2014-03-18 23:24:40	2014-03-18 23:24:40
3572	19	1592	NO COMMENT	\N	2014-02-12 05:45:02	2014-02-12 05:45:02
3573	13	1592	NO COMMENT	\N	2014-02-26 23:45:21	2014-02-26 23:45:21
3574	6	1592	NO COMMENT	\N	2014-03-10 16:00:31	2014-03-10 16:00:31
3575	22	1592	NO COMMENT	\N	2014-03-15 05:12:07	2014-03-15 05:12:07
3576	18	1592	NO COMMENT	\N	2014-03-18 12:50:37	2014-03-18 12:50:37
3577	2	1594	NO COMMENT	\N	2014-02-16 02:42:11	2014-02-16 02:42:11
3578	44	1594	NO COMMENT	\N	2014-02-28 21:53:38	2014-02-28 21:53:38
3579	2	1595	NO COMMENT	\N	2014-03-08 02:45:10	2014-03-08 02:45:10
3580	21	1596	NO COMMENT	\N	2014-03-18 02:19:01	2014-03-18 02:19:01
3581	42	1598	NO COMMENT	\N	2014-03-04 16:32:19	2014-03-04 16:32:19
3582	13	1598	NO COMMENT	\N	2014-03-19 17:59:30	2014-03-19 17:59:30
3583	15	1599	NO COMMENT	\N	2014-03-20 09:07:28	2014-03-20 09:07:28
3584	42	1600	NO COMMENT	\N	2014-03-01 18:15:01	2014-03-01 18:15:01
3585	2	1600	NO COMMENT	\N	2014-03-14 23:32:54	2014-03-14 23:32:54
3586	33	1601	NO COMMENT	\N	2014-02-22 19:02:49	2014-02-22 19:02:49
3587	2	1602	NO COMMENT	\N	2014-03-17 13:32:16	2014-03-17 13:32:16
3588	36	1603	NO COMMENT	\N	2014-01-29 12:02:21	2014-01-29 12:02:21
3589	2	1603	NO COMMENT	\N	2014-03-14 20:01:35	2014-03-14 20:01:35
3590	47	1604	NO COMMENT	\N	2014-02-23 20:43:55	2014-02-23 20:43:55
3591	36	1604	NO COMMENT	\N	2014-03-10 04:10:10	2014-03-10 04:10:10
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 3591, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	7	57	code	t	1	2014-03-18 23:35:22	2014-03-18 23:35:22	UserExercise	3
2	7	66	code	f	1	2014-03-08 17:11:48	2014-03-08 17:11:48	UserExercise	4
3	7	66	code	f	1	2014-03-15 11:47:40	2014-03-15 11:47:40	UserExercise	4
4	7	66	code	f	1	2014-03-19 10:40:28	2014-03-19 10:40:28	UserExercise	4
5	19	147	code	f	1	2013-12-03 14:07:01	2013-12-03 14:07:01	UserExercise	18
6	7	166	code	f	1	2014-02-20 01:34:00	2014-02-20 01:34:00	UserExercise	25
7	24	166	code	f	1	2014-03-15 05:40:35	2014-03-15 05:40:35	UserExercise	25
8	21	166	code	f	1	2014-03-15 05:40:35	2014-03-15 05:40:35	UserExercise	25
9	7	166	code	f	1	2014-03-15 05:40:35	2014-03-15 05:40:35	UserExercise	25
10	18	168	code	f	1	2014-02-23 20:42:55	2014-02-23 20:42:55	UserExercise	25
11	19	168	code	f	1	2014-02-26 15:24:22	2014-02-26 15:24:22	UserExercise	25
12	19	168	code	f	1	2014-02-27 10:09:08	2014-02-27 10:09:08	UserExercise	25
13	24	168	code	f	1	2014-03-14 23:10:28	2014-03-14 23:10:28	UserExercise	25
14	21	168	code	f	1	2014-03-14 23:10:28	2014-03-14 23:10:28	UserExercise	25
15	7	168	code	f	1	2014-03-14 23:10:28	2014-03-14 23:10:28	UserExercise	25
16	26	173	code	f	1	2014-03-12 15:32:25	2014-03-12 15:32:25	UserExercise	25
17	26	175	code	f	1	2014-02-17 05:45:17	2014-02-17 05:45:17	UserExercise	25
18	7	180	code	f	1	2014-02-26 08:01:45	2014-02-26 08:01:45	UserExercise	25
19	23	181	code	f	1	2014-02-15 10:26:39	2014-02-15 10:26:39	UserExercise	25
20	24	181	code	f	1	2014-02-22 16:10:17	2014-02-22 16:10:17	UserExercise	25
21	24	192	code	f	1	2014-02-28 06:56:58	2014-02-28 06:56:58	UserExercise	20
22	23	197	code	f	1	2014-02-18 13:35:18	2014-02-18 13:35:18	UserExercise	20
23	20	199	code	f	1	2014-03-15 12:44:53	2014-03-15 12:44:53	UserExercise	5
24	23	199	code	f	1	2014-03-15 12:44:53	2014-03-15 12:44:53	UserExercise	5
25	24	199	code	f	1	2014-03-15 12:44:53	2014-03-15 12:44:53	UserExercise	5
26	26	199	code	f	1	2014-03-15 12:44:53	2014-03-15 12:44:53	UserExercise	5
27	21	215	code	f	1	2014-02-26 06:08:48	2014-02-26 06:08:48	UserExercise	6
28	6	231	code	f	1	2014-03-17 19:34:39	2014-03-17 19:34:39	UserExercise	8
29	24	231	code	f	1	2014-03-17 19:34:39	2014-03-17 19:34:39	UserExercise	8
30	26	231	code	f	1	2014-03-17 19:34:39	2014-03-17 19:34:39	UserExercise	8
31	7	232	code	f	1	2014-03-18 03:36:14	2014-03-18 03:36:14	UserExercise	8
32	7	232	code	t	1	2014-03-18 21:17:09	2014-03-18 21:17:09	UserExercise	8
33	5	233	code	f	1	2014-03-17 13:35:26	2014-03-17 13:35:26	UserExercise	8
34	5	233	code	t	1	2014-03-19 12:30:37	2014-03-19 12:30:37	UserExercise	8
35	6	234	code	t	1	2014-03-19 22:18:25	2014-03-19 22:18:25	UserExercise	8
36	18	234	code	f	1	2014-03-19 22:18:25	2014-03-19 22:18:25	UserExercise	8
37	21	234	code	f	1	2014-03-19 22:18:25	2014-03-19 22:18:25	UserExercise	8
38	20	235	code	f	1	2014-03-18 01:51:03	2014-03-18 01:51:03	UserExercise	8
39	25	235	code	f	1	2014-03-18 01:51:03	2014-03-18 01:51:03	UserExercise	8
40	24	235	code	f	1	2014-03-18 01:51:03	2014-03-18 01:51:03	UserExercise	8
41	20	235	code	f	1	2014-03-18 16:16:03	2014-03-18 16:16:03	UserExercise	8
42	25	235	code	f	1	2014-03-18 16:16:03	2014-03-18 16:16:03	UserExercise	8
43	23	235	code	f	1	2014-03-18 16:16:03	2014-03-18 16:16:03	UserExercise	8
44	24	235	code	f	1	2014-03-18 16:16:03	2014-03-18 16:16:03	UserExercise	8
45	26	235	code	f	1	2014-03-18 16:16:03	2014-03-18 16:16:03	UserExercise	8
46	20	235	code	t	1	2014-03-19 16:16:49	2014-03-19 16:16:49	UserExercise	8
47	25	235	code	t	1	2014-03-19 16:16:49	2014-03-19 16:16:49	UserExercise	8
48	23	235	code	t	1	2014-03-19 16:16:49	2014-03-19 16:16:49	UserExercise	8
49	24	235	code	f	1	2014-03-19 16:16:49	2014-03-19 16:16:49	UserExercise	8
50	26	235	code	t	1	2014-03-19 16:16:49	2014-03-19 16:16:49	UserExercise	8
51	20	235	code	t	1	2014-03-19 17:07:47	2014-03-19 17:07:47	UserExercise	8
52	25	235	code	t	1	2014-03-19 17:07:47	2014-03-19 17:07:47	UserExercise	8
53	23	235	code	t	1	2014-03-19 17:07:47	2014-03-19 17:07:47	UserExercise	8
54	24	235	code	t	1	2014-03-19 17:07:47	2014-03-19 17:07:47	UserExercise	8
55	26	235	code	f	1	2014-03-19 17:07:47	2014-03-19 17:07:47	UserExercise	8
56	20	235	code	t	1	2014-03-20 02:43:28	2014-03-20 02:43:28	UserExercise	8
57	25	235	code	t	1	2014-03-20 02:43:28	2014-03-20 02:43:28	UserExercise	8
58	23	235	code	t	1	2014-03-20 02:43:28	2014-03-20 02:43:28	UserExercise	8
59	24	235	code	t	1	2014-03-20 02:43:28	2014-03-20 02:43:28	UserExercise	8
60	26	235	code	t	1	2014-03-20 02:43:28	2014-03-20 02:43:28	UserExercise	8
61	25	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
62	23	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
63	18	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
64	19	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
65	21	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
66	7	236	code	f	1	2014-03-17 18:48:45	2014-03-17 18:48:45	UserExercise	8
67	6	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
68	25	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
69	23	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
70	18	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
71	24	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
72	19	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
73	21	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
74	7	236	code	f	1	2014-03-17 19:51:44	2014-03-17 19:51:44	UserExercise	8
75	25	236	code	f	1	2014-03-18 08:37:43	2014-03-18 08:37:43	UserExercise	8
76	18	236	code	f	1	2014-03-18 08:37:43	2014-03-18 08:37:43	UserExercise	8
77	7	236	code	f	1	2014-03-18 08:37:43	2014-03-18 08:37:43	UserExercise	8
78	19	238	code	f	1	2014-03-17 04:33:54	2014-03-17 04:33:54	UserExercise	8
79	26	238	code	f	1	2014-03-17 04:33:54	2014-03-17 04:33:54	UserExercise	8
80	7	238	code	f	1	2014-03-17 04:33:54	2014-03-17 04:33:54	UserExercise	8
81	19	239	code	f	1	2014-03-17 15:15:47	2014-03-17 15:15:47	UserExercise	8
82	26	239	code	f	1	2014-03-17 15:15:47	2014-03-17 15:15:47	UserExercise	8
83	7	239	code	f	1	2014-03-17 15:15:47	2014-03-17 15:15:47	UserExercise	8
84	19	242	code	f	1	2014-03-17 05:29:49	2014-03-17 05:29:49	UserExercise	8
85	19	242	code	f	1	2014-03-17 15:11:35	2014-03-17 15:11:35	UserExercise	8
86	7	242	code	f	1	2014-03-17 15:11:35	2014-03-17 15:11:35	UserExercise	8
87	5	244	code	f	1	2014-03-19 00:16:13	2014-03-19 00:16:13	UserExercise	8
88	26	244	code	f	1	2014-03-19 00:16:13	2014-03-19 00:16:13	UserExercise	8
89	4	244	code	t	1	2014-03-19 00:16:13	2014-03-19 00:16:13	UserExercise	8
90	7	244	code	t	1	2014-03-19 00:16:13	2014-03-19 00:16:13	UserExercise	8
91	18	252	code	f	1	2013-12-09 12:52:38	2013-12-09 12:52:38	UserExercise	9
92	6	254	code	f	1	2014-01-15 06:01:29	2014-01-15 06:01:29	UserExercise	9
93	18	256	code	f	1	2014-03-05 03:11:35	2014-03-05 03:11:35	UserExercise	9
94	20	278	code	f	1	2014-03-14 03:51:01	2014-03-14 03:51:01	UserExercise	11
95	9	281	code	f	1	2014-03-17 22:19:00	2014-03-17 22:19:00	UserExercise	11
96	20	281	code	f	1	2014-03-17 22:19:00	2014-03-17 22:19:00	UserExercise	11
97	19	281	code	f	1	2014-03-17 22:19:00	2014-03-17 22:19:00	UserExercise	11
98	26	281	code	f	1	2014-03-17 22:19:00	2014-03-17 22:19:00	UserExercise	11
99	20	283	code	f	1	2014-02-18 16:01:23	2014-02-18 16:01:23	UserExercise	11
100	26	283	code	f	1	2014-02-18 16:01:23	2014-02-18 16:01:23	UserExercise	11
101	20	284	code	f	1	2014-03-06 05:38:50	2014-03-06 05:38:50	UserExercise	11
102	24	284	code	f	1	2014-03-06 05:38:50	2014-03-06 05:38:50	UserExercise	11
103	26	286	code	f	1	2014-01-31 03:27:46	2014-01-31 03:27:46	UserExercise	11
104	10	287	code	f	1	2014-02-28 14:57:52	2014-02-28 14:57:52	UserExercise	11
105	21	287	code	f	1	2014-02-28 14:57:52	2014-02-28 14:57:52	UserExercise	11
106	21	287	code	f	1	2014-03-04 21:24:33	2014-03-04 21:24:33	UserExercise	11
107	23	288	code	f	1	2014-02-23 04:59:59	2014-02-23 04:59:59	UserExercise	11
108	6	289	code	f	1	2014-03-03 11:01:43	2014-03-03 11:01:43	UserExercise	11
109	20	289	code	f	1	2014-03-03 11:01:43	2014-03-03 11:01:43	UserExercise	11
110	18	305	code	f	1	2013-10-21 21:22:20	2013-10-21 21:22:20	UserExercise	12
111	18	305	code	f	1	2014-01-31 21:41:26	2014-01-31 21:41:26	UserExercise	12
112	6	305	code	f	1	2014-03-06 13:23:59	2014-03-06 13:23:59	UserExercise	12
113	18	305	code	f	1	2014-03-06 13:23:59	2014-03-06 13:23:59	UserExercise	12
114	26	341	code	f	1	2014-01-04 18:37:46	2014-01-04 18:37:46	UserExercise	15
115	18	345	code	f	1	2013-12-17 12:26:33	2013-12-17 12:26:33	UserExercise	15
116	9	351	code	f	1	2014-01-29 11:09:49	2014-01-29 11:09:49	UserExercise	15
117	19	353	code	f	1	2013-12-20 02:20:20	2013-12-20 02:20:20	UserExercise	15
118	19	353	code	f	1	2014-02-04 06:17:27	2014-02-04 06:17:27	UserExercise	15
119	6	353	code	f	1	2014-02-25 20:14:31	2014-02-25 20:14:31	UserExercise	15
120	19	353	code	f	1	2014-02-25 20:14:31	2014-02-25 20:14:31	UserExercise	15
121	13	353	code	f	1	2014-03-01 03:30:50	2014-03-01 03:30:50	UserExercise	15
122	19	353	code	f	1	2014-03-01 03:30:50	2014-03-01 03:30:50	UserExercise	15
123	21	353	code	f	1	2014-03-01 03:30:50	2014-03-01 03:30:50	UserExercise	15
124	18	359	code	f	1	2014-01-18 11:52:56	2014-01-18 11:52:56	UserExercise	16
125	13	362	code	f	1	2014-02-01 08:27:20	2014-02-01 08:27:20	UserExercise	16
126	6	367	code	f	1	2014-01-18 03:00:07	2014-01-18 03:00:07	UserExercise	16
127	23	367	code	f	1	2014-02-27 20:39:03	2014-02-27 20:39:03	UserExercise	16
128	14	367	code	f	1	2014-03-05 01:50:08	2014-03-05 01:50:08	UserExercise	16
129	20	367	code	f	1	2014-03-05 01:50:08	2014-03-05 01:50:08	UserExercise	16
130	21	368	code	f	1	2014-03-06 16:04:54	2014-03-06 16:04:54	UserExercise	16
131	15	370	code	f	1	2014-01-16 02:37:48	2014-01-16 02:37:48	UserExercise	16
132	6	377	code	f	1	2014-02-20 21:38:15	2014-02-20 21:38:15	UserExercise	17
133	18	377	code	f	1	2014-02-20 21:38:15	2014-02-20 21:38:15	UserExercise	17
134	19	377	code	f	1	2014-02-20 21:38:15	2014-02-20 21:38:15	UserExercise	17
135	15	377	code	f	1	2014-03-09 09:47:54	2014-03-09 09:47:54	UserExercise	17
136	9	382	code	f	1	2014-03-02 17:05:50	2014-03-02 17:05:50	UserExercise	17
137	5	386	code	f	1	2014-03-05 10:24:57	2014-03-05 10:24:57	UserExercise	17
138	26	386	code	f	1	2014-03-05 10:24:57	2014-03-05 10:24:57	UserExercise	17
139	18	391	code	f	1	2013-10-17 21:28:27	2013-10-17 21:28:27	UserExercise	22
140	17	409	code	f	1	2014-03-02 11:13:49	2014-03-02 11:13:49	UserExercise	27
141	20	410	code	f	1	2014-02-24 23:24:36	2014-02-24 23:24:36	UserExercise	27
142	23	415	code	f	1	2014-03-04 17:47:49	2014-03-04 17:47:49	UserExercise	28
143	24	421	code	f	1	2013-11-16 22:08:06	2013-11-16 22:08:06	UserExercise	28
144	29	448	code	f	1	2014-02-13 17:48:16	2014-02-13 17:48:16	UserExercise	30
145	9	448	code	f	1	2014-02-13 17:48:16	2014-02-13 17:48:16	UserExercise	30
146	29	448	code	f	1	2014-02-25 22:48:45	2014-02-25 22:48:45	UserExercise	30
147	7	448	code	f	1	2014-02-25 22:48:45	2014-02-25 22:48:45	UserExercise	30
148	28	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
149	22	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
150	16	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
151	14	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
152	20	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
153	23	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
154	24	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
155	26	449	code	f	1	2014-03-15 20:17:27	2014-03-15 20:17:27	UserExercise	30
156	17	450	code	f	1	2014-02-07 05:41:01	2014-02-07 05:41:01	UserExercise	30
157	6	450	code	f	1	2014-02-18 16:35:18	2014-02-18 16:35:18	UserExercise	30
158	14	450	code	f	1	2014-03-01 00:05:44	2014-03-01 00:05:44	UserExercise	30
159	20	450	code	f	1	2014-03-01 00:05:44	2014-03-01 00:05:44	UserExercise	30
160	23	450	code	f	1	2014-03-01 00:05:44	2014-03-01 00:05:44	UserExercise	30
161	26	450	code	f	1	2014-03-05 18:01:15	2014-03-05 18:01:15	UserExercise	30
162	6	451	code	f	1	2014-02-21 05:52:41	2014-02-21 05:52:41	UserExercise	30
163	29	451	code	f	1	2014-03-13 21:56:30	2014-03-13 21:56:30	UserExercise	30
164	9	452	code	f	1	2014-02-19 23:23:15	2014-02-19 23:23:15	UserExercise	30
165	16	454	code	f	1	2014-02-21 10:41:01	2014-02-21 10:41:01	UserExercise	30
166	16	454	code	f	1	2014-02-28 03:21:56	2014-02-28 03:21:56	UserExercise	30
167	13	454	code	f	1	2014-03-01 22:16:17	2014-03-01 22:16:17	UserExercise	30
168	22	455	code	f	1	2014-02-07 17:38:30	2014-02-07 17:38:30	UserExercise	30
169	19	455	code	f	1	2014-02-08 07:59:10	2014-02-08 07:59:10	UserExercise	30
170	9	458	code	f	1	2014-02-06 19:42:39	2014-02-06 19:42:39	UserExercise	30
171	7	458	code	f	1	2014-03-04 05:46:39	2014-03-04 05:46:39	UserExercise	30
172	5	458	code	f	1	2014-03-05 13:34:12	2014-03-05 13:34:12	UserExercise	30
173	15	461	code	f	1	2014-02-27 23:31:59	2014-02-27 23:31:59	UserExercise	30
174	13	461	code	f	1	2014-02-27 23:31:59	2014-02-27 23:31:59	UserExercise	30
175	26	461	code	f	1	2014-02-27 23:31:59	2014-02-27 23:31:59	UserExercise	30
176	5	463	code	f	1	2014-02-21 11:56:19	2014-02-21 11:56:19	UserExercise	30
177	29	464	code	f	1	2014-03-04 19:22:38	2014-03-04 19:22:38	UserExercise	30
178	17	466	code	f	1	2014-02-17 12:52:25	2014-02-17 12:52:25	UserExercise	37
179	30	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
180	29	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
181	27	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
182	14	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
183	11	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
184	6	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
185	20	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
186	23	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
187	24	466	code	f	1	2014-03-14 04:33:14	2014-03-14 04:33:14	UserExercise	37
188	7	467	code	f	1	2014-02-15 08:07:10	2014-02-15 08:07:10	UserExercise	37
189	7	467	code	f	1	2014-03-09 07:58:34	2014-03-09 07:58:34	UserExercise	37
190	12	469	code	f	1	2014-03-11 11:45:44	2014-03-11 11:45:44	UserExercise	37
191	6	469	code	f	1	2014-03-11 11:45:44	2014-03-11 11:45:44	UserExercise	37
192	22	469	code	f	1	2014-03-17 21:19:00	2014-03-17 21:19:00	UserExercise	37
193	14	469	code	f	1	2014-03-17 21:19:00	2014-03-17 21:19:00	UserExercise	37
194	10	469	code	f	1	2014-03-17 21:19:00	2014-03-17 21:19:00	UserExercise	37
195	21	469	code	f	1	2014-03-17 21:19:00	2014-03-17 21:19:00	UserExercise	37
196	22	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
197	14	469	code	f	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
198	12	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
199	10	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
200	6	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
201	18	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
202	21	469	code	t	1	2014-03-19 23:01:01	2014-03-19 23:01:01	UserExercise	37
203	24	470	code	f	1	2014-03-02 22:15:30	2014-03-02 22:15:30	UserExercise	37
204	18	471	code	f	1	2014-02-21 22:48:36	2014-02-21 22:48:36	UserExercise	37
205	21	472	code	f	1	2014-03-01 20:48:20	2014-03-01 20:48:20	UserExercise	37
206	23	473	code	f	1	2014-03-04 10:31:30	2014-03-04 10:31:30	UserExercise	37
207	21	474	code	f	1	2014-02-17 16:34:27	2014-02-17 16:34:27	UserExercise	37
208	5	476	code	f	1	2014-02-21 00:52:12	2014-02-21 00:52:12	UserExercise	37
209	26	477	code	f	1	2014-02-28 08:02:35	2014-02-28 08:02:35	UserExercise	37
210	26	477	code	f	1	2014-03-15 04:33:15	2014-03-15 04:33:15	UserExercise	37
211	4	477	code	f	1	2014-03-15 04:33:15	2014-03-15 04:33:15	UserExercise	37
212	28	483	code	f	1	2013-10-26 05:27:12	2013-10-26 05:27:12	UserExercise	41
213	13	485	code	f	1	2013-10-29 22:04:56	2013-10-29 22:04:56	UserExercise	41
214	6	489	code	f	1	2014-01-20 11:57:13	2014-01-20 11:57:13	UserExercise	41
215	24	489	code	f	1	2014-01-20 11:57:13	2014-01-20 11:57:13	UserExercise	41
216	29	489	code	f	1	2014-03-11 13:51:51	2014-03-11 13:51:51	UserExercise	41
217	6	489	code	f	1	2014-03-11 13:51:51	2014-03-11 13:51:51	UserExercise	41
218	26	489	code	f	1	2014-03-11 13:51:51	2014-03-11 13:51:51	UserExercise	41
219	18	502	code	f	1	2013-11-06 01:20:29	2013-11-06 01:20:29	UserExercise	42
220	14	502	code	f	1	2014-01-01 02:05:33	2014-01-01 02:05:33	UserExercise	42
221	14	502	code	f	1	2014-02-06 01:46:18	2014-02-06 01:46:18	UserExercise	42
222	18	502	code	f	1	2014-02-06 01:46:18	2014-02-06 01:46:18	UserExercise	42
223	6	514	code	f	1	2014-01-18 21:05:36	2014-01-18 21:05:36	UserExercise	43
224	10	517	code	f	1	2014-02-24 05:09:21	2014-02-24 05:09:21	UserExercise	43
225	22	518	code	f	1	2014-03-01 23:04:04	2014-03-01 23:04:04	UserExercise	43
226	14	518	code	f	1	2014-03-01 23:04:04	2014-03-01 23:04:04	UserExercise	43
227	42	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
228	28	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
229	22	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
230	17	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
231	14	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
232	5	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
233	20	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
234	25	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
235	24	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
236	7	518	code	f	1	2014-03-14 14:23:21	2014-03-14 14:23:21	UserExercise	43
237	14	519	code	f	1	2014-02-07 03:55:03	2014-02-07 03:55:03	UserExercise	43
238	6	519	code	f	1	2014-02-07 03:55:03	2014-02-07 03:55:03	UserExercise	43
239	23	519	code	f	1	2014-02-24 08:46:08	2014-02-24 08:46:08	UserExercise	43
240	17	519	code	f	1	2014-03-04 19:27:41	2014-03-04 19:27:41	UserExercise	43
241	23	519	code	f	1	2014-03-04 19:27:41	2014-03-04 19:27:41	UserExercise	43
242	24	519	code	f	1	2014-03-04 19:27:41	2014-03-04 19:27:41	UserExercise	43
243	14	519	code	f	1	2014-03-11 14:14:16	2014-03-11 14:14:16	UserExercise	43
244	6	519	code	f	1	2014-03-11 14:14:16	2014-03-11 14:14:16	UserExercise	43
245	20	519	code	f	1	2014-03-11 14:14:16	2014-03-11 14:14:16	UserExercise	43
246	26	519	code	f	1	2014-03-11 14:14:16	2014-03-11 14:14:16	UserExercise	43
247	5	522	code	f	1	2014-02-01 23:17:03	2014-02-01 23:17:03	UserExercise	43
248	14	523	code	f	1	2014-02-02 09:39:42	2014-02-02 09:39:42	UserExercise	43
249	18	523	code	f	1	2014-02-02 09:39:42	2014-02-02 09:39:42	UserExercise	43
250	21	523	code	f	1	2014-02-24 12:32:43	2014-02-24 12:32:43	UserExercise	43
251	17	525	code	f	1	2014-02-04 10:46:04	2014-02-04 10:46:04	UserExercise	43
252	20	528	code	f	1	2014-03-05 06:27:18	2014-03-05 06:27:18	UserExercise	43
253	23	528	code	f	1	2014-03-05 06:27:18	2014-03-05 06:27:18	UserExercise	43
254	29	529	code	f	1	2014-01-27 02:41:13	2014-01-27 02:41:13	UserExercise	43
255	29	529	code	f	1	2014-02-06 14:09:50	2014-02-06 14:09:50	UserExercise	43
256	28	537	code	f	1	2013-12-12 12:53:51	2013-12-12 12:53:51	UserExercise	44
257	22	545	code	f	1	2014-01-14 02:41:10	2014-01-14 02:41:10	UserExercise	44
258	13	546	code	f	1	2013-12-05 15:35:07	2013-12-05 15:35:07	UserExercise	45
259	44	546	code	f	1	2014-01-09 20:22:20	2014-01-09 20:22:20	UserExercise	45
260	44	547	code	f	1	2014-01-30 21:34:57	2014-01-30 21:34:57	UserExercise	45
261	41	547	code	f	1	2014-01-30 21:34:57	2014-01-30 21:34:57	UserExercise	45
262	41	547	code	f	1	2014-03-04 19:13:07	2014-03-04 19:13:07	UserExercise	45
263	28	547	code	f	1	2014-03-04 19:13:07	2014-03-04 19:13:07	UserExercise	45
264	17	547	code	f	1	2014-03-04 19:13:07	2014-03-04 19:13:07	UserExercise	45
265	20	547	code	f	1	2014-03-04 19:13:07	2014-03-04 19:13:07	UserExercise	45
266	44	557	code	f	1	2014-03-02 22:31:28	2014-03-02 22:31:28	UserExercise	45
267	21	557	code	f	1	2014-03-02 22:31:28	2014-03-02 22:31:28	UserExercise	45
268	20	563	code	f	1	2014-02-20 14:41:37	2014-02-20 14:41:37	UserExercise	46
269	24	564	code	f	1	2014-02-16 00:24:20	2014-02-16 00:24:20	UserExercise	46
270	18	566	code	f	1	2014-03-03 19:06:23	2014-03-03 19:06:23	UserExercise	46
271	42	569	code	f	1	2014-01-10 01:34:20	2014-01-10 01:34:20	UserExercise	46
272	44	570	code	f	1	2014-02-01 19:59:13	2014-02-01 19:59:13	UserExercise	46
273	13	570	code	f	1	2014-02-01 19:59:13	2014-02-01 19:59:13	UserExercise	46
274	26	570	code	f	1	2014-03-01 17:43:06	2014-03-01 17:43:06	UserExercise	46
275	13	573	code	f	1	2014-02-02 09:58:12	2014-02-02 09:58:12	UserExercise	46
276	28	578	code	f	1	2014-02-06 06:44:22	2014-02-06 06:44:22	UserExercise	46
277	28	578	code	f	1	2014-02-24 10:26:16	2014-02-24 10:26:16	UserExercise	46
278	44	578	code	f	1	2014-03-10 19:03:13	2014-03-10 19:03:13	UserExercise	46
279	27	578	code	f	1	2014-03-10 19:03:13	2014-03-10 19:03:13	UserExercise	46
280	14	579	code	f	1	2014-01-14 13:30:00	2014-01-14 13:30:00	UserExercise	46
281	6	586	code	f	1	2014-01-06 17:15:54	2014-01-06 17:15:54	UserExercise	47
282	18	587	code	f	1	2013-12-30 19:55:00	2013-12-30 19:55:00	UserExercise	47
283	15	590	code	f	1	2014-02-22 16:04:26	2014-02-22 16:04:26	UserExercise	47
284	45	595	code	f	1	2014-01-21 16:13:16	2014-01-21 16:13:16	UserExercise	48
285	14	595	code	f	1	2014-01-21 16:13:16	2014-01-21 16:13:16	UserExercise	48
286	45	595	code	f	1	2014-02-11 19:40:30	2014-02-11 19:40:30	UserExercise	48
287	14	595	code	f	1	2014-02-11 19:40:30	2014-02-11 19:40:30	UserExercise	48
288	22	597	code	f	1	2014-01-18 22:43:55	2014-01-18 22:43:55	UserExercise	48
289	41	597	code	f	1	2014-01-29 00:40:56	2014-01-29 00:40:56	UserExercise	48
290	41	597	code	f	1	2014-02-14 01:35:23	2014-02-14 01:35:23	UserExercise	48
291	7	600	code	f	1	2014-02-09 14:44:08	2014-02-09 14:44:08	UserExercise	48
292	37	600	code	f	1	2014-03-11 21:12:00	2014-03-11 21:12:00	UserExercise	48
293	13	605	code	f	1	2014-01-29 23:40:31	2014-01-29 23:40:31	UserExercise	48
294	14	609	code	f	1	2013-12-26 02:32:45	2013-12-26 02:32:45	UserExercise	31
295	24	609	code	f	1	2014-01-26 05:19:04	2014-01-26 05:19:04	UserExercise	31
296	44	612	code	f	1	2014-02-21 05:19:20	2014-02-21 05:19:20	UserExercise	31
297	17	612	code	f	1	2014-02-21 05:19:20	2014-02-21 05:19:20	UserExercise	31
298	41	617	code	f	1	2014-01-27 09:58:21	2014-01-27 09:58:21	UserExercise	39
299	41	617	code	f	1	2014-01-30 20:45:25	2014-01-30 20:45:25	UserExercise	39
300	41	617	code	f	1	2014-02-12 15:03:30	2014-02-12 15:03:30	UserExercise	39
301	31	617	code	f	1	2014-03-07 00:45:56	2014-03-07 00:45:56	UserExercise	39
302	41	617	code	f	1	2014-03-07 00:45:56	2014-03-07 00:45:56	UserExercise	39
303	17	617	code	f	1	2014-03-07 00:45:56	2014-03-07 00:45:56	UserExercise	39
304	42	617	code	f	1	2014-03-07 05:29:47	2014-03-07 05:29:47	UserExercise	39
305	45	618	code	f	1	2014-02-13 17:10:50	2014-02-13 17:10:50	UserExercise	39
306	17	618	code	f	1	2014-02-13 17:10:50	2014-02-13 17:10:50	UserExercise	39
307	14	618	code	f	1	2014-03-07 22:59:22	2014-03-07 22:59:22	UserExercise	39
308	23	618	code	f	1	2014-03-07 22:59:22	2014-03-07 22:59:22	UserExercise	39
309	5	619	code	f	1	2014-02-07 09:18:44	2014-02-07 09:18:44	UserExercise	39
310	13	620	code	f	1	2014-02-03 23:57:15	2014-02-03 23:57:15	UserExercise	39
311	26	620	code	f	1	2014-02-03 23:57:15	2014-02-03 23:57:15	UserExercise	39
312	44	622	code	f	1	2014-02-06 12:06:35	2014-02-06 12:06:35	UserExercise	39
313	47	623	code	f	1	2014-01-25 14:53:04	2014-01-25 14:53:04	UserExercise	39
314	43	625	code	f	1	2014-03-17 22:29:50	2014-03-17 22:29:50	UserExercise	39
315	30	625	code	f	1	2014-03-17 22:29:50	2014-03-17 22:29:50	UserExercise	39
316	9	625	code	f	1	2014-03-17 22:29:50	2014-03-17 22:29:50	UserExercise	39
317	5	625	code	f	1	2014-03-17 22:29:50	2014-03-17 22:29:50	UserExercise	39
318	42	629	code	f	1	2014-02-11 17:00:42	2014-02-11 17:00:42	UserExercise	34
319	42	630	code	f	1	2014-02-12 13:42:24	2014-02-12 13:42:24	UserExercise	34
320	42	630	code	f	1	2014-02-22 16:04:32	2014-02-22 16:04:32	UserExercise	34
321	17	630	code	f	1	2014-02-22 16:04:32	2014-02-22 16:04:32	UserExercise	34
322	26	630	code	f	1	2014-02-22 16:04:32	2014-02-22 16:04:32	UserExercise	34
323	26	630	code	f	1	2014-02-24 10:46:15	2014-02-24 10:46:15	UserExercise	34
324	26	630	code	f	1	2014-03-01 22:03:24	2014-03-01 22:03:24	UserExercise	34
325	17	631	code	f	1	2014-02-11 11:39:47	2014-02-11 11:39:47	UserExercise	34
326	6	631	code	f	1	2014-02-11 11:39:47	2014-02-11 11:39:47	UserExercise	34
327	29	634	code	f	1	2014-03-04 02:08:02	2014-03-04 02:08:02	UserExercise	34
328	6	637	code	f	1	2014-02-01 00:28:12	2014-02-01 00:28:12	UserExercise	34
329	19	637	code	f	1	2014-02-01 00:28:12	2014-02-01 00:28:12	UserExercise	34
330	19	637	code	f	1	2014-02-23 09:21:21	2014-02-23 09:21:21	UserExercise	34
331	19	643	code	f	1	2014-01-17 07:10:17	2014-01-17 07:10:17	UserExercise	36
332	42	647	code	f	1	2014-02-20 00:49:48	2014-02-20 00:49:48	UserExercise	36
333	47	648	code	f	1	2014-02-08 17:40:39	2014-02-08 17:40:39	UserExercise	36
334	42	649	code	f	1	2014-02-17 15:30:40	2014-02-17 15:30:40	UserExercise	36
335	14	651	code	f	1	2013-12-15 16:14:20	2013-12-15 16:14:20	UserExercise	32
336	42	654	code	f	1	2014-01-27 04:57:21	2014-01-27 04:57:21	UserExercise	32
337	47	656	code	f	1	2014-02-21 17:46:14	2014-02-21 17:46:14	UserExercise	32
338	12	656	code	f	1	2014-02-21 17:46:14	2014-02-21 17:46:14	UserExercise	32
339	24	660	code	f	1	2014-02-14 14:47:19	2014-02-14 14:47:19	UserExercise	35
340	42	663	code	f	1	2013-12-25 16:38:56	2013-12-25 16:38:56	UserExercise	35
341	10	665	code	f	1	2014-02-17 17:38:03	2014-02-17 17:38:03	UserExercise	35
342	24	665	code	f	1	2014-02-17 17:38:03	2014-02-17 17:38:03	UserExercise	35
343	29	667	code	f	1	2013-12-23 06:38:55	2013-12-23 06:38:55	UserExercise	35
344	31	672	code	f	1	2014-01-09 03:06:00	2014-01-09 03:06:00	UserExercise	35
345	41	674	code	f	1	2014-01-28 10:01:52	2014-01-28 10:01:52	UserExercise	35
346	44	674	code	f	1	2014-02-01 06:51:19	2014-02-01 06:51:19	UserExercise	35
347	28	674	code	f	1	2014-02-17 14:08:07	2014-02-17 14:08:07	UserExercise	35
348	28	674	code	f	1	2014-02-24 20:13:35	2014-02-24 20:13:35	UserExercise	35
349	26	685	code	f	1	2013-12-09 17:14:06	2013-12-09 17:14:06	UserExercise	33
350	6	688	code	f	1	2014-01-14 05:28:03	2014-01-14 05:28:03	UserExercise	40
351	24	688	code	f	1	2014-02-18 15:52:23	2014-02-18 15:52:23	UserExercise	40
352	45	688	code	f	1	2014-02-20 06:40:12	2014-02-20 06:40:12	UserExercise	40
353	17	688	code	f	1	2014-02-20 06:40:12	2014-02-20 06:40:12	UserExercise	40
354	14	688	code	f	1	2014-02-20 06:40:12	2014-02-20 06:40:12	UserExercise	40
355	34	688	code	f	1	2014-03-05 15:19:12	2014-03-05 15:19:12	UserExercise	40
356	14	688	code	f	1	2014-03-05 15:19:12	2014-03-05 15:19:12	UserExercise	40
357	6	688	code	f	1	2014-03-05 15:19:12	2014-03-05 15:19:12	UserExercise	40
358	48	688	code	f	1	2014-03-06 06:30:42	2014-03-06 06:30:42	UserExercise	40
359	45	688	code	f	1	2014-03-06 06:30:42	2014-03-06 06:30:42	UserExercise	40
360	17	688	code	f	1	2014-03-06 06:30:42	2014-03-06 06:30:42	UserExercise	40
361	24	688	code	f	1	2014-03-06 06:30:42	2014-03-06 06:30:42	UserExercise	40
362	33	688	code	f	1	2014-03-08 00:13:25	2014-03-08 00:13:25	UserExercise	40
363	17	688	code	f	1	2014-03-08 00:13:25	2014-03-08 00:13:25	UserExercise	40
364	14	688	code	f	1	2014-03-08 00:13:25	2014-03-08 00:13:25	UserExercise	40
365	31	690	code	f	1	2014-02-28 16:59:06	2014-02-28 16:59:06	UserExercise	40
366	17	690	code	f	1	2014-02-28 16:59:06	2014-02-28 16:59:06	UserExercise	40
367	16	690	code	f	1	2014-02-28 16:59:06	2014-02-28 16:59:06	UserExercise	40
368	44	690	code	f	1	2014-03-05 08:39:01	2014-03-05 08:39:01	UserExercise	40
369	17	690	code	f	1	2014-03-05 08:39:01	2014-03-05 08:39:01	UserExercise	40
370	16	690	code	f	1	2014-03-05 08:39:01	2014-03-05 08:39:01	UserExercise	40
371	5	690	code	f	1	2014-03-05 08:39:01	2014-03-05 08:39:01	UserExercise	40
372	22	691	code	f	1	2014-02-11 04:56:54	2014-02-11 04:56:54	UserExercise	40
373	44	693	code	f	1	2014-02-10 14:31:31	2014-02-10 14:31:31	UserExercise	40
374	24	693	code	f	1	2014-03-07 23:52:20	2014-03-07 23:52:20	UserExercise	40
375	42	694	code	f	1	2014-01-23 21:30:14	2014-01-23 21:30:14	UserExercise	40
376	10	694	code	f	1	2014-03-01 12:23:06	2014-03-01 12:23:06	UserExercise	40
377	20	694	code	f	1	2014-03-01 12:23:06	2014-03-01 12:23:06	UserExercise	40
378	24	694	code	f	1	2014-03-01 12:23:06	2014-03-01 12:23:06	UserExercise	40
379	31	694	code	f	1	2014-03-05 06:02:26	2014-03-05 06:02:26	UserExercise	40
380	47	694	code	f	1	2014-03-05 06:02:26	2014-03-05 06:02:26	UserExercise	40
381	15	694	code	f	1	2014-03-05 06:02:26	2014-03-05 06:02:26	UserExercise	40
382	20	694	code	f	1	2014-03-05 06:02:26	2014-03-05 06:02:26	UserExercise	40
383	36	695	code	f	1	2014-01-27 09:18:41	2014-01-27 09:18:41	UserExercise	40
384	36	695	code	f	1	2014-02-22 03:05:14	2014-02-22 03:05:14	UserExercise	40
385	42	695	code	f	1	2014-02-22 03:05:14	2014-02-22 03:05:14	UserExercise	40
386	7	695	code	f	1	2014-02-22 03:05:14	2014-02-22 03:05:14	UserExercise	40
387	33	695	code	f	1	2014-03-17 04:28:11	2014-03-17 04:28:11	UserExercise	40
388	32	695	code	f	1	2014-03-17 04:28:11	2014-03-17 04:28:11	UserExercise	40
389	48	695	code	f	1	2014-03-17 04:28:11	2014-03-17 04:28:11	UserExercise	40
390	42	695	code	f	1	2014-03-17 04:28:11	2014-03-17 04:28:11	UserExercise	40
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 390, true);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY schema_migrations (version) FROM stdin;
0
1
2
4
5
6
7
8
9
10
11
12
13
14
15
20131222101500
20131222101800
20131222143000
20131222162300
20131226195100
20131228160800
20131228160801
20140104004000
20140106195300
201401140708
201401140711
201401251118
201401251416
201401251656
201401251934
201401252153
201401252202
201401261034
201402021253
201402142155
201402151326
201402221052
201402221552
\.


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
2	7	60e24ce3b194ce6d67be6759	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    hash         = {}\n    hash.default = 0\n\n    @phrase.gsub(",", ", ").split.map do |word|\n      word = word.match(/[[:word:]]*/).to_s.downcase\n      next if word == ""\n      hash[word] += 1\n    end\n\n    hash\n  end\nend	\N	f	2	1	2014-01-01 08:47:56	2014-01-01 08:47:56	1	\N
4	7	ddddc09b0e4477741332d095	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    Hash[@input.scan(/[[:word:]]+/)\n               .group_by { |word| word.downcase }\n               .map { |word, frequency| [word, frequency.count] }]\n  end\nend	\N	f	5	9	2014-02-03 01:42:03	2014-02-03 01:42:03	1	\N
5	7	54670debd901382983c1a140	superseded	ruby	word-count	class Phrase\n  attr_accessor :array_of_words\n\n  def initialize(input)\n    @array_of_words = input.gsub(",", ", ").split\n  end\n\n  def word_count\n    @array_of_words.group_by do |word|\n      word.match(/[[:word:]]*/).to_s.downcase\n    end.each_with_object(Hash.new) do |tuple, hash|\n      hash[tuple.first] = tuple.last.count unless tuple.first == ""\n    end\n  end\nend	\N	f	4	4	2014-02-09 11:44:20	2014-02-09 11:44:20	1	\N
6	7	369bac6aeb58b8dbef7bd94e	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    word_clusters = @input.downcase.scan(/[[:word:]]+/).group_by{ |word| word}\n\n    word_clusters.each_with_object(Hash.new) do |tuple, hash|\n      hash[tuple.first] = tuple.last.count\n    end\n  end\nend	\N	f	3	5	2014-02-12 17:45:13	2014-02-12 17:45:13	1	\N
7	7	dbbf4c891cf893035af6e9bd	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    word_clusters.each_with_object(Hash.new) do |tuple, hash|\n      hash[tuple.first] = tuple.last.count\n    end\n  end\n\n  def word_clusters\n    @input.downcase.scan(/[[:word:]]+/).group_by{ |word| word}\n  end\nend	\N	f	2	6	2014-02-24 14:13:58	2014-02-24 14:13:58	1	\N
8	7	303ff4ab968f63ec3d8db2f2	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    Hash[word_clusters.map { |word, frequency| [word, frequency.count] }]\n  end\n\n  def word_clusters\n    @input.downcase.scan(/[[:word:]]+/).group_by { |word| word }\n  end\nend	\N	f	4	7	2014-03-10 22:45:11	2014-03-10 22:45:11	1	\N
9	7	4107af01b1a121efbce15e9d	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    Hash[@input.downcase\n               .scan(/[[:word:]]+/)\n               .group_by { |word| word }\n               .map { |word, frequency| [word, frequency.count] }]\n  end\nend	\N	f	4	8	2014-03-10 23:59:41	2014-03-10 23:59:41	1	\N
10	7	4862270905e6511ee36b5a2f	done	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    Hash[word_clusters.map { |word, frequency| [word, frequency.count] }]\n  end\n\n  def word_clusters\n    @input.scan(/[[:word:]]+/).group_by { |word| word.downcase }\n  end\nend	\N	f	5	10	2014-03-11 23:32:37	2014-03-11 23:32:37	1	\N
11	7	b76bece80714f8edc56e96ed	superseded	ruby	bob	class DNA < Struct.new(:sequence)\n  def to_rna\n    sequence.gsub('T', 'U')\n  end\nend	\N	f	1	2	2014-01-02 23:03:23	2014-01-02 23:03:23	2	\N
12	7	45478c29a2a8026ea79dea66	hibernating	ruby	bob	class Bob\n  def hey(message)\n    if message.nil? || message.empty?\n      'Fine. Be that way.'\n    elsif message.end_with? '?'\n      'Sure.'\n    elsif message == message.upcase\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	3	3	2014-01-26 04:52:14	2014-01-26 04:52:14	2	\N
13	7	53281dddbad9fa253c8d51e9	superseded	ruby	bob	class Bob\n  def hey(message)\n    if message.nil? || message.empty?\n      'Fine. Be that way.'\n    elsif message.end_with? '?'\n      'Sure.'\n    elsif message == message.upcase\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	4	1	2014-01-29 16:31:23	2014-01-29 16:31:23	2	\N
14	7	8939cdf26338da276708e9ec	hibernating	clojure	grains	(ns grains)\n\n(defn- pow [^long x ^long y]\n  (.pow (biginteger x) y))\n\n(defn square [^long n]\n  (pow 2 (dec n)))\n\n(defn total []\n  (reduce + 0 (map square (range 1 65))))	\N	f	0	1	2014-01-29 00:54:04	2014-01-29 00:54:04	3	grains.clj
15	7	d1cbe8d79b59d9d5395871cd	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp words(phrase) do\n    List.flatten(Regex.scan(%r{\\w+}, String.downcase(phrase)))\n  end\nend	\N	f	1	2	2014-01-18 08:23:17	2014-01-18 08:23:17	4	\N
16	7	f344fc97ca973b524c51acd2	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  def count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  def count([], dict) do\n    dict\n  end\n\n  defp words(phrase) do\n    List.flatten(Regex.scan(%r{\\w+}, String.downcase(phrase)))\n  end\nend	\N	f	3	1	2014-01-23 05:36:02	2014-01-23 05:36:02	4	\N
17	7	b0a692a285aaccacc255311b	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  defp words(phrase) do\n    Regex.scan(%r{\\w+}, String.downcase(phrase)) |> List.flatten\n  end\nend	\N	f	3	3	2014-01-26 06:35:14	2014-01-26 06:35:14	4	\N
18	7	f3488fd0698f49edd3cfe551	done	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp count([word | words], dict) do\n    count(words, Dict.update(dict, word, 1, &inc/1))\n  end\n\n  defp inc(val) do\n    val + 1\n  end\n\n  defp words(phrase) do\n    Regex.scan(%r{\\w+}, String.downcase(phrase)) |> List.concat\n  end\nend	\N	f	4	4	2014-02-16 15:01:11	2014-02-16 15:01:11	4	\N
61	7	2b69de2189f0e087e3a67c8e	done	javascript	rna-transcription	module.exports = function(dna) {\n  return dna.replace(/T/g, 'U');\n}	\N	f	1	1	2014-01-14 20:25:35	2014-01-14 20:25:35	26	\N
1333	47	79c1b5b92f1364c833daa41e	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nmodule.exports = sequence(ensureString, toLowerCase, mapScores(), sumScores());\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithObject(arr) {\n  return mapUsing(function(element){\n    return arr[element] || 0;\n  });\n}\n\nfunction mapScores() {\n  return mapWithObject(scores);\n}\n\nfunction sumScores() {\n  return reduceUsing(sum);\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	0	6	2014-03-04 23:22:15	2014-03-04 23:22:15	591	scrabble-score.js
20	7	bda9eb986fbd5182b5d44e7b	done	clojure	rna-transcription	(ns dna\n  (require [clojure.string :as str]))\n\n(def thymine "T")\n(def uracil "U")\n\n(defn to-rna\n  [dna]\n  (str/replace dna thymine uracil))	\N	f	2	2	2014-01-22 09:37:33	2014-01-22 09:37:33	5	\N
21	7	cc126438f1add439db982025	pending	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    dif = 0\n    strand1.length.times do |index|\n      if strand1[index] && strand2[index]\n        dif += 1 unless strand1[index] == strand2[index]\n      end\n    end\n    dif\n  end\nend	\N	f	2	1	2014-01-02 23:17:52	2014-01-02 23:17:52	6	hamming.rb
23	7	17bfc9abc45296b8ced6ecf3	superseded	ruby	proverb	class Proverb\n  \n  def initialize(*parts)\n    if parts.last.kind_of? Hash\n      @qualifier = parts.pop.fetch(:qualifier)\n    end\n    @parts = parts \n  end\n\n  def to_s\n    add(all_verses) + ending\n  end\n\n  private\n\n    def add(verses)\n      verses.reduce(:+)\n    end\n\n    def all_verses\n      @parts.each_cons(2).map do |current_part, next_part| \n        verse(current_part, next_part) \n      end\n    end\n\n    def verse(current_part, next_part)\n      "For want of a #{current_part} the #{next_part} was lost.\\n"\n    end\n\n    def ending\n      reason = @parts.first\n      if @qualifier \n        "And all for the want of a #{@qualifier} #{reason}."\n      else\n        "And all for the want of a #{reason}."\n      end\n    end\n\nend	\N	f	3	2	2014-01-22 05:26:30	2014-01-22 05:26:30	7	\N
24	7	693e96d04856daa8f8b4bc5d	superseded	ruby	proverb	class Proverb\n  \n  def initialize(*parts)\n    if parts.last.kind_of? Hash\n      @qualifier = parts.pop.fetch(:qualifier)\n    end\n    @parts = parts \n  end\n\n  def to_s\n    add(all_verses) + ending\n  end\n\n  private\n\n    def add(verses)\n      verses.reduce(:+)\n    end\n\n    def all_verses\n      @parts.each_cons(2).map do |current_part, next_part| \n        verse(current_part, next_part) \n      end\n    end\n\n    def verse(current_part, next_part)\n      "For want of a #{current_part} the #{next_part} was lost.\\n"\n    end\n\n    def ending\n      "And all for the want of a #{cause}."\n    end\n\n    def cause\n      reason = @parts.first\n      if @qualifier \n        "#{@qualifier} #{reason}"\n      else\n        reason\n      end\n    end\n\nend	\N	f	0	3	2014-02-03 10:42:17	2014-02-03 10:42:17	7	\N
25	7	897483d7a37f238172c14a46	done	ruby	proverb	class Proverb\n  \n  def initialize(*causes)\n    if causes.last.kind_of? Hash\n      @qualifier = causes.pop.fetch(:qualifier)\n    end\n    @causes = causes\n  end\n\n  def to_s\n    all_verses + ending\n  end\n\n  private\n    \n    def all_verses\n      @causes.each_cons(2).map do |cause, consequence| \n        verse(cause, consequence) \n      end.join\n    end\n\n    def verse(cause, consequence)\n      "For want of a #{cause} the #{consequence} was lost.\\n"\n    end\n\n    def ending\n      "And all for the want of a #{original_cause}."\n    end\n\n    def original_cause\n      qualifier + first_cause\n    end\n\n    def qualifier\n      @qualifier ? "#{@qualifier} "  : ""\n    end\n\n    def first_cause\n      @causes.first\n    end\n\nend	\N	f	4	4	2014-02-20 17:36:39	2014-02-20 17:36:39	7	\N
26	7	46bccea8c473d1e0f5c86744	pending	javascript	sieve	(function() {\n  'use strict';\n\n  var Sieve = function(max) {\n    this.max = max;\n    this.primes = this.findPrimes();\n  };\n\n  Sieve.prototype.findPrimes = function() {\n    var results = [];\n    var range = rangeTo(this.max);\n\n    while (range.length > 0) {\n      var n = range.shift(); \n      if(!containsFactor(results, n)) {\n        results.push(n);\n      }\n    }\n\n    return results;\n  };\n\n  function rangeTo(max) {\n    var r = [];\n    for (var i = 2; i <= max; i++) {\n      r.push(i);\n    }\n    return r;\n  }\n\n  function containsFactor(collection, divisor) {\n    for (var i = 0; i < collection.length; i++) {\n      if (divisor % collection[i] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  module.exports = Sieve;\n})();	\N	f	2	1	2014-02-18 09:14:12	2014-02-18 09:14:12	8	sieve.js
28	7	bf30ddd5cb4cd33a49384fbe	superseded	python	bob	import re\n\nclass Bob:\n    def hey(self, s):\n        if s==s.upper() and re.search(r"[A-Z]", s): return "Woah, chill out!"\n        if len(s) and s[-1]=="?": return "Sure."\n        if s.strip()=="": return "Fine. Be that way!"\n        return "Whatever."	\N	f	7	1	2014-01-24 01:05:15	2014-01-24 01:05:15	10	\N
29	7	20d6975a287cc89b48983714	done	python	bob	class Bob(object):\n\n    def hey(self, text):\n        if text.isupper():\n            return "Woah, chill out!"\n        if text.endswith("?"):\n            return "Sure."\n        if text.strip() == "":\n            return "Fine. Be that way!"\n        return "Whatever."	\N	f	0	2	2014-02-02 23:07:01	2014-02-02 23:07:01	10	\N
30	7	5aba942442b83bff0284542a	done	ruby	binary-search-tree	class Bst\n  attr_reader :data, :left, :right\n\n  def initialize(data)\n    @data = data\n    @left = nil\n    @right = nil\n    @branches = [@left, @right]\n  end\n\n  def insert(new_data)\n    if new_data <= data\n      insert_left new_data\n    else\n      insert_right new_data\n    end\n  end\n\n  def each(&block)\n    return to_enum unless block_given?\n\n    search(@left, &block)\n    yield @data\n    search(@right, &block)\n  end\n\n  private\n  def insert_left(new_data)\n    @left && @left.insert(new_data) || @left = Bst.new(new_data)\n  end\n\n  def insert_right(new_data)\n    @right && @right.insert(new_data) || @right = Bst.new(new_data)\n  end\n\n  def search(branch, &block)\n    branch.each(&block) unless branch.nil?\n  end\nend	\N	f	2	1	2014-01-06 08:50:46	2014-01-06 08:50:46	11	\N
1337	47	c9b9e8cb19f837f7f8f5c0d4	done	javascript	space-age	(function() {\n 'use strict';\n\n  var secondsPerYear = 31557600,\n      mercuryRatio   = 0.2408467,\n      venusRatio     = 0.61519726,\n      marsRatio      = 1.8808158,\n      jupiterRatio   = 11.862615,\n      saturnRatio    = 29.447498,\n      uranusRatio    = 84.016846,\n      neptuneRatio   = 164.79132;\n\n  function SpaceAge(seconds) {\n    this.seconds = seconds;\n  }\n\n  function calculate(age, ratio) {\n    return parseFloat( (age / ratio).toFixed(2) );\n  }\n\n  SpaceAge.prototype.onEarth = function() {\n    return calculate( this.seconds, secondsPerYear );\n  }\n\n  SpaceAge.prototype.onMercury = function() {\n    return calculate( this.onEarth(), mercuryRatio );\n  }\n\n  SpaceAge.prototype.onVenus = function() {\n    return calculate( this.onEarth(), venusRatio );\n  }\n\n  SpaceAge.prototype.onMars = function() {\n    return calculate( this.onEarth(), marsRatio );\n  }\n\n  SpaceAge.prototype.onJupiter = function() {\n    return calculate( this.onEarth(), jupiterRatio );\n  }\n\n  SpaceAge.prototype.onSaturn = function() {\n    return calculate( this.onEarth(), saturnRatio );\n  }\n\n  SpaceAge.prototype.onUranus = function() {\n    return calculate( this.onEarth(), uranusRatio );\n  }\n\n  SpaceAge.prototype.onNeptune = function() {\n    return calculate( this.onEarth(), neptuneRatio );\n  }\n\n  module.exports = SpaceAge;\n})();	\N	f	1	1	2013-12-05 13:25:15	2013-12-05 13:25:15	592	\N
1341	48	2deec9038e4bbfaf7c3451fe	superseded	ruby	bob	class Bob\n\n  def hey words\n    if question? words\n      'Sure.'\n    elsif yelling? words      \n      'Woah, chill out!'\n    elsif  words.lstrip.empty?\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  def question? word\n    /[^[[:upper:]]]\\?$/ === word.strip.gsub("\\n", " ")\n   # word.end_with? "?"\n  end\n\n  def yelling? word\n    /[[:upper:]][^[[:lower:]]]\\!|\\?$/ === word.strip.gsub("\\n", " ")    \n  end  \nend	\N	f	5	2	2014-01-21 16:13:16	2014-01-21 16:13:16	595	\N
1353	48	4012c8903074f8c90695e24f	superseded	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    distance(strand1, strand2, 0)\n  end\n\n  defp distance(_, [], acc), do: acc\n  defp distance([], _, acc), do: acc\n  defp distance([], [], acc), do: acc\n\n  defp distance([left_head|left_tail], [right_head|right_tail], acc) do\n    if(left_head != right_head, do: acc = acc + 1)\n    distance(left_tail, right_tail, acc)\n  end\n\nend	\N	f	1	1	2013-12-29 15:37:12	2013-12-29 15:37:12	599	point_mutations.exs
32	7	7892bfd0eb2ae6890b6b44e1	pending	ruby	leap	class Year\r\n\t\r\n\tdef self.leap? (year)\r\n\t\treturn true if year % 400 == 0\r\n\t\treturn false if year % 100 == 0\r\n\t\tyear % 4 == 0\r\n\tend\r\n\t\r\nend	\N	f	3	1	2014-01-26 19:11:55	2014-01-26 19:11:55	13	year.rb
34	7	821273398908f2608146afb3	superseded	javascript	word-count	function words(text) {\n  function strip_punctuation(t) {\n    return t.replace(/[^a-z0-9 ]/g, '');\n  }\n  var analysis = { },\n    corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  for (var i in corpus) {\n    if (corpus.hasOwnProperty(i)) {\n      var word = corpus[i];\n      if (!analysis[word]) {\n        analysis[word] = 0;\n      }\n      analysis[word]++;\n    }\n  }\n  return analysis;\n}\n\nif (module) {\n  module.exports = words;\n}	\N	f	2	2	2014-01-13 09:54:37	2014-01-13 09:54:37	14	word-count.js
35	7	4204820f1c13c3ecd3b2743d	superseded	javascript	word-count	function word_analyzer(text) {\n  var analysis, corpus;\n  function strip_punctuation(str) {\n    return str.replace(/[^a-z0-9 ]/g, '');\n  }\n  function analyze(accumulator, element) {\n    if (!accumulator.hasOwnProperty(element)) {\n      accumulator[element] = 1;\n    } else {\n      accumulator[element]++;\n    }\n    return accumulator;\n  }\n\n  corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  return corpus.reduce(analyze, {});\n}\n\nif (module) {\n  module.exports = word_analyzer;\n}	\N	f	3	3	2014-01-22 04:13:05	2014-01-22 04:13:05	14	word-count.js
36	7	3dbea1219bce857e88e14487	pending	javascript	word-count	function count_unique_elements(accumulator, element) {\n  if (accumulator.hasOwnProperty(element)) {\n    accumulator[element]++;\n  } else {\n    accumulator[element] = 1;\n  }\n  return accumulator;\n}\n\nfunction strip_punctuation(str) {\n  return str.toLowerCase().replace(/[^a-z0-9 ]/g, '');\n}\n\nfunction word_analyzer(text) {\n  return strip_punctuation(text).split(/\\s+/).reduce(count_unique_elements, {});\n}\n\nif (module) {\n  module.exports = word_analyzer;\n}	\N	f	0	4	2014-01-30 19:27:53	2014-01-30 19:27:53	14	word-count.js
38	7	0cf2dbbe41aed36022c1f21a	done	haskell	kindergarten-garden	{-# LANGUAGE ViewPatterns #-}\n\nmodule Garden (garden, defaultGarden, lookupPlants, Plant(..)) where\n\nimport Control.Arrow ((***), (&&&), first)\nimport Control.Applicative (Applicative, (<$>), (<*>))\nimport Control.Monad (join)\nimport Data.Function (on)\nimport Data.List (sort)\nimport Data.List.Split (chunksOf)\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M\nimport Data.Traversable (sequenceA, traverse)\n\n-- plants must be determined by their first letter!\ndata Plant = Grass | Clover | Radishes | Violets deriving\n             (Bounded, Enum, Eq, Show)\n\ntype Child = String\ntype Garden = Map String [Plant]\n\nlookupPlants :: Child -> Garden -> [Plant]\nlookupPlants = M.findWithDefault []\n\ngarden :: [Child] -> String -> Garden\ngarden children (lines -> [row1, row2])\n  = either error id $ readGarden (sort children) (row1, row2)\ngarden _ _\n  = error "there should be two rows of plants"\n\ndefaultGarden :: String -> Garden\ndefaultGarden = garden $ words\n  "Alice Bob Charlie David Eve Fred Ginny Harriet Ileana Joseph Kincaid Larry"\n\n---\n\nreadGarden :: [Child] -> (String, String) -> Either String Garden\nreadGarden children rows = sequenceA . M.fromListWithKey complain =<< assoc\n  where\n    plantRows = traversePair (readRow $ length children) rows\n    plantSquares = uncurry (zipWith (++) `on` chunksOf 2) <$> plantRows\n    assoc = zip children . map Right <$> plantSquares\n    complain k _ _ = Left $ "duplicate child: " ++ k\n\nreadRow :: Int -> String -> Either String [Plant]\nreadRow n plants\n  | length plants <= 2*n = traverse (tag badPlant toPlant) plants\n  | otherwise            = Left $ "with " ++ show n\n                           ++ " child(ren), each row should have at most "\n                           ++ show (2 * n) ++ " plants"\n  where\n    badPlant = ("unrecognised plant: " ++) . (:[])\n\ntoPlant :: Char -> Maybe Plant\ntoPlant = (`M.lookup` m) where\n  m = M.fromList $ map (head . show &&& id) [minBound ..]\n\ntraversePair :: Applicative f => (a -> f b) -> (a, a) -> f (b, b)\ntraversePair f (x, y) = (,) <$> f x <*> f y\n\ntag :: (a -> e) -> (a -> Maybe b) -> a -> Either e b\ntag e f x = maybe (Left $ e x) Right $ f x	\N	f	2	3	2014-01-27 18:37:33	2014-01-27 18:37:33	15	Garden.hs
62	7	8a9b68f2c9cd198fce889a95	done	python	rna-transcription	class DNA(object):\n\n\n\tdef __init__(self, nucleotide):\n\n\t\tself.nucleotide = nucleotide\n\n\tdef to_rna(self):\n\n\t\treturn self.nucleotide.replace('T', 'U')	\N	f	5	1	2014-01-14 13:32:39	2014-01-14 13:32:39	27	\N
1355	48	4f57a4f1c48d99b66d16d74e	superseded	haskell	rna-transcription	module DNA (toRNA, toDNA) where\n\n  data Nucleotide = A | C | G | T | U deriving (Show)\n  data Strand = DNA [Nucleotide]\n              | RNA [Nucleotide]\n              deriving (Show)\n\n  toRNA :: String -> String\n  toRNA str = case (transcribe . readDNA) str of\n                Just (RNA rna) -> map nucToChar rna\n                _              -> "error: invalid DNA string"\n\n  readDNA :: String -> Maybe Strand\n  readDNA str = case sequence (map readDNANuc str) of\n                    Nothing -> Nothing\n                    Just s  -> Just (DNA s)\n    where readDNANuc 'A' = Just A\n          readDNANuc 'C' = Just C\n          readDNANuc 'G' = Just G\n          readDNANuc 'T' = Just T\n          readDNANuc _   = Nothing\n\n  transcribe :: Maybe Strand -> Maybe Strand\n  transcribe Nothing = Nothing\n  transcribe (Just (DNA s)) = Just (RNA (map transcribeDNA s))\n  transcribe (Just (RNA s)) = Just (DNA (map transcribeRNA s))\n\n  transcribeDNA :: Nucleotide -> Nucleotide\n  transcribeDNA T     = U\n  transcribeDNA other = other\n\n  transcribeRNA :: Nucleotide -> Nucleotide\n  transcribeRNA U     = T\n  transcribeRNA other = other\n\n  nucToChar :: Nucleotide -> Char \n  nucToChar A = 'A'\n  nucToChar C = 'C'\n  nucToChar G = 'G'\n  nucToChar T = 'T'\n  nucToChar U = 'U'	\N	f	1	4	2013-12-30 02:45:24	2013-12-30 02:45:24	600	\N
1356	48	bca5d3ee1fe8c087c4339e94	done	haskell	rna-transcription	module DNA (toRNA) where\n\n  data Nucleotide = A | C | G | T | U deriving (Show)\n  data Strand = DNA [Nucleotide]\n              | RNA [Nucleotide]\n              deriving (Show)\n\n  toRNA :: String -> String\n  toRNA str = case (transcribe . readDNA) str of\n                Just (RNA rna) -> map nucToChar rna\n                _              -> "error: invalid DNA string"\n\n  readDNA :: String -> Maybe Strand\n  readDNA str = case sequence (map readDNANuc str) of\n                    Nothing -> Nothing\n                    Just s  -> Just (DNA s)\n    where readDNANuc 'A' = Just A\n          readDNANuc 'C' = Just C\n          readDNANuc 'G' = Just G\n          readDNANuc 'T' = Just T\n          readDNANuc _   = Nothing\n\n  transcribe :: Maybe Strand -> Maybe Strand\n  transcribe Nothing = Nothing\n  transcribe (Just (DNA s)) = Just (RNA (map transcribeDNA s))\n  transcribe (Just (RNA s)) = Just (DNA (map transcribeRNA s))\n\n  transcribeDNA :: Nucleotide -> Nucleotide\n  transcribeDNA T     = U\n  transcribeDNA other = other\n\n  transcribeRNA :: Nucleotide -> Nucleotide\n  transcribeRNA U     = T\n  transcribeRNA other = other\n\n  nucToChar :: Nucleotide -> Char \n  nucToChar A = 'A'\n  nucToChar C = 'C'\n  nucToChar G = 'G'\n  nucToChar T = 'T'\n  nucToChar U = 'U'	\N	f	3	5	2014-01-13 02:39:56	2014-01-13 02:39:56	600	\N
42	7	11fedbdbf4f9640ace8bf7ce	superseded	elixir	phone-number	defmodule Phone do\n\n  @number_length 10\n  @area_code_range 0..2\n  @prefix_range 3..5\n  @line_number_range 6..9\n\n  def number(formatted_number) do\n    formatted_number\n      |> strip_formatting\n      |> validate\n  end\n\n  def area_code(number) do\n    segment(number, @area_code_range)\n  end\n\n  def pretty(formatted_number) do\n    n = number(formatted_number)\n    "(#{area_code(n)}) #{prefix(n)}-#{line_number(n)}"\n  end\n\n  defp strip_formatting(formatted_number) do\n    String.replace(formatted_number, %r/\\D/, "")\n  end\n\n  defp validate(<< ?1, number :: [binary, size(@number_length)]>>), do: number\n  defp validate(<< number :: [binary, size(@number_length)]>>), do: number\n  defp validate(_), do: "0000000000"\n\n  defp prefix(number) do\n    segment(number, @prefix_range)\n  end\n\n  defp line_number(number) do\n    segment(number, @line_number_range)\n  end\n\n  defp segment(number, range) do\n    String.slice(number, range.first, Enum.count(range))\n  end\n\nend	\N	f	3	4	2014-01-06 05:26:19	2014-01-06 05:26:19	17	\N
44	7	5e87f2ae3940958b5952da2e	superseded	elixir	phone-number	defmodule Phone do\n\n  @us_phone_number_length 10\n  @area_code_range 0..2\n  @prefix_range 3..5\n  @line_number_range 6..9\n\n  def number(formatted_number) do\n    formatted_number\n      |> strip_formatting\n      |> strip_country_code\n      |> validate\n  end\n\n  def pretty(formatted_number) do\n    n = number(formatted_number)\n    "(#{area_code(n)}) #{prefix(n)}-#{line_number(n)}"\n  end\n\n  def area_code(number) do\n    segment(number, @area_code_range)\n  end\n\n  defp prefix(number) do\n    segment(number, @prefix_range)\n  end\n\n  defp line_number(number) do\n    segment(number, @line_number_range)\n  end\n\n  defp strip_formatting(formatted_number) do\n    String.replace(formatted_number, %r/[^\\d]/, "")\n  end\n\n  defp strip_country_code(number) do\n    if includes_country_code?(number) do\n      String.slice(number, 1, @us_phone_number_length)\n    else\n      number\n    end\n  end\n\n  defp includes_country_code?(number) do\n    String.length(number) == @us_phone_number_length + 1 &&\n      String.starts_with?(number, "1")\n  end\n\n  defp validate(number) do\n    if String.length(number) == 10, do: number, else: "0000000000"\n  end\n\n  defp segment(number, range) do\n    String.slice(number, Enum.at(range, 0), Enum.count(range))\n  end\n\nend	\N	f	0	1	2014-02-01 09:55:51	2014-02-01 09:55:51	17	\N
45	7	f31307163831a66f92cfe21f	done	elixir	phone-number	defmodule Phone do\n\n  @number_length 10\n  @area_code_range 0..2\n  @prefix_range 3..5\n  @line_number_range 6..9\n\n  def number(formatted_number) do\n    formatted_number\n      |> strip_formatting\n      |> validate\n  end\n\n  def area_code(number) do\n    String.slice(number, @area_code_range)\n  end\n\n  def pretty(formatted_number) do\n    n = number(formatted_number)\n    "(#{area_code(n)}) #{prefix(n)}-#{line_number(n)}"\n  end\n\n  defp strip_formatting(formatted_number) do\n    String.replace(formatted_number, %r/\\D/, "")\n  end\n\n  defp validate(<< ?1, number :: [binary, size(@number_length)]>>), do: number\n  defp validate(<< number :: [binary, size(@number_length)]>>), do: number\n  defp validate(_), do: "0000000000"\n\n  defp prefix(number) do\n    String.slice(number, @prefix_range)\n  end\n\n  defp line_number(number) do\n    String.slice(number, @line_number_range)\n  end\n\nend	\N	f	4	5	2014-02-21 10:03:08	2014-02-21 10:03:08	17	\N
46	7	026524e7859f43e3ef424a8f	superseded	python	word-count	#! /usr/bin/env python \n\nfrom collections import Counter\nimport string\n\nclass Phrase(object):\n\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        phrase_list = self.clean_phrase()\n        return dict(Counter(phrase_list))\n\n    def clean_phrase(self):\n        # This function takes a phrase, normalizes case, removes punctuation, \n        # and then splits into and returns a list of the words in the phrase.\n\n        return self.phrase.lower().translate(None,string.punctuation).split()	\N	f	1	1	2014-01-14 21:15:08	2014-01-14 21:15:08	18	\N
47	7	e45309f2652aa9cfc38d556c	done	python	word-count	#! /usr/bin/env python \n\nfrom collections import Counter\nimport string\n\nclass Phrase(object):\n    '''\n    Returns a Counter dictionary of the number of occurrences of each word\n    in a provided phrase.\n    '''\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        word_list = self._clean()\n        return Counter(word_list)\n\n    def _clean(self):\n        '''\n        Takes the phrase, normalizes case, removes punctuation, \n        and then splits into and returns a list of the words in the phrase.\n        '''\n        table = string.maketrans('','')\n        return self.phrase.lower().translate(table,string.punctuation).split()	\N	f	0	2	2014-01-21 11:48:01	2014-01-21 11:48:01	18	\N
1358	48	05e5f53585d43754cb93af96	superseded	haskell	rna-transcription	module DNA where\n\n  data Nucleotide = A | C | G | T | U deriving (Show)\n  data Strand = DNA [Nucleotide]\n              | RNA [Nucleotide]\n              deriving (Show)\n\n  readDNA :: String -> Maybe Strand\n  readDNA str = case ff (map readDNANuc str) [] of\n                  Nothing -> Nothing\n                  Just s -> Just (DNA s)\n    where ff [] acc = Just (reverse acc)\n          ff (Nothing : _) _ = Nothing\n          ff (Just x : xs) acc = ff xs (x:acc)\n                    \n  readDNANuc :: Char -> Maybe Nucleotide\n  readDNANuc 'A' = Just A\n  readDNANuc 'C' = Just C\n  readDNANuc 'G' = Just G\n  readDNANuc 'T' = Just T\n  readDNANuc _ = Nothing\n\n  transcribe :: Maybe Strand -> Maybe Strand\n  transcribe Nothing = Nothing\n  transcribe (Just (DNA s)) = Just (RNA (map transcribeDNA s))\n  transcribe (Just (RNA s)) = Just (DNA (map transcribeRNA s))\n\n  transcribeDNA :: Nucleotide -> Nucleotide\n  transcribeDNA T = U \n  transcribeDNA other = other \n\n  transcribeRNA :: Nucleotide -> Nucleotide\n  transcribeRNA U = T\n  transcribeRNA other = other\n  \n  toRNA :: String -> String\n  toRNA str = case (transcribe . readDNA) str of\n                 Just (RNA rna) -> map nucToChar rna\n                 _ -> "error: invalid DNA string"\n\n  nucToChar :: Nucleotide -> Char \n  nucToChar A = 'A'\n  nucToChar C = 'C'\n  nucToChar G = 'G'\n  nucToChar T = 'T'\n  nucToChar U = 'U'\n\n  toRNA2 :: String -> String\n  toRNA2 = map simpleTranscribe \n    where simpleTranscribe 'T' = 'U'\n          simpleTranscribe other = other	\N	f	4	3	2014-02-24 03:46:14	2014-02-24 03:46:14	600	\N
1361	48	da8f261ae96f70e902b2c22b	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nprimeFactors :: Integer -> [Integer]\nprimeFactors = reverse . loop 2 []\n  where loop cur acc n \n          | n == 1 = acc\n          | cur*cur > n = if n > 1 then n:acc else acc\n          | n `mod` cur == 0 = loop 2 (cur:acc) (quot n cur) \n          | otherwise = loop (cur+1) acc n	\N	f	2	2	2014-01-05 19:18:11	2014-01-05 19:18:11	601	PrimeFactors.hs
1362	48	58e600ee1fb909c352bd0d97	superseded	haskell	atbash-cipher	module Atbash (encode) where\n\nimport qualified Data.Map as M\nimport Data.List.Split (chunk)\nimport Data.Char (toLower, isAlphaNum, isAlpha, ord, chr)\n\ntranslate :: Char -> Char\ntranslate c\n    | isAlpha c = chr (ord 'z' - ord c + ord 'a')\n    | otherwise = c\n\nencode :: String -> String\nencode = map translate . normalize\n\nnormalize :: String -> String\nnormalize =\n    unwords . chunk 5 . map toLower . filter isAlphaNum	\N	f	1	2	2014-02-01 09:02:32	2014-02-01 09:02:32	602	\N
49	7	253af248f5bfb17bddf8b493	done	ruby	anagram	class Anagram\n  def initialize(string)\n    @string = string\n  end\n\n  attr_reader :string\n\n  def match(strings)\n    Array(strings).grep(self)\n  end\n\n  def ===(other)\n    self == other && normalized != Anagram(other).normalized\n  end\n\n  def ==(other)\n    sorted == Anagram(other).sorted\n  end\n\n  protected\n\n  def normalized\n    @normalized ||= string.downcase\n  end\n\n  def sorted\n    @sorted ||= normalized.chars.sort\n  end\nend\n\ndef Anagram(arg)\n  return arg if arg.is_a?(Anagram)\n  Anagram.new(arg.to_str)\nend	\N	f	0	2	2014-02-17 00:14:38	2014-02-17 00:14:38	19	\N
50	7	1400496d854fc5d560a42ca1	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :source\n\n  def initialize(source)\n    @source = source\n  end\n\n  def to_rna\n    source.gsub('T', 'U')\n  end\n\nend	\N	f	4	2	2013-12-30 20:02:44	2013-12-30 20:02:44	20	\N
51	7	ecaf3e1799bd1c21b438aab8	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :source\n\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def initialize(source)\n    @source = source\n  end\n\n  def to_rna\n    source.tr(THYMIDINE, URACIL)\n  end\n\nend	\N	f	0	3	2014-01-14 00:51:23	2014-01-14 00:51:23	20	\N
52	7	12c768b4f44d912a54ee5d77	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :source\n\n  def initialize(source)\n    @source = source.upcase\n  end\n\n  def to_rna\n    source.gsub('T', 'U')\n  end\n\nend	\N	f	4	1	2014-01-24 04:26:44	2014-01-24 04:26:44	20	\N
53	7	a14f7b6b9b83db2ebbda4219	superseded	ruby	rna-transcription	=begin\nclass DNA\n\n  attr_reader :sequence\n\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    sequence.tr(THYMIDINE, URACIL)\n  end\n\nend\n\n=end\n\nmodule StrandUnits\n  THYMIDINE = 'T'\n  URACIL = 'U'\nend\n\n\nclass DNA\n\n  include StrandUnits\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr(THYMIDINE, URACIL)\n  end\n\nend	\N	f	4	4	2014-01-24 05:12:11	2014-01-24 05:12:11	20	\N
54	7	a73c2876fe89cbf541252b9c	done	ruby	rna-transcription	module StrandUnits\n  THYMIDINE = 'T'\n  URACIL = 'U'\nend\n\n\nclass DNA\n\n  include StrandUnits\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr(THYMIDINE, URACIL)\n  end\n\nend	\N	f	6	5	2014-02-17 14:10:59	2014-02-17 14:10:59	20	\N
55	7	954f33599fdfae3c56b5a119	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = [if x == 'T' then 'U' else x | x<-dna]	\N	f	3	1	2014-01-20 06:55:51	2014-01-20 06:55:51	21	\N
57	7	6fdaf02b2bb3aa928641e258	superseded	elixir	beer-song	defmodule Beer do\n  def verse(n) do\n    bottles = pluralize(n)\n    next_n = cond do n == 0 -> 99; true -> n-1 end\n    "#{String.capitalize(bottles)} of beer on the wall, #{bottles} of beer.\\n#{take_down(n)}, #{pluralize(next_n)} of beer on the wall.\\n"\n  end\n\n  def sing(from) do\n    sing(from, 0)\n  end\n\n  def sing(from, to) do\n    cond do\n      from < to ->\n        ""\n      true ->\n        "#{verse(from)}\\n#{sing(from-1, to)}"\n    end\n  end\n\n  defp pluralize(n) do\n    case n do\n      0 -> "no more bottles"\n      1 -> "1 bottle"\n      _ -> "#{n} bottles"\n    end\n  end\n\n  defp take_down(n) do\n    cond do\n      n == 0 ->\n        "Go to the store and buy some more"\n      true ->\n        one = cond do n == 1 -> "it"; true -> "one" end\n        "Take #{one} down and pass it around"\n    end\n  end\nend	\N	f	2	1	2014-02-03 11:14:00	2014-02-03 11:14:00	22	\N
58	7	2eea1bc57769c13daa4cd949	done	ruby	space-age	class SpaceAge\n\n\tattr_reader :seconds\n\n\t@@PLANETS = Hash.new\n\n    File.open('README.md').each do |line|\n    \tif match = line.match(/ ([^ :]+): orbital period ([^ ]+) ([^ ]+) years/) then\n    \t\t@@PLANETS[match[1].to_s.downcase] = match[2].to_f * @@PLANETS[match[3].downcase]\n    \telsif match = line.match(/ ([^ :]+): orbital period .* (\\d+)/) then\n    \t\t@@PLANETS[match[1].to_s.downcase] = match[2].to_f\n       \tend\n    end\n\n    @@PLANETS.each do |planet, seconds|\n\t\tdefine_method "on_#{planet}" do\n\t\t\treturn (@seconds / seconds).round(2)\n\t\tend\n\tend\n\n\tdef initialize(seconds)\n\t\t@seconds = seconds\n\tend\n\nend	\N	f	4	1	2014-01-21 12:01:20	2014-01-21 12:01:20	23	\N
60	7	bd841c329890ad6c275ba1ec	done	javascript	grade-school	var School = function(){\n  "use strict";\n  var roster = {};\n  this.roster = function(){\n    return roster;\n  };\n  this.grade = function(grade_number){\n    return (roster[grade_number] || []);\n  };\n  this.add = function(name, grade_number){\n    roster[grade_number] = this.grade(grade_number).concat(name).sort();\n  };\n};\nmodule.exports = School;	\N	f	2	1	2014-01-17 06:23:13	2014-01-17 06:23:13	25	grade-school.js
1363	48	2a02870b8277c94c20370ac5	superseded	haskell	atbash-cipher	module Atbash (encode) where\n\nimport qualified Data.Map as M\nimport Data.Char\n\nkey :: M.Map Char Char\nkey = M.fromList $ zip ['a' .. 'z'] ['z', 'y' .. 'a']\n\nencode :: String -> String\nencode m =\n    let m' = normalize m in\n    map (\\c -> M.findWithDefault c c key) m'\n\n\nnormalize :: String -> String\nnormalize =\n    unwords . separate 5 . map toLower . filter isAlphaNum\n\nseparate :: Int -> [a] -> [[a]]\nseparate n xs = go xs\n    where go [] = []\n          go ys = let (as, bs) = splitAt n ys in\n                  as : go bs	\N	f	1	1	2014-02-22 19:16:17	2014-02-22 19:16:17	602	\N
1364	48	f7023a868e52e0d2b287d7bb	done	haskell	atbash-cipher	module Atbash (encode) where\n\nimport Data.List.Split (chunk)\nimport Data.Char (toLower, isAlphaNum, isAlpha, ord, chr)\n\ntranslate :: Char -> Char\ntranslate c\n    | isAlpha c = chr (ord 'z' - ord c + ord 'a')\n    | otherwise = c\n\nencode :: String -> String\nencode = map translate . normalize\n\nnormalize :: String -> String\nnormalize =\n    unwords . chunk 5 . map toLower . filter isAlphaNum	\N	f	1	3	2014-02-24 01:54:19	2014-02-24 01:54:19	602	\N
65	7	9ed862b2ad6502bebd12b975	done	ruby	nucleotide-count	class DNA\n\n  DNA = %w( A T C G )\n  RNA = %w( A C G U )\n\n  def initialize(str)\n    raise ArgumentError unless valid_data?(str)\n    @data = str\n  end\n\n  def count(char)\n    raise ArgumentError unless valid_nucleotide?(char)\n    @data.count(char)\n  end\n\n  def nucleotide_counts\n    hsh = {}\n    DNA.each { |n| hsh[n] = count(n) }\n    hsh\n  end\n\n  def valid_nucleotide?(char)\n    (DNA + RNA).include?(char)\n  end\n\n  def valid_data?(str)\n    str.is_a?(String) && str.match(/^(#{DNA.join('|')})*$/)\n  end\n\nend	\N	f	2	2	2014-01-04 08:30:26	2014-01-04 08:30:26	29	\N
66	7	91f148978d9420a83c27470a	pending	ruby	grains	class Grains\r\n\r\n  def square number\r\n    1 << (number - 1)\r\n  end  \r\n\r\n  def total\r\n    (1 << 64) - 1\r\n  end\r\nend\r	\N	f	3	1	2014-01-18 19:14:26	2014-01-18 19:14:26	30	grains.rb
67	7	e5a74a7f02adc93093bce7cc	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | silence   = "Fine. Be that way."\n  | yelling   = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where silence  = lstrip phrase == ""\n        yelling  = all isUpper $ filter isAlpha phrase\n        question = last phrase == '?' \n\nlstrip :: String -> String\nlstrip = dropWhile isSpace	\N	f	2	2	2014-01-11 16:32:48	2014-01-11 16:32:48	31	\N
68	7	97760448e17b3f1d2c9f5f1d	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isLower, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | silence   = "Fine. Be that way."\n  | yelling   = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where silence  = all isSpace phrase\n        yelling  = not $ any isLower phrase\n        question = last phrase == '?' 	\N	f	3	3	2014-01-14 22:39:31	2014-01-14 22:39:31	31	\N
69	7	8badb4576e6e106275b18af0	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (toUpper, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | silence   = "Fine. Be that way."\n  | yelling   = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where silence  = lstrip phrase == ""\n        yelling  = upcase phrase == phrase\n        question = last   phrase == '?' \n\nlstrip :: String -> String\nlstrip = dropWhile isSpace\n\nupcase :: String -> String\nupcase = map toUpper\n  	\N	f	0	1	2014-02-02 05:40:13	2014-02-02 05:40:13	31	\N
70	7	5d0bec37cfab86ed2811cd11	done	javascript	phone-number	module.exports = PhoneNumber;\n\nfunction PhoneNumber(raw_number) {\n  this.digits = extract_digits(raw_number);\n\n  function extract_digits(raw_number) {\n    return validate_length(raw_number.match(/\\d/g).join(''));\n  }\n\n  function validate_length(number) {\n    if(number.length === 11 && number[0] === '1') {\n      number = number.substr(1);\n    }\n    return number.length === 10 ? number : "0000000000";\n  }\n\n}\n\nPhoneNumber.prototype.number = function() {\n  return this.digits;\n};\n\nPhoneNumber.prototype.areaCode = function() {\n  return this.digits.substr(0,3);\n};\n\nPhoneNumber.prototype.subscriberNumber = function() {\n  return this.digits.substr(3,3) + "-" + this.digits.substr(6,4);\n};\n\nPhoneNumber.prototype.toString = function() {\n  return "(" + this.areaCode() + ") " + this.subscriberNumber();\n};	\N	f	2	1	2014-01-13 09:26:50	2014-01-13 09:26:50	32	\N
71	7	95d0d4a4faea7678f31c83ca	pending	scala	nucleotide-count	class DNA(str: String) {\n  val DnaNucleotides = Set('A', 'C', 'G', 'T')\n  val RnaNucleotides = Set('A', 'C', 'G', 'U')\n\n  if (!str.toSet.diff(DnaNucleotides).isEmpty)\n    throw new IllegalArgumentException\n\n  def count(marker: Char) = {\n    if ((DnaNucleotides ++ RnaNucleotides).contains(marker))\n      str.count(_ == marker)\n    else\n      throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts =\n    DnaNucleotides.map(m => (m, count(m))).toMap\n}	\N	f	0	1	2014-02-16 07:10:52	2014-02-16 07:10:52	33	dna.scala
72	7	f66e231d6fe48e9381fea9f3	done	ruby	triangle	class Triangle\n\tdef initialize(side_a,side_b,side_c)\n\t\tif side_a + side_b <= side_c || side_a + side_c <= side_b || side_b + side_c <= side_a \n\t\t\traise TriangleError\n\t\telse\n\t\t\t@side_a = side_a\n\t\t\t@side_b = side_b\n\t\t\t@side_c = side_c\n\t\tend\n\n\tend\n\n\tdef kind\n\t\tif @side_a == @side_b && @side_b == @side_c\n\t\t\t:equilateral\n\t\t\n\n\t\telsif (@side_a == @side_b && @side_a != @side_c) || (@side_c == @side_b && @side_a != @side_c)|| (@side_c == @side_a && @side_b != @side_c)\n\t\t\t:isosceles\n\t\telse\n\t\t\t:scalene\n\t\tend\n\tend\nend	\N	f	7	1	2014-02-20 06:29:12	2014-02-20 06:29:12	34	\N
73	7	4f667c43a1fae9a286e0675a	pending	haskell	queen-attack	module Queens (boardString, canAttack) where\n\nimport Data.Ix (inRange)\nimport Data.List (intersperse)\nimport Data.List.Split (chunksOf)\n\nboardString :: Maybe (Int, Int) -> Maybe (Int, Int) -> String\nboardString w b = unlines $ map (intersperse ' ' . map toChar) board where\n  board = chunksOf 8 [0..63]\n  wLoc = loc =<< w\n  bLoc = loc =<< b\n  toChar n | Just n == wLoc = 'W'\n           | Just n == bLoc = 'B'\n           | otherwise      = 'O'\n\nloc :: (Int, Int) -> Maybe Int\nloc (row, col) | all (inRange (0, 8)) [row, col] = Just $ col + 8*row\n               | otherwise                       = Nothing\n\ncanAttack :: (Int, Int) -> (Int, Int) -> Bool\ncanAttack (x1, y1) (x2, y2) = lateral || diagonal where\n  lateral = x1 == x2 || y1 == y2\n  diagonal = abs (x1 - x2) == abs (y1 - y2)	\N	f	0	1	2014-01-29 13:28:36	2014-01-29 13:28:36	35	Queens.hs
74	7	8a587e68a24aa360fc65dc16	done	perl5	rna-transcription	package DNA;\n\nuse warnings;\nuse strict;\nuse v5.14; # non-destructive transliteration\n\nsub to_rna {\n    shift =~ y/T/U/r\n}\n\n\n__PACKAGE__	\N	f	2	1	2014-01-30 02:18:56	2014-01-30 02:18:56	36	\N
75	7	81541441142fbbcd8b6b8bd2	superseded	javascript	robot-name	'use strict';\n\nfunction Robot () {\n  this.reset();\n}  \n\nRobot.prototype.reset = function() {\n  this.name = randomLetter() + randomLetter() +\n              randomInteger() + randomInteger() + randomInteger();\n}\n\nmodule.exports = Robot;\n\nvar chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\nfunction randomLetter() {\n  return chars[Math.floor(Math.random() * chars.length)];\n}\n\nfunction randomInteger() {\n  return Math.random().toString().slice(-1);\n}	\N	f	0	1	2014-01-14 01:41:30	2014-01-14 01:41:30	37	\N
201	26	0c80764ae225e1822e23e292	done	clojure	word-count	(ns phrase (:require [clojure.string :refer [lower-case split]]))\n\n(defn word-count\n  "Given a phrase, count the occurrences of each word in that phrase. Returns a hash {word count}"\n  [phrase]\n  (frequencies (split (lower-case phrase) #"[^\\w]+")))	\N	f	2	2	2014-02-11 02:18:01	2014-02-11 02:18:01	94	\N
1366	48	81a1d58729ba19bb78ad58f8	superseded	ruby	binary	class Binary\n\n  attr_reader :rev_bin\n  def initialize(binary=0)\n    @rev_bin = binary.chars.reverse\n  end\n\n  def to_decimal\n    (0..rev_bin.size-1).inject(0) do |decimal, ndx|\n      val = rev_bin[ndx].to_i\n      return 0 unless ([0,1].include? val)\n      decimal += val*(2**ndx)\n    end\n  end\n\nend	\N	f	2	1	2014-02-02 08:35:46	2014-02-02 08:35:46	603	\N
1367	48	c9c071c33d640a8549b3223c	superseded	ruby	binary	class Binary\n\n  attr_reader :rev_bin\n  def initialize(binary=0)\n    @rev_bin = binary.chars.reverse\n  end\n\n  def to_decimal\n    (0..rev_bin.size-1).inject(0) do |decimal, ndx|\n      return 0 unless (['0','1'].include? rev_bin[ndx])\n      val = rev_bin[ndx].to_i\n      decimal += val*(2**ndx)\n    end\n  end\n\nend	\N	f	0	2	2014-02-12 20:48:06	2014-02-12 20:48:06	603	\N
77	7	283b5d2ac2b98a70826bc2eb	done	ruby	robot-name	class Robot\n  attr_reader :name\n\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = ""\n    \n    2.times { @name << (65 + rand(25)).chr }\n    3.times { @name << rand(10).to_s }\n  end\n\nend	\N	f	2	2	2014-01-27 15:48:28	2014-01-27 15:48:28	38	\N
78	7	85d0fd07cb88a7456af4d914	superseded	ruby	robot-name	class Robot\n  attr_reader :name\n\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = ""\n    \n    2.times { @name << (?A..?Z).to_a.sample }\n    3.times { @name << rand(10).to_s }\n  end\n\nend	\N	f	2	1	2014-02-25 22:04:43	2014-02-25 22:04:43	38	\N
79	7	a76b00ca7f27c713b71aecb7	superseded	haskell	word-count	{-# LANGUAGE TupleSections #-}\nmodule WordCount (wordCount) where\n\nimport Data.Char (isPunctuation, isSymbol, toLower)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Integer\nwordCount = fromListWith (+) . map (,1) . words . map toLower . filter isAllowed\n\nisAllowed :: Char -> Bool\nisAllowed x = not (isPunctuation x || isSymbol x)	\N	f	0	1	2013-12-29 09:43:49	2013-12-29 09:43:49	39	\N
80	7	8f080f39679a4cb1bd021895	superseded	haskell	word-count	{-# LANGUAGE TupleSections #-}\nmodule WordCount (wordCount) where\n\nimport Data.Char (isPunctuation, isSymbol, toLower)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Integer\nwordCount = count . words . sanitize\n\ncount :: Ord a => [a] -> Map a Integer\ncount = fromListWith (+) . map (,1)\n\nsanitize :: String -> String\nsanitize = map toLower . filter isAllowed\n\nisAllowed :: Char -> Bool\nisAllowed x = not (isPunctuation x || isSymbol x)	\N	f	1	2	2014-01-25 09:51:38	2014-01-25 09:51:38	39	\N
81	7	00a6ee8310d31cce92bc59ce	done	haskell	word-count	{-# LANGUAGE TupleSections #-}\nmodule WordCount (wordCount) where\n\nimport Data.Char (isPunctuation, isSymbol, toLower)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Integer\nwordCount = count . words . normalize\n\ncount :: Ord a => [a] -> Map a Integer\ncount = fromListWith (+) . map (,1)\n\nnormalize :: String -> String\nnormalize = map toLower . filter isAllowed\n\nisAllowed :: Char -> Bool\nisAllowed x = not (isPunctuation x || isSymbol x)	\N	f	0	3	2014-01-31 18:20:50	2014-01-31 18:20:50	39	\N
83	7	c3c22a2334ea6655d3b80a37	done	javascript	pythagorean-triplet	var Triplet = function(a, b, c) {\r\n  this.members = function() { return [a, b, c]; };\r\n  this.sum = function() { return a + b + c; };\r\n  this.product = function() { return a * b * c; };\r\n  this.isPythagorean = function() {\r\n    return a*a + b*b == c*c;\r\n  };\r\n  this.print = function() {\r\n    return "a: " + a + ", b: " + b + ", c: " + c;\r\n  };\r\n};\r\n\r\nTriplet.where = function(options) {\r\n  var max = options.maxFactor || 425,\r\n      min = options.minFactor || 3,\r\n      sum = options.sum,\r\n      i, j, k, trip, triplets = [];\r\n\r\n  for(i = min; i < max - 1; i++)\r\n    for(j = i + 1; j < max; j++)\r\n      for(k = j + 1; k <= max; k++) {\r\n        trip = new Triplet(i, j, k);\r\n        if(trip.isPythagorean())\r\n          if(!sum || trip.sum() == sum)\r\n            triplets.push(trip);\r\n      }\r\n\r\n  return triplets;\r\n};\r\n\r\nmodule.exports = Triplet;\r\n\r\nfunction extraTests() {\r\n  it('gets the right answer', function() {\r\n    var triplets = Triplet.where({sum: 1000, minFactor: 200, maxFactor: 425 });\r\n    var products = triplets.sort().map( function (triplet) {\r\n      return triplet.product();\r\n    });\r\n    expect(products).toEqual([31875000]);\r\n  });\r\n\r\n  it('prints its member factors', function() {\r\n    expect((new Triplet(1,2,3)).print()).toEqual("a: 1, b: 2, c: 3");\r\n  });\r\n\r\n  it('returns its member factors', function() {\r\n    expect((new Triplet(5,6,7)).members()).toEqual([5,6,7]);\r\n  }); \r\n}	\N	f	2	1	2014-01-15 00:15:34	2014-01-15 00:15:34	41	\N
84	7	d0cfa4f73385698d2ac5c5d7	done	elixir	etl	defmodule ETL do\n\n  def transform(old) do\n    Enum.reduce(old, HashDict.new, &transform_row/2)\n  end\n\n  defp transform_row({point, values}, dict) do\n    Enum.reduce(values, dict, &(Dict.put(&2, String.downcase(&1), point)))\n  end\nend	\N	f	2	1	2014-02-10 03:58:39	2014-02-10 03:58:39	42	\N
85	7	258ca161a2a8abb53497d83f	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case lower-case]]))\n\n(defn- shouting? [sentence]\n  (and\n    (= sentence (upper-case sentence))\n    (not (= sentence (lower-case sentence)))))\n\n(defn- question? [sentence]\n  (= \\? (last sentence)))\n\n(defn response-for [greeted-with]\n  (cond\n    (blank? greeted-with)    "Fine. Be that way!"\n    (shouting? greeted-with) "Woah, chill out!"\n    (question? greeted-with) "Sure."\n    :else                    "Whatever."))	\N	f	2	1	2014-01-29 18:05:11	2014-01-29 18:05:11	43	\N
86	7	08c2a07cc236af15879f44fd	done	clojure	bob	(ns bob\n  (:require [clojure.string :refer [blank? upper-case lower-case]]))\n\n(defn- shouting?\n  "Returns true if a sentence is 'shouting' (ALL CAPS)"\n  [sentence]\n  (and\n    (= sentence (upper-case sentence))\n    (not= sentence (lower-case sentence))))\n\n(defn- question?\n  "Returns true if a sentence is a question (ends with '?')"\n  [sentence]\n  (= \\? (last sentence)))\n\n(defn response-for [greeted-with]\n  "Returns the response of a 'lackadaisical teenager' greeted with a sentence"\n  (cond\n    (blank? greeted-with)    "Fine. Be that way!"\n    (shouting? greeted-with) "Woah, chill out!"\n    (question? greeted-with) "Sure."\n    :else                    "Whatever."))	\N	f	5	2	2014-02-24 02:37:49	2014-02-24 02:37:49	43	\N
928	27	b19484b9372ec985254561d7	superseded	ruby	word-count	class Phrase < String\n  def word_count\n    words  = self.split(/\\W+/).map(&:downcase)\n    counts = Hash.new(0)\n\n    words.each { |word| counts[word] += 1 }\n\n    counts\n  end\nend	\N	f	2	1	2014-01-24 16:01:52	2014-01-24 16:01:52	414	\N
1368	48	07edb87c3c3e735ad440eb48	pending	ruby	triangle	class Triangle\n\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError if @sides.any? { |side| side <= 0}\n    raise TriangleError if @sides[0] + @sides[1] <= @sides[2]\n  end\n\n  def kind\n    case @sides.uniq.count\n    when 3 then :scalene\n    when 2 then :isosceles\n    when 1 then :equilateral\n    end\n  end\nend\n\nclass TriangleError < ArgumentError\n\nend	\N	f	4	2	2014-02-05 23:31:35	2014-02-05 23:31:35	604	triangle.rb
1369	48	281c1b735b51305848e80adc	superseded	ruby	triangle	class Triangle\n\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError if @sides.any? { |side| side <= 0}\n    raise TriangleError if @sides[0] + @sides[1] <= @sides[2]\n    @a, @b, @c = a, b, c\n  end\n\n  def kind\n    return :equilateral if @a == @b && @b == @c\n    return :isosceles   if @a == @b || @a == @c || @b == @c\n    return :scalene\n  end\nend\n\nclass TriangleError < ArgumentError\n\nend	\N	f	0	1	2014-02-17 17:41:48	2014-02-17 17:41:48	604	triangle.rb
1370	48	55219a6d8fc156e6afee38df	done	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      blank?(input)    -> "Fine. Be that way!"\n      question?(input) -> "Sure."\n      shouting?(input) -> "Woah, chill out!"\n      true             -> "Whatever."\n    end\n  end\n\n  defp shouting?(input) do\n    String.upcase(input) == input && Regex.match?(%r/\\pL/, input)\n  end\n\n  defp question?(input) do\n    String.last(input) == "?"\n  end\n\n  defp blank?(input) do\n    String.strip(input) == ""\n  end\nend	\N	f	1	1	2014-01-29 23:40:31	2014-01-29 23:40:31	605	bob.exs
1371	48	e941de545804580fac54c667	superseded	haskell	robot-name	module Robot\n( robotName\n, mkRobot\n, resetName\n) where\n\nimport           Data.IORef\nimport           System.Random (newStdGen, randomR)\nimport           Text.Printf   (printf)\n\ndata Robot = Robot { nameRef :: IORef String }\n\nrobotName :: Robot -> IO String\nrobotName robot = readIORef (nameRef robot)\n\nmkRobot :: IO Robot\nmkRobot = do\n            n <- newName\n            nr <- newIORef n\n            return (Robot nr)\n\nresetName :: Robot -> IO ()\nresetName (Robot nr) = do\n                        n <- newName\n                        writeIORef nr n\n\nnewName :: IO String\nnewName = do\n   gen <- newStdGen\n   let (n,_) = randomR ((0,999) :: (Int,Int)) gen\n       (a,_) = randomR ('A','Z') gen\n   return $ printf "%s%03d" [a,a] n	\N	f	0	1	2014-01-29 20:05:07	2014-01-29 20:05:07	606	\N
1372	48	59c984388d5fbd3ea2bfcafd	done	haskell	robot-name	module Robot\n( robotName\n, mkRobot\n, resetName\n) where\n\nimport           Control.Applicative ((<$>))\nimport           Data.IORef          (IORef, newIORef, readIORef, writeIORef)\nimport           System.Random       (randomRIO)\n\ndata Robot = Robot { nameRef :: IORef String }\n\nrobotName :: Robot -> IO String\nrobotName = readIORef . nameRef\n\nmkRobot :: IO Robot\nmkRobot = Robot <$> (newName >>= newIORef)\n\nresetName :: Robot -> IO ()\nresetName (Robot nr) = newName >>= writeIORef nr\n\nnewName :: IO String\nnewName = mapM randomRIO [('A','Z'),('A','Z'),('0','9'),('0','9'),('0','9')]	\N	f	2	2	2014-02-08 10:44:43	2014-02-08 10:44:43	606	\N
88	7	13dd0da357f79f3c00df303d	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\nimport Data.Map.Strict (Map, fromListWith)\n\ndna :: String\ndna = "GCTA"\n\nnucleotides :: String\nnucleotides = "GCTAU"\n\ncount :: Char -> String -> Int\ncount n s\n  | validNucleotide n = count' n s\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\ncount' :: Char -> String -> Int\ncount' n = length . filter (== n)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = fromListWith (+) [ (n, count n s) | n <- dna ]\n\nvalidNucleotide :: Char -> Bool\nvalidNucleotide n = n `elem` nucleotides	\N	f	2	2	2014-01-14 05:31:11	2014-01-14 05:31:11	44	\N
90	7	95be616ab927c0ed4464a382	done	ruby	crypto-square	class Crypto\n  def initialize(plaintext)\n    @plaintext = plaintext\n  end\n\n  def ciphertext\n    pivot(plaintext_segments)\n  end\n\n  def normalize_plaintext\n    @plaintext.downcase.gsub(/\\W+/, '')\n  end\n\n  def normalize_ciphertext\n    segment(ciphertext, 5).join(' ')\n  end\n\n  def plaintext_segments\n    segment(normalize_plaintext, size)\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  private\n\n    def pivot(stringArray)\n      stringArray.each_with_object([]) { |s, charArray|\n        charArray << s.ljust(size, ' ').split('')\n      }.transpose.each_with_object('') { |chars, result|\n        result << chars.join('').strip\n      }\n    end\n\n    def segment(s, segment_size)\n      s.scan(Regexp.new(".{1," + segment_size.to_s + "}"))\n    end\nend	\N	f	2	1	2013-12-28 03:28:31	2013-12-28 03:28:31	45	\N
91	7	56f10d746223b96c29f5d382	done	javascript	pascals-triangle	function Triangle(size) {\n  this.rows = computeRows(size);\n  this.lastRow = this.rows[this.rows.length - 1];\n}\n\nfunction computeRows(size) {\n  var rows = [];\n  for (var i = 0; i < size; i++) {\n    rows[i] = Array\n      .apply(null, {length: i + 1})\n      .map(Number.call, one.bind(rows));\n  }\n  return rows;\n};\n\nfunction one(i) {\n  var lastRow = this[this.length - 1];\n  return (i != 0 && i != this.length)\n    ? lastRow[i] + lastRow[i - 1]\n    : 1;\n}\n\nmodule.exports = Triangle;	\N	f	2	1	2014-01-16 09:16:33	2014-01-16 09:16:33	46	pascals-triangle.js
92	7	4845abb8f9652c3ed7cad75d	done	elixir	leap	defmodule Year do\n  def leap_year?(year) do\n    divisible_by = fn n -> rem(year, n) == 0 end\n    divisible_by.(400) || (divisible_by.(4) && !divisible_by.(100))\n  end\nend	\N	f	0	1	2013-12-29 03:34:02	2013-12-29 03:34:02	47	\N
93	7	2eb86fad297513b33f0b2c68	superseded	javascript	etl	module.exports = {\n  transform: function(data) {\n    var transformed = {};\n    var values = Object.keys(data);\n\n    for (var i=0; i < values.length; i++) {\n      var value = values[i];\n      var keys = data[value];\n\n      for (var j=0; j < keys.length; j++) {\n        var key = keys[j].toLowerCase();\n        transformed[key] = value;\n      }\n    }\n\n    return transformed;\n  }\n};	\N	f	2	1	2014-02-06 03:17:12	2014-02-06 03:17:12	48	\N
94	7	e2c5558efe18cdb04d035335	done	javascript	etl	module.exports = {\n  transform: function(data) {\n    var transformed = {};\n    var values = Object.keys(data);\n\n    values.forEach(function(value) {\n      var keys = data[value];\n\n      data[value].forEach(function(key) {\n        transformed[key.toLowerCase()] = value;\n      });\n    });\n\n    return transformed;\n  }\n};	\N	f	2	2	2014-02-08 09:39:42	2014-02-08 09:39:42	48	\N
96	7	1e1465c37f9dc0e7d2661eab	superseded	haskell	simple-linked-list	module LinkedList where\n\ndata List a = Nil | Cons a (List a)\n\nnil :: List a\nnil = Nil\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnew :: a -> List a -> List a\nnew = Cons\n\nnext :: List a -> List a\nnext Nil = error "empty list"\nnext (Cons _ n) = n\n\ndatum :: List a -> a\ndatum Nil = error "empty list"\ndatum (Cons x _) = x\n\nfromList :: [a] -> List a\nfromList [] = Nil\nfromList (x:xs) = Cons x $ fromList xs\n\ntoList :: List a -> [a] \ntoList Nil = []\ntoList (Cons x xs) = x : toList xs\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev acc Nil = acc\n    rev acc (Cons x xs) = acc `seq` rev (Cons x acc) xs	\N	f	2	1	2014-01-04 11:55:23	2014-01-04 11:55:23	50	\N
104	3	999160aaadaa6a7cca6fb6b4	superseded	javascript	bob	var Bob;\n\nfunction Bob() {}\n\nBob.prototype.hey = function(message) {\n  if(message.trim() == "") { // Message is empty.\n    return "Fine. Be that way!";\n  } else if (message == message.toUpperCase()) { // Message is shouting.\n    return "Woah, chill out!";\n  } else if (message.slice(-1) == "?") { // Message is asking something.\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n};\n\nmodule.exports = Bob;	\N	f	1	3	2014-03-08 04:29:00	2014-03-08 04:29:00	54	\N
1373	48	1dcfa8c64d2f8f300af44db5	superseded	ruby	phone-number	class Phone   \n\n  NUMBER_PATTERN = /\\A(?<#{:country_code}>          1?)\n                      (?<#{:area_code}>          \\d{3}) \n                      (?<#{:exchange_code}>      \\d{3}) \n                      (?<#{:subscriber_number}>  \\d{4}) \\z/x\n  \n  def initialize raw_number    \n    set_defaults\n    parse clean raw_number\n  end\n\n  def number\n     area_code + exchange_code + subscriber_number\n  end\n\n  def area_code\n    number_info[:area_code]\n  end\n\n  def exchange_code\n    number_info[:exchange_code]\n  end\n\n  def subscriber_number\n    number_info[:subscriber_number]\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange_code}-#{subscriber_number}"\n  end\n  \n  private\n  \n    def clean number\n      number.scan(/\\d+/).join\n    end\n\n    def parse number\n      return unless number =~ NUMBER_PATTERN\n\n      number_info.keys.each {|key| number_info[key] = $~[key]}\n    end\n\n    def set_defaults\n      self.number_info = {:country_code => "", :area_code => "000", :exchange_code => "000", :subscriber_number => "0000"}    \n    end\n\n    attr_accessor :number_info      \n\nend	\N	f	3	2	2013-12-26 14:32:51	2013-12-26 14:32:51	607	\N
1374	48	87d8b672ba66d91819c9733e	done	ruby	phone-number	class Phone    \n  \n  def initialize raw_number    \n    set_defaults\n    parse clean raw_number\n  end\n\n  def number\n     area_code + exchange_code + subscriber_number\n  end\n\n  def area_code\n    number_info[:area_code]\n  end\n\n  def exchange_code\n    number_info[:exchange_code]\n  end\n\n  def subscriber_number\n    number_info[:subscriber_number]\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange_code}-#{subscriber_number}"\n  end\n  \n  private\n\n    def clean number\n      number.scan(/\\d+/).join\n    end\n\n    def parse number\n      return unless number =~  /\\A(?<#{:country_code}>          1?)\n                                  (?<#{:area_code}>          \\d{3}) \n                                  (?<#{:exchange_code}>      \\d{3}) \n                                  (?<#{:subscriber_number}>  \\d{4}) \\z/x\n\n      number_info.merge!(number_info) {|part| $~[part]}\n    end\n\n    def set_defaults\n      self.number_info = {:country_code => "", :area_code => "000", :exchange_code => "000", :subscriber_number => "0000"}    \n    end\n\n    attr_accessor :number_info      \n\nend	\N	f	2	3	2014-01-10 08:34:07	2014-01-10 08:34:07	607	\N
1375	48	0af4750a6754af4ff7e1b83f	superseded	ruby	phone-number	class Phone   \n\n  def initialize raw_number    \n    set_defaults\n    store clean raw_number\n  end\n\n  def number\n     area_code + exchange_code + subscriber_number\n  end\n\n  def area_code\n    @number_info[:Area_Code]\n  end\n\n  def exchange_code\n    @number_info[:Exchange_Code]\n  end\n\n  def subscriber_number\n    @number_info[:Subscriber_Number]\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange_code}-#{subscriber_number}"\n  end\n  \n  private\n  def clean number\n    number.scan(/\\d+/).join\n  end\n\n  def store number\n    return unless number =~ /\\A (1?) (\\d{3}) (\\d{3}) (\\d{4}) \\z/x\n\n    @number_info[:Country_Code] = $1\n    @number_info[:Area_Code] = $2\n    @number_info[:Exchange_Code] = $3\n    @number_info[:Subscriber_Number] = $4\n  end\n\n  def set_defaults\n    @number_info = {:Country_Code => "", :Area_Code => "000", :Exchange_Code => "000", :Subscriber_Number => "0000"}    \n  end\n  \nend	\N	f	4	1	2014-01-11 10:12:40	2014-01-11 10:12:40	607	\N
98	7	f895f305570d2d55ebd99aaa	done	ruby	phone-number	class PhoneNumber\n  def initialize(num)\n    @num = num\n  end\n\n  def number\n    @num.gsub!(/[^0-9]/, '')\n    if @num.length == 11 && @num[0] == "1"\n      @num[0] = ""\n    elsif @num.length >= 11 || @num.length < 10\n      @num = "0000000000"\n    end\n    return @num\n  end\n\n  def area_code\n    @num[0,3]\n  end\n\n  def to_s\n    number\n    "(#{@num[0,3]}) #{@num[3,3]}-#{@num[6,4]}"\n  end\nend	\N	f	5	1	2014-01-16 15:36:42	2014-01-16 15:36:42	51	\N
99	7	0fabbd09264833589f6afeab	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance xs = sum . map fromEnum . zipWith (/=) xs	\N	f	2	1	2014-01-23 00:08:13	2014-01-23 00:08:13	52	DNA.hs
101	7	58d7aab9c4d6cab7282cbbbc	done	javascript	beer-song	function Beer(){\n}\n\nBeer.verse = function(number) {\n    "use strict";\n\n    var currentBottle = new Bottle(number);\n    var nextBottle = new Bottle(number - 1);\n\n    var result = "";\n    result += currentBottle.bottlesOfBeer().capitalize();\n    result += " on the wall, ";\n    result += currentBottle.bottlesOfBeer();\n    result += ".\\n";\n\n    if (currentBottle.lastBottle()){\n        result += "Go to the store and buy some more, ";\n    } else {\n        result += "Take " +\n        currentBottle.takeItOrOne() +\n        " down and pass it around, ";\n    }\n\n    result += nextBottle.bottlesOfBeer();\n    result += " on the wall.\\n";\n\n    return result;\n};\n\nBeer.sing = function(start, end) {\n    "use strict";\n    end = end || 0;\n    var result = "";\n    for(var i=start; i >= end; i--){\n        result += this.verse(i);\n        if (i != end){\n            result += "\\n";\n        }\n    }\n    return result;\n\n};\n\nfunction Bottle(number) {\n    "use strict";\n    if (number < 0){\n        this.number = 99;\n    } else {\n        this.number = number;\n    }\n}\n\nBottle.prototype.lastBottle = function() {\n    "use strict";\n    return this.number === 0;\n};\n\nBottle.prototype.takeItOrOne = function() {\n    "use strict";\n    return this.number === 1 ? "it" : "one";\n};\n\nBottle.prototype.bottlesOfBeer = function() {\n    "use strict";\n    if (this.number == 1){\n       return "1 bottle of beer";\n    } else if (this.number === 0) {\n        return "no more bottles of beer";\n    } else {\n        return this.number + " bottles of beer";\n    }\n};\n\nif(!String.prototype.capitalize){\n    Object.defineProperty(String.prototype, 'capitalize',\n    {\n        value: function()\n        {\n            return this.charAt(0).toUpperCase() + this.slice(1);\n        },\n        enumerable: false\n    });\n}\n\nmodule.exports = Beer;	\N	f	3	3	2014-01-29 04:49:58	2014-01-29 04:49:58	53	\N
103	3	8e16877fd067d13fe9249a5e	superseded	javascript	bob	// Generated by CoffeeScript 1.6.3\n(function() {\n  var Bob;\n\n  Bob = (function() {\n    function Bob() {}\n\n    Bob.prototype.hey = function(message) {\n      switch (false) {\n        case message.trim() !== "":\n          return "Fine. Be that way!";\n        case message !== message.toUpperCase():\n          return "Woah, chill out!";\n        case message[message.length - 1] !== "?":\n          return "Sure.";\n        default:\n          return "Whatever.";\n      }\n    };\n\n    return Bob;\n\n  })();\n\n  module.exports = Bob;\n\n}).call(this);	\N	f	0	1	2014-03-04 09:20:20	2014-03-04 09:20:20	54	\N
126	3	debbeb5b8b69ac4f1d088cf8	done	javascript	binary	'use strict';\nfunction Binary(number) {\n  this.number = (+number || 0).toString().split('').reverse();\n};\n\nBinary.prototype.toDecimal = function() {\n  return this.number.map(function (place, order) {\n    return place * Math.pow(2, order);\n  }).reduce(function (a, b) {return a + b});\n};\n\nmodule.exports = Binary;	\N	f	0	1	2014-03-17 23:14:06	2014-03-17 23:14:06	60	\N
1376	31	93acc0bbedd598f9eaf12fcc	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 4 == 0 && (@year % 100 > 0 || @year % 400 == 0)\n  end\nend	\N	f	0	1	2013-11-27 03:23:02	2013-11-27 03:23:02	608	year.rb
1377	31	49447ba9e51b40472cd7bc45	done	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Spoken\n    def initialize(sentence)\n        @sentence = String(sentence)\n    end\n\n    def yelling?\n        !@sentence.empty? && @sentence == @sentence.upcase\n    end\n\n    def asking?\n        @sentence.end_with?("?")\n    end\n\n    def unspoken?\n        @sentence.empty?\n    end\nend\n\nclass Bob\n    def hey(sentence)\n        speak = Spoken.new(sentence)\n        case \n        when speak.yelling?\n            "Woah, chill out!"\n        when speak.asking?\n            "Sure."\n        when speak.unspoken?\n            "Fine. Be that way!"\n        else\n            "Whatever."\n        end\n    end\nend	\N	f	3	7	2013-11-04 20:03:20	2013-11-04 20:03:20	609	bob.rb
1378	31	812d01de5dd220d9b81401c4	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Bob\n\tdef hey(statement)\n\t\t#check first if we're being rude to Bob (shouting)\n\t\tif statement == statement.upcase and not statement.empty?\n\t\t\treturn "Woah, chill out!"\n\t\t#next see if we're asking a question\n\t\telsif statement.end_with?("?")\n\t\t\treturn "Sure."\n\t\t#if we're not being rude or asking a question, check if we're saying anything\n\t\telsif statement.empty?\n\t\t\treturn "Fine. Be that way!"\n\t\t#if we are saying something that's not rude, a question or 'nothing', default to apathethic Bob\n\t\telse\n\t\t\treturn "Whatever."\n\t\tend\n\tend\nend	\N	f	3	1	2013-12-03 15:37:17	2013-12-03 15:37:17	609	\N
107	3	0b5f8e352060b623c9c6b578	superseded	javascript	bob	function Bob() {}\n\nString.prototype.isEmpty = function () {\n  return this.trim() === "";\n}\n\nString.prototype.isShouting = function () {\n  return this.toUpperCase() == this; // For some reason this breaks with ===. Wierd.\n}\n\nString.prototype.isAsking = function () {\n  return this.slice(-1) === "?";\n}\n\nBob.prototype.hey = function(message) {\n  if (message.isEmpty()) { // Message is empty.\n    return "Fine. Be that way!";\n  } else if (message.isShouting()) { // Message is shouting.\n    return "Woah, chill out!";\n  } else if (message.isAsking()) { // Message is asking something.\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n};\n\nmodule.exports = Bob;	\N	f	5	4	2014-03-17 01:16:10	2014-03-17 01:16:10	54	\N
108	3	01ff25d730b8eb7cbb2144fc	superseded	javascript	word-count	function words (input) {\n  var inputArray = initString(input);\n  var output = {};\n  function logArrayElements(element, index, array) {\n    if(!output[element]) {\n      output[element] = 1;\n    }\n    else {\n      output[element]++;\n    };\n  };\n  inputArray.forEach(logArrayElements);\n  return output;\n};\n\nfunction initString(string) {\n  var normalized = downcase (string);\n  var stripped = stripString(normalized);\n  var stringArray = splitString(stripped);\n  return stringArray\n};\n\nfunction downcase (string) {\n  var normalizedString = string.toLowerCase();\n  return normalizedString;\n};\n\nfunction stripString(string) {\n  var stripped = string.replace(/\\W/g, " ").trim();\n  return stripped;\n};\n\nfunction splitString (string) {\n  var stringArray = string.split(/\\s+/g);\n  return stringArray;\n};\n\nmodule.exports = words;	\N	f	0	3	2014-03-03 06:37:15	2014-03-03 06:37:15	55	\N
109	3	ab185bfb78dfdce9033047f1	superseded	javascript	word-count	function words (input) {\n  var inputArray = initString(input),\n  output = {};\n  function logArrayElements (element, index, array) {\n    if(!output[element]) {\n      output[element] = 1;\n    }\n    else {\n      output[element]++;\n    };\n  };\n  inputArray.forEach(logArrayElements);\n  return output;\n};\n\nfunction initString(string) {\n  var normalized = string.toLowerCase(),\n  stripped = stripString(normalized),\n  stringArray = splitString(stripped);\n  return stringArray\n};\n\nfunction stripString (string) {\n  var stripped = string.replace(/\\W/g, " ").trim();\n  return stripped;\n};\n\nfunction splitString (string) {\n  var stringArray = string.split(/\\s+/g);\n  return stringArray;\n};\n\nmodule.exports = words;	\N	f	0	4	2014-03-05 03:17:23	2014-03-05 03:17:23	55	word-count.js
110	3	1825f4cd64e4187da53de0c1	superseded	javascript	word-count	function words(string) {\n  var output = {};\n  arrayifyWordsOfString(string).forEach(assembleWordCountHash, output);\n  return output;\n};\n\nfunction assembleWordCountHash(word) {\n  parseInt(this[word]) > 0 ? this[word]++ : this[word] = 1;\n};\n\nfunction arrayifyWordsOfString(string) {\n  return string.toLowerCase().match(/[0-9a-z]+/gi);\n};\n\nmodule.exports = words;	\N	f	0	6	2014-03-06 23:37:27	2014-03-06 23:37:27	55	word-count.js
111	3	5ef5bdf14184ad384d186999	superseded	javascript	word-count	function words(sentence) {\n  var arrayifiedSentence = arrayifyString(sentence),\n  output = {};\n\n  function assembleWordCountHash(element, index, array) {\n    if(!output[element]) {\n      output[element] = 1;\n    } else {\n      output[element]++;\n    };\n  };\n\n  arrayifiedSentence.forEach(assembleWordCountHash);\n  return output;\n};\n\nfunction arrayifyString(string) {\n  return string.match(/[0-9A-Z]+/gi);\n};\n\nmodule.exports = words;	\N	f	0	5	2014-03-09 00:57:14	2014-03-09 00:57:14	55	word-count.js
112	3	57a337c5c8da298953260b5a	superseded	javascript	word-count	function words(string) {\n  return wordCollection(string).reduce(incrementWordCount, {});\n};\n\nfunction incrementWordCount(wordCount, word) {\n  parseInt(wordCount[word]) > 0 ? wordCount[word]++ : wordCount[word] = 1;\n  return wordCount\n};\n\nfunction wordCollection(string) {\n  return string.toLowerCase().match(/\\w+/g);\n};\n\nmodule.exports = words;	\N	f	0	8	2014-03-09 14:01:14	2014-03-09 14:01:14	55	word-count.js
113	3	129bb93c82d4b7b015f4d942	superseded	javascript	word-count	function words(string) {\n  var output = {};\n  wordCollection(string).forEach(incrementWordCount, output);\n  return output;\n};\n\nfunction incrementWordCount(word) {\n  parseInt(this[word]) > 0 ? this[word]++ : this[word] = 1;\n};\n\nfunction wordCollection(string) {\n  return string.toLowerCase().match(/\\w+/g);\n};\n\nmodule.exports = words;	\N	f	8	7	2014-03-11 22:04:07	2014-03-11 22:04:07	55	word-count.js
114	3	35fd097d291ae4e8ed045a03	superseded	javascript	word-count	function words(string) {\n  return wordCollection(string).reduce(incrementWordCount, {});\n};\n\nfunction incrementWordCount(wordCount, word) {\n  wordCount.hasOwnProperty(word) > 0 ? wordCount[word]++ : wordCount[word] = 1;\n  return wordCount\n};\n\nfunction wordCollection(string) {\n  return string.toLowerCase().match(/\\w+/g);\n};\n\nmodule.exports = words;	\N	f	9	9	2014-03-14 16:02:06	2014-03-14 16:02:06	55	word-count.js
115	3	f5a403cf97f2ba7cb7825a4f	done	javascript	word-count	function words(string) {\n  return wordCollection(string).reduce(incrementWordCount, {});\n};\n\nfunction incrementWordCount(wordCounts, word) {\n  wordCount.hasOwnProperty(word) ? wordCounts[word]++ : wordCounts[word] = 1;\n  return wordCounts;\n};\n\nfunction wordCollection(string) {\n  return string.toLowerCase().match(/\\w+/g);\n};\n\nmodule.exports = words;	\N	f	9	10	2014-03-15 05:48:43	2014-03-15 05:48:43	55	word-count.js
116	3	4aa470fcae0cf5534e1a3dc6	superseded	javascript	word-count	var words = function (input) {\n\treturn({ input : 1 })\n}	\N	f	7	1	2014-03-15 15:33:39	2014-03-15 15:33:39	55	\N
117	3	e28cb8fb34122e2813db6809	superseded	javascript	word-count	var Words = function (input) {\n\treturn({ input : 1 })\n}	\N	f	4	2	2014-03-16 05:33:32	2014-03-16 05:33:32	55	\N
163	21	b17e1b0108006f98462ad244	done	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport qualified Data.Map as M\n\nwordCount :: String -> M.Map String Int\nwordCount s = M.fromListWith (+) [(x,1) | x <- words $ cleanWords s]\n\ncleanWords :: String -> String\ncleanWords = map toLower . filter (\\x -> isAlphaNum x || isSpace x)	\N	f	2	2	2014-02-05 00:32:52	2014-02-05 00:32:52	79	\N
1379	31	7415dd8b2573d96855a3a308	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Sentence\n\tattr_accessor :sentence\n\tdef initialize(sentence)\n\t\t@sentence = sentence\n\tend\n\tdef yelling?\n\t\tif sentence == sentence.upcase and not unspoken?(sentence)\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef asking?\n\t\tif sentence.end_with?("?")\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef unspoken?\n\t\tif sentence.empty?\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\n\nclass Bob\n\tdef hey(sentence)\n\t\tspeak = Sentence.new(sentence)\n\t\tcase speak\n\t\twhen speak.yelling?\n\t\t\treturn "Woah, chill out!"\n\t\twhen speak.asking?\n\t\t\treturn "Sure."\n\t\twhen speak.unspoken?\n\t\t\treturn "Fine. Be that way!"\n\t\telse\n\t\t\treturn "Whatever."\n\t\tend\n\tend\nend	\N	f	0	4	2013-12-26 02:32:45	2013-12-26 02:32:45	609	\N
1380	31	1c4855670ec1c976625dd1bd	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Bob\n\tdef yelling?(sentence)\n\t\tif sentence == sentence.upcase and not unspoken?(sentence)\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef asking?(sentence)\n\t\tif sentence.end_with?("?")\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef unspoken?(sentence)\n\t\tif sentence.empty?\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef hey(sentence)\n\t\tif yelling?(sentence)\n\t\t\treturn "Woah, chill out!"\n\t\telsif asking?(sentence)\n\t\t\treturn "Sure."\n\t\telsif unspoken?(sentence)\n\t\t\treturn "Fine. Be that way!"\n\t\telse\n\t\t\treturn "Whatever."\n\t\tend\n\tend\nend	\N	f	0	3	2014-01-02 09:35:35	2014-01-02 09:35:35	609	\N
119	3	ce7cb0822d88bef3f2b74543	done	javascript	anagram	"use strict";\n\nfunction Anagram (word) {\n\n  var anagram_word = word;\n\n  // private methods\n\n  var alphabetize = function (word) {\n    return word.toLowerCase().split('').sort().join('');\n  };\n\n  var compare_words = function(word1, word2) {\n    if(alphabetize(word1) === alphabetize(word2)) return true;\n  };\n\n  var anagramFinder = function (word_array) {\n    var winners = [];\n    word_array.forEach( function (word) {\n      if( compare_words(word, anagram_word) ) {\n        winners.push(word);\n      }\n    });\n    return winners;\n  };\n\n  // public methods\n  this.match = function (word_array) {\n\n    return anagramFinder(word_array);\n  };\n}\n\nmodule.exports = Anagram;	\N	f	2	2	2014-03-08 18:22:33	2014-03-08 18:22:33	56	\N
121	3	2ce02fb80ba38f64ce698cb6	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nDNA.prototype = {\n  get nucleotideCounts() {\n    return Counting.countChars(Nucleotides.dna_bases, this.strand);\n  }\n};\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return Counting.countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nvar Counting = {\n  countChars: function(chars, string) {\n    var that = this;\n\n    return chars.reduce(function(tally, char) {\n      tally[char] = that.countChar(char, string);\n      return tally;\n    }, {});\n  },\n\n  countChar: function(char, string) {\n    // If we need to optimize, regexp match is likely faster.\n    return string.split(char).length - 1;\n  }\n};	\N	f	3	1	2014-03-04 03:23:44	2014-03-04 03:23:44	58	\N
122	3	e6e892fa81a1622bcf395f69	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var that = this;\n      return Nucleotides.dna_bases.reduce(function(tally, nucleotide) {\n        tally[nucleotide] = that.count(nucleotide);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	3	3	2014-03-04 20:30:55	2014-03-04 20:30:55	58	\N
123	3	e6c39b206d83fa8d4090dfb6	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var that = this;\n\n      return Nucleotides.dna_bases.reduce(function(tally, char) {\n        tally[char] = that.count(char);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	3	2	2014-03-08 19:41:48	2014-03-08 19:41:48	58	\N
124	3	b84d8d9eb7c93c6d19662f24	done	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var dna = this;\n      return Nucleotides.dna_bases.reduce(function(tally, nucleotide) {\n        tally[nucleotide] = dna.count(nucleotide);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	3	4	2014-03-15 13:31:48	2014-03-15 13:31:48	58	\N
125	3	ce798e126f070c8777191290	pending	javascript	space-age	var SpaceAge = function(input) {\n\n  var earthYearInSeconds = 31557600;\n\n  this.seconds = input;\n\n  var calculateAgeOnPlanet = function(earthYear) {\n    return (input/earthYearInSeconds) / earthYear;\n    };\n\n    var roundNumber= function(number) {\n      return Math.round(number * 100) / 100;\n    };\n\n    this.onEarth = function(){\n      return roundNumber(calculateAgeOnPlanet(1));\n    };\n\n    this.onMercury = function(){\n      return roundNumber(calculateAgeOnPlanet(0.2408467));\n    };\n\n    this.onVenus = function(){\n      return roundNumber(calculateAgeOnPlanet(0.61519726));\n    }\n\n    this.onMars = function(){\n      return roundNumber(calculateAgeOnPlanet(1.8808158));\n    };\n\n    this.onJupiter = function(){\n      return roundNumber(calculateAgeOnPlanet(11.862615));\n    };\n\n    this.onSaturn = function(){\n      return roundNumber(calculateAgeOnPlanet(29.447498));\n    };\n\n    this.onUranus = function() {\n      return roundNumber(calculateAgeOnPlanet(84.016846));\n    };\n\n    this.onNeptune = function() {\n      return roundNumber(calculateAgeOnPlanet(164.79132));\n    };\n  };\n\n  module.exports = SpaceAge;	\N	f	1	1	2014-02-28 15:31:11	2014-02-28 15:31:11	59	space-age.js
1381	31	a02524af53a07eb6c494d96b	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass String\n\tdef yelling?\n\t\tif self == self.upcase and not self.unspoken?\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef asking?\n\t\tif self.end_with?("?")\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\n\tdef unspoken?\n\t\tif self.empty?\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\n\nclass Bob\n\tdef hey(sentence)\n\t\tif sentence.yelling?\n\t\t\treturn "Woah, chill out!"\n\t\telsif sentence.asking?\n\t\t\treturn "Sure."\n\t\telsif sentence.unspoken?\n\t\t\treturn "Fine. Be that way!"\n\t\telse\n\t\t\treturn "Whatever."\n\t\tend\n\tend\nend	\N	f	4	2	2014-01-06 00:56:58	2014-01-06 00:56:58	609	\N
128	4	65d8349b2ea387324ca49f7d	done	haskell	bob	module Bob where\nimport Data.Char (isAlpha, isSpace, isUpper)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isSilence input = "Fine. Be that way!"\n  | isYelling input = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | otherwise = "Whatever."\n\nisQuestion :: [Char] -> Bool\nisQuestion input = \n  (last input) == '?'\n\nisYelling :: [Char] -> Bool\nisYelling input = \n  do\n    let filtered = filter isAlpha input\n    (not (null filtered)) && (all isUpper filtered)\n\nisSilence :: [Char] -> Bool\nisSilence = all isSpace	\N	f	0	1	2014-03-10 23:57:04	2014-03-10 23:57:04	62	\N
129	4	e23b9e62f2db4e72052a47d3	done	haskell	difference-of-squares	module Squares (\n    sumOfSquares,\n    squareOfSums,\n    difference\n) where\n\n-- 1*1 + 2*2 + .. + n*n = n(n+1)(2n+1) / 6\nsumOfSquares :: (Integral a) => a -> a\nsumOfSquares n = (n * (n+1) * (2*n+1)) `div` 6\n\n-- (1 + 2 + .. + n)^2 = (n(n+1) / 2) ^ 2\nsquareOfSums :: (Integral a) => a -> a\nsquareOfSums n = (n * n * (n+1) * (n+1)) `div` 4\n\ndifference :: (Integral a) => a -> a\ndifference n = squareOfSums n - sumOfSquares n	\N	f	0	1	2014-03-10 19:20:02	2014-03-10 19:20:02	63	\N
130	4	c3dcbe36fb46ec9b2e1f5a18	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe\n\ntranscribe :: Char -> Char\ntranscribe 'T' = 'U'\ntranscribe x   = x	\N	f	2	1	2014-03-12 21:48:21	2014-03-12 21:48:21	64	\N
131	4	b53c807fa170f06d3ede07f7	done	haskell	grade-school	module School (School, sorted, grade, M.empty, add) where\n\nimport Data.List (insert, sort)\nimport qualified Data.Map.Strict\n       as M (Map, toAscList, findWithDefault, insertWith, empty)\n\ntype School = M.Map Int [String]\n\nsorted :: School -> [(Int, [String])]\nsorted = M.toAscList\n\ngrade :: Int -> School -> [String]\ngrade = M.findWithDefault []\n\nadd :: Int -> String -> School -> School\nadd g n = M.insertWith insertSorted g [n]\n        where insertSorted [x] = insert x	\N	f	1	2	2014-03-07 10:55:23	2014-03-07 10:55:23	65	\N
132	4	030b324b08fc72d020840595	superseded	haskell	grade-school	module School (School, sorted, grade, M.empty, add) where\n\nimport Data.List (insert, sort)\nimport Data.Maybe (fromMaybe)\nimport qualified Data.Map.Strict as M\n\ntype School = M.Map Int [String]\n\nsorted :: School -> [(Int, [String])]\nsorted = M.toAscList\n\ngrade :: Int -> School -> [String]\ngrade = (fromMaybe [] .) . M.lookup\n\nadd :: Int -> String -> School -> School\nadd g n = M.insertWith insertSorted g [n]\n        where insertSorted [x] = insert x	\N	f	1	1	2014-03-12 22:33:28	2014-03-12 22:33:28	65	\N
133	4	5b319d4060e7986d00d44129	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Text (words)\n\n  baseList :: [Char] -> [([Char], Integer)]\n  baseList [text] = [ (word, 1) | word <- (words text)]\n\n  wordCount :: [Char] -> Map.Map [Char] Integer\n  wordCount [text] = Map.fromlistWith (+) (baseList text)	\N	f	8	2	2014-03-08 05:20:49	2014-03-08 05:20:49	66	\N
134	4	e64df3e23118b6a8aaf3ef35	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isAlphaNum, toLower)\n\n  normalize :: String -> String\n  normalize word = [ toLower char | char <- word,\n                   isAlphaNum char ]\n\n  baseList :: String -> [(String, Integer)]\n  baseList text = [ (word, 1) |\n                  word <- (map normalize (words text)),\n                  word /= "" ]\n\n  wordCount :: String -> Map.Map String Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	5	6	2014-03-08 17:11:48	2014-03-08 17:11:48	66	\N
135	4	3762388fe62205f1e62fd079	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isPunctuation, toLower)\n\n  normalize :: String -> String\n  normalize word = [ toLower char | char <- word,\n                   not (isPunctuation char),\n                   char /= '$', char /= '^' ]\n\n  baseList :: String -> [(String, Integer)]\n  baseList text = [ (word, 1) |\n                word <- (map normalize (words text)),\n                word /= ""\n                ]\n\n  wordCount :: String -> Map.Map String Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	0	4	2014-03-10 04:04:15	2014-03-10 04:04:15	66	\N
136	4	45d34b5ebb6bd1e0dd637707	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Text (words)\n\n  wordCount :: [Char] -> Map.Map [Char] Integer\n  wordCount [text] = Map.fromlist [] # I don't know how to go about this. Could I get some pointers?	\N	f	2	1	2014-03-12 15:33:05	2014-03-12 15:33:05	66	\N
137	4	8297c873e8040605b7a5b194	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isPunctuation, toLower)\n\n  normalize :: [Char] -> [Char]\n  normalize word = [ toLower char | char <- word, not (isPunctuation char),\n                   char /= '$', char /= '^'\n                   ]\n\n  baseList :: String -> [([Char], Integer)]\n  baseList text = [ (word, 1) |\n                word <- (map normalize (words text)),\n                word /= ""\n                ]\n\n  wordCount :: [Char] -> Map.Map [Char] Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	9	3	2014-03-12 19:26:01	2014-03-12 19:26:01	66	\N
138	4	59f11ad3b1ba8ac19c3a6904	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isNumber, isLetter, toLower)\n\n  normalize :: String -> String\n  normalize word = [ toLower char | char <- word,\n                   isNumber char || isLetter char,\n                   char /= '$', char /= '^' ]\n\n  baseList :: String -> [(String, Integer)]\n  baseList text = [ (word, 1) |\n                  word <- (map normalize (words text)),\n                  word /= "" ]\n\n  wordCount :: String -> Map.Map String Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	5	5	2014-03-15 11:47:40	2014-03-15 11:47:40	66	\N
139	4	c6de73cf140ee2611e5f68a4	superseded	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isAlphaNum, toLower)\n\n  normalize :: String -> String\n  normalize word = [ toLower char | char <- word,\n                   isAlphaNum char ]\n\n  baseList :: String -> [(String, Integer)]\n  baseList text = [ (word, 1) |\n                  word <- words text . map normalize,\n                  word /= "" ]\n\n  wordCount :: String -> Map.Map String Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	2	7	2014-03-17 10:05:01	2014-03-17 10:05:01	66	\N
199	26	8730d5c5bfb53e5e57de3eef	done	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    return true  if divisable_by(400)\n    return false if divisable_by(100)\n    divisable_by(4)\n  end\n\n  private\n\n  def divisable_by(value)\n    @year % value == 0\n  end\n\nend	\N	f	0	1	2013-11-30 06:58:22	2013-11-30 06:58:22	93	\N
1382	31	fabc7ad178425d03c1bb660f	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Sentence\n\tattr_accessor :sentence\n\tdef initialize(sentence)\n\t\t@sentence = sentence\n\tend\n\n\tdef yelling?\n\t\treturn sentence == (sentence.upcase and not sentence.empty?)\n\tend\n\n\tdef asking?\n\t\treturn sentence.end_with?("?")\n\tend\n\n\tdef unspoken?\n\t\treturn sentence.empty?\n\tend\nend\n\nclass Bob\n\tdef hey(sentence)\n\t\tspeak = Sentence.new(sentence)\n\t\tcase \n\t\twhen speak.yelling?\n\t\t\t"Woah, chill out!"\n\t\twhen speak.asking?\n\t\t\t"Sure."\n\t\twhen speak.unspoken?\n\t\t\t"Fine. Be that way!"\n\t\telse\n\t\t\t"Whatever."\n\t\tend\n\tend\nend	\N	f	3	5	2014-01-26 05:19:04	2014-01-26 05:19:04	609	\N
1383	31	53c96c04400a627d4d4ebce3	superseded	ruby	bob	#!/usr/bin/env ruby\n#Bob exercism assignment\n\nclass Sentence\n\tattr_accessor :sentence\n\tdef initialize(sentence)\n\t\t@sentence = sentence\n\tend\n\n\tdef yelling?\n\t\t!sentence.empty? && sentence == sentence.upcase\n\tend\n\n\tdef asking?\n\t\tsentence.end_with?("?")\n\tend\n\n\tdef unspoken?\n\t\tsentence.empty?\n\tend\nend\n\nclass Bob\n\tdef hey(sentence)\n\t\tspeak = Sentence.new(sentence)\n\t\tcase \n\t\twhen speak.yelling?\n\t\t\t"Woah, chill out!"\n\t\twhen speak.asking?\n\t\t\t"Sure."\n\t\twhen speak.unspoken?\n\t\t\t"Fine. Be that way!"\n\t\telse\n\t\t\t"Whatever."\n\t\tend\n\tend\nend	\N	f	4	6	2014-02-14 05:50:39	2014-02-14 05:50:39	609	\N
141	4	ee7b6833ec6a2f9d23155b32	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear x = x `divisible` 4 && (not (x `divisible` 100) || x `divisible` 400)\n\ndivisible :: Int -> Int -> Bool\ndivisible x y = x `rem` y == 0	\N	f	0	1	2014-03-07 19:04:32	2014-03-07 19:04:32	67	\N
142	4	6e8224210ef085b903f1ba48	done	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear x | x `divisible` 400 = True\n             | x `divisible` 100 = False\n             | x `divisible` 4 = True\n             | otherwise = False\n\ndivisible :: Int -> Int -> Bool\ndivisible x y = x `rem` y == 0	\N	f	0	2	2014-03-11 02:15:50	2014-03-11 02:15:50	67	\N
143	4	0e84c77f16ae73d107b47b6e	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isNumber)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber s = case filter isNumber s of\n             n       | length n == 10 -> n\n             ('1':n) | length n == 10 -> n\n             _                        -> invalidNumber\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint s = let n = number s\n                    in printf "(%s) %s-%s" (take 3 n) ((take 3 . drop 3) n) (drop 6 n)\n\ninvalidNumber :: String\ninvalidNumber = "0000000000"	\N	f	1	1	2014-03-07 03:36:34	2014-03-07 03:36:34	68	\N
145	4	f5ee009b7af84e9a9f7ca0d5	hibernating	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber = validate . filter isDigit\n  where validate n | length n == 10 = n\n        validate ('1':n)            = validate n\n        validate _                  = invalidNumber\n\nareaCode :: String -> String\nareaCode s = let (area,_ , _) = split s in area\n\nprettyPrint :: String -> String\nprettyPrint = format . split\n\nsplit :: String -> (String, String, String)\nsplit s = let phone         = number s\n              (area , rest) = splitAt 3 phone\n              (three, four) = splitAt 3 rest\n            in (area, three, four)\n\nformat :: (String, String, String) -> String\nformat (area, three, four) = printf "(%s) %s-%s" area three four\n\ninvalidNumber :: String\ninvalidNumber = "0000000000"	\N	f	1	4	2014-03-12 13:38:28	2014-03-12 13:38:28	68	\N
146	4	cb5a0f27694fe620bd172172	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber s = case filter isDigit s of\n             n       | length n == 10 -> n\n             ('1':n) | length n == 10 -> n\n             _                        -> invalidNumber\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint = format . split\n\nsplit :: String -> (String, String, String)\nsplit s = let n = number s\n            in (take 3 n, (take 3 . drop 3) n, drop 6 n)\n\nformat :: (String, String, String) -> String\nformat (area, three, four) = printf "(%s) %s-%s" area three four\n\ninvalidNumber :: String\ninvalidNumber = "0000000000"	\N	f	0	2	2014-03-12 19:25:45	2014-03-12 19:25:45	68	\N
147	4	e8285d40ed6be6f1e1902ace	superseded	haskell	binary	module Binary (toDecimal) where\n\nimport Control.Applicative ((<$>),(<*>))\nimport Data.Char (digitToInt)\n\ntoDecimal :: String -> Integer\ntoDecimal s = if not (isValid s) then 0 else convert s\n  where \n    isValid = all $ (||) <$> (=='1') <*> (=='0')\n    convert = toInteger . foldr (+) 0 . expandBases\n    expandBases = (zipWith (\\b a -> digitToInt a * 2^b) [0..]) . reverse\n    	\N	f	1	1	2014-03-05 16:55:32	2014-03-05 16:55:32	69	Binary.hs
148	4	23fc20e49533094175b57396	done	haskell	binary	module Binary (toDecimal) where\n\nimport Data.List (foldl')\n\ntoDecimal :: String -> Integer\ntoDecimal = reduce . map digit\n  where \n    reduce = foldl' (\\b a -> a + 2*b) 0\n    digit '1' = 1\n    digit _ = 0\n    	\N	f	1	2	2014-03-07 15:54:14	2014-03-07 15:54:14	69	Binary.hs
149	4	951ed56a4ab25f649233cd02	done	haskell	beer-song	module Beer(sing, verse) where\nimport Data.Char(toUpper)\n\nsing :: Integer -> Integer -> String\nsing a b = unlines $ map verse $ reverse [b..a]\n\nverse :: Integer -> String\nverse n = uppercaseFirst $ bottles n ++ " of beer on the wall, " ++ bottles n ++ " of beer.\\n" ++ takeDown n ++ ", " ++ bottles (n-1) ++ " of beer on the wall.\\n"\n\ntakeDown :: Integer -> String\ntakeDown 0 = "Go to the store and buy some more"\ntakeDown 1 = "Take it down and pass it around"\ntakeDown n = "Take one down and pass it around"\n\nbottles :: Integer -> String\nbottles (-1) = bottles 99\nbottles 0 = "no more bottles"\nbottles 1 = "1 bottle"\nbottles n = show n ++ " bottles"\n\n-- Change the first character of a string to uppercase.\n-- Used for the 0 case at the start of a verse.\nuppercaseFirst :: String -> String\nuppercaseFirst [] = []\nuppercaseFirst (x:xs) = toUpper x : xs	\N	f	0	1	2014-03-05 05:36:56	2014-03-05 05:36:56	70	\N
150	4	6a9d8e54293c281fe1006a9a	done	haskell	anagram	module Anagram\n    ( anagramsFor\n    ) where\n\nimport Data.List\nimport Data.Char\n\n-- Not very pretty, but not very interesting either. \nanagramsFor :: String -> [String] -> [String] \nanagramsFor word list =\n    let normalized = normalize word\n    in filter (/= word) . filter ((== normalized) . normalize) $ list \n  where \n    normalize = sort . map toLower	\N	f	2	1	2014-03-16 18:51:56	2014-03-16 18:51:56	71	\N
151	21	e42d6d7a77d6abe6ed44ba90	done	ruby	hamming	class Hamming\n  def self.compute(strand1,strand2)\n    new(strand1,strand2).distance\n  end\n\n  attr_reader :strand1, :strand2\n  def initialize(strand1, strand2)\n    @strand1,  @strand2 = strand1, strand2\n  end\n\n  def distance\n    common_pairs.count do |pair|\n      mutate?(*pair)\n    end\n  end\n\n  private\n\n  def common_pairs\n    sequence1.chars.zip(sequence2.chars)\n  end\n\n  def sequence1\n    strand1[0..common_length]\n  end\n\n  def sequence2\n    strand2[0..common_length]\n  end\n\n  def common_length\n    [@strand1.length, @strand2.length].min - 1\n  end\n\n  def mutate?(a, b)\n    a != b\n  end\nend	\N	f	0	1	2014-02-07 17:37:02	2014-02-07 17:37:02	72	\N
1384	31	dcb62cecc908a9c71b28d7b8	done	ruby	proverb	class Proverb\n  def initialize(*args, qualifier: "")\n    @args = args\n    @qualifier = " " + qualifier unless qualifier == ""\n  end\n\n  def to_s\n    proverb = ""\n    @args.each_with_index do |word, index|\n      proverb += "For want of a #{word} the #{@args[index+1]} was lost.\\n" unless @args[index+1].nil?\n    end\n    return proverb + "And all for the want of a#{@qualifier} nail."\n  end\n\nend	\N	f	3	1	2013-11-28 17:33:25	2013-11-28 17:33:25	610	\N
153	21	6cd18135b164028948fef07c	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = Word.new(subject.downcase)\n  end\n\n  def match(words)\n    words.select{|word| subject_matches?(Word.new(word)) }\n  end\n\n  private\n\n  def subject_matches?(word)\n    use_the_same_chars?(word) && non_identical?(word)\n  end\n\n  def use_the_same_chars?(word)\n    word.the_same_chars?(@subject)\n  end\n\n  def non_identical?(word)\n    word != @subject\n  end\n\nend\n\nclass Word\n  attr_reader :string\n\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other_word)\n    string.downcase == other_word.string.downcase\n  end\n\n  def the_same_chars?(other_word)\n    string.chars.sort == other_word.string.chars.sort\n  end\nend	\N	f	9	2	2014-02-14 07:03:01	2014-02-14 07:03:01	73	\N
154	21	5d341adac325ce316a324888	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject.downcase\n  end\n\n  def match(words)\n    words.select{|word| subject_matches?(word) }\n  end\n\n  private\n\n  def subject_matches?(word)\n    AnagramMatcher.new(Word.new(@subject), Word.new(word)).match?\n  end\n\nend\n\nclass AnagramMatcher\n  def initialize(subject, word)\n    @subject = subject\n    @word    = word\n  end\n\n  def match?\n    use_the_same_chars? && non_identical?\n  end\n\n  private\n\n  def non_identical?\n    @word != @subject\n  end\n\n  def use_the_same_chars?\n    @word.the_same_chars?(@subject)\n  end\nend\n\nclass Word\n  attr_reader :string\n\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other_word)\n    string.downcase == other_word.string.downcase\n  end\n\n  def the_same_chars?(other_word)\n    string.chars.sort == other_word.string.chars.sort\n  end\nend	\N	f	1	1	2014-02-17 17:15:57	2014-02-17 17:15:57	73	\N
155	21	7cd66a0b1511a715edb3fbbd	hibernating	ruby	bob	# ruby-2.0.0-p353\n\nclass Bob\n\n  Silence = /\\A *\\Z/\n  Question = /\\?\\Z/\n  Shouting = %r(\n    \\A[^a-z]*  # Starts with anything but lowercase.\n    [A-Z]+     # At least one capital letter.\n    [^a-z]*\\Z  # Ends with anything but lowercase.\n  )x\n\n  def hey(query)\n    case query\n    when Silence\n      'Fine. Be that way!'\n    when Shouting\n      'Woah, chill out!'\n    when Question\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	f	6	1	2014-01-14 01:06:40	2014-01-14 01:06:40	74	\N
156	21	5ae133c261d8d05304528f82	pending	javascript	raindrops	var Raindrops = function() { };\r\nRaindrops.prototype.convert = function(input) {\r\n\tvar output = '';\r\n\r\n\tif(input % 3 === 0) output += 'Pling';\r\n\tif(input % 5 === 0) output += 'Plang';\r\n\tif(input % 7 === 0) output += 'Plong';\r\n\t\r\n\treturn (output.length > 0) ? output : input.toString();\r\n};\r\n\r\nmodule.exports = Raindrops;	\N	f	0	1	2014-03-05 03:20:13	2014-03-05 03:20:13	75	raindrops.js
157	21	f3b6a2c06180bf688c66852a	done	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function(message) {\n    if (message.trim() === '') {\n        return 'Fine. Be that way!';\n    }\n    if (message.toUpperCase() === message && message.toLowerCase() !== message) {\n        return 'Woah, chill out!';\n    }\n    if (message.substr(-1) == '?') {\n        return 'Sure.';\n    }\n    return 'Whatever.';\n};\nmodule.exports = Bob;	\N	f	0	1	2014-01-23 06:40:30	2014-01-23 06:40:30	76	\N
158	21	36b7eb2f9f8dfb24ee41cbaa	superseded	ruby	word-count	class Phrase\r\n  def initialize(my_phrase)\r\n    @phrase = my_phrase\r\n  end\r\n  def word_count\r\n    words = get_words_from_phrase(@phrase)\r\n    hash_number_of_words(words)\r\n  end\r\n  private\r\n  def get_words_from_phrase(phrase)\r\n    phrase.split(/[^a-zA-Z0-9']+/).map{|a| a.downcase}\r\n  end\r\n  def hash_number_of_words(word_table)\r\n    hash = Hash.new(0)\r\n    word_table.each do |word|\r\n      hash[word] = hash[word]+1\r\n    end\r\n    hash\r\n  end\r\nend	\N	f	4	1	2014-02-19 03:03:42	2014-02-19 03:03:42	77	\N
159	21	baa648a2b5cf45e4d91e71cf	hibernating	ruby	word-count	class Phrase\r\n  def initialize(my_phrase)\r\n    @phrase = my_phrase\r\n  end\r\n  def word_count\r\n    words = get_words_from_phrase\r\n    count_occurrence_of_words(words)\r\n  end\r\n  private\r\n  def get_words_from_phrase\r\n    @phrase.split(/[^a-zA-Z0-9']+/).map{|a| a.downcase}\r\n  end\r\n  def count_occurrence_of_words(word_table)\r\n    word_table.each_with_object(Hash.new(0)) {|str, hash| hash[str] += 1}\r\n  end\r\nend	\N	f	5	2	2014-03-03 09:04:51	2014-03-03 09:04:51	77	\N
160	21	0e81b73a202c24415da3d548	superseded	javascript	robot-name	"use strict";\n\nfunction Robot() {\n  this.reset();\n}\n\nRobot.prototype = {\n  reset: function() {\n    this.name = this._generateDesignation();\n  },\n\n  _generateDesignation: function() {\n    return [\n      Util.Random.letter(),\n      Util.Random.letter(),\n      Util.Random.number(100, 999)\n    ].join("");\n  }\n};\n\nvar Util = {\n  Random: {\n    // Returns a random integer from min to max, inclusively.\n    // Defaults to 0..9\n    number: function(min, max) {\n      var min = min || 0, max = max || 9;\n\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    // Returns a random uppercase letter from A..Z\n    letter: function() {\n      return String.fromCharCode(this.number(65, 90));\n    }\n  }\n};\n\nmodule.exports = Robot;	\N	f	3	1	2014-02-02 05:31:43	2014-02-02 05:31:43	78	\N
161	21	36348b417512b0f71ffb4be0	done	javascript	robot-name	"use strict";\n\nfunction Robot() {\n  this.reset();\n}\n\nRobot.prototype.reset = function() {\n  this.name = this._generateDesignation();\n};\n\nRobot.prototype._generateDesignation = function() {\n  return [\n    Util.Random.letter(),\n    Util.Random.letter(),\n    Util.Random.number(100, 999)\n  ].join("");\n};\n\nvar Util = {\n  Random: {\n    // Returns a random integer from min to max, inclusively.\n    // Defaults to 0..9\n    number: function(min, max) {\n      var min = min || 0, max = max || 9;\n\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    // Returns a random uppercase letter from A..Z\n    letter: function() {\n      return String.fromCharCode(this.number(65, 90));\n    }\n  }\n};\n\nmodule.exports = Robot;	\N	f	3	2	2014-02-19 14:44:14	2014-02-19 14:44:14	78	\N
162	21	b2daaae9b1451d4b3f5a915b	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport qualified Data.Map as M\n\nwordCount :: [Char] -> M.Map [Char] Int\nwordCount s = M.fromListWith (+) $ map (\\x -> (x, 1)) $ words $ cleanWords s\n\ncleanWords :: [Char] -> [Char]\ncleanWords = map toLower . filter (\\x -> isAlphaNum x || isSpace x)	\N	f	0	1	2014-01-27 08:49:01	2014-01-27 08:49:01	79	\N
573	9	2c70a57594aa98fc91b1b9a8	superseded	clojure	bob	(ns bob)\n(require 'clojure.string)\n(defn response-for [q]\t\n      (cond\n        (clojure.string/blank? q) "Fine. Be that way!"\n\t(= (clojure.string/upper-case q) q) "Woah, chill out!"\n\t(re-matches #".*\\?$" q) "Sure."\n\t:else "Whatever."))	\N	f	1	1	2013-11-01 05:56:01	2013-11-01 05:56:01	253	\N
1385	31	25d23c40aa6e79a80db71b2c	superseded	ruby	rna-transcription	class DNA\n  def initialize(string)\n    @string = string\n  end\n\n  def to_rna\n    @string.tr("T", "U")\n  end\nend	\N	f	1	3	2013-10-28 11:07:07	2013-10-28 11:07:07	611	\N
1386	31	b6932558ddb6e23bb9158814	superseded	ruby	rna-transcription	class Bob\n  SHOUT    = /\\A[^a-z]+\\z/\n  QUESTION = /\\?\\z/\n  SILENCE  = ""\n\n  def hey(message)\n    case message.to_s\n    when SHOUT    then "Woah, chill out!"\n    when QUESTION then "Sure."\n    when SILENCE  then "Fine. Be that way!"\n    else               "Whatever."\n    end\n  end\nend	\N	f	0	1	2013-12-07 02:17:14	2013-12-07 02:17:14	611	\N
165	21	b233bd61f005c05111333843	superseded	python	nucleotide-count	from collections import Counter\n\nclass DNA:\n\n  COUNTABLE_NUCLEOTIDES = "ACGTU"\n\n  def __init__(self, sequence):\n    self.sequence = sequence\n\n  def count(self, nucleotide):\n    if nucleotide in DNA.COUNTABLE_NUCLEOTIDES:\n      return self._counter()[nucleotide]\n    else:\n      raise ValueError, ("%s is not a nucleotide." % nucleotide)\n\n  def nucleotide_counts(self):\n    counts = self._default_nucleotide_counts()\n    counts.update(self._counter())\n    return counts\n\n  def _counter(self):\n    return Counter(self.sequence)\n\n  def _default_nucleotide_counts(self):\n    return {"A": 0, "C": 0, "G": 0, "T": 0}	\N	f	1	2	2014-02-14 05:02:17	2014-02-14 05:02:17	80	\N
166	21	23ce14ba200c75a307623227	done	python	nucleotide-count	from collections import Counter\n\nclass DNA:\n\n  COUNTABLE_NUCLEOTIDES = "ACGTU"\n\n  def __init__(self, sequence):\n    self.counter = Counter(sequence)\n\n  def count(self, nucleotide):\n    if nucleotide in DNA.COUNTABLE_NUCLEOTIDES:\n      return self.counter[nucleotide]\n    else:\n      raise ValueError, ("%s is not a nucleotide." % nucleotide)\n\n  def nucleotide_counts(self):\n    return dict(self._default_nucleotide_counts() + self.counter.items())\n\n  def _default_nucleotide_counts(self):\n    return {"A": 0, "C": 0, "G": 0, "T": 0}.items()	\N	f	0	3	2014-02-19 17:29:28	2014-02-19 17:29:28	80	\N
167	21	060c35d8dd53391a28fe18de	done	haskell	gigasecond	module Gigasecond (\r\n  fromDay\r\n)  where\r\n\r\n-- later\r\nfromDay = undefined\r	\N	f	3	1	2014-02-02 05:31:45	2014-02-02 05:31:45	81	Gigasecond.hs
168	21	6a4378ec2d44b6e8fe5af387	done	elixir	phone-number	defmodule Phone do\n  def number(num) do\n    num |> digits_only |> validate\n  end\n\n  def area_code(num) do\n    num |> number |> first_three\n  end\n\n  def pretty(num) do\n    num |> number |> make_pretty\n  end\n\n  defp digits_only(num) do\n    Regex.replace(%r/[^0-9]/, num, "")\n  end\n\n  defp validate(<<"1", rest :: [binary, size(10)]>>)  do\n    rest\n  end\n\n  defp validate(<<num :: [binary, size(10)]>>), do: num\n  defp validate(_), do: "0000000000"\n\n  defp first_three(num) do\n    num |> String.slice(0,3)\n  end\n\n  defp prefix(num) do\n    num |> String.slice(3,3)\n  end\n\n  defp line_number(num) do\n    num |> String.slice(6,4)\n  end\n\n  defp make_pretty(num) do\n    "(#{area_code(num)}) #{prefix(num)}-#{line_number(num)}"\n  end\nend	\N	f	4	1	2014-01-17 06:17:41	2014-01-17 06:17:41	82	\N
169	21	38a2f4adc092b8a7d977ba98	superseded	ruby	rna-transcription	class DNA\n\n  CYTIDINE = "C"\n  GUANOSINE = "G"\n  ADENOSINE = "A"\n  THYMIDINE = "U"\n\n  def initialize(dna_input)\n    @dna_input = dna_input\n  end\n\n  def to_rna\n    @dna_input.split("").inject("") { |result, char| result << transcribe(char) }\n  end\n\n  private\n\n  def transcribe(letter)\n    case letter\n    when "C" then CYTIDINE \n    when "G" then GUANOSINE \n    when "A" then ADENOSINE \n    when "T" then THYMIDINE \n    else\n      raise ArgumentError, "ERROR: Not a valid dna character"\n    end\n  end\n  \n  def cytidine\n    "C"\n  end\n\n  def guanosine\n    "G"\n  end\n  \n  def adenosine\n    "A"\n  end\n\n  def thymidine\n    "U"\n  end\n\nend	\N	f	0	2	2014-02-04 08:33:16	2014-02-04 08:33:16	83	\N
170	21	d465ab0f2780b21348bc233a	superseded	ruby	rna-transcription	class DNA\n\n  THYMIDINE = "T"\n  URACIL = "U"\n  \n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr(THYMIDINE, URACIL)\n  end\n    \nend	\N	f	5	7	2014-02-04 10:38:43	2014-02-04 10:38:43	83	\N
171	21	a21a0526b1c5ef4b9b1d6b76	superseded	ruby	rna-transcription	class DNA\n\n  THYMIDINE = "T"\n  URACIL = "U"\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr(THYMIDINE, URACIL)\n  end\n    \nend	\N	f	0	5	2014-02-08 06:50:30	2014-02-08 06:50:30	83	\N
172	21	c838fcb567644630ff1643a0	superseded	ruby	rna-transcription	class DNA\n\n  THYMIDINE = "T"\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    uracil = "U"\n    @sequence.tr(THYMIDINE, uracil)\n  end\n    \nend	\N	f	0	6	2014-02-13 11:34:43	2014-02-13 11:34:43	83	\N
173	21	b5f3ba055e2cb59d81b0a6f5	superseded	ruby	rna-transcription	class DNA\n\n  def initialize(dna_input)\n    @dna_input = dna_input\n  end\n\n  def to_rna\n    @dna_input.split("").inject("") { |result, char| result << transcribe(char) }\n  end\n\n  private\n\n  def transcribe(letter)\n    case letter\n    when "C" then cytidine \n    when "G" then guanosine \n    when "A" then adenosine \n    when "T" then thymidine \n    else\n      raise "ERROR: Not a valid dna character"\n    end\n  end\n  \n  def cytidine\n    "C"\n  end\n\n  def guanosine\n    "G"\n  end\n  \n  def adenosine\n    "A"\n  end\n\n  def thymidine\n    "U"\n  end\n\nend	\N	f	7	1	2014-02-16 03:18:41	2014-02-16 03:18:41	83	\N
174	21	73131701affef6fe2f6266cf	done	ruby	rna-transcription	DNA = Struct.new(:sequence) do\n\n  THYMIDINE = "T"\n  URACIL = "U"\n  \n  def to_rna\n    sequence.tr(THYMIDINE, URACIL)\n  end\n    \nend	\N	f	8	8	2014-02-21 15:29:58	2014-02-21 15:29:58	83	\N
175	21	9f2b1fbf9d827a6d8de79746	superseded	ruby	rna-transcription	class DNA\n\n  CYTIDINE = "C"\n  GUANOSINE = "G"\n  ADENOSINE = "A"\n  THYMIDINE = "U"\n\n  def initialize(dna_input)\n    @dna_input = dna_input\n  end\n\n  def to_rna\n    @dna_input.split("").inject("") { |result, char| result << transcribe(char) }\n  end\n\n  private\n\n  def transcribe(letter)\n    case letter\n    when "C" then CYTIDINE \n    when "G" then GUANOSINE \n    when "A" then ADENOSINE \n    when "T" then THYMIDINE \n    else\n      raise ArgumentError, "ERROR: Not a valid dna character"\n    end\n  end\n  \nend	\N	f	10	3	2014-02-22 16:47:49	2014-02-22 16:47:49	83	\N
176	21	e4385528b3c4f86e930d8019	superseded	ruby	rna-transcription	class DNA\n\n  def initialize(dna_sequence)\n    @dna_sequence = dna_sequence\n  end\n\n  def to_rna\n    @dna_sequence.tr("T", "U")\n  end\n    \nend	\N	f	4	4	2014-03-12 01:59:36	2014-03-12 01:59:36	83	\N
1387	31	f58bf09edde2c1bcf10d116b	done	ruby	rna-transcription	class DNA\n  THYMINE = "T"\n  URACIL  = "U"\n\n  # E.g. "GATTACA".\n  def initialize(string)\n    @string = string\n  end\n\n  # E.g. "GAUUACA".\n  def to_rna\n    @string.gsub(THYMINE, URACIL)\n  end\nend	\N	f	4	4	2013-12-29 09:18:17	2013-12-29 09:18:17	611	\N
1388	31	f6c8c7fd5ab955cf17a50bf3	superseded	ruby	rna-transcription	# WIP\n# Accidentally submitted bob.rb, so I had to overwrite it… bear with me. :)	\N	f	4	2	2014-01-09 12:20:59	2014-01-09 12:20:59	611	\N
1389	31	2dbb052a4eec9ea7337754cf	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    return @word_count ||= word_list.inject(Hash.new(0)) do |count, word|\n      count[word.downcase] += 1\n      count\n    end\n  end\n\n  private\n  def word_list\n    return @phrase.gsub(/[[:punct:]]+/, ' ').split\n  end\nend	\N	f	3	2	2013-11-04 16:31:06	2013-11-04 16:31:06	612	\N
1390	31	99a6eccf46a73334a835c6f1	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.downcase.strip\n  end\n\n  def word_count\n    return words.each_with_object(Hash.new(0)) { |w, counts| counts[w] += 1 }\n  end\n\n  private\n  def words\n    return @phrase.scan(/[[:word:]]+/)\n  end\nend	\N	f	3	3	2013-12-24 19:54:11	2013-12-24 19:54:11	612	\N
1391	31	68e077d164eab99dd2a8649e	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    return @word_count ||= word_list.inject(Hash.new(0)) do |count, word|\n      count[word.downcase] += 1\n      count\n    end\n  end\n\n  private\n  def word_list\n    return @phrase.gsub(/[[:punct:]]+/, ' ').split(/\\s+/)\n  end\nend	\N	f	6	1	2014-02-21 05:19:20	2014-02-21 05:19:20	612	\N
178	21	c6ec19703aaf37891c749073	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.List\n\nsing :: Int -> Int -> String\nsing max min = unlines $ map verse [max, max-1..min]\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n\\\n          \\Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = unwords $ [bottle n, "of beer on the wall,", bottle n \n                    , "of beer.\\nTake", which n, "down and pass it around,"\n                    , bottle (n-1), "of beer on the wall.\\n"]\n    where \n      bottle 0 = "no more bottles" \n      bottle 1 = "1 bottle"\n      bottle x = show x ++ " bottles"\n      which 1  = "it"\n      which n  = "one"	\N	f	1	3	2014-02-16 02:33:11	2014-02-16 02:33:11	84	Beer.hs
179	21	6f2d19ebee429eafbcee1c2f	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.List\n\nsing :: Int -> Int -> String\nsing max min = unlines $ map verse [max,max-1..min]\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = bottle n ++ " of beer on the wall, " ++ bottle n \n            ++ " of beer.\\nTake " ++ which n ++ " down and pass it around, " ++ bottle (n-1) ++ " of beer on the wall.\\n"\n    where \n      bottle 0 = "no more bottles" \n      bottle 1 = "1 bottle"\n      bottle x = show x ++ " bottles"\n      which 1 = "it"\n      which n = "one"	\N	f	1	2	2014-02-16 12:14:51	2014-02-16 12:14:51	84	Beer.hs
180	21	1c4868177a43138dd37d5db9	done	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.List\n\nsing :: Int -> Int -> String\nsing max min = unlines $ map verse [max, max-1..min]\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n\\\n          \\Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = unwords [bottle n, "of beer on the wall,", bottle n \n                  , "of beer.\\nTake", which n, "down and pass it around,"\n                  , bottle (n-1), "of beer on the wall.\\n"]\n    where \n      bottle 0 = "no more bottles" \n      bottle 1 = "1 bottle"\n      bottle x = show x ++ " bottles"\n      which 1  = "it"\n      which n  = "one"	\N	f	7	4	2014-02-20 07:36:36	2014-02-20 07:36:36	84	Beer.hs
181	26	e84051a4a4a8e81f261b0102	done	haskell	bob	module Bob where\n\nimport Data.Char (isSpace, isUpper, isLower, isAlpha)\n\nresponseFor :: String -> String\nresponseFor xs\n  | null xs ||\n    nonSpace == 0  = "Fine. Be that way!"\n  | upper > 0 &&\n    upper == alpha = "Woah, chill out!"\n  | last xs == '?' = "Sure."\n  | otherwise      = "Whatever."\n  where nonSpace = length $ filter (not.isSpace) xs\n        alpha    = length $ filter isAlpha xs\n        upper    = length $ filter isUpper xs\n        lower    = length $ filter isLower xs	\N	f	3	1	2014-01-01 18:29:19	2014-01-01 18:29:19	85	Bob.hs
182	26	aa99e886be0ef63c799bb838	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = sanitize(string)\n  end\n\n  def word_count\n    count = Hash.new(0)\n\n    words_in_string.each do |word|\n      count[word.downcase] += 1\n    end\n\n    count\n  end\n\n  private\n\n  def sanitize(string)\n    string.gsub(/[^\\w|\\s,]/, '')\n  end\n\n  def words_in_string\n    @string.gsub(/,/, " ").split(" ")\n  end\nend	\N	f	2	1	2013-10-17 00:43:15	2013-10-17 00:43:15	86	\N
183	26	f2ad0a46d2a3597e0baf4dbf	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = string.scan(/\\w+/)\n  end\n\n  def word_count\n    @string.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\nend	\N	f	2	2	2013-12-22 05:57:38	2013-12-22 05:57:38	86	\N
184	26	361d96521c8913661e98aa09	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @array_of_words = string.scan(/\\w+/)\n  end\n\n  def word_count\n    @array_of_words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\nend	\N	f	0	3	2013-12-24 21:50:17	2013-12-24 21:50:17	86	\N
185	26	cab1a5ce15fb687b00a17c3b	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @array_of_words = string.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    @array_of_words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\nend	\N	f	2	4	2014-01-10 15:50:47	2014-01-10 15:50:47	86	\N
186	26	a2b0e694847e2d0d6cbd9c9a	done	ruby	word-count	class Phrase\n  def initialize(string)\n    @original_string = string\n  end\n\n  def word_count\n    array_of_words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\n\n  private\n\n  def array_of_words\n    @original_string.downcase.scan(/\\w+/)\n  end\nend	\N	f	5	5	2014-02-03 12:40:52	2014-02-03 12:40:52	86	\N
187	26	38ac52860bc8eadff4b64282	done	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotide_counts\n\n  def initialize sequence\n    @nucleotide_counts = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n    count_nucleotides sequence\n  end\n\n  def count nucleotide\n    if !nucleotide? nucleotide\n      raise ArgumentError, "That's not a nucleotide, silly!"\n    elsif nucleotide_counts[nucleotide]\n      nucleotide_counts[nucleotide]\n    else\n      0\n    end\n  end\n\n  private\n\n  def count_nucleotides sequence\n    nucleotide_counts.each_key { |n| nucleotide_counts[n] = sequence.count(n) }\n  end\n\n  def nucleotide? possible_nucleotide\n    "ATCGU".split("").include? possible_nucleotide\n  end\nend	\N	f	2	3	2013-12-16 09:03:32	2013-12-16 09:03:32	87	\N
188	26	8eeab7ed52fa8372e538d9a4	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize dna_string\n    @nucleotide_counts = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n    count_nucleotides dna_string\n  end\n\n  def count nucleotide\n    if !nucleotide? nucleotide\n      raise ArgumentError, "That's not a nucleotide, silly!"\n    elsif @nucleotide_counts[nucleotide]\n      @nucleotide_counts[nucleotide]\n    else\n      0\n    end\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts\n  end\n\n  private\n\n  def count_nucleotides dna_string\n    dna_string.chars.each { |n| @nucleotide_counts[n] += 1 }\n  end\n\n  def nucleotide? possible_nucleotide\n    "ATCGU".split("").include? possible_nucleotide\n  end\nend	\N	f	4	1	2014-02-05 21:39:58	2014-02-05 21:39:58	87	\N
200	26	e15a4b3d359a8c1aeb8f8b5e	superseded	clojure	word-count	(ns phrase (:require [clojure.string :as s]))\n\n(defn combine-map-with [func default m k] \n  (let [current (m k default)]\n    (assoc m k (func current))))\n(def combine-map-count (partial combine-map-with inc 0))\n\n(defn word-count [phrase]\n  (let [words (s/split (s/lower-case phrase) #"[^\\w]+")]\n  (reduce combine-map-count {} words)))	\N	f	2	1	2013-11-12 06:07:42	2013-11-12 06:07:42	94	\N
1392	31	6b1442ee64190e2352b78a5c	pending	ruby	prime-factors	require 'prime'\n\nmodule PrimeFactors\n  extend self\n\n  def for(number)\n    Prime.prime_division(number).each_with_object([]) do |(factor, n), result|\n      n.times { result << factor }\n    end\n  end\n\nend	\N	f	3	1	2014-02-15 19:54:40	2014-02-15 19:54:40	613	prime_factors.rb
1404	39	69ee5a7ed11a9021738b973e	superseded	ruby	bob	class Bob\n  def hey(input)\n    case Sentence.new(input)\n    when :silence?.to_proc\n      'Fine. Be that way!'\n    when :shouting?.to_proc\n      'Woah, chill out!'\n    when :question?.to_proc\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end  \nend\n\nclass Sentence\n  def initialize(input)\n    @input = input.to_s\n  end\n  def silence?\n    @input !~ /\\S/\n  end\n  def shouting?\n    @input == @input.upcase\n  end\n  def question?\n    @input.end_with?("?")\n  end  \nend	\N	f	0	2	2014-02-13 17:10:50	2014-02-13 17:10:50	618	\N
1467	36	8a4e8dec5ca4469bdd5a3bd9	superseded	ruby	etl	class ETL\n  class << self\n    def transform(dataset)\n      dataset.each_with_object({}) do |item, store|\n        letters = item.last\n        point = item.first\n\n        letters.each {|v| store[v.downcase] = point }\n      end\n    end\n  end\nend	\N	f	3	3	2014-02-04 22:19:55	2014-02-04 22:19:55	649	etl.rb
1393	31	30aef1e8b0d3a5ede8bf1efb	pending	ruby	say	class Say\n  attr_reader :number\n\n  def initialize(number)\n    @number = number\n    raise ArgumentError unless (0..999_999_999_999).include?(@number)\n  end\n\n  def in_english\n    return "zero" if number == 0\n    return teens[number] if (11..19).include?(number)\n\n    translate_numbers.join.strip\n  end\n\n  private\n\n  def translate_numbers\n    collector = []\n    numbers_to_translate.each_slice(3) do |ones_place, tens_place, hundreds_place|\n      inner = []\n\n      inner << ones[hundreds_place].to_s\n      inner << " hundred" if ones[hundreds_place]\n      inner << " " if ones[hundreds_place] && tens[tens_place]\n      inner << tens[tens_place].to_s\n      inner << "-" if tens[tens_place] && ones[ones_place]\n      inner << ones[ones_place].to_s\n\n      i = numbers_to_translate.index(ones_place)\n      add_places(i).each do |test, result|\n        collector.unshift(result) if test.call\n      end\n\n      collector.unshift(inner)\n    end\n    collector\n  end\n\n  def numbers_to_translate\n    number.to_s.chars.map{|c|c.to_i}.reverse\n  end\n\n  def add_places(i)\n    {\n      lambda {(8..10).include?(i)} => " billion ",\n      lambda {(5..7).include?(i)} => " million ",\n      lambda {(2..4).include?(i)} => " thousand "\n    }\n  end\n\n  def ones\n    { 0 => nil,\n      1 => "one",\n      2 => "two",\n      3 => "three",\n      4 => "four",\n      5 => "five",\n      6 => "six",\n      7 => "seven",\n      8 => "eight",\n      9 => "nine" }\n  end\n\n  def tens\n    { 0 => nil,\n      1 => "ten",\n      2 => "twenty",\n      3 => "thirty",\n      4 => "forty",\n      5 => "fifty",\n      6 => "sixty",\n      7 => "seventy",\n      8 => "eighty",\n      9 => "ninety" }\n  end\n\n  def teens\n    { 11 => "eleven",\n      12 => "twelve",\n      13 => "thirteen",\n      14 => "fourteen",\n      15 => "fifteen",\n      16 => "sixteen",\n      17 => "seventeen",\n      18 => "eighteen",\n      19 => "nineteen" }\n  end\n\nend	\N	f	1	1	2014-01-28 20:58:28	2014-01-28 20:58:28	614	say.rb
1394	31	e42219521ccd50f684f0523a	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n    @prime = @word.split("").sort.join\n  end\n\n  def match(ray)\n    ans = ray.select do |word|\n      word.downcase.split("").sort.join\n      word.downcase.split("").sort.join == @prime.downcase\n    end\n    ans.select! {|word| word.downcase != @word}\n    ans\n  end\nend	\N	f	2	1	2013-11-26 20:53:42	2013-11-26 20:53:42	615	anagram.rb
191	26	42a8e5c194a51e856532dde7	superseded	clojure	phone-number	(ns phone)\n\n(defn- valid-number?\n  [digits]\n  (= (count digits) 10))\n\n(defn- valid-long-distance?\n  [digits]\n  (and (= (first digits) "1")\n       (valid-number? (drop 1 digits))))\n\n(defn number\n  "Get the digits of the provided phone number,\n  or 0000000000 if the phone number is invalid."\n  [phone-number]\n  (let [digits (re-seq #"\\d" phone-number)]\n    (clojure.string/join    \n      (cond\n        (valid-number? digits) digits\n        (valid-long-distance? digits) (rest digits)\n        :else "0000000000"))))\n\n(defn area-code\n  "Extract the first three digits of the phone number."\n  [phone-number]\n  (re-find #"^\\d\\d\\d" (number phone-number)))\n\n(def ^:private number-groups-regex\n  #"(\\d\\d\\d)(\\d\\d\\d)(\\d\\d\\d\\d)")\n\n(defn pretty-print\n  "Pretty-print the provided phone number."\n  [phone-number]\n  (let [canonical (number phone-number)\n        matches (re-matches number-groups-regex canonical)\n        [_ area-code subscriber exchange] matches]\n    (str "(" area-code ") " subscriber "-" exchange)))	\N	f	2	2	2013-12-15 14:57:04	2013-12-15 14:57:04	88	\N
193	26	d4f67aa18bc4eb3e890fc048	superseded	ruby	trinary	class Trinary\n  attr_reader :tri\n  def initialize(tri)\n    @tri = tri\n  end\n\n  def to_decimal\n    powers_of_three.each_with_index.map do |power, i|\n      power * tri.reverse.chars[i].to_i\n    end.inject(&:+)\n  end\n\n  private\n\n  def powers_of_three\n    powers = []\n    tri.length.times do |i|\n      powers << 3 ** i\n    end\n    powers\n  end\n\nend	\N	f	2	1	2013-10-28 15:25:45	2013-10-28 15:25:45	89	trinary.rb
194	26	15ea5d31749152001c6cb771	pending	ruby	trinary	class Trinary\n  attr_reader :tri\n  \n  def initialize(trinary)\n    @tri = parse(trinary)\n  end\n\n  def to_decimal\n    powers_of_three.map.with_index do |power, i|\n      power * tri[i]\n    end.inject(&:+)\n  end\n\n  private\n\n  def powers_of_three\n    powers = []\n    tri.length.times do |i|\n      powers << 3 ** i\n    end\n    powers\n  end\n\n  def parse(trinary)\n    trinary.reverse.chars.map {|digit| digit.to_i}\n  end\n\nend	\N	f	2	2	2013-11-15 22:03:52	2013-11-15 22:03:52	89	trinary.rb
195	26	5ab72baedd98601a100df839	done	clojure	kindergarten-garden	(require '[clojure.string :as s])\n\n(def default-students (vec '("Alice" "Bob" "Charlie" "David" "Eve" \n                            "Fred" "Ginny" "Harriet" "Ileana" \n                            "Joseph" "Kincaid" "Larry")))\n\n(defn- to-plant [c]\n  (get {\\V :violets \\R :radishes \\G :grass \\C :clover} c))\n\n(defn garden\n  ([diagram] (garden diagram default-students))\n  ([diagram students] \n   (let \n     [sorted (map (comp keyword s/lower-case) (sort students))\n      [p1 p2] (map (partial map to-plant) (s/split-lines diagram))\n      plants (partition 4 (flatten (interleave (partition 2 p1) (partition 2 p2))))]\n     (zipmap sorted plants))))	\N	f	2	1	2014-01-18 12:11:22	2014-01-18 12:11:22	90	\N
196	26	f243f65cd0e8a440382bc4b3	done	haskell	rna-transcription	module DNA (toRNA) where\n\nnewtype Dna = Dna Char\nnewtype Rna = Rna Char\n\ndnaToRna :: Dna -> Rna\ndnaToRna (Dna 'A') = Rna 'A'\ndnaToRna (Dna 'C') = Rna 'C'\ndnaToRna (Dna 'G') = Rna 'G'\ndnaToRna (Dna 'T') = Rna 'U'\n\nrnaToChar :: Rna -> Char\nrnaToChar (Rna c) = c\n\ntoRNA :: String -> String\ntoRNA = map rnaToChar . map (dnaToRna . Dna)	\N	f	2	2	2013-11-12 13:09:30	2013-11-12 13:09:30	91	\N
198	26	8a8bff58de83ba9e2d947821	done	haskell	binary	module Binary (toDecimal) where\nimport Data.Maybe (mapMaybe)\nimport Data.List (foldl')\nimport Data.Bits (shiftL, (.|.))\ntoDecimal :: String -> Int\ntoDecimal = foldl' go 0 . mapMaybe toDigit\n  where\n    go n bit = shiftL n 1 .|. bit\n    toDigit '0' = Just 0\n    toDigit '1' = Just 1\n    toDigit _   = Nothing	\N	f	2	1	2013-11-28 05:18:40	2013-11-28 05:18:40	92	\N
1395	39	42c22636bf767e0d02e7a050	hibernating	ruby	grains	class Grains\n  def initialize\n    @square_cache = {}\n  end\n\n  def square(squares)\n    get_grains_for_square(squares)\n  end\n\n  def total\n    (1..64).collect do |n|\n      get_grains_for_square(n)\n    end.reduce(:+)\n  end\n\n  private\n  def get_grains_for_square(square)\n    return cache(square) if cached?(square)\n\n    if @square_cache.empty?\n      calculate_grains(square)\n    else\n      cache_index = (square - (square - @square_cache.keys.max))\n\n      calculate_grains(square, cache(cache_index), cache_index)\n    end\n  end\n\n  def calculate_grains(no_of_squares, grains = 1, square = 1)\n    return @square_cache[square] = grains if square == no_of_squares\n\n    calculate_grains(no_of_squares, grains * 2, square + 1)\n  end\n\n  def cache(square)\n    @square_cache[square]\n  end\n\n  def cached?(square)\n    @square_cache.has_key?(square)\n  end\nend	\N	f	3	1	2014-02-16 23:21:23	2014-02-16 23:21:23	616	\N
203	26	14b119fbc41eb55ddcbd351f	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input to an array of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}	\N	f	2	1	2013-11-11 03:12:09	2013-11-11 03:12:09	95	\N
204	26	2e3645d963b67e5ab4472b7f	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}	\N	f	2	2	2013-11-20 16:43:19	2013-11-20 16:43:19	95	\N
205	26	484e189d57ba68eac6cfa407	done	javascript	word-count	// Satisfy the jasmine tests\nmodule.exports = function(str) { return { count: ns.countWords(ns.words(str)) } }\n\n// A namespace for a set of functions that will make up this module.\nvar ns = module.exports.ns = {}\n\n// The module's public interface\n\n// Count the number of times each word occurs in a list of words\nns.countWords = function(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nns.words = function (str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}\n\n// ---\n\n// How I would test this\n\n// run tests when invoked directly: i.e. `node words.js` from the shell\nmodule.parent || tests()\n\n// How I would test this\nfunction tests() {\n  var assert = require('assert')\n\n  // Unit tests\n\n  assert.deepEqual(ns.words('word'), ['word'])\n  assert.deepEqual(ns.words('one of each'), ['one','of','each'])\n  assert.deepEqual(ns.words('one fish two fish red fish blue fish'), ['one','fish','two','fish','red','fish','blue','fish'])\n  assert.deepEqual(ns.words('car : carpet as java : javascript!!&@$%^&'), ['car','carpet','as','java','javascript'])\n  assert.deepEqual(ns.words('testing, 1, 2 testing'), ['testing','1','2','testing'])\n  assert.deepEqual(ns.words('go Go GO'), ['go','go','go'])\n\n  assert.deepEqual(ns.countWords(['word']), { 'word' : 1 })\n  assert.deepEqual(ns.countWords(['one', 'of', 'each']), { 'one': 1, 'of': 1, 'each': 1 })\n  assert.deepEqual(ns.countWords(['one','fish','two','fish','red','fish','blue','fish']), { 'one' : 1, 'fish' : 4, 'two' : 1, 'red' : 1, 'blue' : 1 })\n  assert.deepEqual(ns.countWords(['car','carpet','as','java','javascript']), { 'car' : 1, 'carpet' : 1, 'as' : 1, 'java' : 1, 'javascript' : 1 })\n  assert.deepEqual(ns.countWords(['testing','1','2','testing']), { 'testing' : 2, '1' : 1, '2' : 1 })\n  assert.deepEqual(ns.countWords(['go','go','go']), { 'go' : 3 })\n\n  console.log('ok')\n}	\N	f	0	4	2014-03-04 12:26:51	2014-03-04 12:26:51	95	\N
206	26	565dab50fdb338bf617f6880	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(str) do\n    cond do\n      str == "" ->\n        "Fine. Be that way!"\n      upcase?(str) ->\n        "Woah, chill out!"\n      question?(str) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def question?(str) do\n    String.last(str) == "?"\n  end\n\n  def upcase?(str) do\n    String.upcase(str) == str\n  end\nend	\N	f	3	2	2013-11-20 18:49:20	2013-11-20 18:49:20	96	\N
207	26	8e9bc9970d30ecb00f441b6d	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(str) when str == "" do "Fine. Be that way!" end\n\n  def hey(str) do\n    if is_upcase(str) do\n      "Woah, chill out!"\n    else\n      if is_q(str) do\n        "Sure."\n      else\n        "Whatever."\n      end\n    end\n  end\n\n  def is_q(str) do\n    String.last(str) == "?"\n  end\n\n  def is_upcase(str) do\n    String.upcase(str) == str\n  end\nend	\N	f	3	1	2013-12-01 22:15:47	2013-12-01 22:15:47	96	\N
208	26	adb6d31d096305091846b8f2	done	elixir	bob	defmodule Teenager do\n\n  def hey(original_str) do\n    str = String.strip(original_str)\n    cond do\n      blank?(str) ->\n        "Fine. Be that way!"\n      upcase?(str) ->\n        "Woah, chill out!"\n      question?(str) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def blank?(str) do\n    str == ""\n  end\n\n  def question?(str) do\n    String.ends_with?(str, "?")\n  end\n\n  def upcase?(str) do\n    String.upcase(str) == str\n  end\n\nend	\N	f	3	3	2013-12-30 05:29:35	2013-12-30 05:29:35	96	\N
209	26	efcddf9d163c62da514cb89d	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn response-for [msg]\n  (cond\n    (blank? msg) "Fine, be that way."\n    (.endsWith msg "?") "Sure."\n    (= (upper-case msg) msg) "Woah, chill out!"\n    :else "Whatever."))	\N	f	1	1	2013-11-28 15:44:30	2013-11-28 15:44:30	97	\N
210	26	11af7eff0ba8fab8197e438e	done	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn- silence? [msg] (blank? msg))\n(defn- query?   [msg] (.endsWith msg "?"))\n(defn- shout?   [msg] (= msg (upper-case msg)))\n\n(defn response-for [msg]\n  (cond\n    (silence? msg) "Fine, be that way."\n    (query?   msg) "Sure."\n    (shout?   msg) "Woah, chill out!"\n    :else "Whatever."))	\N	f	2	2	2013-12-31 08:05:43	2013-12-31 08:05:43	97	\N
211	26	41f136d0f75e40f91ab51c7d	superseded	ruby	bob	class Bob\n  def hey message\n    message = message.to_s.strip\n    if message == message.upcase && message != ''\n      'Woah, chill out!'\n    elsif message.chars.last == '?'\n      'Sure.'\n    elsif message == ''\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\nend\n\n#Bob is a lackadaisical teenager. In conversation, his responses are very limited.\n#\n#Bob answers 'Sure.' if you ask him a question.\n#\n#He answers 'Woah, chill out!' if you yell at him (ALL CAPS).\n#\n#He says 'Fine. Be that way!' if you address him without actually saying anything.\n#\n#He answers 'Whatever.' to anything else.	\N	f	2	1	2013-10-16 16:22:21	2013-10-16 16:22:21	98	\N
1606	40	4844da04be08984cb10198d7	superseded	ruby	grains	class Grains\n\n  def square n\n    0b10**(n-1)\n  end\n\n  def total\n    @total ||= (1..64).reduce(0) do |sum, n|\n      sum += square n\n    end\n  end\n\nend	\N	f	2	1	2014-02-08 13:13:59	2014-02-08 13:13:59	697	grains.rb
1396	39	ab9a2df6a810584a47ca9f3b	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, occurrences| occurrences[word] += 1 }\n  end\n\n  private\n\n  def words\n    @phrase.downcase.scan(/[\\w']+/)\n  end\nend	\N	f	3	6	2014-01-27 09:58:21	2014-01-27 09:58:21	617	\N
1397	39	beb0fdaf15c8ecbfe70052f5	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    occurrences = Occurrences.new\n    words.each { |word| occurrences << normalize(word) }\n    occurrences.result\n  end\n\n  def words\n    @phrase.scan(/[\\w]+(?:'\\w)?/)\n  end\n\n  private\n\n  def normalize(word)\n    word.downcase\n  end\nend\n\nclass Occurrences\n  attr_reader :result\n\n  def initialize\n    @result = Hash.new(0)\n  end\n\n  def <<(key)\n    result[key] += 1\n  end\nend	\N	f	4	2	2014-01-30 20:45:25	2014-01-30 20:45:25	617	\N
1398	39	5718b4ad121e683e9d6744c3	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    occurrences = Occurrences.new\n    words.each { |word| occurrences << word }\n    occurrences.result\n  end\n\n  def words\n    phrase.split(/[^'\\w]/).reject { |word| word == '' }\n  end\nend\n\nclass Occurrences\n  attr_reader :result\n\n  def initialize\n    @result = Hash.new { |hash, key| hash[key] = 0 }\n  end\n\n  def <<(word)\n    result[normalize_case(word)] += 1\n  end\n\n  private\n\n  def normalize_case(word)\n    word.downcase\n  end\nend	\N	f	3	1	2014-02-09 01:22:17	2014-02-09 01:22:17	617	\N
1399	39	298dd46b2ef74c635a34ce6d	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Occurrences.new) { |word, occurrences| occurrences << word }.result\n  end\n\n  def words\n    @phrase.scan(/[\\w]+(?:'\\w)?/).map { |word| normalize word }\n  end\n\n  private\n\n  def normalize(word)\n    word.downcase\n  end\nend\n\nclass Occurrences\n  attr_reader :result\n\n  def initialize\n    @result = Hash.new(0)\n  end\n\n  def <<(key)\n    result[key] += 1\n  end\nend	\N	f	9	3	2014-02-12 15:03:30	2014-02-12 15:03:30	617	\N
213	26	93cd3f5b321babbc425d6123	done	ruby	bob	class Bob\n  def hey request\n    request = request.to_s.strip\n    respond(request)\n  end\n\n  def respond request\n    if request == ''\n      'Fine. Be that way!'\n    elsif shouting? request\n      'Woah, chill out!'\n    elsif question? request\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def shouting? request\n    request == request.upcase\n  end\n\n  def question? request\n    request.end_with?('?')\n  end\nend	\N	f	2	7	2013-11-21 17:38:26	2013-11-21 17:38:26	98	\N
214	26	60590e479c874ecc2b06252a	superseded	ruby	bob	class Bob\n  def hey request\n    request = request.to_s.strip\n    respond(request)\n  end\n\n  def respond request\n    if request == ''\n      'Fine. Be that way!'\n    elsif request == request.upcase\n      'Woah, chill out!'\n    elsif request[-1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	1	5	2013-11-21 19:43:38	2013-11-21 19:43:38	98	\N
215	26	42064ef3ee1723ebd4074629	superseded	ruby	bob	class Bob\n  def hey message\n    message = message.to_s.strip\n    if message == message.upcase && message != ''\n      'Woah, chill out!'\n    elsif message.chars.last == '?'\n      'Sure.'\n    elsif message == ''\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	3	2	2013-12-11 18:06:31	2013-12-11 18:06:31	98	\N
216	26	2c8c0576119014c9eda47647	superseded	ruby	bob	#Would case statements be more efficient?\n#Should I export the responses into variables?\nclass Bob\n  def hey message\n    message = message.to_s.strip\n    if message == message.upcase && message != ''\n      'Woah, chill out!'\n    elsif message.chars.last == '?'\n      'Sure.'\n    elsif message == ''\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	1	3	2014-02-08 16:36:49	2014-02-08 16:36:49	98	\N
217	26	a436071f3d68e0bac065ddfb	superseded	ruby	bob	#Would case statements be more efficient?\n#Should I export the responses into variables?\nclass Bob\n  def hey message\n    message = message.to_s.strip\n    if message == message.upcase && message != ''\n      'Woah, chill out!'\n    elsif message[-1] == '?'\n      'Sure.'\n    elsif message == ''\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	0	4	2014-02-15 06:37:12	2014-02-15 06:37:12	98	\N
218	26	1759038e0a727b01e3402436	superseded	go	leap	package leap\n\nfunc IsLeapYear(y int) bool {\n\treturn y%4 == 0 && (y%100 != 0 || y%400 == 0)\n}	\N	f	2	1	2013-12-17 06:59:48	2013-12-17 06:59:48	99	leap.go
219	26	76fd97cbddab4c7d0a63c6a8	done	go	leap	package leap\n\nfunc IsLeapYear(y int) bool {\n\t// http://en.wikipedia.org/wiki/Leap_year#Algorithm\n\treturn y%4 == 0 && (y%100 != 0 || y%400 == 0)\n}	\N	f	1	2	2014-01-14 23:38:05	2014-01-14 23:38:05	99	leap.go
221	26	b97aa3183346dfff698bfef0	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn to-rna\n  "Return the RNA transcription of a DNA strand"\n  [x]\n  {:pre  [(every? #{\\A \\C \\G \\T} (set x))]\n   :post [(every? #{\\A \\C \\G \\U} (set %))]}\n  (str/replace x #"T" "U"))	\N	f	2	1	2013-11-05 05:33:31	2013-11-05 05:33:31	101	\N
222	26	3db7971fee33800652baed91	done	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn to-rna\n  "Return the RNA transcription of a DNA strand"\n  [dna-strand]\n  {:pre  [(every? #{\\A \\C \\G \\T} (set dna-strand))]\n   :post [(every? #{\\A \\C \\G \\U} (set %))]}\n  (str/replace dna-strand \\T \\U))	\N	f	1	3	2013-12-02 12:47:53	2013-12-02 12:47:53	101	\N
223	26	60f17cb0c6ac3c22274c892a	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn to-rna\n  "Return the RNA transcription of a DNA strand"\n  [x]\n  {:pre  [(every? #{\\A \\C \\G \\T} (set x))]\n   :post [(every? #{\\A \\C \\G \\U} (set %))]}\n  (str/replace x \\T \\U))	\N	f	0	2	2014-01-02 03:58:57	2014-01-02 03:58:57	101	\N
224	26	3d3d9a015160320a914d92ef	pending	ruby	prime-factors	require 'prime'\n# class PrimeFactors\n\n\n# SORRY this soesnt work as expected. please dont review it\n\n\nclass PrimeFactors\n  def self.for(n)\n    op = []\n    Prime.take_while {|p|  p <= Math.sqrt(n) }.each{|e| (op << e; op << PrimeFactors.for(n/e)) if n%e == 0}\n    op.compact.flatten\n  end\n\n#   def self.for(n)\n#     n1 = n\n#     op = []\n#     while n.even?\n#       op << 2\n#       n = n / 2\n#     end\n#     puts "HERE: #{n1}"\n#       n = n1\n#     if Math.sqrt(n) >= 3\n#       i = 3\n#       until i < Math.sqrt(n)\n#         while n % i == 0\n#           op << i\n#           n = n / i\n#         end\n#         i += 2\n#       end\n#       op << n if n > 2\n#     end\n#     op\n#   end\nend	\N	f	3	1	2014-01-28 16:20:24	2014-01-28 16:20:24	102	prime_factors.rb
225	26	d1cc8daf4d30a52828f1fec7	superseded	python	bob	class Bob():\n    def hey(self, message):\n        if not message:\n            return 'Fine. Be that way!'\n        if (message == message.upper()):\n            return 'Woah, chill out!'\n        if (message[-1]) == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	0	1	2013-11-14 17:39:02	2013-11-14 17:39:02	103	\N
226	26	d7b4f4b601525be05c39d1b9	done	python	bob	class Bob():\n    def hey(self, message):\n        if not message:\n            return 'Fine. Be that way!'\n        if message.isupper():\n            return 'Woah, chill out!'\n        if message.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	3	2	2013-11-21 03:07:41	2013-11-21 03:07:41	103	\N
227	19	66add128fc687f89510313ee	done	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize(input)\n    @input = prepare(input)\n  end\n\n  def match(words)\n    words.select { |word| prepare(word) == input }\n  end\n\n  private\n\n  def prepare(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	2	1	2013-11-10 18:14:17	2013-11-10 18:14:17	104	\N
240	19	adc31ff0e136d8713433f944	pending	clojure	anagram	(ns anagram\n  (use [clojure.string :only [lower-case]]))\n\n(defn- same-sorted-seq? [w other]\n  (=\n   (sort (lower-case w))\n   (sort (lower-case other))))\n\n(defn- anagram? [w other]\n  (and\n   (not= w other)\n   (same-sorted-seq? w other)))\n\n(defn anagrams-for [w potentials]\n  (filter #(anagram? w %) potentials))	\N	f	2	1	2013-10-17 22:05:26	2013-10-17 22:05:26	112	anagram.clj
1400	39	ab57900087d91b082c7b41d6	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Occurrences.new) { |word, occurrences| occurrences << word }\n  end\n\n  def words\n    normalize(@phrase).scan(/\\w+(?:'\\w)?/)\n  end\n\n  private\n\n  def normalize(string)\n    string.downcase\n  end\n\n  class Occurrences < ::Hash\n    def initialize\n      super 0\n    end\n\n    def <<(key)\n      self[key] += 1\n    end\n  end\nend	\N	f	7	4	2014-02-23 09:25:10	2014-02-23 09:25:10	617	\N
229	19	5b696396763a5ce1f90cfc9b	done	ruby	space-age	class SpaceAge\n\n  EARTH   = 365.25\n  MERCURY = 0.2408467\n  VENUS   = 0.61519726\n  MARS    = 1.8808158\n  JUPITER = 11.862615\n  SATURN  = 29.447498\n  URANUS  = 84.016846\n  NEPTUNE = 164.79132\n\n  def initialize(age)\n    @age = age\n  end\n\n  def seconds\n    @age\n  end\n\n  def format(planet)\n    ((@age / (planet * 86400) / EARTH) * 100).round / 100.0\n  end\n\n  def on_earth\n    (@age / (EARTH * 86400) * 100).round / 100.0\n  end\n\n  def on_mercury\n    format(MERCURY)\n  end\n\n  def on_venus\n    format(VENUS)\n  end\n\n  def on_mars\n    format(MARS)\n  end\n\n  def on_jupiter\n    format(JUPITER)\n  end\n\n  def on_saturn\n    format(SATURN)\n  end\n\n  def on_uranus\n    format(URANUS)\n  end\n\n  def on_neptune\n    format(NEPTUNE)\n  end\nend	\N	f	2	2	2013-12-12 19:36:55	2013-12-12 19:36:55	105	\N
230	19	49c44aa4f7225f164ba246f6	superseded	python	bob	class Bob:\n  \n  def hey(self, text):\n    statement = _Statement(text)\n    \n    if text is None or statement.is_silence():\n      return 'Fine. Be that way!'\n    \n    if statement.is_shouting():\n      return 'Woah, chill out!'\n    \n    if statement.is_question():\n      return 'Sure.'\n    \n    return 'Whatever.'\n    \nclass _Statement:\n  \n  def __init__(self, text):\n    self._text = text\n  \n  def is_silence(self):\n    return len(self._text.strip()) == 0\n  \n  def is_question(self):\n    return self._text.endswith("?")\n  \n  def is_shouting(self):\n    return self._text.isupper()	\N	f	3	1	2013-09-09 00:36:05	2013-09-09 00:36:05	106	\N
231	19	18a2c2c335cf6b3be2390636	superseded	python	bob	class Bob(object):\n  def hey(self, text):\n    statement = _Statement(text)\n    \n    if text is None or statement.is_silence():\n      return 'Fine. Be that way!'\n    \n    if statement.is_shouting():\n      return 'Woah, chill out!'\n    \n    if statement.is_question():\n      return 'Sure.'\n    \n    return 'Whatever.'\n\n\nclass _Statement(object):\n  def __init__(self, text):\n    self._text = text\n  \n  def is_silence(self):\n    return len(self._text.strip()) == 0\n  \n  def is_question(self):\n    return self._text.endswith("?")\n  \n  def is_shouting(self):\n    return self._text.isupper()	\N	f	3	2	2013-11-27 04:18:05	2013-11-27 04:18:05	106	\N
232	19	5d98e45c6aca846ad06d3b15	done	python	bob	class Bob(object):\n  def hey(self, text):\n    statement = _Statement(text)\n    \n    if statement.is_silence():\n      return 'Fine. Be that way!'\n    \n    if statement.is_shouting():\n      return 'Woah, chill out!'\n    \n    if statement.is_question():\n      return 'Sure.'\n    \n    return 'Whatever.'\n\n\nclass _Statement(object):\n  def __init__(self, text):\n    self._text = text or " "\n  \n  def is_silence(self):\n    return self._text.isspace()\n  \n  def is_question(self):\n    return self._text.endswith("?")\n  \n  def is_shouting(self):\n    return self._text.isupper()	\N	f	2	4	2014-01-21 10:04:34	2014-01-21 10:04:34	106	\N
233	19	3a87dcb96fc250c31f4c8a31	superseded	python	bob	class Bob(object):\n  def hey(self, text):\n    statement = _Statement(text)\n    \n    if text is None or statement.is_silence():\n      return 'Fine. Be that way!'\n    \n    if statement.is_shouting():\n      return 'Woah, chill out!'\n    \n    if statement.is_question():\n      return 'Sure.'\n    \n    return 'Whatever.'\n\n\nclass _Statement(object):\n  def __init__(self, text):\n    self._text = text or " "\n  \n  def is_silence(self):\n    return self._text.isspace()\n  \n  def is_question(self):\n    return self._text.endswith("?")\n  \n  def is_shouting(self):\n    return self._text.isupper()	\N	f	7	3	2014-02-03 11:45:01	2014-02-03 11:45:01	106	\N
234	19	e7b5faa950b90010f92e2e85	pending	python	word-count	import re\nfrom collections import defaultdict\n\nclass Phrase(object):\n\n    def __init__(self, words):\n        self.words = words\n\n    def word_count(self):\n        word_count = defaultdict(lambda: 0)\n        for w in re.finditer('\\w+', self.words):\n            wkey = w.group().lower()\n            word_count[wkey] += 1\n        return word_count	\N	f	0	1	2013-10-19 09:56:33	2013-10-19 09:56:33	107	wordcount.py
235	19	29d2933411b7183a91134cc1	done	ruby	grains	class Grains\n  def initialize\n    @squares = (1..64).map {|s| 2**(s-1)}\n  end\n\n  def square(index)\n    @squares[index-1]\n  end\n\n  def total\n    @squares.reduce(:+)\n  end\nend	\N	f	2	1	2014-01-11 05:35:26	2014-01-11 05:35:26	108	\N
236	19	cf88046f55b2e9aff3ed4941	done	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    diff = 0\n    strand1.chars.each_with_index do |char1, index|\n      char2 = strand2[index]\n      diff += 1 if char2 && char1 != char2\n    end\n    diff\n  end\n\nend	\N	f	2	1	2013-10-10 10:34:34	2013-10-10 10:34:34	109	\N
237	19	2c81f6e04a51498ac5e4d7e6	hibernating	ruby	bob	class Bob\n  def hey(words)\n    @words = words\n    if anything?\n      "Fine. Be that way!"\n    elsif yelling?\n      "Woah, chill out!"\n    elsif question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def question?\n    @words[-1] == '?'\n  end\n\n  def yelling?\n    return false unless has_letters?\n    @words.upcase == @words\n  end\n\n  def anything?\n    @words.gsub(/\\s/, '').empty?\n  end\n\n  def has_letters?\n    !@words.gsub(/[\\d,?\\s]/, '').empty?\n  end\nend	\N	f	0	2	2013-09-29 00:40:47	2013-09-29 00:40:47	110	bob.rb
238	19	178aebad68990141c04dfb34	superseded	ruby	bob	class Bob\n  def hey(words)\n    @words = words\n    if anything?\n      "Fine. Be that way!"\n    elsif yelling?\n      "Woah, chill out!"\n    elsif question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def question?\n    @words[-1] == '?'\n  end\n\n  def yelling?\n    return false if @words.gsub(/\\?$/, '').to_i.to_s == @words.gsub(/\\?$/, '')\n    return false if @words.gsub(/[\\d,\\s]/, '').empty?\n    @words.upcase == @words\n  end\n\n  def anything?\n    @words.gsub(/\\s/, '').empty?\n  end\nend	\N	f	0	1	2013-12-09 10:48:40	2013-12-09 10:48:40	110	bob.rb
239	19	45ded514794cd725421b0d93	hibernating	javascript	word-count	'use strict';\n\nvar Words = function (words) {\n\n  function normalizeWords(str) {\n    var str = str.replace(/[^\\w\\s]|_\\s+/g, "").toLowerCase();\n    var str2 = str.split(" ");\n    var str3 = str2.filter(function(v){\n      return v!=='';\n    });\n    return str3;\n  }\n\n  function countWords(words) {\n    var wordCountHash = {},\n    splitWords = normalizeWords(words);\n    for ( var i = 0; i < splitWords.length; i ++) {\n      if ( wordCountHash[splitWords[i]] ) {\n        wordCountHash[splitWords[i]]++;\n      }\n      else {\n        wordCountHash[splitWords[i]] = 1;\n      }\n    }\n    return wordCountHash;\n  }\n\n  Words.prototype.count = countWords(words);\n};\n\nmodule.exports = Words;	\N	f	3	1	2014-01-21 10:04:33	2014-01-21 10:04:33	111	\N
1162	43	d566e65c27b28c916deee107	done	ruby	hamming	module Hamming\n  def self.compute(a_strand, b_strand)\n    a_strand.chars.zip(b_strand.chars).inject(0) do |ham_distance, pair|\n      ham_distance += pair.compact.uniq.length - 1\n    end\n  end\nend	\N	f	1	1	2014-01-20 15:59:24	2014-01-20 15:59:24	515	\N
1401	39	1c2a5ac031fa77d217a739c6	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, occurrences| occurrences[word] += 1 }\n  end\n\n  def words\n    normalize(@phrase).scan(/\\w+(?:'\\w)?/)\n  end\n\n  private\n\n  def normalize(string)\n    string.downcase\n  end\nend	\N	f	3	5	2014-03-07 00:45:56	2014-03-07 00:45:56	617	\N
242	19	0073167ecea6013ebe104c9d	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (foldl')\nimport Data.Map.Strict (Map, empty, fromList, insertWith)\n\nnucleotides = ['A', 'C', 'G', 'T']\n\ncount :: Char -> [Char] -> Int\ncount t _ | not (t `elem` ('U' : nucleotides)) =\n    error ("invalid nucleotide '" ++ [t] ++ "'")\ncount t (x:xs) = count t xs + if x == t then 1 else 0\ncount _ [] = 0\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts =\n    let zeroes = fromList [(x, 0) | x <- nucleotides]\n    in foldl' (\\counts c -> insertWith (+) c 1 counts) zeroes	\N	f	0	2	2014-02-19 10:00:20	2014-02-19 10:00:20	113	\N
243	19	a5b8e2b1e64c6325edb22a03	done	clojure	rna-transcription	(ns dna)\n\n(def dna-rna {\\A \\A, \\C \\C, \\G \\G, \\T \\U})\n\n(defn to-rna [dna-str]\n  (apply str (map dna-rna (seq dna-str)))\n)	\N	f	0	1	2013-10-24 10:32:08	2013-10-24 10:32:08	114	\N
244	19	aed62f287c4e9ad9e6f850ad	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-respnse "Whatever.")\n\n(defn silence? [phrase]\n  (clojure.string/blank? phrase))\n\n(defn shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn question? [phrase]\n  (and (not (shout? phrase))\n       (re-find #"\\?$" phrase)))\n\n(defn response-for [phrase]\n  (cond\n   (silence? phrase) silence-response\n   (question? phrase) question-response\n   (shout? phrase) shout-response\n   :else default-respnse))	\N	f	0	3	2013-09-13 15:59:51	2013-09-13 15:59:51	115	\N
245	19	20a16852fb6c8ad9945672c9	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-respnse "Whatever.")\n\n(defn silence? [phrase]\n  (clojure.string/blank? phrase))\n\n(defn shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn question? [phrase]\n  (and (not (shout? phrase))\n       (re-find #"\\?$" phrase)))\n\n\n(defn response-for [phrase]\n  (if (question? phrase)\n    question-response\n    (if (shout? phrase)\n      shout-response\n      (if (silence? phrase)\n        silence-response\n        default-respnse))))	\N	f	2	1	2013-10-27 09:21:04	2013-10-27 09:21:04	115	\N
246	19	9c909e3b9c35c2e75276afab	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-respnse "Whatever.")\n\n(defn silence? [phrase]\n  (clojure.string/blank? phrase))\n\n(defn shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn question? [phrase]\n  (and (not (shout? phrase))\n       (re-find #"\\?$" phrase)))\n\n(defn response-for [phrase]\n  (if (question? phrase)\n    question-response\n    (if (shout? phrase)\n      shout-response\n      (if (silence? phrase)\n        silence-response\n        default-respnse))))	\N	f	0	2	2013-10-30 18:37:55	2013-10-30 18:37:55	115	\N
247	19	0c2bd2cde12022dc5c1951ce	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-respnse "Whatever.")\n\n(defn silence? [phrase]\n  (clojure.string/blank? phrase))\n\n(defn shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn question? [phrase]\n  (re-find #"\\?$" phrase))\n\n(defn response-for [phrase]\n  (cond\n   (silence? phrase) silence-response\n   (shout? phrase) shout-response\n   (question? phrase) question-response\n   :else default-respnse))	\N	f	1	4	2013-11-12 21:53:44	2013-11-12 21:53:44	115	\N
248	19	cd6a1d18bf824b9f43764c6e	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-response "Whatever.")\n\n(defn silence? [phrase]\n  (str/blank? phrase))\n\n(defn shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn question? [phrase]\n  (re-find #"\\?$" phrase))\n\n(defn response-for [phrase]\n  (cond\n   (silence? phrase) silence-response\n   (shout? phrase) shout-response\n   (question? phrase) question-response\n   :else default-response))	\N	f	4	5	2014-02-03 05:23:33	2014-02-03 05:23:33	115	\N
249	19	1a581676072244e7aad27e76	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(def silence-response "Fine. Be that way!")\n\n(def shout-response "Woah, chill out!")\n\n(def question-response "Sure.")\n\n(def default-response "Whatever.")\n\n(defn- silence? [phrase]\n  (str/blank? phrase))\n\n(defn- shout? [phrase]\n  (and (not (silence? phrase))\n       (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn- question? [phrase]\n  (re-find #"\\?$" phrase))\n\n(defn response-for [phrase]\n  (cond\n   (silence? phrase) silence-response\n   (shout? phrase) shout-response\n   (question? phrase) question-response\n   :else default-response))	\N	f	1	6	2014-02-14 04:08:16	2014-02-14 04:08:16	115	\N
250	19	3126483fd54fe128aa8854bf	done	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(defn- silence? [phrase]\n  (str/blank? phrase))\n\n(defn- shout? [phrase]\n  (and (not (= phrase (str/lower-case phrase)))\n       (= phrase (str/upper-case phrase))))\n\n(defn- question? [phrase]\n  (re-find #"\\?$" phrase))\n\n(defn response-for [phrase]\n  (cond\n   (silence? phrase) "Fine. Be that way!"\n   (shout? phrase) "Woah, chill out!"\n   (question? phrase) "Sure."\n   :else "Whatever."))	\N	f	2	7	2014-03-05 11:10:45	2014-03-05 11:10:45	115	\N
251	19	f2970d6a89d607ccf2c1f911	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n  end\n\n  def reset\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n      (0...3).map{ (0..9).to_a[rand(10)] }.join\n  end\n\nend	\N	f	0	1	2013-09-23 13:07:38	2013-09-23 13:07:38	116	\N
252	19	eed2dc6c3a602f7a91751cba	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    candidate = (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n      (0...3).map{ (0..9).to_a[rand(10)] }.join\n    if @@all_names.include? candidate\n      raise CollisionError\n    end\n  end\n\nend	\N	f	0	2	2013-10-04 11:36:43	2013-10-04 11:36:43	116	\N
1402	39	6d356843a43740bed194a227	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, occurrences|\n      occurrences[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    @phrase.downcase.scan(/[\\w']+/)\n  end\nend	\N	f	0	7	2014-03-07 05:29:47	2014-03-07 05:29:47	617	\N
1403	39	bdf043fefb0118aa3a4631e2	done	ruby	bob	class Bob\n  def hey(input)    \n    case Sentence.new(input)\n    when is(:silence?)\n      'Fine. Be that way!'\n    when is(:shouting?)\n      'Woah, chill out!'\n    when is(:question?)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  def is(method_name)\n    method_name.to_proc\n  end\nend\n\nclass Sentence\n  def initialize(input)\n    @input = input.to_s\n  end\n\n  def silence?\n    @input.strip.empty?\n  end\n\n  def shouting?\n    @input == @input.upcase\n  end\n\n  def question?\n    @input.end_with?("?")\n  end  \nend	\N	f	2	3	2014-02-10 12:20:44	2014-02-10 12:20:44	618	\N
1468	36	32507740507999df0633fa9a	superseded	ruby	etl	class ETL\n  class << self\n    def transform(dataset)\n      dataset.inject({}) do |store, item|\n        letters = item.last\n        point = item.first\n\n        letters.each {|v| store[v.downcase] = point }\n        store\n      end\n    end\n  end\nend	\N	f	4	2	2014-02-17 15:30:40	2014-02-17 15:30:40	649	etl.rb
254	19	7598f83c958e398e44e4b0da	done	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  # private\n\n  def random_name\n    candidate = ""\n    loop do\n      candidate = gen_name [ 'a'..'z', 'a'..'z', '0'..'9', '0'..'9', '0'..'9' ]\n      break unless @@all_names.include? candidate\n    end\n    candidate\n  end\n\n  def gen_name pat\n    pat.each_with_object([]) { |p, a|\n      v2 = p.to_a\n      a << v2[Random.rand(v2.size)]\n    }.join\n  end\n\n\nend	\N	f	2	4	2014-02-26 07:27:25	2014-02-26 07:27:25	116	\N
255	19	02130c33657961fe7f2cd49e	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntype DNA = String\ntype RNA = String\n\ntoRNA :: DNA -> RNA\ntoRNA = map transcribeBase\n  where transcribeBase 'T' = 'U'\n        transcribeBase b = b	\N	f	1	1	2013-12-22 12:14:07	2013-12-22 12:14:07	117	\N
256	19	face6a29f2cc6ce826d576e8	done	javascript	anagram	String.prototype.sort = function() {\r\n    return this.split("").sort().join("");\r\n};\r\n\r\nvar Anagram = function(word) {\r\n\r\n    this.match = function(candidates) {\r\n        return candidates.filter(function(candidate) {\r\n            return word != candidate && word.toLowerCase().sort() == candidate.toLowerCase().sort();\r\n        });\r\n    };\r\n\r\n};\r\n\r\nmodule.exports = Anagram;\r	\N	f	2	1	2014-01-12 09:35:58	2014-01-12 09:35:58	118	\N
257	24	429439979bd3f409c320704c	superseded	ruby	anagram	class Anagram\n\n  attr_reader :subject\n  def initialize(subject)\n    @subject = subject.downcase\n  end\n\n  def match(tests)\n    tests.select { |test| anagram_of?(test) }\n  end\n\n  private\n\n  def anagram_of?(s)\n    standardize(s) == standardize(subject) && !duplicate?(s)\n  end\n\n  def standardize(s)\n    s.downcase.chars.sort\n  end\n\n  def duplicate?(s)\n    s.downcase == subject.downcase\n  end\n\nend	\N	f	2	1	2013-10-24 15:05:15	2013-10-24 15:05:15	119	\N
258	24	673230236ccc642ce6cb6841	done	ruby	anagram	class Anagram\n\n  attr_reader :subject\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(tests)\n    tests.select { |test| anagram_of?(test) }\n  end\n\n  private\n\n  def anagram_of?(s)\n    standardize(s) == standardize(subject) && !duplicate?(s)\n  end\n\n  def standardize(s)\n    s.downcase.chars.sort\n  end\n\n  def duplicate?(s)\n    s.downcase == subject.downcase\n  end\n\nend	\N	f	0	2	2013-12-03 05:16:00	2013-12-03 05:16:00	119	anagram.rb
260	24	97eadabc17a6de91789e68a1	done	ruby	nucleotide-count	class DNA\n  \n  def initialize(sequence)\n    @sequence = sequence.chars \n    @dna_collection = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    @valid_nucleotides = %w(A T C G U)\n    validate_dna(@sequence)\n  end\n\n  def count(nucleotide)\n    @valid_nucleotides.include?(nucleotide) ?\n      @sequence.count(nucleotide) : wrong_argument\n  end\n\n  def nucleotide_counts\n    @sequence.each do |nucleotide|\n      @dna_collection[nucleotide] += 1\n    end\n    @dna_collection\n  end\n\n\n  private\n\n  def validate_dna(sequence)\n    @sequence.each do |nucleotide|\n      wrong_argument unless @dna_collection.keys.include?(nucleotide)\n    end\n  end\n\n  def wrong_argument\n    raise ArgumentError\n  end\nend	\N	f	0	2	2014-01-02 06:20:37	2014-01-02 06:20:37	120	\N
261	24	523475cd866f800908d97ff5	superseded	ruby	bob	class Bob\n  def hey(words)\n    if nothing?(words)\n      "Fine. Be that way."\n    elsif shouting?(words)\n      "Woah, chill out!"\n    elsif question?(words)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def nothing?(words)\n    words.nil? || words == ""\n  end\n\n  def shouting?(words)\n    words == words.upcase\n  end\n\n  def question?(words)\n    words.end_with?("?")\n  end\nend	\N	f	2	3	2013-10-16 02:05:21	2013-10-16 02:05:21	121	\N
262	24	de0a500928ee929b9e969c20	superseded	ruby	bob	class Bob\n  def hey(words)\n    if nothing?(words)\n      "Fine. Be that way."\n    elsif shouting?(words)\n      "Woah, chill out!"\n    elsif question?(words)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def nothing?(words)\n    words.nil? || words.empty?\n  end\n\n  def shouting?(words)\n    words == words.upcase\n  end\n\n  def question?(words)\n    words.end_with?("?")\n  end\nend	\N	f	2	4	2013-11-08 00:53:29	2013-11-08 00:53:29	121	\N
263	24	d48f290261b16f6ff85d3393	superseded	ruby	bob	class Bob\n  def hey words\n    if words.nil? || words == ""\n      "Fine. Be that way."\n    elsif words == words.upcase\n      "Woah, chill out!"\n    elsif words.chars.last == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	0	1	2013-11-13 04:28:24	2013-11-13 04:28:24	121	\N
264	24	153c80aa91c76c82cb6fb909	superseded	ruby	bob	class Bob\n  def hey(words)\n    if nothing?(words)\n      "Fine. Be that way."\n    elsif shouting?(words)\n      "Woah, chill out!"\n    elsif question?(words)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def nothing?(words)\n    words.nil? || words == ""\n  end\n\n  def shouting?(words)\n    words == words.upcase\n  end\n\n  def question?(words)\n    words[-1] == "?"\n  end\nend	\N	f	4	2	2014-01-10 05:59:39	2014-01-10 05:59:39	121	\N
265	24	2a6707bbbf01247877f81d37	done	ruby	bob	class Bob\n  def hey(words)\n    request = Request.new(words)\n\n    if request.nothing?\n      "Fine. Be that way."\n    elsif request.shouting?\n      "Woah, chill out!"\n    elsif request.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Request\n  def initialize(words)\n    @words = words\n  end\n\n  def nothing?\n    @words.nil? || @words.empty?\n  end\n\n  def shouting?\n    @words == @words.upcase\n  end\n\n  def question?\n    @words.end_with?("?")\n  end\nend	\N	f	5	5	2014-01-15 22:31:38	2014-01-15 22:31:38	121	\N
266	24	e43d9cca502f78bbda5389e3	done	clojure	leap	(defn- divisible-by? [number divisor]\n  (zero? (mod number divisor)))\n\n(defn- quadricentennial? [year]\n  (divisible-by? year 400))\n\n(defn- centennial? [year]\n  (divisible-by? year 100))\n\n(defn- quadrennial? [year]\n  (divisible-by? year 4))\n\n(defn leap-year \n  "Whether or not the given year is a leap year."\n  [year]\n  (condp #(%1 %2) year\n    quadricentennial? true\n    centennial?       false\n    quadrennial?      true\n                      false))	\N	f	2	1	2013-08-29 23:38:47	2013-08-29 23:38:47	122	\N
1405	39	284d78fc370cd4d37e82deac	superseded	ruby	bob	class Bob\n  def hey(input)\n    case input\n    when :nil?, :silence?\n      'Fine. Be that way!'\n    when :shouting?\n      'Woah, chill out!'\n    when :question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end  \nend\n\nclass String\n  def silence?\n    self !~ /\\S/\n  end\n  def shouting?\n    self == self.upcase\n  end\n\n  def question?\n    end_with?("?")\n  end\nend\n\nclass Symbol\n  alias :original_triple_equals :"==="\n\n  def ===(object)\n    original_triple_equals(object) ||\n      (object.respond_to?(self) && object.__send__(self))\n  end\n\nend	\N	f	0	1	2014-03-07 22:59:22	2014-03-07 22:59:22	618	\N
1406	39	43218d4f2cb49e2cc287ed58	superseded	ruby	scrabble-score	class Scrabble\n\n  POINTS = {\n    a: 1, b: 3, c: 3,\n    d: 2, e: 1, f: 4,\n    g: 2, h: 4, i: 1,\n    j: 8, k: 5, l: 1,\n    m: 3, n: 1, o: 1,\n    p: 3, q: 10, r: 1,\n    s: 1, t: 1, u: 1,\n    v: 4, w: 4, x: 8,\n    y: 4, z: 10\n  }\n\n  def self.score word\n    Scrabble.new(word).score\n  end\n\n  def initialize word\n    @word = word.to_s.strip.downcase\n  end\n\n  def score\n    sum = 0\n    @word.split('').each do |char|\n      sum += POINTS[char.to_sym]\n    end\n    sum\n  end\nend	\N	f	2	1	2014-02-07 09:18:44	2014-02-07 09:18:44	619	scrabble.rb
1407	39	ac7de60d4fd500fe097b8cf3	superseded	ruby	scrabble-score	class Scrabble\n\n  POINTS = {\n    a: 1, b: 3, c: 3,\n    d: 2, e: 1, f: 4,\n    g: 2, h: 4, i: 1,\n    j: 8, k: 5, l: 1,\n    m: 3, n: 1, o: 1,\n    p: 3, q: 10, r: 1,\n    s: 1, t: 1, u: 1,\n    v: 4, w: 4, x: 8,\n    y: 4, z: 10\n  }\n\n  def self.score word\n    Scrabble.new(word).score\n  end\n\n  def initialize word\n    @word = word.to_s.strip.downcase\n  end\n\n  def score\n    @word.split('').reduce(0) do |sum, char|\n      sum + POINTS[char.to_sym]\n    end\n  end\nend	\N	f	2	2	2014-02-07 10:33:49	2014-02-07 10:33:49	619	scrabble.rb
268	24	4f8540c07ea64e903f3a25ee	done	ruby	robot-name	class Robot\n  ALPHABET = ('A'..'Z').to_a\n  NUMERIC  = (1..9).to_a\n  \n  def reset\n    @last_name = @name\n    @name      = nil\n  end\n\n  def name\n    @name ||= generate_name\n  end\n\n  private\n  def generate_name\n    alph = ALPHABET.dup.shuffle[0,2].join\n    num  = NUMERIC.dup.shuffle[0,3].join\n    result = "#{alph}#{num}"\n    result = generate_name if result == @last_name\n    result\n  end\nend	\N	f	1	1	2014-01-18 04:52:28	2014-01-18 04:52:28	124	\N
269	24	33fe1035d5ed9fc5eb7c78d7	superseded	ruby	grains	class Grains\n\n\tdef square (position, amount = 1, currentposition = 1)\n\t\tif currentposition == position\n\t\t\treturn amount\n\t\tend\n\n\t\treturn square(position, amount * 2, currentposition + 1)\n\tend\n\n\tdef total (totalamount = 0, amount = 1, currentposition = 1)\n\t\tif currentposition == 65\n\t\t\treturn totalamount\n\t\tend\n\n\t\treturn total(totalamount + amount, amount * 2, currentposition + 1)\n\tend\nend	\N	f	2	1	2013-11-01 01:57:17	2013-11-01 01:57:17	125	grains.rb
271	24	551d158cbda5b92cd65a7dc8	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    diff_count = 0\n    [a.length,b.length].min.times do |i|\n      diff_count += ((a[i]==b[i])?0:1)\n    end\n    diff_count\n  end\nend	\N	f	0	1	2013-08-21 20:12:20	2013-08-21 20:12:20	126	\N
272	24	d3f4ba358f53091dd689485c	done	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self.word_signature = self.get_signature(word)\n\n    def match(self, candidates):\n        return [c for c in candidates if self.is_anagram(c)]\n\n    def is_anagram(self, candidate):\n        if candidate == self.word:\n            # Word is not anagram to itself\n            return False\n\n        return self.word_signature == self.get_signature(candidate)\n\n    def get_signature(self, word):\n        return Counter(list(word.lower()))	\N	f	2	1	2013-09-19 23:35:45	2013-09-19 23:35:45	127	\N
273	24	7de14a0e8d58e9b26189a999	done	ruby	leap	class Year\n\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    regular_leap? && !century? || millenium?\n  end\n\n  def regular_leap?\n    year % 4 == 0\n  end\n\n  def century?\n    year % 100 == 0\n  end\n\n  def millenium?\n    year % 1000 == 0\n  end\nend	\N	f	2	1	2013-09-29 10:50:53	2013-09-29 10:50:53	128	\N
275	24	75828ce0493989df28346b4e	superseded	haskell	beer-song	module Beer where\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, " ++\n          "no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, " ++\n          "99 bottles of beer on the wall.\\n"\n\nverse 1 = "1 bottle of beer on the wall, " ++\n          "1 bottle of beer.\\n" ++\n          "Take it down and pass it around, " ++\n          "no more bottles of beer on the wall.\\n"\n\nverse 2 = "2 bottles of beer on the wall, " ++\n          "2 bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          "1 bottle of beer on the wall.\\n"\n\nverse n = show n ++ " bottles of beer on the wall, " ++\n          show n ++ " bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = intercalate "\\n" verses ++ "\\n" where\n  verses = map verse [x, (x - 1)..y]	\N	f	2	2	2013-12-05 20:29:21	2013-12-05 20:29:21	129	\N
276	24	744c042c4756cd3a64b5c8eb	superseded	haskell	beer-song	module Beer where\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++  show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = intercalate "\\n" verses ++ "\\n" where\n  verses = map verse [x, (x - 1)..y]	\N	f	4	1	2014-01-10 05:19:32	2014-01-10 05:19:32	129	\N
277	24	df69a61734a3ede3e1dfabb0	done	haskell	rna-transcription	module DNA\n( toRNA\n) where\n\ntoRNA :: String -> String\ntoRNA = map tr\n  where tr 'T' = 'U'\n        tr x   = x	\N	f	0	1	2013-09-08 18:50:22	2013-09-08 18:50:22	130	\N
278	24	96b7029030d82c2b47637449	superseded	ruby	word-count	class Phrase\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def word_count\n    words.each_with_object(zeroed_hash) do |word, hash|\n      hash[word] += 1\n    end\n  end\n\n  private\n\n  def zeroed_hash\n    Hash.new(0)\n  end\n\n  def words\n    word.scan(/\\w+/).map &:downcase\n  end\nend	\N	f	2	3	2013-11-14 15:37:30	2013-11-14 15:37:30	131	\N
279	24	7f2c9240c32abd3b64d193e2	superseded	ruby	word-count		\N	f	2	2	2013-12-20 14:47:48	2013-12-20 14:47:48	131	\N
304	18	86b91c247e5e15635e392516	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words), do: Enum.reduce words, [], increment_score(&1, &2)\n\n  defp increment_score(word, scores), do: Dict.update(scores, word, 1, &1 + 1)\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	4	7	2014-02-20 23:27:51	2014-02-20 23:27:51	139	\N
1408	39	139d101c09feca2e6f0c1473	pending	ruby	scrabble-score	class Scrabble\n\n  POINTS = {\n    a: 1, b: 3, c: 3,\n    d: 2, e: 1, f: 4,\n    g: 2, h: 4, i: 1,\n    j: 8, k: 5, l: 1,\n    m: 3, n: 1, o: 1,\n    p: 3, q: 10, r: 1,\n    s: 1, t: 1, u: 1,\n    v: 4, w: 4, x: 8,\n    y: 4, z: 10\n  }\n\n  def self.score word\n    Scrabble.new(word).score\n  end\n\n  def initialize word\n    @word = word.to_s.strip.downcase\n  end\n\n  def score\n    @word.split('').map {|item| POINTS[item.to_sym] }.reduce(0) { |sum, val| sum + val }\n  end\nend	\N	f	2	3	2014-02-12 15:34:01	2014-02-12 15:34:01	619	scrabble.rb
1409	39	a33062131ef1b8a74706b5bc	done	ruby	leap	require 'date'\n\n# I couldn't resist :)\nclass Year < Date; end	\N	f	4	1	2014-02-03 23:57:15	2014-02-03 23:57:15	620	\N
281	24	44d67396dbb227836a69d00f	done	ruby	word-count	class Phrase\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, hash|\n      hash[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    word.scan(/\\w+/).map &:downcase\n  end\nend	\N	f	0	4	2014-01-28 00:19:54	2014-01-28 00:19:54	131	\N
282	18	2b17b650aa5d53b420190951	done	ruby	bob	class Bob\n\n  REPONSES = {\n    empty: "Fine. Be that way!",\n    yieling: 'Woah, chill out!',\n    question: "Sure."\n  }\n\n  def hey what\n    text_type =  Analiser.string_type what\n    REPONSES.fetch text_type, "Whatever."\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	2	6	2013-07-23 16:33:50	2013-07-23 16:33:50	132	\N
283	18	2ebe3fc79c6b4e384c42b201	superseded	ruby	bob	class Bob\n\n  REPONSE = {\n    empty: "Fine. Be that way!",\n    yieling: 'Woah, chill out!',\n    question: "Sure."\n  }\n\n  def hey what\n    text_type =  Analiser.string_type what\n    REPONSES.fetch text_type, "Whatever."\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	2	5	2013-09-27 21:53:16	2013-09-27 21:53:16	132	\N
284	18	f28c6d1d8ce2f79bf3b98ffe	superseded	ruby	bob	class Bob\n  def hey what\n    what = what.gsub(/\\d/, '')\n    return "Fine. Be that way!" if what.gsub(' ', '') == ''\n\n    if what =~ /\\w/ && what == what.upcase \n      'Woah, chill out!'\n    else \n      if what[-1]['?']\n        "Sure."\n      else\n        "Whatever."\n      end\n    end\n  end\nend	\N	f	1	1	2013-10-08 23:10:01	2013-10-08 23:10:01	132	\N
285	18	2155e269a11b2d913a5e9347	superseded	ruby	bob	class Bob\n  def hey what\n    case Analiser.string_type what\n    when :empty then "Fine. Be that way!"\n    when :yieling then 'Woah, chill out!'\n    when :question then "Sure."\n    else "Whatever."\n    end\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	2	4	2013-10-10 11:02:40	2013-10-10 11:02:40	132	\N
286	18	a96359be74758e79a4d4e474	superseded	ruby	bob	class Bob\n  def hey what\n    what = what.gsub(/\\d/, '')\n\n    case\n    when what.strip == '' then "Fine. Be that way!"\n    when what =~ /\\w/ && what == what.upcase then 'Woah, chill out!'\n    when what[-1]['?'] then "Sure."\n    else "Whatever."\n    end\n  end\nend	\N	f	2	2	2013-11-08 06:39:28	2013-11-08 06:39:28	132	\N
287	18	c3b4fa6ee40ff1d0f36f8c10	superseded	ruby	bob	class Bob\n  def hey what\n    case Analiser.string_type what\n    when :empty then "Fine. Be that way!"\n    when :yieling then 'Woah, chill out!'\n    when :question then "Sure."\n    else "Whatever."\n    end\n  end\nend\n\nmodule Analiser\n\n  def string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def empty? text\n    text.strip == ''\n  end\n\n  def yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def question? text\n    string[-1]['?']\n  end\nend	\N	f	0	3	2013-12-07 10:16:45	2013-12-07 10:16:45	132	\N
289	18	cbe43db29eac248dc2f55895	hibernating	python	bob	class Bob(object):\n    """Bob is a lackadaisical teenager who really doesn't say much."""\n\n    def hey(self, message):\n        """Returns an appropriate response to the message"""\n\n        if self.isquiet(message):\n            return "Fine. Be that way!"\n\n        # As per tests, yell takes precedence over question.\n        if self.isyell(message):\n            return "Woah, chill out!"\n\n        if self.isquestion(message):\n            return "Sure."\n\n        return "Whatever."\n\n    def isquiet(self, message):\n        return not message or not message.strip()\n\n    def isyell(self, message):\n        return message.isupper()\n\n    def isquestion(self, message):\n        return message.endswith('?')	\N	f	5	2	2014-01-27 18:43:32	2014-01-27 18:43:32	133	\N
290	18	c2d561beefe068d90e30642b	done	javascript	rna-transcription	var toRna = function(dna) {\n\n  'use strict'\n\n  function transcribed(string) {\n    return string.replace(/T/g, 'U')\n  };\n\n  return transcribed(dna);\n\n};\n\nmodule.exports = toRna;	\N	f	2	1	2013-09-29 18:47:48	2013-09-29 18:47:48	134	\N
291	18	21cf2541ac5c00f649f37999	done	elixir	nucleotide-count	defmodule DNA do\n  @moduledoc """\n  Count nucleotides in a DNA sequence in several different ways.\n  """\n\n  @doc """\n  Count the number of times a particular nucleotide occurs in the DNA string.\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(dna, nt) do\n    # A list of characters is passed, so there's an easy Enumerable\n    # implementation.\n    Enum.count(dna, &(&1 == nt))\n  end\n\n  @nucleotides 'ATCG'\n  \n  @doc """\n  Return a new HashDict with the count of every nucleotide.\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(dna) do\n    Enum.reduce(dna, HashDict.new(Enum.map(@nucleotides, &{&1, 0})), fn nt, counts ->\n      Dict.update(counts, nt, 0, &(&1+1))\n    end)\n  end\nend	\N	f	2	1	2013-08-24 14:15:22	2013-08-24 14:15:22	135	\N
1410	39	cbc14ae7350f4ab4e6727dc7	done	ruby	raindrops	require 'prime'\n\nclass Raindrops\n  def initialize\n    @prime_factors = []\n  end\n\n  def convert( number )\n    get_prime_factors( number )\n\n    rain_sounds = ""\n\n    @prime_factors.each do | drop |\n      case\n    when drop == 3\n      rain_sounds += "Pling"\n    when drop == 5\n      rain_sounds += "Plang"\n    when drop == 7\n      rain_sounds += "Plong"\n    end\n    end\n\n    rain_sounds += "#{ number }" if rain_sounds.empty?\n\n    rain_sounds\n  end\n\n  private\n  def get_prime_factors( number )\n    if number.prime?\n      add_prime_number( number )\n    else\n      (2..number).each do |divide_me|\n        if number % divide_me == 0\n          add_prime_number( divide_me ) if divide_me.prime?\n\n          get_prime_factors( number / divide_me)\n          break\n        end\n      end\n    end\n  end\n\n  def add_prime_number( number )\n    @prime_factors << number unless @prime_factors.include?( number )\n  end\nend	\N	f	1	1	2014-02-26 05:54:09	2014-02-26 05:54:09	621	raindrops.rb
1411	39	9f3abb68ed0e9c519f45565a	superseded	ruby	hamming	class Hamming\n  \n  def self.compute(a, b)\n    Hamming.new(a,b).distance\n  end\n\n  def initialize(a,b)\n    @a, @b = a, b \n  end\n\n  def distance\n    @distance ||= indexes.map { |idx| different_at?(idx) ? 1 : 0 }.reduce(0,:+)\n  end\n\n  private\n\n  def indexes\n    (0..@a.length-1)\n  end\n \n  def different_at?(idx)\n    @b[idx] != @a[idx] && @b[idx].nil? == false \n  end  \nend	\N	f	1	1	2014-01-25 21:44:05	2014-01-25 21:44:05	622	\N
293	18	4c1d389e6b89ed8bba594e76	superseded	go	word-count	package wc\n\nimport (\n    "reflect"\n    "strings"\n)\n\ntype Histogram map[string]int\n\nfunc (h Histogram) Equal(other Histogram) bool {\n    return reflect.DeepEqual(h, other)\n}\n\nfunc WordCount(str string) Histogram {\n    result := make(Histogram)\n    strs := strings.Fields(str)\n    for _, v := range strs {\n        l_str := strings.ToLower(v)\n        result[l_str]++\n    }\n    return result\n}	\N	f	2	1	2013-10-14 18:01:36	2013-10-14 18:01:36	136	\N
294	18	2d5b568c9437a3f764aa0964	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\toutput := make(map[string]int)\n\tfor score, letters := range input {\n\t\tfor _, letter := range letters {\n\t\t\toutput[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn output\n}	\N	f	0	1	2013-09-08 04:45:51	2013-09-08 04:45:51	137	\N
295	18	35520eb00d6fc306e3b32e21	superseded	javascript	nucleotide-count	var DNA = (function(){\n  "use strict"\n  var NucleotideTypes = "ATCGU";\n  \n  var validateNucleotide = function(nucleotide){\n    return NucleotideTypes.indexOf(nucleotide) >= 0;\n  }\n  \n  var countNucleotides = function(strand){\n    var nucleotideCounts = { A: 0, T: 0, C: 0, G: 0};\n    for (var i = 0; i < strand.length; i++) {\n      nucleotideCounts[strand[i]] += 1;\n    }\n    return nucleotideCounts;\n  }\n  \n  function DNA(strand){\n    if(strand == undefined) strand = '';\n    this.nucleotideCounts = countNucleotides(strand.split(''));\n  }\n  DNA.prototype.count = function(nucleotide){\n    if(!validateNucleotide(nucleotide)) throw "Invalid Nucleotide";\n    return this.nucleotideCounts[nucleotide] || 0; \n  };\n  \n  return DNA\n})();\n\nmodule.exports = DNA;	\N	f	2	1	2013-08-18 04:19:35	2013-08-18 04:19:35	138	\N
296	18	af229045bb27d32d367da477	done	javascript	nucleotide-count	var DNA = (function(){\n  "use strict"\n  var NUCLEOTIDE_TYPES = "ATCGU";\n  \n  var isValidNucleotide = function(nucleotide){\n    return NUCLEOTIDE_TYPES.indexOf(nucleotide) >= 0;\n  }\n  \n  var countNucleotides = function(strand){\n    var nucleotideCounts = { A: 0, T: 0, C: 0, G: 0};\n    for (var i = 0; i < strand.length; i++) {\n      nucleotideCounts[strand[i]] += 1;\n    }\n    return nucleotideCounts;\n  }\n  \n  function DNA(strand){\n    if(strand == undefined) strand = '';\n    this.nucleotideCounts = countNucleotides(strand.split(''));\n  }\n  DNA.prototype.count = function(nucleotide){\n    if(!isValidNucleotide(nucleotide)) throw "Invalid Nucleotide";\n    return this.nucleotideCounts[nucleotide] || 0; \n  };\n  \n  return DNA\n})();\n\nmodule.exports = DNA;	\N	f	2	2	2013-12-12 09:05:17	2013-12-12 09:05:17	138	nucleotide.js
297	18	9daf035456087012e68914ca	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words) do\n    Enum.reduce words, HashDict.new, increment_score(&1, &2)\n  end\n\n  defp increment_score(word, scores) do\n    Dict.update(scores, word, 1, &1 + 1)\n  end\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	2	6	2013-09-13 14:13:24	2013-09-13 14:13:24	139	\N
298	18	779c437ee64d2a33597fa2a5	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(elems) when is_list(elems) do\n    HashDict.new Enum.map Enum.uniq(elems), frequency(&1, elems)\n  end\n  defp frequency(elem, elems) do\n    { elem, Enum.count(elems, Kernel.==(&1, elem)) }\n  end\n\n  # Invert Regex.scan as if it were implemented on String\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	1	2	2013-09-23 14:12:35	2013-09-23 14:12:35	139	\N
299	18	23b17d37103b08d6a8a2bc9a	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(list), do: HashDict.new(Enum.uniq(list), frequency(&1, list))\n  defp frequency(member, list), do: { member, Enum.count(list, Kernel.==(&1, member)) }\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	0	3	2013-10-11 22:02:10	2013-10-11 22:02:10	139	\N
300	18	88b80f1f04f63a8b535e22a2	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase) do\n    phrase |> String.split |> normalize |> frequency\n  end\n\n  defp normalize(input) when is_list(input) do\n    input\n      |> Enum.map(normalize &1)\n      |> Enum.reject(empty &1)\n  end\n  defp normalize(input) when is_binary(input) do\n    Enum.join(\n      Regex.split(%r/[^a-z0-9]/, String.downcase(input))\n    )\n  end\n\n  defp frequency(elems) when is_list(elems) do\n    HashDict.new(\n      Enum.map(Enum.uniq(elems), frequency(&1, elems))\n    )\n  end\n  defp frequency(elem, elems) do\n    {elem, Enum.count(elems, fn(canidate) -> canidate == elem end)}\n  end\n\n  defp empty(string) when is_binary(string) do\n    String.length(string) == 0\n  end\n\nend	\N	f	0	1	2013-11-26 12:41:18	2013-11-26 12:41:18	139	\N
301	18	53d1d6113f922110827e9bab	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(list), do: HashDict.new(Enum.uniq(list), frequency(&1, list))\n  defp frequency(member, list), do: { member, Enum.count(list, &1 == member) }\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	2	4	2013-11-27 00:36:44	2013-11-27 00:36:44	139	\N
302	18	9f78046a9a733a0405e25792	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words) do\n    Enum.reduce words, HashDict.new, increment_score(&1, &2)\n  end\n\n  defp increment_score(word, scores) do\n    Dict.update(scores, word, 1, (fn val -> val + 1 end))\n  end\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	2	5	2013-12-15 19:43:22	2013-12-15 19:43:22	139	\N
303	18	e4e0fc4f9dd5fde16a4d0a25	done	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words), do: Enum.reduce(words, HashDict.new, increment_score(&1, &2))\n\n  defp increment_score(word, scores), do: Dict.update(scores, word, 1, &1 + 1)\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	3	8	2014-02-04 17:42:52	2014-02-04 17:42:52	139	\N
1412	39	b1ab9cbe6aa5980706c77973	done	ruby	hamming	class Hamming\n  \n  def self.compute(strand_a, strand_b)\n    Hamming.new(strand_a,strand_b).distance\n  end\n\n  def initialize(a,b)\n    @a, @b = a, b \n  end\n\n  def distance\n    @distance ||= indexes.count { |idx| different_at?(idx) } \n  end\n\n  private\n\n  def indexes\n    (0...[@a.length, @b.length].min)\n  end\n \n  def different_at?(idx)\n    @b[idx] != @a[idx]\n  end  \nend	\N	f	2	2	2014-02-06 12:06:35	2014-02-06 12:06:35	622	\N
1413	39	3715bd5f590df378bab1fbd7	superseded	ruby	rna-transcription	class DNA\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub("T", "U")\n  end\nend	\N	f	3	1	2014-01-25 14:53:04	2014-01-25 14:53:04	623	\N
307	18	768d79825e020d840d1913d3	done	ruby	meetup	class Meetup\n\tdef initialize(month, year)\n\t\t@month = month\n\t\t@year = year\n\tend\n\n\tORDERS = %w(first second third fourth)\n\n\tDate::DAYNAMES.each do |day| \n\t\tdefine_method("#{day.downcase.gsub('day', '')}teenth") do\n\t\t\tteenth(day.downcase)\n\t\tend\n\tend\n\n\n\tprivate\n\n\tdef teenth(day)\n\t\tDate.new(@year, @month, 13).step(Date.new(@year, @month, 19)).find(&:"#{day}?")\n\tend\n\n\n\tdef monthly\n\t\tDate.new(@year, @month, 13).step(Date.new(@year, @month, 19)).select {|d| d.monday?}\n\tend\n\nend	\N	f	2	2	2013-09-23 11:17:40	2013-09-23 11:17:40	141	\N
308	18	9ed62f2d257a03a8d1ea9a40	superseded	ruby	meetup	class Meetup\n\tdef initialize(month, year)\n\t\t@month = month\n\t\t@year = year\n\tend\n\n\tdef teenth(day)\n\n\tend\n\n\tdef monteenth\n\t\tDate.new(@year, @month, 13).step(Date.new(@year, @month, 19)).select {|d| d.monday?}\n\tend\nend	\N	f	2	1	2013-12-05 09:50:24	2013-12-05 09:50:24	141	\N
309	18	2c5e06640c45fa91f13cec89	done	javascript	bob	"use strict";\n\nvar Bob = function() {\n}\n\nBob.prototype.hey = function (text) {\n  return "Whatever.";\n}\n\nmodule.exports = Bob;	\N	f	0	1	2013-09-29 03:54:04	2013-09-29 03:54:04	142	bob.js
310	18	105f27405c5021b246a1de15	done	haskell	word-count	module WordCount (wordCount) where\n\nimport qualified Data.Map.Strict as Map\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map.Map String Integer\nwordCount = foldr (addWord . processWord) Map.empty . words\n    where\n        addWord "" = id\n        addWord w  = Map.alter (Just . maybe 1 (+1)) w\n        processWord = map toLower . filter isAlphaNum	\N	f	0	1	2013-08-25 08:37:56	2013-08-25 08:37:56	143	\N
311	18	640d5bd716dd9d99e4be6e6a	superseded	go	leap	package leap\n\nfunc is400Year(year int) (bool) {\n  return year % 400 == 0\n}\n\nfunc is100Year(year int) (bool) {\n  return year % 100 == 0\n}\n\nfunc is4Year(year int) (bool) {\n  return year % 4 == 0\n}\n\nfunc IsLeapYear(year int) (bool) {\n  return is400Year(year) || is4Year(year) && !is100Year(year)\n}	\N	f	2	1	2013-09-25 04:24:31	2013-09-25 04:24:31	144	\N
312	18	0379226b0aece0e42037a713	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn is400Year(year) || is4Year(year) && !is100Year(year)\n}\n\nfunc is400Year(year int) bool {\n\treturn year%400 == 0\n}\n\nfunc is100Year(year int) bool {\n\treturn year%100 == 0\n}\n\nfunc is4Year(year int) bool {\n\treturn year%4 == 0\n}	\N	f	2	2	2013-11-16 06:41:16	2013-11-16 06:41:16	144	\N
313	18	ef410413c9c655339a6a2f07	pending	python	rna-transcription	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nclass DNA(object):\n    d_dict = {'T': 'U', 'G': 'G', 'C': 'C'}\n\n    def __init__(self, input_):\n        self._input = input_\n\n    def to_rna(self):\n        return ''.join([self.d_dict.get(x, x) for x in self._input])	\N	f	2	1	2013-10-17 12:32:32	2013-10-17 12:32:32	145	dna.py
314	18	76023a22d4a219abe0dc1b10	superseded	clojure	nucleotide-count	(ns dna (:refer-clojure :exclude [count]))\n\n(def defaults {\\A 0 \\G 0 \\T 0 \\C 0})\n\n(defn nucleotide-counts [dna]\n  (merge defaults (frequencies dna)))\n\n(defn count [nucleotide dna]\n  (cond\n    (= nucleotide \\U) 0\n    (not-any? #(= nucleotide %1) (keys defaults)) (throw (Exception. "invalid nucleotide"))\n    :else ((nucleotide-counts dna) nucleotide)))	\N	f	2	1	2013-09-26 05:46:56	2013-09-26 05:46:56	146	\N
315	18	8e57cce9ab46729e84883ea0	superseded	clojure	nucleotide-count	(ns dna (:refer-clojure :exclude [count]))\n\n(def defaults {\\A 0 \\G 0 \\T 0 \\C 0})\n(def uracil \\U)\n\n(defn not-nucleotide? [suspect]\n  (not-any? #(= suspect %1) (keys defaults)))\n\n(defn nucleotide-counts [dna]\n  (merge defaults (frequencies dna)))\n\n(defn count [nucleotide dna]\n  (cond\n    (= nucleotide uracil) 0\n    (not-nucleotide? nucleotide) (throw (Exception. "invalid nucleotide"))\n    :else ((nucleotide-counts dna) nucleotide)))	\N	f	2	2	2013-10-15 16:52:03	2013-10-15 16:52:03	146	\N
316	18	5a22a6a185b9f20949f2463a	done	clojure	nucleotide-count	(ns dna (:refer-clojure :exclude [count]))\n\n(def defaults {\\A 0 \\G 0 \\T 0 \\C 0})\n(def uracil \\U)\n\n(defn- not-nucleotide? [suspect]\n  (not-any? #(= suspect %1) (keys defaults)))\n\n(defn nucleotide-counts [dna]\n  (merge defaults (frequencies dna)))\n\n(defn count [nucleotide dna]\n  (cond\n    (= uracil nucleotide) 0\n    (not-nucleotide? nucleotide) (throw (Exception. "invalid nucleotide"))\n    :else ((nucleotide-counts dna) nucleotide)))	\N	f	2	3	2013-10-23 00:06:59	2013-10-23 00:06:59	146	\N
317	18	86d42acd3444c93d237923ba	superseded	ruby	anagram	class Anagram\n  attr_reader :sorted_chars\n\n  def initialize(word)\n    @sorted_chars = sort_characters(word)\n  end\n\n  def match(options)\n    options.each_with_object([]) do |option, a|\n      a << option if anagram?(option)\n    end\n  end\n\n  def anagram?(option)\n    sorted_chars == sort_characters(option)\n  end\n\n  def sort_characters(word)\n    word.chars.to_a.sort.join("")\n  end\n\nend	\N	f	2	1	2013-09-22 09:56:28	2013-09-22 09:56:28	147	\N
318	18	b9ed985db6b7c753dd50bcdf	done	ruby	anagram	class Anagram\n  attr_reader :characters\n\n  def initialize(word)\n    @characters = alphabetize(word)\n  end\n\n  def match(words)\n    words.select do |word|\n      word if anagram?(word)\n    end\n  end\n\n  def anagram?(word)\n    characters == alphabetize(word)\n  end\n\n  def alphabetize(word)\n    word.chars.sort.join("")\n  end\nend	\N	f	2	3	2013-11-03 17:03:09	2013-11-03 17:03:09	147	\N
319	18	61c5f00f469c78f3a872fa3e	superseded	ruby	anagram	class Anagram\n  attr_reader :characters\n\n  def initialize(word)\n    @characters = alphabetize(word)\n  end\n\n  def match(words)\n    words.each_with_object([]) do |word, a|\n      a << word if anagram?(word)\n    end\n  end\n\n  def anagram?(word)\n    characters == alphabetize(word)\n  end\n\n  def alphabetize(word)\n    word.chars.sort.join("")\n  end\nend	\N	f	3	2	2013-12-03 14:07:01	2013-12-03 14:07:01	147	\N
320	18	9a8281d83f6ada9d8899ce0f	hibernating	ruby	word-count	class Phrase\n  WORD_PATTERN = /[A-Za-z0-9]+/\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    return @word_count if defined?(@word_count)\n\n    @word_count = Hash.new(0)\n\n    @text.scan(WORD_PATTERN) do |word|\n      @word_count[word.downcase] += 1\n    end\n\n    @word_count\n  end\nend	\N	f	2	1	2013-09-23 22:07:23	2013-09-23 22:07:23	148	\N
346	23	9339e3e2e381298561e8628f	done	ruby	bob	# I think I'm having too much fun\nrequire 'forwardable'\nclass Bob\n  extend Forwardable\n  def initialize\n    @values = {}\n    File.open(File.expand_path("./bob_test.rb")).each_line do |line|\n      next unless line =~ /assert_equal/\n      line =~ /assert_equal ('[^']+'), teenager.hey\\(([^)]+)\\)/\n\n      @values[eval($2)] = eval($1)\n    end\n  end\n\n  def_delegator :@values, :[], :hey\nend	\N	f	3	11	2013-12-07 14:27:57	2013-12-07 14:27:57	156	\N
1414	39	33be5a32441cef2d14895ad0	done	ruby	rna-transcription	class DNA < String\n  THYMINE = 'T'\n  URACIL = 'U'\n\n  def to_rna\n    gsub(THYMINE, URACIL)\n  end\nend	\N	f	3	4	2014-01-30 17:47:53	2014-01-30 17:47:53	623	\N
1415	39	d214bef6f6d5c4cfe70bd713	superseded	ruby	rna-transcription	class DNA\n  T = 'T'\n  U = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub(T, U)\n  end\nend	\N	f	3	2	2014-02-22 01:23:30	2014-02-22 01:23:30	623	\N
1416	39	e222700b1cc9cfb9efef75b8	superseded	ruby	rna-transcription	class DNA\n  THYMINE = 'T'\n  URACIL = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub(THYMINE, URACIL)\n  end\nend	\N	f	5	3	2014-02-24 09:04:03	2014-02-24 09:04:03	623	\N
322	23	84de2e14ee8c99b034cd4ee2	superseded	python	rna-transcription	# -*- coding: utf-8 -*-\nimport string\n\n\nclass DNA(object):\n    """DNA strand."""\n    _RNA_TRANFORMATION_TABLE = string.maketrans('T', 'U')\n\n    def __init__(self, strand_str):\n        self.strand_str = strand_str\n\n    def to_rna(self):\n        """Tranform DNA strand to RNA string."""\n        return self.strand_str.translate(DNA._RNA_TRANFORMATION_TABLE)	\N	f	2	1	2013-11-04 09:53:41	2013-11-04 09:53:41	150	\N
323	23	cb231e21df5f0e1b9fbbe042	superseded	python	rna-transcription	# -*- coding: utf-8 -*-\nimport string\n\n\nclass DNA(object):\n    """DNA strand."""\n    _RNA_TRANFORMATION_TABLE = string.maketrans('T', 'U')\n\n    def __init__(self, strand_str):\n        self._strand_str = strand_str\n\n    def to_rna(self):\n        """Tranform DNA strand to RNA string."""\n        return self._strand_str.translate(\n            self.__class__._RNA_TRANFORMATION_TABLE\n        )	\N	f	3	2	2013-11-13 08:59:28	2013-11-13 08:59:28	150	\N
324	23	d0cbeaaf964037ae596ea4ec	done	python	rna-transcription	# -*- coding: utf-8 -*-\n\n\nclass DNA(object):\n    """DNA strand."""\n    def __init__(self, strand_str):\n        self._strand_str = strand_str\n\n    def to_rna(self):\n        """Tranform DNA strand to RNA string."""\n        return self._strand_str.replace('T', 'U')	\N	f	1	3	2013-11-16 06:37:56	2013-11-16 06:37:56	150	\N
326	23	b95622186b3a63d4131d85b8	superseded	javascript	anagram	function Anagram(word) {\n  "use strict";\n\n  this.word = word;\n\n  this.match = function(words) {\n    var matches = [], expected_letters, current_word, i, j;\n\n    expected_letters = this.word.split("");\n\n    for (i = 0, j = words.length; i < j; i++) {\n      current_word = words[i];\n\n      if (isAnagramOf(expected_letters, current_word)) {\n        matches.push(current_word);\n      }\n    }\n\n    return matches;\n  };\n\n  function isAnagramOf(expected_letters, word) {\n    var match = true,\n        i = 0,\n        j = expected_letters.length;\n\n    if (word.length == j) {\n      while (match && i < j) {\n        match = word.indexOf(expected_letters[i]) !== -1;\n        i++;\n      }\n    } else {\n      match = false;\n    }\n\n    return match;\n  }\n\n}\n\nmodule.exports = Anagram;	\N	f	0	2	2013-12-26 08:33:50	2013-12-26 08:33:50	151	\N
327	23	88e2402ecc2ea4fff108f24b	done	javascript	anagram	function Anagram(word) {\n  "use strict";\n\n  this.word = word;\n\n  this.match = function(words) {\n    var matches = [], expected_letters, current_word, i, j;\n\n    expected_letters = this.word.split("").sort();\n\n    for (i = 0, j = words.length; i < j; i++) {\n      current_word = words[i];\n\n      if (isAnagramOf(expected_letters, current_word)) {\n        matches.push(current_word);\n      }\n    }\n\n    return matches;\n  };\n\n\n  function isAnagramOf(expected_letters, word) {\n    var i = 0,\n        j = expected_letters.length,\n        is_a_match = word.length === j;\n\n    // Quit as soon as we do not find a matching letter\n    while (is_a_match && i < j) {\n      is_a_match = word.indexOf(expected_letters[i]) !== -1;\n      i++;\n    }\n\n    return is_a_match;\n  }\n\n}\n\nmodule.exports = Anagram;	\N	f	3	3	2014-02-06 11:14:22	2014-02-06 11:14:22	151	\N
328	23	affa7fbad75d7b5dec3be9d5	done	ruby	anagram	class Anagram < String\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possible_anagram|\n      sort_and_downcase(possible_anagram) == sort_and_downcase(self)\n    end \n  end\n\n  private\n\n  def sort_and_downcase(str)\n    str.downcase.chars.sort\n  end\n\nend	\N	f	0	2	2014-01-15 16:37:25	2014-01-15 16:37:25	152	\N
329	23	75d8594ac38c4839414d8b69	superseded	ruby	anagram	class Anagram\n\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possible_anagram|\n      (sort_and_downcase possible_anagram) == (sort_and_downcase @word)\n    end \n  end\n\n  private\n\n  def sort_and_downcase(str)\n    str.downcase.chars.sort\n  end\n\nend\n\n# I tried to extract variables on line 11, but didn't like it so much.\n# Still, not super happy with the use of parenthesis. Suggestions?	\N	f	6	1	2014-02-13 19:24:23	2014-02-13 19:24:23	152	\N
330	23	6542954740ce9e48f2a9c7d9	pending	ruby	grade-school	class School\n\n  attr_accessor :db\n\n  def initialize\n    self.db = Hash.new { |hash, key|  hash[key] = Array.new }\n  end\n\n  def add student, grade\n    db[grade] << student\n  end\n\n  def grade grade\n    db[grade]\n  end\n\n  def sort\n    db.keys.sort.reduce({}) do |new_db, key|\n      new_db[key] = db[key].sort\n      new_db\n    end\n  end\nend	\N	f	2	2	2013-12-01 19:27:51	2013-12-01 19:27:51	153	school.rb
331	23	b5c196196f3c55b9ddddf4cd	superseded	ruby	grade-school	class School\n\n  attr_accessor :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add student, grade\n    @db[grade] = @db[grade].to_a << student\n  end\n\n  def grade grade\n    @db[grade] || []\n  end\n\n  def sort\n    @db.keys.sort.reduce({}) do |new_db, key|\n      new_db[key] = @db[key].sort\n      new_db\n    end\n  end\nend	\N	f	2	1	2013-12-29 16:26:23	2013-12-29 16:26:23	153	\N
332	23	050dae59f8ae0266d5088a31	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\nimport Data.Time.Calendar (Day, fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday =\n  Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum)\ndata Schedule =\n  Teenth | First | Second | Third | Fourth | Last\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay sch day year month = addDays dateWithinWeek firstDay\n  where\n    monthLength = gregorianMonthLength year month\n    firstDay = fromGregorian year month 1\n    firstDayOfWeek = pred $ third $ toWeekDate firstDay\n    inWeekOffset = (fromEnum day - weekOf - firstDayOfWeek) `mod` 7\n    dateWithinWeek = fromIntegral $ inWeekOffset + weekOf\n    weekOf = case sch of\n      Teenth -> 12; First -> 0; Second -> 7; Third -> 14; Fourth -> 21\n      Last -> monthLength - 7\n    third (_, _, c) = c	\N	f	2	2	2013-10-29 00:31:49	2013-10-29 00:31:49	154	\N
1164	43	7dd7692af366aa83f9043b72	hibernating	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (cond\n    (re-matches #"^[^a-z]+$" input) "Woah, chill out!"\n    (re-matches #".*\\?$" input) "Sure."\n    (= "" input) "Fine, be that way."\n    :else "Whatever."))	\N	f	2	1	2014-02-24 05:09:21	2014-02-24 05:09:21	517	\N
1423	39	d2f4426fa851468f6b85585e	done	ruby	proverb	class Proverb\n  def initialize(*things_lost)\n    options          = things_lost.last.kind_of?(Hash) ? things_lost.pop : Hash.new\n    self.things_lost = things_lost\n    self.qualifier   = options[:qualifier]\n  end\n\n  def to_s\n    [*things_lost.each_cons(2)\n                 .map { |a, b| "For want of a #{a} the #{b} was lost." },\n     "And all for the want of a #{qualifier ? qualifier + ' ' : ''}#{things_lost.first}."\n    ].join("\\n")\n  end\n\n  private\n\n  attr_accessor :things_lost, :qualifier\nend	\N	f	3	1	2014-02-21 14:42:30	2014-02-21 14:42:30	626	\N
334	23	7de4ab6fdcb5b5a054e5dfe9	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\nimport Data.Time.Calendar (Day, fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday =\n  Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum)\ndata Schedule =\n  Teenth | First | Second | Third | Fourth | Last\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay sch day year month = addDays date firstDay\n  where\n    monthLength = gregorianMonthLength year month\n    firstDay = fromGregorian year month 1\n    firstDayOfWeek = pred $ third $ toWeekDate firstDay\n    inWeekOffset = (fromEnum day - weekOf - firstDayOfWeek) `mod` 7\n    date = fromIntegral $ inWeekOffset + weekOf\n    weekOf = case sch of\n      Teenth -> 12; First -> 0; Second -> 7; Third -> 14; Fourth -> 21\n      Last -> monthLength - 7\n    third (_, _, c) = c	\N	f	0	3	2013-11-17 01:07:17	2013-11-17 01:07:17	154	\N
335	23	b3ebb2e8d4d5b71b731d9a28	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\nimport Data.Time.Calendar (Day, fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday =\n  Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum)\ndata Schedule =\n  Teenth | First | Second | Third | Fourth | Last\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay sch day year month = addDays offset startDay\n  where\n    monthLength = gregorianMonthLength year month\n    startDay = fromGregorian year month $ case sch of\n      Teenth -> 13; First -> 1; Second -> 8; Third -> 15; Fourth -> 22\n      Last -> monthLength - 6\n    startDayOfWeek = fromIntegral $ pred $ third $ toWeekDate startDay\n    offset = fromIntegral $ (fromEnum day - startDayOfWeek) `mod` 7\n    third (_, _, c) = c	\N	f	2	4	2014-01-10 22:24:44	2014-01-10 22:24:44	154	\N
336	23	e80d5eb819006fdb5cce6369	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\nimport Control.Arrow ((&&&))\nimport Data.List (find)\nimport Data.Maybe (fromJust)\nimport Data.Time.Calendar (Day, fromGregorian, toGregorian,\n  gregorianMonthLength)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday =\n  Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum)\ndata Schedule =\n  Teenth | First | Second | Third | Fourth | Last\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay sch weekday year month = fst $ fromJust $ find (\\(g, d) ->\n    inWeekOf weekForSch g && fromEnum weekday == d) datesWithWeekday\n  where\n    monthLength = gregorianMonthLength year month\n    dates = map (fromGregorian year month) [1 .. monthLength]\n    datesWithWeekday = map (id &&& (pred . third . toWeekDate)) dates\n    inWeekOf start g = let d = third (toGregorian g)\n                       in start <= d && d < (start + 7)\n    weekForSch = case sch of\n      Teenth -> 13; First -> 1; Second -> 8; Third -> 15; Fourth -> 22; \n      Last -> monthLength - 6\n    third (_, _, x) = x	\N	f	0	1	2014-01-12 22:45:41	2014-01-12 22:45:41	154	\N
337	23	d53ba6f8a338d838619f9455	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna)\n    @dna = String(dna)\n  end\n\n  def to_rna\n    @dna.tr("ACGT", "ACGU")\n  end\nend	\N	f	2	1	2013-10-14 18:51:32	2013-10-14 18:51:32	155	\N
338	23	a9079b775abb03100cf37f16	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna)\n    @dna = String(dna)\n  end\n\n  def to_rna\n    @dna.tr("ACGT", "ACGU")\n  end\nend	\N	f	2	2	2013-12-15 12:41:51	2013-12-15 12:41:51	155	\N
339	23	34978e6f5416b7a19500a642	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna)\n    @dna = dna\n  end\n\n  def to_rna\n    @dna.tr("ACGT", "ACGU")\n  end\nend	\N	f	0	3	2014-01-07 18:33:24	2014-01-07 18:33:24	155	\N
340	23	157182ecf4ee92fbd5f7dbcb	done	ruby	rna-transcription	class DNA\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr( "ACGT",\n                  "ACGU" )\n  end\nend	\N	f	4	4	2014-01-12 04:09:51	2014-01-12 04:09:51	155	\N
341	23	129ba992d2e9e407d83b6eab	superseded	ruby	bob	class Bob\n  def hey(salutation)\n    question?(salutation)  ||\n      empty?(salutation)   ||\n      yelling?(salutation) ||\n      default\n  end\n\n  def question?(salutation)\n    salutation =~ /\\?$/ && "Sure."\n  end\n\n  def empty?(salutation)\n    (salutation.nil? || salutation.empty?) && "Fine. Be that way."\n  end\n\n  def yelling?(salutation)\n    salutation =~ /^[^a-z]+$/ && "Woah, chill out!"\n  end\n\n  def default\n    "Whatever."\n  end\nend	\N	f	2	5	2013-10-26 02:45:25	2013-10-26 02:45:25	156	\N
342	23	9941357d425150334cd37bf0	superseded	ruby	bob	class Bob\n  def hey(salutation)\n    empty?(salutation)      ||\n      question?(salutation) ||\n      yelling?(salutation)  ||\n      default\n  end\n\n  def question?(salutation)\n    salutation.end_with?("?") && "Sure."\n  end\n\n  def empty?(salutation)\n    (salutation.nil? || salutation.empty?) && "Fine. Be that way."\n  end\n\n  def yelling?(salutation)\n    salutation =~ /^[^a-z]+$/ && "Woah, chill out!"\n  end\n\n  def default\n    "Whatever."\n  end\nend	\N	f	2	6	2013-10-28 07:00:10	2013-10-28 07:00:10	156	\N
343	23	9a7c1e257743a082e0731df4	superseded	ruby	bob	# Am I doing it right? :)\nBob = Hash.new do |h,salutation|\n  res = h.detect do |match, response|\n    salutation =~ match\n  end\n  if res\n    res.last\n  else\n    "Whatever."\n  end\nend\n\ndef Bob.new\n  self\nend\n\ndef Bob.hey(k)\n  self[k]\nend\n\nBob[/\\?$/] = 'Sure.'\nBob[nil] = Bob[/^$/] = 'Fine. Be that way.'\nBob[/^[^a-z]+$/] = 'Woah, chill out!'	\N	f	1	8	2013-11-07 17:10:16	2013-11-07 17:10:16	156	\N
344	23	a66d68745a3c53b7456f98dd	superseded	ruby	bob	# Am I doing it right? :)\nBob = Hash.new do |h,salutation|\n  if res = h.detect do |match, response|\n      salutation =~ match\n    end\n    res.last\n  else\n    "Whatever."\n  end\nend\n\ndef Bob.new\n  self\nend\n\ndef Bob.hey(k)\n  self[k]\nend\n\nBob[/\\?$/] = 'Sure.'\nBob[nil] = Bob[/^$/] = 'Fine. Be that way.'\nBob[/^[^a-z]+$/] = 'Woah, chill out!'	\N	f	0	9	2013-11-08 02:27:42	2013-11-08 02:27:42	156	\N
345	23	57d9328052f524ed32f72b76	superseded	ruby	bob	# Am I doing it right? :)\nBob = Hash.new do |h,salutation|\n  if res = h.detect do |match, response|\n      salutation =~ match if match.is_a?(Regexp)\n    end\n    res.last\n  else\n    h[:default]\n  end\nend\n\ndef Bob.new\n  self\nend\n\ndef Bob.hey(k)\n  self[k]\nend\n\nBob[/\\?$/] = 'Sure.'\nBob[nil] = Bob[/^$/] = 'Fine. Be that way.'\nBob[/^[^a-z]+$/] = 'Woah, chill out!'\nBob[:default] = "Whatever."	\N	f	3	10	2013-11-23 17:04:46	2013-11-23 17:04:46	156	\N
1424	39	978379ed84dc28892ff3b812	done	ruby	meetup	class Meetup\n  require 'time'\n\n  def initialize(mon, year)\n    @mon = mon\n    @year = year\n  end\n\n  def get_date(wday, start, iter)\n    d = Date.new(@year, @mon, start)\n    while(d.wday != wday)\n      d += iter\n    end\n    d\n  end\n\n  def method_missing(name, *args, &block)\n    # defaults\n    wday = 0  # sunday\n    start = 1 # first\n    iter = 1  # search forward\n    case\n    when name =~ /mon/\n      wday = 1\n    when name =~ /tue/\n      wday = 2\n    when name =~ /wed/\n      wday = 3\n    when name =~ /thu/\n      wday = 4\n    when name =~ /fri/\n      wday = 5\n    when name =~ /sat/\n      wday = 6\n    end\n    case\n    when name =~ /teenth/\n      start = 13\n    when name =~ /second/\n      start = 8\n    when name =~ /third/\n      start = 15\n    when name =~ /fourth/\n      start = 22\n    when name =~ /last/\n      start = -1\n      iter = -1\n    end      \n    get_date(wday, start, iter)\n  end\n\nend	\N	f	0	1	2014-02-03 19:12:24	2014-02-03 19:12:24	627	\N
348	23	9b001b980e1ba5fe7d009c93	superseded	ruby	bob	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(/T/, "U")\n  end\nend	\N	f	3	2	2013-12-13 01:14:21	2013-12-13 01:14:21	156	\N
349	23	500fd2a7e95bd9582fae2272	superseded	ruby	bob	class Bob\n  def hey(input)\n    case input\n    when /\\?$/\n      'Sure.'\n    when nil, ""\n      'Fine. Be that way.'\n    when /^[^a-z]+$/\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	3	4	2014-01-08 02:13:51	2014-01-08 02:13:51	156	\N
350	23	e18f0111f247b50cb07f183b	superseded	ruby	bob	class Bob\n  def hey(input)\n    case input\n    when 'Tom-ay-to, tom-aaaah-to.', "Let's go make out behind the gym!", 'Ending with ? means a question.'\n      'Whatever.'\n    when 'Does this cryogenic chamber make me look fat?'\n      'Sure.'\n    when '', nil\n      'Fine. Be that way.'\n    else\n      'Woah, chill out!'\n    end\n  end\nend	\N	f	6	1	2014-01-22 05:38:32	2014-01-22 05:38:32	156	\N
351	23	931c07be4743ed16f83846f9	superseded	ruby	bob	class Bob\n  def hey(salutation)\n    if empty?(salutation)\n      "Fine. Be that way."\n    elsif question?(salutation)\n      "Sure."\n    elsif yelling?(salutation)\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def question?(salutation)\n    salutation.end_with?("?")\n  end\n\n  def empty?(salutation)\n    salutation.nil? || salutation.empty?\n  end\n\n  def yelling?(salutation)\n    salutation =~ /^[^a-z]+$/\n  end\nend	\N	f	7	7	2014-02-12 20:01:45	2014-02-12 20:01:45	156	\N
352	23	af9bd60b286e401ab31af942	done	ruby	leap	class Year\n\tdef initialize(year)\n\t\t@year = year\n\tend\n\n\tdef leap?\n\t\tif @year % 400 == 0\n\t\t\ttrue\n\t\telsif @year % 100 == 0\n\t\t\tfalse\n\t\telsif @year % 4 == 0\n\t\t\ttrue\n\t\telse\n\t\t\tfalse\n\t\tend\n\tend\nend	\N	f	2	1	2013-10-05 09:08:34	2013-10-05 09:08:34	157	year.rb
354	23	8fa8e8c5bc70692321de2005	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |word| count(word) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n      self\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	2	1	2013-12-01 21:03:39	2013-12-01 21:03:39	158	\N
355	23	c8d647bb1f06e2ee2a644fc3	done	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.downcase.split(/\\W+/)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |token| count(token) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	1	4	2014-02-13 23:49:33	2014-02-13 23:49:33	158	\N
356	23	3c44a667c500215663e02f67	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |word| count(word) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	1	2	2014-03-07 21:10:33	2014-03-07 21:10:33	158	\N
357	23	dcb870d56e031c2819144a55	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as str]))\n\n;Bob is a lackadaisical teenager. In conversation, his responses are very limited.\n;Bob answers 'Sure.' if you ask him a question.\n;He answers 'Woah, chill out!' if you yell at him.\n;He says 'Fine. Be that way!' if you address him without actually saying anything.\n;He answers 'Whatever.' to anything else.\n\n;it's yelling if it has characters, but non of them are lower case.\n(defn yell? [input]\n  (and (re-find #"[A-Z]" input)\n       (not (re-find #"[a-z]" input))))\n\n(defn response-for [input]\n  (let [i (str/trim input)]\n    (cond\n     (yell? i)         "Woah, chill out!"\n     (.endsWith i "?") "Sure."\n     (empty? i)        "Fine. Be that way!"\n     :else             "Whatever.")))	\N	f	2	1	2013-12-03 18:31:21	2013-12-03 18:31:21	159	bob.clj
358	23	c5158f6ae640d8ad5d699ecc	pending	clojure	bob	(ns bob\n  (:require [clojure.string :as str]))\n\n;Bob is a lackadaisical teenager. In conversation, his responses are very limited.\n;Bob answers 'Sure.' if you ask him a question.\n;He answers 'Woah, chill out!' if you yell at him.\n;He says 'Fine. Be that way!' if you address him without actually saying anything.\n;He answers 'Whatever.' to anything else.\n\n(defn response-for [input]\n  (let [i         (str/trim input)\n        ; it's yelling if it has characters, but non of them are lower case.\n        yell?     (and (re-find #"[A-Z]" i)\n                       (not (re-find #"[a-z]" i)))\n        question? (= (last i) \\?)]\n    (cond\n     yell?       "Woah, chill out!"\n     question?   "Sure."\n     (empty? i)  "Fine. Be that way!"\n     :else       "Whatever.")))	\N	f	2	2	2014-01-15 05:59:21	2014-01-15 05:59:21	159	bob.clj
359	23	2c76636b2ffb273e83b77014	done	haskell	anagram	{-# LANGUAGE TupleSections #-}\n\nmodule Anagram (anagramsFor) where\n\nimport Data.Map (Map, fromListWith)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter $ isAnagram w\n\ncharCount :: String -> Map Char Int\ncharCount = fromListWith (+) . map ((,1) . toLower)\n\nisAnagram :: String -> String -> Bool\nisAnagram a b = a /= b && charCount a == charCount b	\N	f	1	1	2013-10-15 05:23:10	2013-10-15 05:23:10	160	\N
360	23	5fd68720b5f245c8a3f72753	superseded	javascript	word-count	(function () {\n  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var count     = {}\n      , wordList  = this._normalize(sentence)\n\n    wordList.forEach(function (word) {\n      if (!count.hasOwnProperty(word)) {\n        count[word] = 0\n      }\n\n      count[word] += 1\n    })\n\n    return count\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return sentence\n      .toLowerCase()\n      .match(/[\\w\\d]+/g)\n  }\n})()	\N	f	2	6	2013-10-09 09:09:37	2013-10-09 09:09:37	161	\N
1439	34	27fc0e76d40f1a270d72f3ad	done	ruby	crypto-square	class Crypto\n  def initialize(message)\n    @message = message\n  end\n\n  def normalize_plaintext\n    @normalized_plaintext ||= @message.downcase.gsub(/\\s|[^a-z0-9]/, '')\n  end\n\n  def size\n    square_root = Math.sqrt(normalize_plaintext.size)\n    square_root == square_root.to_i ? square_root : (square_root.to_i + 1)\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(%r(.{1,#{size}}))\n  end\n\n  def ciphertext\n    split_segments = plaintext_segments.map{|e|e.split('')}\n    split_segments.shift.zip(*split_segments).join\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(%r(.{1,5})).join(' ')\n  end\nend	\N	f	2	1	2014-02-03 00:24:18	2014-02-03 00:24:18	636	\N
362	23	88b62437227d1b1ecdb83280	superseded	javascript	word-count	(function () {\n  var Sentence = function (sentence) {\n    this._sentence = sentence\n  }\n\n  Sentence.prototype.toLowerCase = function () {\n    return new Sentence(this._sentence.toLowerCase())\n  }\n\n  Sentence.prototype.stripSpecialCharacters = function () {\n    return new Sentence(this._sentence.replace(/[^\\w\\s]/g, ''))\n  }\n\n  Sentence.prototype.split = function () {\n    return this._sentence.split(/\\s+/)\n  }\n\n  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var count     = {}\n      , word_list = this._normalize(sentence)\n\n    word_list.forEach(function (word) {\n      if (!count.hasOwnProperty(word))\n        count[word] = 0\n\n      count[word] += 1\n    })\n\n    return count\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return new Sentence(sentence)\n      .toLowerCase()\n      .stripSpecialCharacters()\n      .split()\n  }\n})()	\N	f	2	3	2013-11-06 19:21:15	2013-11-06 19:21:15	161	\N
363	23	d250c321e5628e8519069ec3	superseded	javascript	word-count	(function () {\n  var Sentence = function (sentence) {\n    this._sentence = sentence\n  }\n\n  Sentence.prototype.toLowerCase = function () {\n    return new Sentence(this._sentence.toLowerCase())\n  }\n\n  Sentence.prototype.split = function () {\n    return this._sentence.match(/[\\w\\d]+/g)\n  }\n\n  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var count     = {}\n      , wordList  = this._normalize(sentence)\n\n    wordList.forEach(function (word) {\n      if (!count.hasOwnProperty(word)) {\n        count[word] = 0\n      }\n\n      count[word] += 1\n    })\n\n    return count\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return new Sentence(sentence)\n      .toLowerCase()\n      .split()\n  }\n})()	\N	f	0	4	2013-11-27 01:20:18	2013-11-27 01:20:18	161	\N
364	23	4ab37c689ea6c8421b09b73e	superseded	javascript	word-count	(function () {\n  var initializeValue = function (obj, attr) {\n    if (typeof obj[attr] === 'undefined')\n      obj[attr] = 0\n    return obj\n  }\n\n  global.Words = function (sentence) {\n    this.count = this.count_words(sentence)\n  }\n\n  Words.prototype.count_words = function (sentence) {\n    var count = {}\n      , word_list = sentence.split(' ')\n\n    word_list = sentence.toLowerCase().replace(/[^\\w\\s]/g, '').split(/\\s+/)\n\n    word_list.forEach(function (word) {\n      count = initializeValue(count, word)\n      count[word] += 1\n    })\n\n    return count\n  }\n})()	\N	f	0	1	2013-12-03 20:10:02	2013-12-03 20:10:02	161	\N
365	23	abd7e6cfc722b054679d5c60	superseded	javascript	word-count	(function () {\n  "use strict";\n  var Words =  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var count     = {}\n      , wordList  = this._normalize(sentence)\n\n    wordList.forEach(function (word) {\n      if (!count.hasOwnProperty(word)) {\n        count[word] = 0\n      }\n\n      count[word] += 1\n    })\n\n    return count\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return sentence\n      .toLowerCase()\n      .match(/[\\w\\d]+/g)\n  }\n})()	\N	f	2	5	2013-12-16 06:36:52	2013-12-16 06:36:52	161	\N
366	23	f89756b22fdaaf77306f457d	done	javascript	word-count	(function () {\n  "use strict";\n  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var wordList = this._normalize(sentence)\n      , count = {}\n\n    return wordList.eachWithObject(count, function (word, count) {\n      if (!count.hasOwnProperty(word))\n        count[word] = 0\n      count[word] += 1\n    })\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return sentence\n      .toLowerCase()\n      .match(/[\\w\\d]+/g)\n  }\n\n  // Didn't somebody say you should never mess with\n  // core object types?\n  // Feh.\n  Array.prototype.eachWithObject = function(obj, func) {\n    this.forEach(function (element) {\n      func.call(this, element, obj)\n    })\n    return obj\n  }\n\n})()	\N	f	0	8	2014-02-10 05:41:24	2014-02-10 05:41:24	161	\N
367	23	6bd034a11c0dedabc53fcddf	superseded	javascript	word-count	(function () {\n  var initializeValue = function (obj, attr) {\n    if (!obj.hasOwnProperty(attr))\n      obj[attr] = 0\n    return obj\n  }\n\n  var count_words = function (sentence) {\n    var count     = {}\n      , word_list = sentence.split(' ')\n\n    word_list = sentence.toLowerCase().replace(/[^\\w\\s]/g, '').split(/\\s+/)\n\n    word_list.forEach(function (word) {\n      count = initializeValue(count, word)\n      count[word] += 1\n    })\n\n    return count\n  }\n\n  global.Words = function (sentence) {\n    this.count = count_words(sentence)\n  }\n\n})()	\N	f	0	2	2014-02-18 17:11:15	2014-02-18 17:11:15	161	\N
368	23	f317eddb7e5f5403f03b4c5f	done	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\nimport qualified Data.Map.Strict as M\n\ndata Planet =\n    Mercury\n  | Venus\n  | Earth\n  | Mars\n  | Jupiter\n  | Saturn\n  | Uranus\n  | Neptune\n  deriving (Ord, Eq)\n\nperiodFromEarth :: M.Map Planet Float\nperiodFromEarth = M.fromList [(Mercury, 0.2408467),\n                              (Venus, 0.61519726),\n                              (Mars, 1.8808158),\n                              (Earth, 1),\n                              (Jupiter, 11.862615),\n                              (Saturn, 29.447498),\n                              (Uranus, 84.016846),\n                              (Neptune, 164.79132)]\n\nageOn :: Planet -> Int -> Float\nageOn planet = (/ periodFromEarth M.! planet) . toEarthYears \n  where toEarthYears seconds = fromIntegral seconds / 3.15576e7	\N	f	1	1	2013-11-23 11:50:40	2013-11-23 11:50:40	162	SpaceAge.hs
369	23	ea70da382e3a87e3368bbe30	done	haskell	rna-transcription	{-# LANGUAGE LambdaCase #-}\nmodule DNA\nwhere\n\ntoRNA = map $ \\case {'T' -> 'U'; x -> x}	\N	f	4	1	2014-01-10 06:51:11	2014-01-10 06:51:11	163	\N
370	23	c8867c8047c067ae2c3d08f9	superseded	python	anagram	class Anagram:\n\tdef __init__(self, word):\n\t\tself.word = word\n\n\tdef match(self, los):\n\t\tkey = ''.join(sorted(self.word.lower()))\n\t\tresult = []\n\t\tfor word in los:\n\t\t\tsorted_word = ''.join(sorted(word.lower()))\n\t\t\tif sorted_word == key and word != self.word:\n\t\t\t\tresult.append(word)\n\t\treturn result	\N	f	0	1	2013-10-24 19:34:58	2013-10-24 19:34:58	164	\N
371	23	dc526b1e4562f87820712841	pending	python	anagram	class Anagram(object):\n\tdef __init__(self, word):\n\t\tself.word = word\n\n\tdef match(self, los):\n\t\treturn [s for s in los if self.alphagram(s, self.word)]\n\n\tdef alphagram(self, s1, s2):\n\t\treturn s1 != s2 and sorted(s1.lower()) == sorted(s2.lower())	\N	f	0	2	2014-01-22 20:42:04	2014-01-22 20:42:04	164	\N
1447	36	d8e6868491ab6ce93b12b760	done	ruby	beer-song	class Beer\n  attr_reader :final_verse, :running_verse\n\n  def verse(count)\n    decorate(count)\n  end\n\n  def sing(start, stop = 0)\n    start.downto(stop).map do |n|\n      verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  private\n\n  def decorate(count, final = false)\n    case count\n    when 0 then\n      verse = [\n        "No more bottles of beer on the wall, no more bottles of beer.",\n        "Go to the store and buy some more, 99 bottles of beer on the wall.",\n      ]\n    else\n      verse = [\n        "%d %s of beer on the wall, %d %s of beer.",\n        "Take %s down and pass it around, %s %s of beer on the wall.",\n      ]\n    end\n\n    [sprintf(verse.first, count, pluralise(count), count, pluralise(count)),\n      sprintf(verse.last, one_or_it(count),\n              no_more_or_count(count), pluralise(count - 1)),\n      "",\n    ].join("\\n")\n  end\n\n  def no_more_or_count(count)\n    count == 1 ? 'no more' : count - 1\n  end\n\n  def one_or_it(count)\n    count > 1 ? 'one' : 'it'\n  end\n\n  def pluralise(count)\n    count == 1 ? 'bottle' : 'bottles'\n  end\nend	\N	f	1	4	2014-01-04 05:11:13	2014-01-04 05:11:13	642	\N
1449	36	16eda37c902be7fac96ddac7	superseded	ruby	beer-song	class Beer\n  attr_reader :final_verse, :running_verse\n\n  def initialize\n  end\n\n  def verse(count)\n    decorate(count)\n  end\n\n  def sing(start, stop = 0)\n    start.downto(stop).map do |n|\n      verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  private\n\n  def decorate(count, final = false)\n    case count\n    when 0 then\n      verse = [\n        "No more bottles of beer on the wall, no more bottles of beer.",\n        "Go to the store and buy some more, 99 bottles of beer on the wall.",\n      ]\n    else\n      verse = [\n        "%d %s of beer on the wall, %d %s of beer.",\n        "Take %s down and pass it around, %s %s of beer on the wall.",\n      ]\n    end\n\n    [sprintf(verse.first, count, pluralise(count), count, pluralise(count)),\n      sprintf(verse.last, one_or_it(count),\n              no_more_or_count(count), pluralise(count - 1)),\n      "",\n    ].join("\\n")\n  end\n\n  def no_more_or_count(count)\n    count == 1 ? 'no more' : count - 1\n  end\n\n  def one_or_it(count)\n    count > 1 ? 'one' : 'it'\n  end\n\n  def pluralise(count)\n    count == 1 ? 'bottle' : 'bottles'\n  end\nend	\N	f	1	3	2014-01-28 14:36:14	2014-01-28 14:36:14	642	\N
374	25	b98f13399603ba12431d9b5e	superseded	haskell	beer-song	module Beer where\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, " ++\n          "no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, " ++\n          "99 bottles of beer on the wall.\\n"\n\nverse 1 = "1 bottle of beer on the wall, " ++\n          "1 bottle of beer.\\n" ++\n          "Take it down and pass it around, " ++\n          "no more bottles of beer on the wall.\\n"\n\nverse 2 = "2 bottles of beer on the wall, " ++\n          "2 bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          "1 bottle of beer on the wall.\\n"\n\nverse n = show n ++ " bottles of beer on the wall, " ++\n          show n ++ " bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = intercalate "\\n" verses ++ "\\n" where\n  verses = map verse [x, (x - 1)..y]	\N	f	4	2	2014-02-20 01:34:00	2014-02-20 01:34:00	166	\N
375	25	1f0a2d173473bb0ebb94d56f	superseded	haskell	beer-song	module Beer where\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++  show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = intercalate "\\n" verses ++ "\\n" where\n  verses = map verse [x, (x - 1)..y]	\N	f	4	1	2014-03-15 05:40:35	2014-03-15 05:40:35	166	\N
377	25	d3c12040554cd499edd348c5	done	javascript	simple-cipher	var OPERATION_ENCODE = true,\n    OPERATION_DECODE = false,\n    ASCII_LOWER_A = 97,\n    ASCII_LOWER_Z = 122,\n    ALPHABET_LETTERS_COUNT = 26;\n\nfunction generateRandomKey() {\n  var i, key = '', chars = 'abcdefghijklmnopqrstuvwxyz', length = chars.length;\n  for (i = 0; i < 100; i++) {\n    key += chars.charAt(Math.floor(Math.random() * length));\n  }\n  return key;\n}\n\nfunction transformChar(base, start, operation) {\n  base = base.charCodeAt(0);\n  start = start.charCodeAt(0);\n  base += (start - ASCII_LOWER_A) * (operation ? 1 : -1);\n  if (base > ASCII_LOWER_Z) {\n    base -= ALPHABET_LETTERS_COUNT;\n  } else if (base < ASCII_LOWER_A) {\n    base += ALPHABET_LETTERS_COUNT;\n  }\n  return String.fromCharCode(base);\n}\n\nfunction transformString(input, key, operation) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += transformChar(input.charAt(i), key.charAt(keyCounter++), operation);\n    if (keyCounter >= key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nfunction validateKey(key) {\n  if (!/^[a-z]+$/.test(key)) {\n    throw new Error('Bad key');\n  }\n  return key;\n}\n\nfunction Cipher(key) {\n  this.key = validateKey(key === undefined ? generateRandomKey() : key);\n}\n\nCipher.prototype.encode = function(input) {\n  return transformString(input, this.key, OPERATION_ENCODE);\n}\n\nCipher.prototype.decode = function(input) {\n  return transformString(input, this.key, OPERATION_DECODE);\n}\n\nmodule.exports = Cipher;	\N	f	2	2	2014-03-05 11:03:44	2014-03-05 11:03:44	167	simple-cipher.js
378	25	f532ba037c3118b38ffa6bd9	superseded	ruby	anagram	class Anagram\n  def initialize input\n    @input = input.downcase\n  end\n\n  def match potentials\n    potentials.each.with_object([]) do |potential, matches|\n      matches << potential if anagram? potential\n    end\n  end\n\n  private\n\n  def anagram? potential\n    hashed_word == convert(potential.downcase) && input != potential.downcase\n  end\n\n  def hashed_word\n    @hashed_word ||= convert input\n  end\n\n  def convert word\n    word.split("").sort\n  end\n\n  attr_reader :input\nend	\N	f	5	4	2014-02-13 21:36:02	2014-02-13 21:36:02	168	\N
406	25	950e23622b5eb955849dc5ad	done	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year.divisible_by?(4) && !leap_exception?\n  end\n\n  private\n\n  def leap_exception?\n    @year.divisible_by?(100) && !@year.divisible_by?(400)\n  end\n\nend\n\nclass Fixnum\n\n  # yeah, this still feels dirty\n\n  def leap_year?\n    Year.new(self).leap?\n  end\n\n  def divisible_by? number\n    self % number == 0\n  end\n\nend	\N	f	0	3	2014-02-27 06:05:57	2014-02-27 06:05:57	181	\N
380	25	7ca1fd68803fea64a91a314c	superseded	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize input\n    @input = input.downcase\n  end\n\n  def match potentials\n    potentials.each.with_object([]) do |potential, matches|\n      matches << potential if anagram? potential\n    end\n  end\n\n  private\n\n  def anagram? potential\n    hashed_word == hashify(potential.downcase) && input != potential.downcase\n  end\n\n  def hashed_word\n    @hashed_word ||= hashify input\n  end\n\n  def hashify word\n    word.split("").each.with_object(Hash.new 0) do |character, count|\n      count[character] += 1\n    end\n  end\nend	\N	f	0	2	2014-02-26 15:24:22	2014-02-26 15:24:22	168	\N
381	25	14a6d44259c52e054f429b27	superseded	ruby	anagram	class Anagram\n  def initialize input\n    @input = input.downcase\n  end\n\n  def match potentials\n    potentials.each.with_object([]) do |potential, matches|\n      matches << potential if anagram? potential\n    end\n  end\n\n  private\n\n  def anagram? potential\n    hashed_word == hashify(potential.downcase) && input != potential.downcase\n  end\n\n  def hashed_word\n    @hashed_word ||= hashify input\n  end\n\n  def hashify word\n    word.split("").each.with_object(Hash.new 0) do |character, count|\n      count[character] += 1\n    end\n  end\n\n  attr_reader :input\nend	\N	f	0	3	2014-02-27 10:09:08	2014-02-27 10:09:08	168	\N
382	25	06411ca2f15ad1c7f2e33c3f	done	ruby	anagram	class Anagram\n  def initialize input\n    @input = input\n  end\n\n  def match potentials\n    potentials.select{ |potential| anagram? potential }\n  end\n\n  private\n\n  def anagram? potential\n    potential = potential.downcase\n    comparable_input == convert(potential) && input.downcase != potential\n  end\n\n  def comparable_input\n    @comparable_input ||= convert input.downcase\n  end\n\n  def convert word\n    word.split("").sort\n  end\n\n  attr_reader :input\nend	\N	f	17	5	2014-03-14 23:10:28	2014-03-14 23:10:28	168	\N
383	25	9dabc47bdeb9834480a8ac0a	pending	javascript	binary	var Binary = function(input) { this.input = input; };\r\n\r\n// I felt this way was cheating\r\nBinary.prototype._toDecimal = function() {\r\n\treturn isNaN(this.input) ? 0 : parseInt(this.input, 2);\r\n};\r\n\r\nBinary.prototype.toDecimal = function() {\r\n\tvar input = this.input.split('').reverse(),\r\n\t\t\tdecimal = 0,\r\n\t\t\tendLength = input.length;\r\n\r\n\tfor (var i=0; i<endLength; i++) {\r\n\t\tif(input[i] == '1') {\r\n\t\t\tdecimal += Math.pow(2, i);\r\n\t\t}\r\n\t}\r\n\r\n\treturn decimal;\r\n};\r\n\r\nmodule.exports = Binary;	\N	f	0	1	2014-03-08 06:37:55	2014-03-08 06:37:55	169	binary.js
384	25	a26416ee106105cac8af04cb	done	javascript	nucleotide-count	function DNA(nucleotideSequence){\n    "use strict";\n\n    this.count = function(nucleotide){\n        if (validNucleotide(nucleotide)){\n            return nucleotideSequence.split(nucleotide).length - 1;\n        } else {\n            throw "Invalid Nucleotide";\n        }\n    };\n\n    this.nucleotideCounts = {\n        A: this.count('A'),\n        T: this.count('T'),\n        C: this.count('C'),\n        G: this.count('G')\n    };\n}\n\nvalidNucleotide = function(nucleotide){\n    return nucleotide.match(/[ATCGU]/);\n};\n\nmodule.exports = DNA;	\N	f	3	1	2014-02-12 17:09:32	2014-02-12 17:09:32	170	\N
385	25	01b26b5b96b6b1d628ab282d	done	elixir	rna-transcription	defmodule DNA do\n\n  def to_rna(dna), do: Enum.map dna, &dna_nucleotide_to_rna_nucleotide/1\n\n  defp dna_nucleotide_to_rna_nucleotide(?T), do: ?U\n  defp dna_nucleotide_to_rna_nucleotide(nucleotide), do: nucleotide\n\nend	\N	f	2	1	2014-02-17 12:19:54	2014-02-17 12:19:54	171	\N
386	25	cb35db015ccfffdbe912bbed	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f lst = go lst\n  where\n    -- first variant\n    -- go = foldr (\\b acc -> [f b] ++ acc) []\n    --\n    -- second variant\n    go [] = []\n    go (x:xs) = (f x):(go xs)	\N	f	0	1	2014-03-04 23:59:41	2014-03-04 23:59:41	172	Accumulate.hs
387	25	bb151a0e15dc6b0572d05575	done	haskell	accumulate	module Accumulate (accumulate) where\n\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f lst = go lst\n  where\n    go [] = []\n    go (x:xs) = f x:go xs\n    -- other variants\n    -- go = foldr (\\b acc -> [f b] ++ acc) []\n    -- go = foldl' (\\acc a -> acc ++ [f a]) []	\N	f	3	2	2014-03-10 22:02:46	2014-03-10 22:02:46	172	Accumulate.hs
388	25	39cf241d9ece8086a8a3e859	superseded	python	bob	class Bob:\n    def hey(self, message):\n        if not message:\n            message = ' '\n        if message.isspace():\n            return 'Fine. Be that way.'\n        if message == message.upper():\n            return 'Woah, chill out!'\n        if message[-1] == '?':\n            return 'Sure.'\n        return 'Whatever.'	\N	f	5	1	2014-02-11 18:29:12	2014-02-11 18:29:12	173	\N
389	25	87bc5cf60eccfe025fd6a8af	superseded	python	bob	class Bob:\n    def hey(self, message):\n        self.message = message or ' '\n        if self._is_just_addresed():\n            return 'Fine. Be that way.'\n        if self._is_yelled_at():\n            return 'Woah, chill out!'\n        if self._is_asked():\n            return 'Sure.'\n        return 'Whatever.'\n\n    def _is_asked(self):\n        return self.message.endswith('?')\n\n    def _is_yelled_at(self):\n        return self.message.isupper()\n\n    def _is_just_addresed(self):\n        return self.message.isspace()	\N	f	7	3	2014-02-13 18:03:15	2014-02-13 18:03:15	173	\N
390	25	a2505fd7cb29248c03f78bfe	done	python	bob	class Bob(object):\n    def hey(self, message):\n        self.message = message or ' '\n        if self._is_just_addresed():\n            return 'Fine. Be that way.'\n        if self._is_yelled_at():\n            return 'Woah, chill out!'\n        if self._is_asked():\n            return 'Sure.'\n        return 'Whatever.'\n\n    def _is_asked(self):\n        return self.message.endswith('?')\n\n    def _is_yelled_at(self):\n        return self.message.isupper()\n\n    def _is_just_addresed(self):\n        return self.message.isspace()	\N	f	3	4	2014-02-27 08:23:25	2014-02-27 08:23:25	173	\N
391	25	0b64a8924fa72c262a3ca234	superseded	python	bob	class Bob:\n    def hey(self, message):\n        if not message:\n            message = ' '\n        self.message = message\n        if self._is_just_addresed():\n            return 'Fine. Be that way.'\n        if self._is_yelled_at():\n            return 'Woah, chill out!'\n        if self._is_asked():\n            return 'Sure.'\n        return 'Whatever.'\n\n    def _is_asked(self):\n        return self.message.endswith('?')\n\n    def _is_yelled_at(self):\n        return self.message.isupper()\n\n    def _is_just_addresed(self):\n        return self.message.isspace()	\N	f	3	2	2014-03-12 15:32:25	2014-03-12 15:32:25	173	\N
407	25	a0b8b6ad732163804f177bcb	done	python	anagram	def  cleanup(word):\n  return ''.join(sorted(word.lower()))\n\nclass Anagram(object):\n  def __init__(self, word):\n    self.word = word\n    self.cleaned = cleanup(word)\n\n  def match(self, words):\n    return [x for x in words if cleanup(x) == self.cleaned and x != self.word]	\N	f	4	1	2014-02-17 10:15:38	2014-02-17 10:15:38	182	\N
393	25	69faa43964e32e7541018485	done	ruby	point-mutations	class DNA\n  NUCLEOTIDES = [\n    ADENINE = "A",\n    CYTOSINE = "C",\n    GUANINE = "G",\n    THYMINE = "T",\n  ]\n\n  def initialize(strand)\n    validate_strand(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(strand)\n    differences(strand).size()\n  end\n\n  private\n\n  def validate_strand(strand)\n    unless strand =~ /\\A[#{NUCLEOTIDES.join}]*\\z/\n      raise ArgumentError, "`#{strand}' contains invalid DNA nucleotides"\n    end\n  end\n\n  def differences(other_strand)\n    sliced_strand = @strand.chars.slice(0, other_strand.length)\n\n    sliced_strand.zip(other_strand.chars).select do |a, b|\n      a != b\n    end\n  end\nend	\N	f	3	2	2014-02-23 15:37:11	2014-02-23 15:37:11	174	\N
394	25	ca42467f47df0320f21747e0	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    WordCounter.new(word_stream).tallies\n  end\n\n  def word_stream\n    by_words = /\\w+/\n    @phrase.enum_for(:scan, by_words)\n  end\nend\n\nclass WordCounter\n  def initialize(words)\n    @words = words\n  end\n\n  def tallies\n    @tallies = Hash.new(0)\n    @words.each {|word| count(word) }\n    @tallies\n  end\n\n  private\n\n  def count(word)\n    canonical_word = word.downcase\n    @tallies[canonical_word] += 1\n  end\nend	\N	f	0	4	2014-02-12 20:54:49	2014-02-12 20:54:49	175	\N
395	25	ebf859e2c1f2533f902adb06	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    word_stream = @phrase.enum_for(:scan, /\\w+/)\n    WordCounter.new(word_stream).tallies\n  end\nend\n\nclass WordCounter\n  def initialize(words)\n    @words = words\n  end\n\n  def tallies\n    @tallies = Hash.new(0)\n    @words.each {|word| count(word) }\n    @tallies\n  end\n\n  private\n\n  def count(word)\n    canonical_word = word.downcase\n    @tallies[canonical_word] += 1\n  end\nend	\N	f	4	3	2014-02-17 05:45:17	2014-02-17 05:45:17	175	\N
396	25	a1ae0e6031d3de7cf1315bfa	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @word_count ||= tallies\n  end\n\n  private\n\n  def tallies\n    word_stream = @phrase.enum_for(:scan, /\\w+/)\n    counter = WordCounter.new(word_stream)\n    counter.tallies\n  end\nend\n\nclass WordCounter\n  def initialize(words)\n    @words = words\n    @tallies = Hash.new(0)\n  end\n\n  def tallies\n    @words.each {|word| count(word) }\n    @tallies\n  end\n\n  private\n\n  def count(word)\n    canonical_word = word.downcase\n    @tallies[canonical_word] += 1\n  end\nend	\N	f	11	2	2014-03-07 17:58:05	2014-03-07 17:58:05	175	\N
397	25	dcde5781d547194acd812aad	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @word_count ||= tallies\n  end\n\n  private\n\n  def tallies\n    word_stream = @phrase.scan(/\\w+/)\n    counter = WordCounter.new(word_stream)\n    counter.tallies\n  end\nend\n\nclass WordCounter\n  def initialize(words)\n    @words = words\n    @tallies = Hash.new {|hash,word| hash[word] = 0 }\n  end\n\n  def tallies\n    @words.each {|word| count(word) }\n    @tallies\n  end\n\n  private\n\n  def count(word)\n    canonical_word = word.downcase\n    @tallies[canonical_word] += 1\n  end\nend	\N	f	17	1	2014-03-11 08:43:46	2014-03-11 08:43:46	175	\N
398	25	6aa67b1fec5af8e3d7c0a32a	pending	ruby	raindrops	module Raindrops\n  extend self\n\n  def convert(number)\n    result = ""\n    result += "Pling" if prime_factor?(number, 3)\n    result += "Plang" if prime_factor?(number, 5)\n    result += "Plong" if prime_factor?(number, 7)\n\n    result.empty? ? number.to_s : result\n  end\n\nprivate\n\n  def prime_factor?(number, factor)\n    number % factor == 0\n  end\nend	\N	f	1	1	2014-02-20 11:36:57	2014-02-20 11:36:57	176	raindrops.rb
399	25	0e533e0477c1bd486b0b4d63	done	clojure	bob	(ns bob\n  "Talking with Bob"\n  (:require [clojure.string :as str :only [upper-case]]))\n\n(defn is-question\n  [message]\n  (.endsWith message "?"))\n\n(defn is-shout\n  [message]\n  (= (str/upper-case message) message))\n\n(defn is-silence\n  [message]\n  (= "" message))\n\n(defn response-for\n  [message]\n  (cond\n    (is-silence message) "Fine, be that way."\n    (is-question message) "Sure."\n    (is-shout message) "Woah, chill out!"\n    :else "Whatever."))	\N	f	2	1	2014-03-10 23:34:13	2014-03-10 23:34:13	177	\N
400	25	702d3c040c7562d6ba484d48	hibernating	ruby	bob	class Bob\r\n\tdef hey (cadena)\r\n\t\tif cadena != String\r\n\t\t\treturn 'Whatever.'\r\n\t\tend\r\n\t\tif cadena=~ /[A-Z]/\r\n\t\t\treturn 'Woah, chill out!'\r\n\t\tend\r\n\t\tif cadena=~ /[a-z]/\r\n\t\t\treturn 'Fine. Be that way!'\r\n\t\tend\r\n\t\tif cadena.end_with?('?')\r\n\t\t\treturn 'Sure.'\r\n\t\tend\r\n\tend\r\nend	\N	f	3	1	2014-02-13 12:14:04	2014-02-13 12:14:04	178	bob.rb
401	25	77894e61419bfa687a8f27ad	done	python	rna-transcription	class DNA:\n\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def __init__(self, sequence):\n    self.sequence = sequence\n\n  def to_rna(self):\n    return self.sequence.replace(DNA.THYMINE, DNA.URACIL)	\N	f	7	1	2014-02-17 14:12:01	2014-02-17 14:12:01	179	\N
402	25	8dba0b1c43aef02351fd5369	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map(Map, fromList)\n\ncount :: Char -> String -> Int\ncount x s\n  | x `elem` nucleotides = length $ filter (== x) s\n  | otherwise = error ("invalid nucleotide " ++ show x) where\n    nucleotides = "ACTGU"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = fromList [(x, count x s) | x <- "ACTG"]	\N	f	2	1	2014-02-24 17:59:18	2014-02-24 17:59:18	180	DNA.hs
403	25	5d6ca27f32dbdcb73d102dac	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, insertWith, empty, fromList)\nimport Data.List(foldl')\n\ncount :: Char -> String -> Int\ncount x s\n  | x `elem` nucleotides = length $ filter (== x) s\n  | otherwise = error ("invalid nucleotide " ++ show x) where\n    nucleotides = "ACTGU"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = foldl' (\\m x -> insertWith (+) x 1 m) (fromList [(n, 0) | n <-"ACTG"])	\N	f	3	2	2014-02-26 08:01:45	2014-02-26 08:01:45	180	DNA.hs
404	25	ba04814b72f2a7aadf1c52f2	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year.leap_year?\n  end\n\nend\n\nclass Fixnum\n\n  def leap_year?\n    (self % 4 == 0) && ((self % 100 != 0) || (self % 400 == 0))\n  end\n\nend	\N	f	1	2	2014-02-15 10:26:39	2014-02-15 10:26:39	181	\N
405	25	b539c3b2068277b887420d41	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    (@year % 4 == 0) && ((@year % 100 != 0) || (@year % 400 == 0))\n  end\n\nend\n\nclass Fixnum\n\n  def leap_year?\n    (self % 4 == 0) && ((self % 100 != 0) || (self % 400 == 0))\n  end\n\nend	\N	f	1	1	2014-02-22 16:10:17	2014-02-22 16:10:17	181	\N
410	20	84c3b7f9ed2c13be61c44453	superseded	ruby	bob	class Bob\n\n  CONDITIONS = [:silence, :shout, :question].freeze\n\n  def hey(input)\n    CONDITIONS.each do |condition|\n      return send("#{condition}_answer") if send("#{condition}?", input)\n    end\n    'Whatever.'\n  end\n\n  def shout?(input)\n    input == input.upcase\n  end\n\n  def shout_answer\n    'Woah, chill out!'\n  end\n\n  def question?(input)\n    input.end_with?('?')\n  end\n\n  def question_answer\n    'Sure.'\n  end\n\n  def silence?(input)\n    input.strip.empty?\n  end\n\n  def silence_answer\n    'Fine. Be that way!'\n  end\nend	\N	f	0	2	2013-11-14 07:16:50	2013-11-14 07:16:50	185	\N
411	20	e17c1ab7228d7358c2d743ac	done	ruby	bob	class Bob\n\n  CONDITIONS = [:silence, :shout, :question].freeze\n\n  def hey(input)\n    CONDITIONS.each do |condition|\n      return send("#{condition}_answer") if send("#{condition}?", input)\n    end\n    'Whatever.'\n  end\n\n  private\n\n  def shout?(input)\n    input == input.upcase\n  end\n\n  def shout_answer\n    'Woah, chill out!'\n  end\n\n  def question?(input)\n    input.end_with?('?')\n  end\n\n  def question_answer\n    'Sure.'\n  end\n\n  def silence?(input)\n    input.strip.empty?\n  end\n\n  def silence_answer\n    'Fine. Be that way!'\n  end\nend	\N	f	0	3	2014-01-16 23:26:26	2014-01-16 23:26:26	185	\N
412	20	f8bc1cf03c8ce3fc6914f680	superseded	ruby	bob	class Bob\n\n  CONDITIONS = [:silence, :shout, :question, :default].freeze\n\n  def hey(input)\n    CONDITIONS.each do |condition|\n      return send("#{condition}_answer") if send("#{condition}?", input)\n    end\n  end\n\n  def default?(_)\n    true\n  end\n\n  def default_answer\n    'Whatever.'\n  end\n\n  def shout?(input)\n    input == input.upcase\n  end\n\n  def shout_answer\n    'Woah, chill out!'\n  end\n\n  def question?(input)\n    input.end_with?('?')\n  end\n\n  def question_answer\n    'Sure.'\n  end\n\n  def silence?(input)\n    input.strip.empty?\n  end\n\n  def silence_answer\n    'Fine. Be that way!'\n  end\nend	\N	f	7	1	2014-02-02 14:29:01	2014-02-02 14:29:01	185	\N
413	20	ac6933d2309a19cb74a52f4f	done	ruby	rna-transcription	class DNA < String\n  \n  # Transcribes DNA to RNA\n  # by replacing Thymidine with Uracil\n  def to_rna\n    self.tr 'T', 'U'\n  end\n  \nend	\N	f	4	1	2014-01-09 17:49:42	2014-01-09 17:49:42	186	\N
414	20	96ae794c85b5a51466f4a67e	superseded	go	hamming	package hamming\n\nfunc Distance(s1, s2 string) int {\n\tdist := 0\n\tfor i := 0; i < len(s1) && i < len(s2); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\treturn dist\n}	\N	f	0	1	2014-01-23 14:20:16	2014-01-23 14:20:16	187	hamming.go
415	20	d6a34f2938785bb7bf61fef8	done	go	hamming	package hamming\n\nfunc Distance(s1, s2 string) (dist int) {\n\tfor i := 0; i < len(s1) && i < len(s2); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\treturn dist\n}	\N	f	1	2	2014-02-02 09:37:51	2014-02-02 09:37:51	187	hamming.go
416	20	f9f150ec752f54fc90945440	superseded	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n  import String, only: [codepoints: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    list |> filter(fn(potential_word) -> anagram?(sort_codepoints(word), sort_codepoints(potential_word)) end)\n  end\n\n  defp sort_codepoints(word) do\n    sort(codepoints(word))\n  end\n\n  defp anagram?(word, potential_word) do\n    word == potential_word\n  end\nend	\N	f	0	3	2013-12-19 08:19:03	2013-12-19 08:19:03	188	\N
417	20	819236cd0ea5e8369b4605ee	superseded	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n  import String, only: [codepoints: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    list |> filter(&anagram?(sort_codepoints(word), sort_codepoints(&1)))\n  end\n\n  defp sort_codepoints(word) do\n    sort(codepoints(word))\n  end\n\n  defp anagram?(word, potential_word) do\n    word == potential_word\n  end\nend	\N	f	0	4	2014-01-02 04:44:36	2014-01-02 04:44:36	188	\N
418	20	190ff81d4d7cb7e854f492d3	superseded	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    filter(list, fn(potential_word) -> anagram?(word, potential_word) end)\n  end\n\n  defp anagram?(word, potential_word) do\n    sorted_word_codepoints           = sort(String.codepoints(word))\n    sorted_potential_word_codepoints = sort(String.codepoints(potential_word))\n\n    sorted_word_codepoints == sorted_potential_word_codepoints\n  end\nend	\N	f	2	1	2014-01-08 00:48:04	2014-01-08 00:48:04	188	\N
419	20	e33f7a5badc77eabafce507f	superseded	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n  import String, only: [codepoints: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    filter(list, fn(potential_word) -> anagram?(word, potential_word) end)\n  end\n\n  defp anagram?(word, potential_word) do\n    sorted_word_codepoints           = sort(codepoints(word))\n    sorted_potential_word_codepoints = sort(codepoints(potential_word))\n\n    sorted_word_codepoints == sorted_potential_word_codepoints\n  end\nend	\N	f	2	2	2014-01-17 01:56:54	2014-01-17 01:56:54	188	\N
420	20	0adff03949f6bab74fd633d1	superseded	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n  import String, only: [codepoints: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    list |> filter(&anagram?(sort_codepoints(word), sort_codepoints(&1)))\n  end\n\n  defp sort_codepoints(word), do: sort(codepoints(word))\n  defp anagram?(word, potential_word), do: word == potential_word\nend	\N	f	2	5	2014-01-22 20:30:32	2014-01-22 20:30:32	188	\N
421	20	24eda0214dc55bb4f8325faf	done	elixir	anagram	defmodule Anagram do\n  import Enum,   only: [filter: 2, sort: 1]\n  import String, only: [codepoints: 1]\n\n  @doc """\n    Takes a list of strings and returns possible anagrams for a given word.\n\n    iex> Anagram.match "foo", ["bar", "baz", "oof"]\n    ["oof"]\n  """\n\n  def match(word, list) do\n    base_word = sort_codepoints word\n    list |>\n      filter(&anagram?(base_word, sort_codepoints(&1)))\n  end\n\n  defp sort_codepoints(word), do: sort(codepoints(word))\n  defp anagram?(word, potential_word), do: word == potential_word\nend	\N	f	2	6	2014-02-16 19:12:47	2014-02-16 19:12:47	188	\N
1450	36	7fbda6f9d32f7ce6f1257bad	superseded	ruby	beer-song	class Beer\n  attr_reader :final_verse, :running_verse\n\n  def initialize\n    @final_verse = [\n      "No more bottles of beer on the wall, no more bottles of beer.",\n      "Go to the store and buy some more, 99 bottles of beer on the wall.",\n    ]\n    @running_verse = [\n      "%d %s of beer on the wall, %d %s of beer.",\n      "Take %s down and pass it around, %s %s of beer on the wall.",\n    ]\n  end\n\n  def verse(count)\n    case count\n    when 0\n      format(final_verse, count)\n    else\n      format(running_verse, count)\n    end\n  end\n\n  def sing(start, stop = 0)\n    start.downto(stop).map do |n|\n      verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  private\n\n  def format(strings, count)\n    [sprintf(strings.first, count, pluralise(count), count, pluralise(count)),\n      sprintf(strings.last, one_or_it(count),\n              no_more_or_count(count), pluralise(count - 1)),\n      "",\n    ].join("\\n")\n  end\n\n  def no_more_or_count(count)\n    count == 1 ? 'no more' : count - 1\n  end\n\n  def one_or_it(count)\n    count > 1 ? 'one' : 'it'\n  end\n\n  def pluralise(count)\n    count == 1 ? 'bottle' : 'bottles'\n  end\nend	\N	f	1	2	2014-02-13 09:16:31	2014-02-13 09:16:31	642	\N
423	20	9e7716ee19d7aedfbb63ed16	superseded	objective-c	word-count	#import "WordCount.h"\n\n#define SEPARATORS [[ NSCharacterSet alphanumericCharacterSet ] invertedSet ]\n\n@implementation WordCount : NSObject\n\n-(id) initWithString: (NSString*) source_\n{\n    self = [ super init ];\n    if (self) {\n        self.source = source_;\n    }\n    return self;\n}\n\n- (NSString*) downcased\n{\n    return [ self.source lowercaseString];\n}\n\n- (NSArray*) words\n{\n    return [[self downcased] componentsSeparatedByCharactersInSet: SEPARATORS ];\n}\n\n- (NSDictionary*) count\n{\n    NSMutableDictionary *counts = [[NSMutableDictionary alloc] init];\n    NSArray *words = [self words];\n    for (id word in words) {\n        int count = [[counts valueForKey:word] intValue];\n        if (!count) count = 0;\n        [counts setValue:@(count + 1) forKey:word];\n    }\n    return counts;\n}\n@end	\N	f	2	2	2013-11-10 20:12:52	2013-11-10 20:12:52	190	\N
425	20	fff69c31884cfb79bf83ba74	done	objective-c	word-count	#import "WordCount.h"\n\n#define SEPARATORS [[ NSCharacterSet alphanumericCharacterSet ] invertedSet ]\n\n@implementation WordCount : NSObject\n\n-(id) initWithString: (NSString*) source_\n{\n    self = [ super init ];\n    if (self) {\n        self.source = source_;\n    }\n    return self;\n}\n\n- (NSString*) downcased\n{\n    return [ self.source lowercaseString];\n}\n\n- (NSArray*) words\n{\n    return [[self downcased] componentsSeparatedByCharactersInSet: SEPARATORS ];\n}\n\n- (NSDictionary*) count\n{\n    NSMutableDictionary *counts = [[NSMutableDictionary alloc] init];\n    NSArray *words = [self words];\n    for (id word in words) {\n        counts[word] = @([counts[word] intValue] + 1);\n    }\n    return counts;\n}\n@end	\N	f	2	3	2013-12-07 23:26:42	2013-12-07 23:26:42	190	\N
426	20	70cdf1824bbbc7ee32cf40f8	superseded	elixir	word-count	defmodule Words do\n  def count(string) do\n    Regex.scan(%r/\\w+/, string)\n      |> List.flatten\n      |> Enum.map(&String.downcase/1)\n      |> Enum.reduce HashDict.new, fn(word, frequencies) ->\n        HashDict.put(frequencies, word, HashDict.get(frequencies, word, 0) + 1)\n    end\n  end\nend	\N	f	0	1	2013-11-28 22:03:31	2013-11-28 22:03:31	191	\N
427	20	a3dc4dc4827e4777ea8adea5	superseded	elixir	word-count	defmodule Words do\n  def count(string) do\n    Regex.scan(%r/\\w+/, string)\n      |> List.flatten\n      |> Stream.map(&String.downcase/1)\n      |> Enum.reduce HashDict.new, fn(word, frequencies) ->\n        HashDict.update(frequencies, word, 1, fn(count) -> count + 1 end)\n    end\n  end\nend	\N	f	2	2	2013-12-25 20:03:48	2013-12-25 20:03:48	191	\N
428	20	ee76d93fdcfbd85148b79295	done	elixir	word-count	defmodule Words do\n  def count(string) do\n    Regex.scan(%r/\\w+/, string)\n      |> List.flatten\n      |> Stream.map(&String.downcase/1)\n      |> Enum.reduce HashDict.new, fn(word, frequencies) ->\n        HashDict.update(frequencies, word, 1, &(&1 + 1))\n    end\n  end\nend	\N	f	0	3	2014-02-11 06:48:06	2014-02-11 06:48:06	191	\N
429	20	4cd208c264f548e752507867	done	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| not_matching(x, y)}\n  end\n\n  private\n  def self.shorter_array(s1, s2)\n    (s1.length < s2.length) ? s1.chars : s2.chars\n  end\n\n  def self.longer_array(s1, s2)\n    (s1.length < s2.length) ? s2.chars : s1.chars\n  end\n\n  def self.pair_them(s1, s2)\n    shorter_array(s1, s2).zip(longer_array(s1, s2))\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2\n  end\n\nend	\N	f	2	8	2013-11-04 07:59:50	2013-11-04 07:59:50	192	\N
430	20	7cac4dc7f048f1ef038b4313	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    result = 0\n    shorter_length(original, mutated).times do |i|\n      if original[i] != mutated[i]\n        result +=1\n      end\n    end\n    result\n  end\n\n  private\n\n  def self.shorter_length(s1, s2)\n    if (s1.length < s2.length)\n      s1.length\n    else\n        s2.length\n    end\n  end\n\nend	\N	f	2	1	2013-11-08 10:50:37	2013-11-08 10:50:37	192	\N
431	20	bbca72eb86c7981a73c3a0fd	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    result = 0\n    self.pair_them(original, mutated).each do |x,y|\n      if self.not_matching(x,y)\n        result += 1\n      end\n    end\n    result\n  end\n\n#  private\n  def self.pair_them(s1, s2)\n    s1.to_array.zip(s2.to_array)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2 and c2\n  end\n\nend\n\n\nclass String\n\n  def to_array\n    self.split("")\n  end\n\nend	\N	f	0	2	2013-11-25 00:32:27	2013-11-25 00:32:27	192	\N
432	20	2aba36bab12346af6693bdd6	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| not_matching(x, y)}\n  end\n\n  private\n  def self.shorter(s1, s2)\n    (s1.length < s2.length) ? s1 : s2\n  end\n\n  def self.longer(s1, s2)\n    (s1.length < s2.length) ? s2 : s1\n  end\n\n  def self.pair_them(s1, s2)\n    shorter(s1, s2).chars.zip(longer(s1, s2).chars)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2\n  end\n\nend	\N	f	0	7	2013-11-25 11:22:33	2013-11-25 11:22:33	192	\N
433	20	1542b3be6705d47e31a571ec	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| (x != y and y)}\n  end\n\n  private\n  def self.pair_them(s1, s2)\n    s1.chars.zip(s2.chars)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2 and c2\n  end\n\nend	\N	f	2	5	2014-01-01 15:11:38	2014-01-01 15:11:38	192	\N
434	20	ac9a4d0273328511873974c1	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| not_matching(x, y)}\n  end\n\n  private\n  def self.pair_them(s1, s2)\n    s1.chars.zip(s2.chars)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2 and c2\n  end\n\nend	\N	f	2	6	2014-01-01 19:08:16	2014-01-01 19:08:16	192	\N
436	20	3e72df0fc3afe1332c30e514	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| (x != y and y)}\n  end\n\n  private\n  def self.pair_them(s1, s2)\n    s1.chars.zip(s2.to_array)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2 and c2\n  end\n\nend\n\n\nclass String\n\n  def to_array\n    self.split("")\n  end\n\nend	\N	f	10	4	2014-02-28 06:56:58	2014-02-28 06:56:58	192	\N
438	20	0c8f6c9985bebc7dac23fe72	superseded	elixir	bob	defmodule Teenager do\n  @whatever "Whatever."\n  @chill    "Woah, chill out!"\n  @sure     "Sure."\n  @fine     "Fine. Be that way!"\n\n  def hey(msg) do\n    cond do\n      "" == String.lstrip(msg)                  -> @fine\n      "" == String.replace(msg, %r{[\\d, ]}, "") -> @whatever\n      String.ends_with?(msg, "?")               -> @sure\n      msg == String.upcase(msg)                 -> @chill\n      String.ends_with?(msg, "!")               -> @whatever\n      true                                      -> @whatever\n    end\n  end\nend	\N	f	2	1	2013-11-04 14:00:49	2013-11-04 14:00:49	194	\N
439	20	bea11bf1adb27fc96c22a169	superseded	elixir	bob	defmodule Teenager do\n  @whatever "Whatever."\n  @chill    "Woah, chill out!"\n  @sure     "Sure."\n  @fine     "Fine. Be that way!"\n\n  def hey(msg) do\n    mmsg = String.replace(msg, %r{[\\d,]}, "")\n    cond do\n      "" == String.lstrip(msg)                                              -> @fine\n      String.ends_with?(msg, "?")                                           -> @sure\n      mmsg == String.upcase(mmsg) && String.length(String.lstrip(mmsg)) > 0 -> @chill\n      true                                                                  -> @whatever\n    end\n  end\nend	\N	f	2	2	2014-01-20 19:25:19	2014-01-20 19:25:19	194	\N
440	20	ed2c03c5f3ac7789649112dc	done	elixir	bob	defmodule Teenager do\n  @whatever "Whatever."\n  @chill    "Woah, chill out!"\n  @sure     "Sure."\n  @fine     "Fine. Be that way!"\n\n  def hey(msg) do\n    mmsg = String.replace(msg, %r{[\\d, ]}, "")\n    cond do\n      "" == String.lstrip(msg)                  -> @fine\n      String.ends_with?(msg, "?")               -> @sure\n      mmsg != "" && mmsg == String.upcase(mmsg) -> @chill\n      true                                      -> @whatever\n    end\n  end\nend	\N	f	4	3	2014-02-08 17:05:31	2014-02-08 17:05:31	194	\N
441	20	5ad9e0205e4ed52e22091054	superseded	clojure	bob	(ns bob)\n\n(defn- silence? [phrase]\n  (= "" phrase))\n\n(defn- shout? [phrase]\n  (re-find #"\\A[^a-z]+\\z" phrase))\n\n(defn- question? [phrase]\n  (re-find #"\\?\\z" phrase))\n\n(defn response-for [phrase]\n  (cond\n    (shout? phrase) "Woah, chill out!"\n    (question? phrase) "Sure."\n    (silence? phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	2	2	2013-12-01 22:54:33	2013-12-01 22:54:33	195	\N
442	20	d88e095d159123c42591e690	superseded	clojure	bob	(ns bob)\n\n(defn response-for [phrase]\n  (cond\n    (re-find #"\\A[^a-z]+\\z" phrase) "Woah, chill out!"\n    (re-find #"\\?\\z" phrase) "Sure."\n    (= "" phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	3	1	2014-01-24 04:46:25	2014-01-24 04:46:25	195	\N
443	20	bb7db9520c766be57d093f22	done	clojure	bob	(ns bob)\n\n(defn- shout? [phrase]\n  (re-find #"\\A[^a-z]+\\z" phrase))\n\n(defn- question? [phrase]\n  (re-find #"\\?\\z" phrase))\n\n(defn- silence? [phrase]\n  (= "" phrase))\n\n(defn response-for [phrase]\n  (cond\n    (shout? phrase) "Woah, chill out!"\n    (question? phrase) "Sure."\n    (silence? phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	4	3	2014-02-03 00:29:50	2014-02-03 00:29:50	195	\N
444	20	c32575d92d487e452fc71aa9	done	ruby	accumulate	class Array\n  def accumulate(&block)\n    arr = []\n    self.each do |element|\n      arr << yield(element)\n    end\n    return arr\n  end\nend	\N	f	2	1	2013-11-14 18:54:32	2013-11-14 18:54:32	196	array.rb
445	20	4118fda1d87bff81ab6a8f97	done	ruby	leap	class Year < Struct.new :year\n  def leap?\n    return true if year % 400 == 0\n\n    return false if year % 100 == 0\n\n    year % 4 == 0\n  end\nend	\N	f	3	2	2013-12-23 20:24:47	2013-12-23 20:24:47	197	\N
446	20	fe59c69bcb0ff0ae5f5daa9a	superseded	ruby	leap	class Year < Struct.new :year\n  def leap?\n    return true if year % 400 == 0\n    return false if year % 100 == 0\n    year % 4 == 0\n  end\nend	\N	f	2	1	2014-02-18 13:35:18	2014-02-18 13:35:18	197	\N
447	20	66eeb05fadffe2633b28e806	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\nareaCode :: String -> String\nareaCode s = fst $ parts s\n\nnumber :: String -> String\nnumber s =\n  let s' = filter isDigit s\n  in\n    if length s' == 10\n    then s'\n    else\n      if length s' == 11 && head s' == '1'\n      then tail s'\n      else "0000000000"\n\nprettyPrint :: String -> String\nprettyPrint s =\n  let s' = parts s\n  in concat ["(", fst s', ") ", fst (snd s'), "-", snd (snd s')]\n\nparts :: String -> (String, (String, String))\nparts s =\n  let s' = number s\n  in (take 3 s', splitAt 3 (drop 3 s'))	\N	f	0	1	2013-11-04 07:24:58	2013-11-04 07:24:58	198	\N
448	20	20b541c97b60e41c2e2c3dc0	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\nareaCode :: String -> String\nareaCode s = a\n  where (a, _, _) = parts s\n\nnumber :: String -> String\nnumber s\n  | length s' == 10 = s'\n  | length s' == 11 && head s' == '1' = tail s'\n  | otherwise = "0000000000"\n  where s' = filter isDigit s\n\nprettyPrint :: String -> String\nprettyPrint s = concat ["(", a, ") ", b, "-", c]\n  where (a, b, c) = parts s\n\nparts :: String -> (String, String, String)\nparts s = (a, b, c)\n  where (a, bc) = splitAt 3 $ number s\n        (b, c) = splitAt 3 bc	\N	f	1	2	2014-03-16 07:02:02	2014-03-16 07:02:02	198	\N
449	5	ff633d78556d457cb399a7f7	done	ruby	bob	class Bob\n  def hey(text)\n    msg = Message.new(text)\n    case\n    when msg.question? then "Sure."\n    when msg.yelling? then "Woah, chill out!"\n    when msg.silence? then "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\nend\n\n\nclass Message\n  attr_reader :text\n\n  def initialize(text)\n    @text = text.to_s\n  end\n\n  def silence?\n    text.length == 0\n  end\n\n  def yelling?\n    !silence? && text == text.upcase\n  end\n\n  def question?\n    text.end_with? "?"\n  end\nend	\N	f	1	4	2013-11-17 04:46:31	2013-11-17 04:46:31	199	\N
450	5	9455016d941f7eb87b8318db	superseded	ruby	bob	class Bob\n  def hey(text)\n    msg = Message.new(text)\n    case\n    when msg.question? then "Sure."\n    when msg.yelling? then "Woah, chill out!"\n    when msg.silence? then "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\nend\n\n\nclass Message\n  attr_reader :text\n\n  def initialize(text)\n    @text = text.to_s\n  end\n\n  def silence?\n    text.length == 0\n  end\n\n  def yelling?\n    text.length > 0 && text == text.upcase\n  end\n\n  def question?\n    text.end_with? "?"\n  end\nend	\N	f	0	3	2014-01-27 12:50:01	2014-01-27 12:50:01	199	\N
1470	36	93bda454356f4fbc632098bf	done	ruby	phone-number	class PhoneNumber\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    valid_number? ? cleaned_up_number : "0000000000"\n  end\n\n  def area_code\n    number[0..2]\n  end\n\n  def to_s\n    "(#{number[0..2]}) #{number[3..5]}-#{number[6..9]}"\n  end\n\n  private\n\n  def cleaned_up_number\n    number = select_digits(@raw_number)\n    trim_first_digit(number)\n  end\n\n  def valid_number?\n    does_not_contain_letters? && correct_length?\n  end\n\n  def does_not_contain_letters?\n    @raw_number.scan(/[A-Za-z]/).empty?\n  end\n\n  def correct_length?\n    cleaned_up_number.size == 10\n  end\n\n  def select_digits(number)\n    number.scan(/\\d+/).join\n  end\n\n  def trim_first_digit(number)\n    trimmable_first_digit?(number) ? number[1..-1] : number\n  end\n\n  def trimmable_first_digit?(number)\n    number.size == 11 && number.start_with?("1")\n  end\nend	\N	f	4	1	2014-01-12 08:43:55	2014-01-12 08:43:55	650	\N
1471	32	e24edb0163901f7125dbba90	superseded	ruby	bob	# Iteration 1 had bob.rb, iteration 2 had responder.rb; collapsing\n# them together for convenience here. Iteration 3 is the final one.\nmodule Responder\n  RESPONSE_TO_SILENCE         = "Fine. Be that way!"\n  RESPONSE_TO_YELLING         = "Woah, chill out!"\n  RESPONSE_TO_QUESTIONING     = "Sure."\n  RESPONSE_TO_EVERYTHING_ELSE = "Whatever."\n\n  SILENT_PHRASE_STRIPPED_LENGTH = 0\n  QUESTIONING_TOKEN             = "?"\n\n  def respond_to(phrase)\n    phrase = stringify!(phrase)\n    return RESPONSE_TO_SILENCE     if given_silence?(phrase)\n    return RESPONSE_TO_YELLING     if given_yelling?(phrase)\n    return RESPONSE_TO_QUESTIONING if given_questioning?(phrase)\n    return RESPONSE_TO_EVERYTHING_ELSE\n  end\n\n  def stringify!(phrase)\n    phrase.to_s\n  end\n\n  def given_silence?(phrase)\n    phrase.strip.length == SILENT_PHRASE_STRIPPED_LENGTH\n  end\n\n  def given_yelling?(phrase)\n    phrase.upcase == phrase\n  end\n\n  def given_questioning?(phrase)\n    phrase.end_with?(QUESTIONING_TOKEN)\n  end\nend\n\nclass Bob\n  include Responder\n\n  def hey(phrase)\n    respond_to(phrase)\n  end\nend	\N	f	1	3	2013-10-03 05:42:42	2013-10-03 05:42:42	651	\N
1485	32	7f2d814a0524fa23485f5cdd	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    !divisible_by_100? && divisible_by_4? || divisible_by_400?\n  end\n\n  def divisible_by_4?\n    @year %4 == 0\n  end\n\n  def divisible_by_100?\n    @year %100 == 0\n  end\n\n  def divisible_by_400?\n    @year %400 == 0\n  end\n\nend	\N	f	1	2	2013-11-27 14:43:07	2013-11-27 14:43:07	654	\N
452	5	b3ee5f9f9cf634f9371f3c43	superseded	ruby	bob	class Bob\n  def hey(text)\n    msg = Message.new(text)\n    case\n    when msg.question? then "Sure."\n    when msg.yelling? then "Woah, chill out!"\n    when msg.silence? then "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\nend\n\n\nclass Message\n  attr_reader :text\n\n  def initialize(text)\n    @text = text || ''\n  end\n\n  def silence?\n    text.length == 0\n  end\n\n  def yelling?\n    text.length > 0 && text == text.upcase\n  end\n\n  def question?\n    text =~ /.*\\?$/\n  end\nend	\N	f	0	2	2014-03-15 12:44:53	2014-03-15 12:44:53	199	\N
453	5	ccf4fe1664a3e6ec53890589	superseded	ruby	word-count	class Phrase\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    words.inject(Hash.new(0)) { |acc, current| acc[current] += 1; acc }\n  end\n\n  private\n\n  def words\n    content.scan(/(\\w+)+/).flatten.map(&:downcase)\n  end\nend	\N	f	3	1	2014-01-10 13:24:58	2014-01-10 13:24:58	200	\N
454	5	363fb9e9447adb10f900b63d	done	ruby	word-count	class Phrase\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, word_counter| word_counter[word] += 1 }\n  end\n\n  private\n\n  def words\n    content.downcase.scan(/\\w+/)\n  end\nend	\N	f	4	2	2014-02-05 11:12:57	2014-02-05 11:12:57	200	\N
455	5	b3e3aef54034c20db8a504af	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\nimport Control.Applicative\n\n-- MAYBE TODO  Do not use ((->) String) applicative instance\n-- MAYBE TODO  Do not depend on guards order\nresponseFor :: String -> String\nresponseFor req | all isSpace $ req = "Fine. Be that way!"\n                | ((&&) <$> not . null <*> all isUpper) $ filter isAlpha req\n                                    = "Woah, chill out!"\n                | last req == '?'   = "Sure."\n                | otherwise         = "Whatever."	\N	f	1	1	2013-11-20 04:08:42	2013-11-20 04:08:42	201	\N
457	5	818083163958992e17cbdb82	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count\n  "Return a hash containing the number of occurrences for each word in\n  the phrase. The words are normalized so that case does not affect\n  the count."\n  [s]\n  (frequencies (re-seq #"\\w+" (lower-case s))))	\N	f	1	1	2013-12-29 13:24:53	2013-12-29 13:24:53	203	\N
458	5	2efc2f2ef58b658822aa0d32	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    dict = HashDict.new []\n    String.downcase(sentence) |> String.split |>  do_count(dict)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    entry = prepare_entry(head, dict)\n    do_count(tail, entry)\n  end\n\n  defp prepare_entry(word, dict) do\n    Regex.replace(%r/\\W/, word, "") |> add_or_increment_entry(dict)\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, fn(count) -> count + 1 end)\n  end\n\nend	\N	f	1	2	2013-11-14 19:13:19	2013-11-14 19:13:19	204	\N
460	5	db957a03c8fe097fb2924576	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    words = String.downcase(sentence) |> String.split(%r/\\W/)\n    Enum.reduce(words, HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	1	7	2014-01-09 21:30:00	2014-01-09 21:30:00	204	\N
461	5	cc76fcf0511f9420a03657e7	done	elixir	word-count	defmodule Words do\n  import Enum,   only: [reduce: 3]\n  import Dict,   only: [update: 4]\n  import String, only: [downcase: 1, split: 2]\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    downcase(sentence)\n    |> split(%r/\\W/)\n    |> reduce(HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	1	11	2014-01-11 13:25:51	2014-01-11 13:25:51	204	\N
474	5	2224ccd0c62a3386b6191397	superseded	elixir	bob	defmodule Teenager do\n  def hey(a) do\n\t\tcond do\n\t\t\tString.lstrip(a) == "" ->\n        "Fine. Be that way!"\n      String.ends_with? a, "?" ->\n\t\t\t\t"Sure."\n      String.upcase(a) == a ->\n         "Woah, chill out!"\n\t\t\ttrue ->\n\t\t\t\t"Whatever."\n\t\tend\n  end\nend	\N	f	3	2	2013-12-30 19:06:54	2013-12-30 19:06:54	206	\N
1487	32	c98a72b4c6657b17cb93a0f9	pending	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    if self.edge_case\n      edge_roman\n    else\n      normal_roman\n    end\n  end\n\n  def edge_case\n    four? || nine? || forties? || nineties? || fourhundreds? || ninehundreds?\n  end\n\n  private\n\n  def edge_roman\n   if four?\n     'IV'\n   elsif nine?\n     'IX'\n   elsif forties?\n     'XL' + (self-40).to_roman\n   elsif nineties?\n     'XC' + (self-90).to_roman\n   elsif fourhundreds?\n     'CD' + (self-400).to_roman\n   elsif ninehundreds?\n     'CM' + (self-900).to_roman\n   end\n  end\n\n  def normal_roman\n    if thousand_or_greater?\n      'M' + (self-1000).to_roman\n    elsif fivehundred_or_greater?\n      'D' + (self-500).to_roman\n    elsif onehundred_or_greater?\n      'C' + (self-100).to_roman\n    elsif fifty_or_greater?\n      'L' + (self-50).to_roman\n    elsif ten_or_greater?\n      'X' + (self-10).to_roman\n    elsif five_or_greater?\n      'V' + (self-5).to_roman\n    else\n      'I' * self\n    end\n  end\n\n  def thousand_or_greater?\n    self >= 1000\n  end\n\n  def fivehundred_or_greater?\n    self >= 500\n  end\n\n  def onehundred_or_greater?\n    self >= 100\n  end\n\n  def fifty_or_greater?\n    self >= 50\n  end\n\n  def ten_or_greater?\n    self >= 10\n  end\n\n  def five_or_greater?\n    self >= 5\n  end\n\n  def four?\n    self == 4\n  end\n\n  def nine?\n    self == 9\n  end\n\n  def forties?\n    self >= 40 && self < 50\n  end\n\n  def nineties?\n    self >= 90 && self < 100\n  end\n\n  def fourhundreds?\n    self >= 400 && self < 500\n  end\n\n  def ninehundreds?\n    self >= 900 && self < 1000\n  end\n\nend	\N	f	1	1	2013-09-02 19:56:27	2013-09-02 19:56:27	655	roman_numerals.rb
1498	32	c79fd317135852e4e49e6534	superseded	ruby	point-mutations	class DNA\n  def initialize(strand)\n    @strand = normalize(strand)\n  end\n\n  def hamming_distance(strand2)\n    strand2 = normalize(strand2)\n\n    distance = 0\n\n    @strand.each_with_index { |nucleotide, index|\n      distance += 1 unless strand2[index] == nucleotide\n    }\n\n    distance\n  end\n\n  private \n  def normalize(input)\n    input.split('')\n  end\nend	\N	f	0	1	2013-10-26 10:29:14	2013-10-26 10:29:14	658	\N
464	5	97d516e32d2e298fc3658f0b	superseded	elixir	word-count	defmodule Words do\n  import Enum, only: [reduce: 3]\n  import Dict, only: [update: 4]\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    words = String.downcase(sentence) |> String.split(%r/\\W/)\n    reduce(words, HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	2	8	2014-01-21 00:37:42	2014-01-21 00:37:42	204	\N
465	5	3ed081aecf80e9dd2ef69600	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    String.downcase(sentence)\n    |> String.split(%r/\\W/)\n    |> Enum.reduce(HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	0	10	2014-01-23 19:32:24	2014-01-23 19:32:24	204	\N
467	5	451d84564a5800ca01930e0c	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    String.downcase(sentence) |> String.split |>  do_count(HashDict.new)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    entry = prepare_entry(head, dict)\n    do_count(tail, entry)\n  end\n\n  defp prepare_entry(word, dict) do\n    Regex.replace(%r/\\W/, word, "") |> add_or_increment_entry(dict)\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	2	5	2014-02-08 17:59:02	2014-02-08 17:59:02	204	\N
468	5	86c9188613ffae644f1a9198	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    String.downcase(sentence)\n      |> String.split\n      |> do_count(HashDict.new)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    entry = Regex.scan(%r/\\w+/, head)\n      |> add_or_increment_entry(dict)\n    do_count(tail, entry)\n  end\n\n  defp add_or_increment_entry([], dict), do: dict\n  defp add_or_increment_entry([word], dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	2	6	2014-02-11 20:58:52	2014-02-11 20:58:52	204	\N
469	5	b98dfaf56ba18136835c3474	superseded	haskell	scrabble-score	module Scrabble\n( scoreLetter\n, scoreWord\n) where\n\nimport Data.Char (toLower)\n\nscoreLetter :: Char -> Int\nscoreLetter letter\n    | isIn "dg"    = 2\n    | isIn "bcmp"  = 3\n    | isIn "fhvwy" = 4\n    | isIn "k"     = 5\n    | isIn "jx"    = 8\n    | isIn "qz"    = 10\n    | otherwise    = 1\n    where isIn x = toLower letter `elem` x\n\nscoreWord :: String -> Int\nscoreWord letters = sum $ map scoreLetter letters	\N	f	1	1	2014-01-26 05:14:33	2014-01-26 05:14:33	205	\N
470	5	7f9a7c2c11573a782ef0f01e	done	haskell	scrabble-score	module Scrabble\n( scoreLetter\n, scoreWord\n) where\n\nimport Data.Char (toLower)\nimport Data.Map (findWithDefault, fromList)\n\nscoreLetter :: Char -> Int\nscoreLetter letter = findWithDefault 0 (toLower letter) scores where\n    scores = fromList $ concat\n        [ repeatZip 1 "aeilnorstu"\n        , repeatZip 2 "dg"\n        , repeatZip 3 "bcmp"\n        , repeatZip 4 "fhvwy"\n        , repeatZip 5 "k"\n        , repeatZip 8 "jx"\n        , repeatZip 10 "qz"\n        ]\n    repeatZip score letters = zip letters (repeat score)\n\nscoreWord :: String -> Int\nscoreWord letters = sum $ map scoreLetter letters	\N	f	1	2	2014-02-14 02:48:21	2014-02-14 02:48:21	205	\N
471	5	b5a6df7495dd087dd33476c5	done	elixir	bob	defmodule Teenager do\n  def hey(heard) do\n    cond do\n      silence?(heard) -> "Fine. Be that way!"\n      question?(heard) -> "Sure."\n      shouting?(heard) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\n  defp shouting?(heard) do\n    String.upcase(heard) == heard\n  end\n  defp question?(heard) do\n    String.ends_with? heard, "?"\n  end\n  defp silence?(heard) do\n    String.lstrip(heard) == ""\n  end\nend	\N	f	2	6	2013-12-08 17:46:20	2013-12-08 17:46:20	206	\N
472	5	334fcd5f21d570e9f12db698	superseded	elixir	bob	defmodule Teenager do\n  def hey(a) do\n\t\t"Whatever."\n  end\nend	\N	f	2	1	2013-12-12 04:05:51	2013-12-12 04:05:51	206	\N
473	5	0003698c1a7418f989c0569e	superseded	elixir	bob	defmodule Teenager do\n  def hey(a) do\n    cond do\n      String.lstrip(a) == "" -> "Fine. Be that way!"\n      String.ends_with? a, "?" -> "Sure."\n      String.upcase(a) == a -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend	\N	f	1	3	2013-12-29 18:49:31	2013-12-29 18:49:31	206	\N
525	8	9981d39b099aceda05681cae	hibernating	javascript	bob	var Bob = function() {\r\n\r\n\tthis.hey = function (words) {\r\n\t\tif (words === words.toUpperCase()) {\r\n\t\t\treturn "Woah, chill out!";\r\n\t\t}\r\n\t\treturn "Whatever.";\r\n\t};\r\n};\r\n\r\nmodule.exports = Bob;\r\n\r	\N	f	4	1	2014-03-19 22:18:25	2014-03-19 22:18:25	234	\N
1499	32	e98fd4197d8da9d31059da64	superseded	ruby	point-mutations	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(input_strand)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, input_strand)\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def normalize(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [normalize(s1)[0..min_length], normalize(s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    distance = 0\n\n    strand1.each_with_index { |nucleotide, index|\n      distance += 1 unless strand2[index] == nucleotide\n    }\n\n    distance\n  end\nend	\N	f	1	2	2013-10-29 03:41:08	2013-10-29 03:41:08	658	\N
1507	35	75e8c0c2e464697cf9d3eb12	done	ruby	meetup	class Meetup\n  require 'time'\n\n  def initialize(mon, year)\n    @mon = mon\n    @year = year\n  end\n\n  def get_date(wday, start, iter)\n    d = Date.new(@year, @mon, start)\n    while(d.wday != wday)\n      d += iter\n    end\n    d\n  end\n\n  def method_missing(name, *args, &block)\n    # defaults\n    wday = 0  # sunday\n    start = 1 # first\n    iter = 1  # search forward\n    case\n    when name =~ /mon/\n      wday = 1\n    when name =~ /tue/\n      wday = 2\n    when name =~ /wed/\n      wday = 3\n    when name =~ /thu/\n      wday = 4\n    when name =~ /fri/\n      wday = 5\n    when name =~ /sat/\n      wday = 6\n    end\n    case\n    when name =~ /teenth/\n      start = 13\n    when name =~ /second/\n      start = 8\n    when name =~ /third/\n      start = 15\n    when name =~ /fourth/\n      start = 22\n    when name =~ /last/\n      start = -1\n      iter = -1\n    end      \n    get_date(wday, start, iter)\n  end\n\nend	\N	f	0	1	2013-10-12 21:42:42	2013-10-12 21:42:42	661	\N
476	5	95860600ff2d06b43ec7d393	superseded	elixir	bob	defmodule Teenager do\n  defp shouting?(heard) do\n    String.upcase(heard) == heard\n  end\n  defp question?(heard) do\n    String.ends_with? heard, "?"\n  end\n  defp silence?(heard) do\n    String.lstrip(heard) == ""\n  end\n  def hey(heard) do\n    cond do\n      silence?(heard) -> "Fine. Be that way!"\n      question?(heard) -> "Sure."\n      shouting?(heard) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend	\N	f	0	5	2014-01-31 14:45:25	2014-01-31 14:45:25	206	\N
477	5	67288d347dd46db676a1ae8d	superseded	javascript	rna-transcription	// ok, now that I see a CoffeeScript track is on the way, I'll stop\n\nDNA = function(sequence) {\n  this.sequence = sequence;\n};\n\nDNA.prototype.toRNA = function() {\n  return this.sequence.replace(/T/g, 'U');\n};\n\nglobal.DNA = DNA;	\N	f	1	2	2014-01-22 02:53:33	2014-01-22 02:53:33	207	\N
478	5	eec1c8b95bf5d0b7cfc1398d	done	javascript	rna-transcription	(function() {\n  "use strict";\n\n  global.DNA = function(sequence) {\n    this.sequence = sequence;\n  };\n\n  DNA.prototype.toRNA = function() {\n    return this.sequence.replace(/T/g, 'U');\n  };\n})();	\N	f	0	3	2014-01-30 19:49:03	2014-01-30 19:49:03	207	\N
479	5	49f20a781a12e0d4cc3d8750	superseded	javascript	rna-transcription	// Generated by CoffeeScript 1.6.3\n(function() {\n  var DNA;\n\n  DNA = (function() {\n    function DNA(sequence) {\n      this.sequence = sequence;\n    }\n\n    DNA.prototype.toRNA = function() {\n      return this.sequence.replace(/T/g, 'U');\n    };\n\n    return DNA;\n\n  })();\n\n  global.DNA = DNA;\n\n}).call(this);	\N	f	1	1	2014-02-06 09:48:33	2014-02-06 09:48:33	207	\N
480	5	0b5d933d9c25473d42007641	done	ruby	atbash-cipher	class Atbash\n\n  ALPHABET = ('a'..'z').to_a\n\n  def self.encode(subject)\n    result = ''\n    \n    subject.gsub!(/\\W+/, '')\n\n    subject.downcase.each_char do |letter|\n      if letter =~ /[a-z]/\n        result << ALPHABET[(ALPHABET.index(letter)+1) * -1]\n      else\n        result << letter\n      end\n    end\n\n    result.scan(/.{1,5}/).join(" ")\n  end\nend	\N	f	0	1	2014-01-15 15:34:24	2014-01-15 15:34:24	208	\N
481	5	c9baa979f09191f8a215a91a	done	ruby	grade-school	class School\n  \n  attr_reader :db\n  \n  def initialize\n    @db = {}\n  end\n  \n  def add(name, grade)\n    grade(grade) << name\n  end\n  \n  def grade(grade)\n    @db[grade] || (@db[grade] = [])\n  end\n  \n  def sort\n    dbclone = {}\n    @db.keys.sort.inject({}) do |dbclone, grade|\n      dbclone[grade] = grade_sorted_by_name(grade)\n      dbclone\n    end\n  end\n  \n  private\n  \n  def grade_sorted_by_name(grade)\n    grade(grade).sort\n  end\n  \nend	\N	f	1	1	2013-12-22 10:44:09	2013-12-22 10:44:09	209	\N
482	5	f6ee268bb123c4c4563b5025	pending	clojure	binary	(ns binary)\n\n(defn- bit-to-decimal\n  ([b] (if (zero? (Integer. (str b))) 0 1))\n  ([exponent b] (bit-shift-left (bit-to-decimal b) exponent)))\n\n(defn to-decimal [n]\n  (if (re-matches #"^[01]+$" n)\n      (->> (reverse n)\n           (map-indexed bit-to-decimal)\n           (reduce +))\n      0))	\N	f	1	1	2014-02-24 09:53:02	2014-02-24 09:53:02	210	binary.clj
484	5	0641b66c95b2d78662646e6e	done	elixir	meetup	defmodule Meetup do\n  @moduledoc """\n  Calculate meetup dates.\n  """\n  \n  @type weekday ::\n      :monday | :tuesday | :wednesday\n    | :thursday | :friday | :saturday | :sunday\n\n  @type schedule :: :first | :second | :third | :fourth | :last | :teenth\n\n  @doc """\n  Calculate a meetup date.\n\n  The schedule is in which week (1..4, last or "teenth") the meetup date should\n  fall.\n  """\n  @spec meetup(pos_integer, pos_integer, weekday, schedule) :: :calendar.date\n  def meetup(year, month, weekday, schedule) do\n    first = first_in_month(weekday, year, month)\n    daysinmonth = :calendar.last_day_of_the_month(year, month)\n    day = case schedule do\n      :teenth when first + 7 > 12 -> first + 7\n      :teenth -> first + 14\n      :first -> first\n      :second -> first + 7\n      :third -> first + 14\n      :fourth -> first + 21\n      :last when first + 28 > daysinmonth -> first + 21\n      :last -> first + 28\n    end\n    {year, month, day}\n  end\n\n  defp first_in_month(weekday, year, month) do\n    weekdayno = get_weekdayno(weekday)\n    monthstart = :calendar.day_of_the_week(year, month, 1)\n    if weekdayno < monthstart do\n      8 + weekdayno - monthstart\n    else\n      1 + weekdayno - monthstart\n    end\n  end\n\n  defp get_weekdayno(weekday) do\n    case weekday do\n      :monday -> 1\n      :tuesday -> 2\n      :wednesday -> 3\n      :thursday -> 4\n      :friday -> 5\n      :saturday -> 6\n      :sunday -> 7\n    end\n  end\nend	\N	f	1	2	2014-02-03 21:41:03	2014-02-03 21:41:03	211	meetup.exs
485	5	a56890f6acf59b0ea300f9ad	done	ruby	scrabble-score	class Scrabble\n  SCORES = {\n    "a"=>1, "b"=>3, "c"=>3, "d"=>2, "e"=>1, "f"=>4, "g"=>2, "h"=>4, "i"=>1, "j"=>8, "k"=>5, \n    "l"=>1, "m"=>3, "n"=>1, "o"=>1, "p"=>3, "q"=>10, "r"=>1, "s"=>1, "t"=>1, "u"=>1, "v"=>4, \n    "w"=>4, "x"=>8, "y"=>4, "z"=>10}\n\n  attr_reader :word\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = clean_word(word)\n  end\n\n  def score\n    word.chars.inject(0) { |points, letter| points += score_letter(letter) }\n  end\n\n  def score_letter(letter)\n    SCORES[letter]\n  end\n\n  private\n  def clean_word(word)\n    word ||= ''\n    (word.gsub /[\\s[[:punct:]]\\d]/, '').downcase\n  end\n\nend	\N	f	0	1	2013-11-25 01:49:41	2013-11-25 01:49:41	212	scrabble.rb
1512	35	534ce10a6a8755b03bb76850	hibernating	ruby	leap	class Year\n  def self.leap?(year)\n    every_fourth(year) && (not_every_hundredth(year) || every_four_hundredth(year))\n  end\n\n  def self.every_fourth(year)\n    year % 4 == 0\n  end\n\n  def self.not_every_hundredth(year)\n    year % 100 != 0\n  end\n\n  def self.every_four_hundredth(year)\n    year % 400 == 0\n  end\nend	\N	f	3	2	2014-01-03 07:51:58	2014-01-03 07:51:58	665	year.rb
1514	35	07741118136d45ffdb9d06b5	done	ruby	grade-school	class School\n  def initialize\n    @db = Hash.new { |h, k| \n      h[k] = Array.new\n    }\n  end\n\n  def db\n    @db.keys.sort.each_with_object({}) do |grade, new_db|\n      new_db[grade] = @db[grade].dup\n    end\n  end\n\n  def add(student, grade)\n    @db[grade] << student\n  end\n\n  def grade(number)\n    @db[number]\n  end\n\n  def sort\n    db.tap { |clone_db|\n      clone_db.keys.each do |grade|\n        clone_db[grade].sort!\n      end\n    }\n  end\nend	\N	f	0	1	2013-12-25 17:53:06	2013-12-25 17:53:06	666	\N
1515	35	0393712270a3b11857e2a80e	superseded	ruby	raindrops	# require 'Math'\n\nclass Raindrops\n\n\tdef convert(numero)\n\t\t\n\t\toriginal=numero\t\t\t\t\t\t\t\t\t # Conservamos el numero original en caso de no encontrar factores primos 3,5,7\n\t\tsalida=""\t\t\t\t\t\t\t\t\t\t #  \n\t\traindropSpeak={3=>'Pling',5=>'Plang',7=>'Plong'} # Salida segun factor encontrado\n\t\traindropsFound=Hash.new  \t\t\t\t\t\t # Aqui iremos guardando los factores encontrados y no duplicaremos\n\t\tserieImpar=3\n\n\t\twhile numero %2 ==0\n\t\t\tnumero=numero/2 \n\t\tend\n\n\t\traiz=Math.sqrt(numero)\n        # Raiz cuadrada de 5 es 2.23606797749979\n\t\twhile (serieImpar<=raiz && numero > 1)\n\n\t\t\tif(numero % serieImpar==0)\n\n\t\t\t\t# puts serieImpar\n\n\t\t\t\tif raindropSpeak.has_key?(serieImpar) && raindropsFound.has_key?(serieImpar)==false\n\t\t\t\t\t\n\t\t\t\t\traindropsFound[serieImpar]=serieImpar\n\t\t\t\t\tsalida=salida+raindropSpeak[serieImpar]\n\n\t\t\t\tend\n\n\t\t\t\tnumero=numero/serieImpar\n\t\t\telse\n\t\t\t\tserieImpar=serieImpar+2\n\t\t\tend\n\n\t\tend\n\n\t\t# Si seriaImpar existe como llave en hash 3,5,7 y no existe aun encontrado en raindropsfound\n\n\t\t# puts "ultimo numero #{numero}"\n\t\t\n\t\tif(numero==3 || numero==5 || numero==7)\n\t\t\tserieImpar=numero\n\t\t\tif (raindropSpeak.has_key?(serieImpar) && !raindropsFound.has_key?(serieImpar) ) then\n\t\t\t\n\t\t\t\traindropsFound[serieImpar]=serieImpar\n\t\t\t\tsalida=salida+raindropSpeak[serieImpar]\n\t\t\n\t\t\tend\n\t\telse\n\n\t\t\tif salida==""\n\t\t\t\tsalida=original.to_s\n\t\t\tend\n\n\t\tend\n\n\n\t\t# puts salida \n\n\t\treturn salida\n\n\tend\n\nend\n\n# o=Raindrops.new\n# puts o.convert(21)	\N	f	4	1	2013-12-21 10:13:22	2013-12-21 10:13:22	667	raindrops.rb
487	5	4b3935dcd3e37604af36de7b	done	ruby	house	class House\n\n  def verse number\n    "This is #{lines(number).join(' ')}.\\n"\n  end\n\n  def verses start, finish\n    (start..finish)\n      .map { |number| verse(number) + "\\n" }\n      .join\n  end\n\n  private\n\n  def lines number_of_lines\n    lines = [\n      'the house that Jack built',\n      'the malt that lay in',\n      'the rat that ate',\n      'the cat that killed',\n      'the dog that worried',\n      'the cow with the crumpled horn that tossed',\n      'the maiden all forlorn that milked',\n      'the man all tattered and torn that kissed',\n      'the priest all shaven and shorn that married',\n      'the rooster that crowed in the morn that woke',\n      'the farmer sowing his corn that kept',\n      'the horse and the hound and the horn that belonged to'\n    ]\n\n    lines[0...number_of_lines].reverse\n  end\n\nend	\N	f	0	2	2013-12-07 11:53:57	2013-12-07 11:53:57	213	house.rb
488	6	d2f0d13d8917d23801926e99	done	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth   | Mercury | Venus  | Mars \n            | Jupiter | Saturn  | Uranus | Neptune \n\nsecsPerYear = 31557600 :: Integer\n\norbitalPeriod planet = case planet of\n    Earth   -> 1 :: Float\n    Mercury -> 0.2408467\n    Venus   -> 0.61519726\n    Mars    -> 1.8808158\n    Jupiter -> 11.862615\n    Saturn  -> 29.447498\n    Uranus  -> 84.016846\n    Neptune -> 164.79132\n\nageOn :: Planet -> Integer -> Float\nageOn planet secs = \n\tfromIntegral secs \n  / fromIntegral secsPerYear\n  / orbitalPeriod planet	\N	f	3	1	2013-11-25 04:09:35	2013-11-25 04:09:35	214	\N
489	6	9200de33c7e83352d8731a87	done	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.trim() === "");\n}\n\nmodule.exports = Bob;	\N	f	4	3	2013-12-10 15:19:19	2013-12-10 15:19:19	215	\N
490	6	d93e0c3621d5e837d6d47caa	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	4	1	2013-12-26 05:13:32	2013-12-26 05:13:32	215	\N
491	6	3ca580cd2973c22467233bf8	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	5	2	2014-02-26 06:08:48	2014-02-26 06:08:48	215	\N
492	6	9d8ad44e1fd9ed4a9686b46d	done	haskell	robot-name	module Robot (\n    Robot\n  , robotName\n  , mkRobot\n  , resetName\n  ) where\n\nimport System.Random (randomRIO)\nimport Control.Concurrent (MVar, newMVar, readMVar, swapMVar)\nimport Control.Monad (void)\n\ndata Robot = Robot\n  { name :: MVar String\n  }\n\nmkRobotName :: IO String\nmkRobotName = mapM randomRIO [letters, letters, numbers, numbers, numbers]\n  where\n    letters = ('A','Z')\n    numbers = ('0','9')\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ name r\n\nmkRobot :: IO Robot\nmkRobot = name' >>= return . Robot\n  where\n    name' = mkRobotName >>= newMVar\n\nresetName :: Robot -> IO ()\nresetName r = void (a)\n  where\n    name' = mkRobotName\n    a = name' >>= swapMVar (name r)	\N	f	4	1	2014-01-11 07:58:15	2014-01-11 07:58:15	216	\N
494	6	b3cd997b4781249ca7571621	done	ruby	bob	class Bob\n\n  def hey(words)\n\n    if there_was_silence(words)\n      'Fine. Be that way!'\n    elsif someone_asked_question(words)\n      'Sure.'\n    elsif someone_shouted(words)\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def there_was_silence(words)\n    words.strip.empty?\n  end\n\n  def someone_asked_question(words)\n    (words.end_with?('?')) && ((words.upcase != words) || (words.to_i > 0))\n  end\n\n  def someone_shouted(words)\n    (words.upcase == words) && (words[-1].to_i < 1 )\n  end\nend	\N	f	5	2	2014-01-10 06:13:30	2014-01-10 06:13:30	217	\N
526	8	f5caf1989ad347fa1e356400	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    return true if evenly_divisible(@year, 400)\n    return false if evenly_divisible(@year, 100)\n    return true if evenly_divisible(@year, 4)\n    false\n  end\n\n  private\n\n  def evenly_divisible(numerator, denominator)\n    quotient = numerator / denominator\n    is_divisible = false\n    is_divisible = true if quotient * denominator == numerator\n\n    is_divisible\n  end\nend	\N	f	5	1	2014-03-18 01:51:03	2014-03-18 01:51:03	235	\N
1526	35	840b042aabfe300ba5bd4bd2	superseded	ruby	word-count	class Words\n  attr_reader :words\n\n  def initialize(words)\n    @words = words.downcase\n  end\n\n  def count\n    word_list(words).inject({}) do |memo, word|\n      memo[word] = lowercase_words_only(words).split.grep(word).size\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    lowercase_words_only(words).split.uniq\n  end\n\n  def discard_punctuation(words)\n    words.gsub(/[!&@$%^:,]/,'')\n  end\nend\n\n# `lowercase_words_only` sounds like it would discard words\n# that aren't lowercase, but what you really want is to normalize\n# the words and then count them. Rename the method to be more\n# expressive of what it actually dose. You never really need\n# the original `@words`. Could you do some preprocessing in\n# `initialize` to get what you actually want? Are you familiar\n# with `Array#count`?	\N	f	3	2	2013-10-05 18:24:25	2013-10-05 18:24:25	674	\N
1537	33	90d673db5ef04a40b39b850c	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  # Add a student to a class\n  # If that class does not exist, create a new array with the name of the\n  # student passed in for that class\n  def add(name, class_number)\n    return @db[class_number].push(name) unless @db[class_number].nil?\n\n    @db[class_number] = [name]\n  end\n\n  # Return the array of the names of a student in the specified class\n  # If there is no one in that class, return an empty array\n  def grade(class_number)\n    @db.fetch(class_number, [])\n  end\n\n  # Sort the classes by number and then sort the students in each class\n  # alphabetically\n  # Return the sorted hash\n  def sort\n    # sort the @db hash and the values of the students\n    sorted_db = @db.sort.each do |class_number, students|\n      students.sort!\n    end\n\n    # convert the sorted_db array back to a hash\n    Hash[sorted_db]\n  end\nend	\N	f	0	1	2013-11-27 15:07:39	2013-11-27 15:07:39	675	\N
496	6	420719944734a74aa0c99533	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input to an array of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}	\N	f	3	1	2014-01-12 17:34:44	2014-01-12 17:34:44	218	\N
497	6	f88c4a288e2c757db2f8b81b	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}	\N	f	2	2	2014-01-25 18:26:00	2014-01-25 18:26:00	218	\N
498	6	2589443b84e0b75bd86e9cfc	done	javascript	word-count	// Satisfy the jasmine tests\nmodule.exports = function(str) { return { count: ns.countWords(ns.words(str)) } }\n\n// A namespace for a set of functions that will make up this module.\nvar ns = module.exports.ns = {}\n\n// The module's public interface\n\n// Count the number of times each word occurs in a list of words\nns.countWords = function(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nns.words = function (str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}\n\n// ---\n\n// How I would test this\n\n// run tests when invoked directly: i.e. `node words.js` from the shell\nmodule.parent || tests()\n\n// How I would test this\nfunction tests() {\n  var assert = require('assert')\n\n  // Unit tests\n\n  assert.deepEqual(ns.words('word'), ['word'])\n  assert.deepEqual(ns.words('one of each'), ['one','of','each'])\n  assert.deepEqual(ns.words('one fish two fish red fish blue fish'), ['one','fish','two','fish','red','fish','blue','fish'])\n  assert.deepEqual(ns.words('car : carpet as java : javascript!!&@$%^&'), ['car','carpet','as','java','javascript'])\n  assert.deepEqual(ns.words('testing, 1, 2 testing'), ['testing','1','2','testing'])\n  assert.deepEqual(ns.words('go Go GO'), ['go','go','go'])\n\n  assert.deepEqual(ns.countWords(['word']), { 'word' : 1 })\n  assert.deepEqual(ns.countWords(['one', 'of', 'each']), { 'one': 1, 'of': 1, 'each': 1 })\n  assert.deepEqual(ns.countWords(['one','fish','two','fish','red','fish','blue','fish']), { 'one' : 1, 'fish' : 4, 'two' : 1, 'red' : 1, 'blue' : 1 })\n  assert.deepEqual(ns.countWords(['car','carpet','as','java','javascript']), { 'car' : 1, 'carpet' : 1, 'as' : 1, 'java' : 1, 'javascript' : 1 })\n  assert.deepEqual(ns.countWords(['testing','1','2','testing']), { 'testing' : 2, '1' : 1, '2' : 1 })\n  assert.deepEqual(ns.countWords(['go','go','go']), { 'go' : 3 })\n\n  console.log('ok')\n}	\N	f	0	4	2014-02-08 08:13:24	2014-02-08 08:13:24	218	\N
500	6	7bf3cf42ee9c8f6985a2c1b0	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var that = this;\n      return Nucleotides.dna_bases.reduce(function(tally, nucleotide) {\n        tally[nucleotide] = that.count(nucleotide);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	3	3	2013-12-14 02:43:30	2013-12-14 02:43:30	219	\N
501	6	13b97cb5fffeab9e198abe83	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var that = this;\n\n      return Nucleotides.dna_bases.reduce(function(tally, char) {\n        tally[char] = that.count(char);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	4	2	2014-01-17 20:14:44	2014-01-17 20:14:44	219	\N
527	8	aa7bcc54e545319a1d436a63	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) && (!divisible_by?(100) || divisible_by?(400))\n  end\n\n  private\n\n  def divisible_by?(divisor)\n    @year % divisor == 0\n  end\nend	\N	f	5	5	2014-03-18 16:16:03	2014-03-18 16:16:03	235	\N
1539	33	3496fe734f2182dde050c8a1	superseded	ruby	binary-search	class BinarySearch\n\n  attr_reader :list \n\n  def initialize(list)\n    @list = list.clone\n    validate \n  end\n\n  def search_for(item)\n    raise RuntimeError if list.empty?\n    if list[middle] > item\n      self.class.new(list[0, middle]).search_for(item)\n    elsif list[middle] < item\n      middle + 1 + self.class.new(list[(middle + 1)..-1]).search_for(item)\n    else\n      middle\n    end\n  end\n\n  def middle\n    list.length / 2\n  end\n\nprivate\n\n  def validate\n    raise ArgumentError if list.each_cons(2).any? { |a, b| a >= b }\n  end\n\nend	\N	f	1	1	2013-09-23 12:36:52	2013-09-23 12:36:52	676	binary.rb
1540	33	2158f23dab0463918da5cccc	superseded	ruby	binary-search	class BinarySearch\n\n  attr_reader :list\n\n  def initialize(list)\n    raise ArgumentError unless sorted? list\n    @list = list.clone\n  end\n\n  def search_for(item)\n    raise RuntimeError if list.empty?\n    find_on_left(item) || find_on_right(item) || middle\n  end\n\n  def middle\n    list.length / 2\n  end\n\nprivate\n\n  def sorted?(list)\n    list.each_cons(2).all? { |a, b| a < b }\n  end\n\n  def find_on_left(item)\n    search(item, on_left) if middle_element > item\n  end\n\n  def find_on_right(item)\n    search(item, on_right) + middle + 1 if middle_element < item\n  end\n\n  def search(item, list)\n    self.class.new(list).search_for(item)\n  end\n\n  def middle_element\n    list[middle]\n  end\n\n  def on_left\n    list[0, middle]\n  end\n\n  def on_right\n    list[(middle + 1)..-1]\n  end\n\nend	\N	f	1	2	2013-09-27 12:23:05	2013-09-27 12:23:05	676	binary.rb
1549	33	8a24990b24d06572f58344cb	superseded	ruby	proverb	class Proverb\n  attr_reader :consequences\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    if @modifier == nil\n      "And all for the want of a #{consequences[0]}."\n    else\n      "And all for the want of a #{@modifier} #{consequences[0]}."\n    end\n  end\n\n  private\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	f	3	2	2014-02-20 09:50:27	2014-02-20 09:50:27	677	\N
503	6	0bd1389484bae62ad76dddc3	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.split('').sort\n    end\n  end\nend	\N	f	2	1	2013-11-02 09:46:13	2013-11-02 09:46:13	220	\N
504	6	a2e94dea2b6531117cb0b2e1	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.chars.sort\n    end\n  end\nend	\N	f	2	2	2013-11-16 16:00:09	2013-11-16 16:00:09	220	\N
505	6	8e5d78a3d8a47d923356d000	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      Word.new(test_word).anagram_of? word\n    end\n  end\n\n  class Word < Struct.new(:value)\n    attr_reader :letters\n\n    def initialize(string)\n      super(string.downcase)\n      @letters = Letters.new(value)\n    end\n\n    def anagram_of?(other)\n      other != self && other.letters == letters\n    end\n  end\n\n  class Letters < Struct.new(:value)\n    def initialize(string)\n      super(string.chars.sort)\n    end\n  end\nend	\N	f	1	3	2013-12-16 16:39:38	2013-12-16 16:39:38	220	\N
506	6	e99563f257bd295d566004c7	pending	javascript	robot-name	module.exports = function() {\r\n\tvar letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n\t\t\tnumbers = '0123456789',\r\n\t\t\tgetRandom = function(list) { return list[Math.floor(Math.random() * list.length)]; };\r\n\r\n\tfunction generateName() {\r\n\t\tvar robot =\tgetRandom(letters) + \r\n\t\t\t\t\t\t\t\tgetRandom(letters) + \r\n\t\t\t\t\t\t\t\tgetRandom(numbers) + \r\n\t\t\t\t\t\t\t\tgetRandom(numbers) + \r\n\t\t\t\t\t\t\t\tgetRandom(numbers);\r\n\r\n\t\treturn robot;\r\n\t}\r\n\r\n\treturn {\r\n\t\tname: generateName(),\r\n\t\treset: function() {\r\n\t\t\tthis.name = generateName();\r\n\t\t}\r\n\t};\r\n};	\N	f	3	1	2014-02-20 23:21:32	2014-02-20 23:21:32	221	robot-name.js
507	6	357c49b9f25823e231585e18	superseded	haskell	roman-numerals	module Roman (numerals) where\n\nnumerals :: Int -> String\nnumerals n\n  | n >= 1000 = "M"  ++ numerals (n-1000)\n  | n >=  900 = "CM" ++ numerals (n-900)\n  | n >=  500 = "D"  ++ numerals (n-500)\n  | n >=  400 = "CD" ++ numerals (n-400)\n  | n >=  100 = "C"  ++ numerals (n-100)\n  | n >=   90 = "XC" ++ numerals (n-90)\n  | n >=   50 = "L"  ++ numerals (n-50)\n  | n >=   40 = "XL" ++ numerals (n-40)\n  | n >=   10 = "X"  ++ numerals (n-10)\n  | n >=    9 = "IX" ++ numerals (n-9)\n  | n >=    5 = "V"  ++ numerals (n-5)\n  | n >=    4 = "IV" ++ numerals (n-4)\n  | n >=    1 = "I"  ++ numerals (n-1)\n  | otherwise = ""\n 	\N	f	1	1	2014-01-10 13:55:35	2014-01-10 13:55:35	222	\N
508	6	0084fa80feff52537fc6c4db	done	haskell	roman-numerals	module Roman (numerals) where\n\nnumerals :: Int -> String\nnumerals n = translate n values\n  where values = [(1000, "M"),(900, "CM"), (500, "D"), (400, "CD"), \n                  (100, "C"), (90, "XC"), (50, "L"), (40, "XL"), \n                  (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")]\n\ntranslate :: Int -> [(Int, String)] -> String\ntranslate n values\n  | null values = ""\n  | arabicVal > n = translate n remainingValues\n  | otherwise = romanVal ++ translate (n - arabicVal) values\n  where (arabicVal, romanVal) : remainingValues = values	\N	f	3	2	2014-01-13 01:31:35	2014-01-13 01:31:35	222	\N
509	6	35cbb0b4036292f7b3631c3e	hibernating	ruby	word-count	Phrase = Struct.new(:phrase) do\n  def word_count\n    counts = Hash.new(0)\n    words.each { |word| counts[word] += 1 }\n\n    counts\n  end\n\n  private\n\n  def words\n    phrase.downcase.gsub(/\\W/, ' ').split\n  end\nend	\N	f	3	1	2013-11-13 06:51:11	2013-11-13 06:51:11	223	\N
510	6	347c537d107b57dc1b6ef72e	hibernating	ruby	leap	class Year\n  attr_accessor :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    quadricentennial? || leap_year?\n  end\n\n  private\n\n  def quadricentennial?\n    @year % 400 == 0\n  end\n\n  def leap_year?\n    @year % 4   == 0 && \n    @year % 100 != 0\n  end\nend	\N	f	2	2	2013-11-01 13:20:08	2013-11-01 13:20:08	224	\N
511	6	71fdc62d313c8908cce7a14c	superseded	ruby	leap	class Year\n  attr_accessor :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 400 == 0 || (@year % 4 == 0 && @year % 100 != 0) ? true : false\n  end\nend	\N	f	0	1	2013-12-07 14:11:52	2013-12-07 14:11:52	224	\N
1567	33	95fb8d2e97bc71b1cbadb833	done	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select {|candidate| is_anagram_of?(candidate)}\n  end\n\n  private\n\n  def is_anagram_of?(candidate)\n    downcased_candidate = candidate.downcase\n    if (@word.length != candidate.length) || @word.eql?(downcased_candidate)\n      false\n    else\n      (@histogram ||= character_histogram(@word)) == character_histogram(downcased_candidate)\n    end\n  end\n\n  def character_histogram(word)\n    histogram = Hash.new(0)\n    word.chars.each {|character| histogram[character] += 1 }\n    histogram\n  end\n\nend	\N	f	2	3	2013-12-19 09:53:21	2013-12-19 09:53:21	683	\N
1571	33	b87c99a5bda21b8e0e4bf027	done	ruby	triangle	class Triangle\n  def initialize(side1, side2, side3)\n    @sides = [side1, side2, side3]\n    validate\n  end\n\n  def kind\n    case number_of_equal_sides\n    when 0 then :scalene\n    when 2 then :isosceles\n    when 3 then :equilateral\n    end\n  end\n\n  private\n\n  def validate\n    ensure_positivity\n    ensure_triangle_inequality\n  end\n\n  def ensure_positivity\n    unless sides.all? { |side| side > 0 }\n      raise TriangleError, "Sides must be positive!"\n    end\n  end\n\n  def ensure_triangle_inequality\n    unless sides.all? { |side| perimeter - side > side }\n      raise TriangleError, "The sum of any two sides must exceed the third!"\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\n\n  def number_of_equal_sides\n    case sides.uniq.length\n    when 3 then 0\n    when 2 then 2\n    when 1 then 3\n    end\n  end\n\n  def sides\n    @sides\n  end\nend\n\n\nclass TriangleError < StandardError\nend	\N	f	1	5	2013-10-10 09:01:24	2013-10-10 09:01:24	685	\N
1578	40	00d014312c3c9e22c94e8c16	done	ruby	rna-transcription	class DNA\n\n  attr_reader :nucleotides\n\n  THYMINE = 'T'\n  URACIL = 'U'\n  \n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n  \n  def to_rna\n    nucleotides.gsub(THYMINE,URACIL)\n  end\nend	\N	f	0	2	2014-02-17 16:43:03	2014-02-17 16:43:03	687	\N
514	6	0274687ed7fda28ac62b96c9	done	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    pairs_of_nucleotides(strand1, strand2)\n      |> count_of_differences\n  end\n\n  defp pairs_of_nucleotides(strand1, strand2) do\n    List.zip([strand1, strand2])\n  end\n\n  defp count_of_differences(pairs) do\n    Enum.reduce(pairs, 0, fn(pair, acc) ->\n      if elem(pair, 0) != elem(pair, 1) do acc = acc + 1 end\n      acc\n    end)\n  end\nend	\N	f	3	2	2014-02-14 18:05:35	2014-02-14 18:05:35	226	point_mutations.exs
515	6	e524adaf4537717bef655234	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber string =\n  case length string' of\n    10 -> string'\n    11 -> if head string' == '1' then tail string' else badNumber\n    _  -> badNumber\n    where string' = filter isDigit string\n          badNumber = "0000000000"\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint string = printf "(%s) %s-%s" area middle rest'\n  where (area, rest)    = splitAt 3 . number $ string\n        (middle, rest') = splitAt 3 rest	\N	f	3	1	2013-12-27 09:28:18	2013-12-27 09:28:18	227	Phone.hs
516	6	9f56d86e28e7d6c5bc434ffd	superseded	python	bob	class Bob:\n\n    def hey(self, word):\n        if (word is None) or (len(word.strip()) == 0):\n            return 'Fine. Be that way!'\n        elif word == word.upper():\n            return 'Woah, chill out!'\n        elif word[-1] == '?':\n            return 'Sure.'\n        return 'Whatever.'	\N	f	4	1	2013-11-07 16:48:12	2013-11-07 16:48:12	228	\N
517	6	d21ba551f4f1c59811f311d4	hibernating	python	bob	class Bob():\n    def hey(self, word):\n        sentence = Discussion(word)\n        if sentence.empty():\n            return 'Fine. Be that way!'\n        elif sentence.yell():\n            return 'Woah, chill out!'\n        elif sentence.question():\n            return 'Sure.'\n        return 'Whatever.'\n\n\nclass Discussion():\n    def __init__(self, message):\n        self.message = message\n\n    def empty(self):\n        return self.message is None or len(self.message.strip()) == 0\n\n    def yell(self):\n        return self.message == self.message.upper()\n\n    def question(self):\n        return self.message.endswith('?')	\N	f	5	2	2013-12-11 22:39:57	2013-12-11 22:39:57	228	\N
518	6	9f210a49faf921729dcbc825	done	python	anagram	class Anagram(object):\n  def __init__(self, text):\n    self.text = text.lower() \n\n  def match(self, words):\n    return [word for word in words if self.matched(word)]\n\n  def sort(self, word):\n    return sorted(word.lower())\n\n  def matched(self, word):\n    return self._anagram_of(word) and self._not_the_same(word)\n\n  def _not_the_same(self, word):\n    return self.text != word\n\n  def _anagram_of(self, word):\n    return self.sort(word) == self.sort(self.text)	\N	f	5	1	2014-01-19 12:04:00	2014-01-19 12:04:00	229	\N
520	8	373e42b35cd880e671f3cfd9	done	ruby	bob	class Bob\n  def hey(instruction)\n    case instruction.strip\n      when ''                 then "Fine. Be that way!"\n      when instruction.upcase then "Woah, chill out!"\n      when /\\?$/              then "Sure."\n      else "Whatever."\n    end\n  end\nend	\N	f	8	1	2014-03-17 19:34:39	2014-03-17 19:34:39	231	\N
521	8	cde9d24c4cc2890f80c93102	superseded	python	word-count	import re\nfrom collections import Counter\n\n\nclass Phrase(object):\n    """ Phrase class """\n    def __init__(self, phrase):\n        """ Initialize object and perform sanitization\n\n        @param phrase: input phrase string\n        """\n        # remove non alpha characters and extraneous space between words\n        phrase = re.sub(r'[^\\w]', ' ', phrase)\n        phrase = ' '.join(phrase.split())\n        self.phrase = phrase.lower()\n\n    def word_count(self):\n        """ Count the number of words' occurrences in a string\n\n        @return: dict of words and their number of occurrences\n        """\n        words = self.phrase.split(' ')\n        return dict(Counter(words))	\N	f	0	1	2014-03-18 03:36:14	2014-03-18 03:36:14	232	\N
522	8	4414ab5affaca73c314491f9	done	python	word-count	import re\nfrom collections import Counter\n\n\nclass Phrase(object):\n    """ Phrase class """\n    def __init__(self, phrase):\n        """ Initialize object and perform sanitization\n\n        @param phrase: input phrase string\n        """\n        # remove non alpha characters\n        phrase = re.sub(r'[^\\w]', ' ', phrase)\n        self.phrase = phrase.lower()\n\n    def word_count(self):\n        """ Count the number of words' occurrences in a string\n\n        @return: dict of words and their number of occurrences\n        """\n        words = self.phrase.split()\n        return dict(Counter(words))	\N	f	5	2	2014-03-18 21:17:09	2014-03-18 21:17:09	232	\N
523	8	68b93d9d30d00e5cd13ff08f	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def add(name, year)\n    grade(year) << name\n  end\n\n  def grade(year)\n    db[year]\n  end\n\n  def sort\n    Hash[years.map { |year| sorted_grade(year) }]\n  end\n\n  private\n\n  def years\n    db.keys.sort\n  end\n\n  def sorted_grade(year)\n    [year, grade(year).sort]\n  end\nend	\N	f	3	1	2014-03-17 13:35:26	2014-03-17 13:35:26	233	\N
524	8	351c7c6ccec64815e55aa6a0	done	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def add(name, year)\n    grade(year) << name\n  end\n\n  def grade(year)\n    db[year]\n  end\n\n  def sort\n    Hash[years.map { |year| [year, grade(year).sort] }]\n  end\n\n  private\n\n  def years\n    db.keys.sort\n  end\nend	\N	f	0	2	2014-03-19 12:30:37	2014-03-19 12:30:37	233	\N
1579	40	32bb08747202174445da5468	superseded	ruby	bob	#!/usr/bin/env ruby\n\nclass Bob\n  def hey(msg)\n    Response.new(msg).speak\n  end\n\n  class Response\n    def initialize(msg)\n      @heard = WordsHeard.new(msg)\n    end\n\n    def speak\n      return "Fine. Be that way!" if @heard.silence?\n      return "Woah, chill out!" if @heard.yelling?\n      return "Sure." if @heard.question?\n      "Whatever."\n    end\n  end\nend\n\nclass WordsHeard\n  def initialize(msg)\n    @msg = msg.to_s\n  end\n  \n  def question?\n    !@msg.match(/.+\\?$/).nil?\n  end\n\n  def yelling?\n    @msg.upcase == @msg\n  end\n\n  def silence?\n    @msg.empty?\n  end\nend	\N	f	1	2	2014-01-14 05:28:03	2014-01-14 05:28:03	688	\N
1592	40	42dfb36d15bd1e24d17a9a2b	done	ruby	anagram	class Anagram\n\n  def initialize(sample)\n    @subject = sample.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all{ |candidate| anagram? candidate.downcase }\n  end\n\n  private\n\n  def anagram?(candidate)\n    same_alphagram?(candidate) && different_word?(candidate)\n  end\n\n  def same_alphagram?(candidate)\n    @subject.chars.sort == candidate.chars.sort\n  end\n\n  def different_word?(candidate)\n    @subject != candidate\n  end\n\nend	\N	f	5	5	2014-02-11 04:56:54	2014-02-11 04:56:54	691	\N
529	8	74f12dd30a87b9c27ef0a9f7	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    vanilla_leap? || exceptional_century?\n  end\n\n  private\n\n  def evenly_divisible?(divisor)\n    @year % divisor == 0\n  end\n\n  def vanilla_leap?\n    evenly_divisible?(4) && !evenly_divisible?(100)\n  end\n\n  def exceptional_century?\n    evenly_divisible?(400)\n  end\nend	\N	f	5	3	2014-03-19 17:07:47	2014-03-19 17:07:47	235	\N
530	8	f3bfbf073ea5165964a394dd	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if vanilla_leap?\n      century? ? exceptional_century? : true\n    else\n      false\n    end\n  end\n\n  private\n\n  def evenly_divisible?(divisor)\n    @year % divisor == 0\n  end\n\n  def vanilla_leap?\n    evenly_divisible?(4)\n  end\n\n  def exceptional_century?\n    evenly_divisible?(400)\n  end\n\n  def century?\n    evenly_divisible?(100)\n  end\nend	\N	f	4	4	2014-03-20 02:43:28	2014-03-20 02:43:28	235	\N
532	8	df2e5881a8b507464f5d9ab2	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.chars.sort\n    end\n  end\nend	\N	f	0	2	2014-03-17 19:51:44	2014-03-17 19:51:44	236	\N
533	8	1fabbde3924c15cc380255be	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      Word.new(test_word).anagram_of? word\n    end\n  end\n\n  class Word < Struct.new(:value)\n    attr_reader :letters\n\n    def initialize(string)\n      super(string.downcase)\n      @letters = Letters.new(value)\n    end\n\n    def anagram_of?(other)\n      other != self && other.letters == letters\n    end\n  end\n\n  class Letters < Struct.new(:value)\n    def initialize(string)\n      super(string.chars.sort)\n    end\n  end\nend	\N	f	1	3	2014-03-18 08:37:43	2014-03-18 08:37:43	236	\N
534	8	56d1ca52a47599a7dd7e8fff	superseded	python	phone-number	# -*- coding:utf-8 -*-\nimport re\n\nclass Phone(object):\n    INVALID = "0" * 10\n\n    def __init__(self, input):\n        self.number = self._sanitize(input)\n\n    def _sanitize(self, input):\n        num = re.sub(r"\\D", "", input) \n        length = len(num)\n\n        if length == 11 and num.startswith("1"):\n            return num[1:]\n\n        if length != 10:\n            return self.INVALID\n\n        return num\n\n    def _split(self):\n        return self.number[:3], self.number[3:6], self.number[6:]\n    \n    def area_code(self):\n        return self._split()[0]\n\n    def pretty(self):\n        return "(%s) %s-%s" % self._split()\n\n\n\n    	\N	f	3	2	2014-03-19 01:50:51	2014-03-19 01:50:51	237	\N
535	8	e1be754ef081e53c7e84308f	done	python	phone-number	# -*- coding:utf-8 -*-\nimport re\n\nclass Phone(object):\n    INVALID = "0" * 10\n\n    def __init__(self, number):\n        self.number = number\n\n    @property\n    def number(self):\n        return self._number\n    \n    @number.setter\n    def number(self, value):\n        self._number = self._sanitize(value)\n\n    @classmethod\n    def _sanitize(cls, value):\n        num = re.sub(r"\\D", "", value) \n        length = len(num)\n\n        if length == 11 and num.startswith("1"):\n            return num[1:]\n\n        if length != 10:\n            return cls.INVALID\n\n        return num\n\n    def area_code(self):\n        return self._split()[0]\n\n    def pretty(self):\n        return "(%s) %s-%s" % self._split()\n\n    def _split(self):\n        return self.number[:3], self.number[3:6], self.number[6:]\n    \n\n\n\n    	\N	f	3	3	2014-03-19 09:39:40	2014-03-19 09:39:40	237	\N
536	8	07658f94a806f5087e094ed6	superseded	python	phone-number	# -*- coding:utf-8 -*-\nimport re\n\nclass Phone(object):\n    def __init__(self, input):\n        self.number = self._sanitize(input)\n\n    def _sanitize(self, input):\n        invalid = "0" * 10\n        n = re.sub(r"\\D", "", input) \n\n        count = len(n)\n        if count == 11:\n            if n.startswith("1"):\n                n = n[1:]\n            else:\n                n = invalid\n        elif count == 9:\n            n = invalid\n\n        return n\n\n    def _split(self):\n        return self.number[:3], self.number[3:6], self.number[6:]\n    def area_code(self):\n        return self._split()[0]\n\n    def pretty(self):\n        return "(%s) %s-%s" % self._split()\n\n\n\n    	\N	f	0	1	2014-03-20 00:07:04	2014-03-20 00:07:04	237	\N
537	8	a87de7dcd8492970ae0883ac	done	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [dna]\n  {:pre [(every? #{\\A \\C \\G \\T} dna)]}\n  (clojure.string/replace dna \\T \\U))	\N	f	2	1	2014-03-17 04:33:54	2014-03-17 04:33:54	238	dna.clj
538	8	7d667425431ba682078da883	done	python	bob	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Steve Phillips / elimisteve\n# 2013.12.16\n\nclass Bob(object):\n\n    def hey(self, msg):\n        msg = msg.strip()\n        if msg == "":\n            return 'Fine. Be that way!'\n\n        if msg == msg.upper() and any(char.isalpha() for char in msg):\n            return 'Woah, chill out!'\n\n        if msg[-1] == '?':\n            return 'Sure.'\n\n        return 'Whatever.'	\N	f	0	1	2014-03-17 15:15:47	2014-03-17 15:15:47	239	\N
539	8	08b3413eb1033a1db24aacb0	done	javascript	point-mutations	"use strict";\n\nfunction DNA(strand) {\n  this.strand = this._toArray(strand);\n}\n\nDNA.prototype.hammingDistance = function(strand) {\n  return this._toArray(strand).filter(this.nucleotidesDiffer, this).length;\n};\n\nDNA.prototype.nucleotidesDiffer = function(nucleotide, index) {\n  if (this.strand.length > index) {\n    return (this.strand[index] !== nucleotide);\n  }\n};\n\nDNA.prototype._toArray = function(strand) {\n  return strand.split('');\n};\n\nmodule.exports = DNA	\N	f	1	2	2014-03-18 16:03:17	2014-03-18 16:03:17	240	\N
571	9	e1ac112bdd4978e18bb29ab8	superseded	go	etl	package transform\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := map[string]int{}\n\tfor k, val := range in {\n\t\tfor _, strval := range val {\n\t\t\tout[strings.ToLower(strval)] = k\n\t\t}\n\t}\n\treturn out\n}	\N	f	2	1	2013-11-24 04:38:09	2013-11-24 04:38:09	252	transform.go
1600	40	636f4abf7eb641339f4961e7	done	ruby	phone-number	class PhoneNumber\n  attr_accessor :area_code, :prefix, :line_number\n\n  def initialize(numbers_string)\n    @numbers_string = normalize(numbers_string)\n    @phone_number = validate_phone_number\n  end\n\n  def number\n    @phone_number\n  end\n\n  def to_s\n    "(#{@area_code}) #{@prefix}-#{@line_number}"\n  end\n\n  private\n\n  def validate_phone_number\n    strip_country_code if country_code_digit_and_length?\n    if phone_number_length?\n      assign_phone_number\n    else\n      empty_phone_string\n    end\n  end\n\n  def strip_country_code\n    @numbers_string.gsub!(/^1/, '')\n  end\n\n  def assign_phone_number\n    captures = @numbers_string.match(/(\\d{0,3})(\\d{3,3})(\\d{4,6})/i).captures\n    @area_code, @prefix, @line_number = [$1, $2, $3]\n    captures.join\n  end\n\n  def country_code_digit_and_length?\n    @numbers_string.length == 11 && !!(@numbers_string =~ /^1/)\n  end\n\n  def phone_number_length?\n    @numbers_string.length == 10\n  end\n\n  def normalize(string)\n    string.scan(/\\d/).join\n  end\n\n  def empty_phone_string\n    '0000000000'\n  end\nend	\N	f	2	3	2014-01-27 09:18:41	2014-01-27 09:18:41	695	\N
1602	40	b729bd9712ddbadfa1693dac	superseded	ruby	phone-number	class PhoneNumber\n\n  def initialize(numbers_string)\n    @numbers_string = normalize(numbers_string)\n  end\n\n  def number\n    valid_phone_number\n  end\n\n  def area_code\n    valid_phone_number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{prefix}-#{line_number}"\n  end\n\n  private\n\n  def valid_phone_number\n    strip_country_code if country_code_length?\n    set_phone_number\n  end\n\n  def set_phone_number\n    phone_number_length? ? @numbers_string : empty_phone_string\n  end\n\n  def phone_number_length?\n    @numbers_string.length == 10\n  end\n\n  def country_code_length?\n    @numbers_string[0] == '1' && @numbers_string.length == 11\n  end\n\n  def strip_country_code\n    @numbers_string.gsub!(/^1/, '')\n  end\n\n  def normalize(string)\n    string.scan(/\\d/).join\n  end\n\n  def prefix\n    valid_phone_number[3..5]\n  end\n\n  def line_number\n    valid_phone_number[6..-1]\n  end\n\n  def empty_phone_string\n    '0000000000'\n  end\nend	\N	f	1	2	2014-03-17 04:28:11	2014-03-17 04:28:11	695	\N
542	8	19d9e1d1795ca83483b4ec60	done	elixir	beer-song	import Enum, only: [map: 2, concat: 2, join: 2]\n\ndefmodule Beer do\n\n  def verse 0 do\n    "No more bottles of beer on the wall, " <>\n    "no more bottles of beer.\\n" <>\n    "Go to the store and buy some more, " <>\n    "99 bottles of beer on the wall.\\n"\n  end\n\n  def verse 1 do\n    "1 bottle of beer on the wall, " <>\n    "1 bottle of beer.\\n" <>\n    "Take it down and pass it around, " <>\n    "no more bottles of beer on the wall.\\n"\n  end\n\n  def verse 2 do\n    "2 bottles of beer on the wall, " <>\n    "2 bottles of beer.\\n" <>\n    "Take one down and pass it around, " <>\n    "1 bottle of beer on the wall.\\n"\n  end\n\n  def verse n do\n    to_string(n) <> " bottles of beer on the wall, " <>\n    to_string(n) <> " bottles of beer.\\n" <>\n    "Take one down and pass it around, " <>\n    to_string(n - 1) <> " bottles of beer on the wall.\\n"\n  end\n\n  def sing start, finish // 0 do\n    map(start..finish, &verse/1) |> concat([""]) |> join "\\n"\n  end\n\nend	\N	f	1	2	2014-03-18 09:12:35	2014-03-18 09:12:35	241	\N
543	8	ded46d41b6166b25afbe7997	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def method_missing(planet)\n    calculate_age(earth_years_lookup[planet])\n  end\n\n  def earth_years_lookup\n    { :on_mercury => 0.2408467,\n      :on_venus => 0.61519726,\n      :on_earth => 1,\n      :on_mars => 1.8808158,\n      :on_jupiter => 11.862615,\n      :on_saturn => 29.447498,\n      :on_uranus => 84.016846,\n      :on_neptune => 164.79132 }\n  end\n\n  private\n\n  def seconds_in_orbital(orbital)\n    orbital * 24 * 60 * 60\n  end\n\n  def calculate_age(orbital)\n    (seconds / seconds_in_orbital(orbital * 365.25)).round(2)\n  end\nend	\N	f	3	1	2014-03-17 05:29:49	2014-03-17 05:29:49	242	space_age.rb
544	8	0e3b66bbdabb01c15384d461	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def method_missing(planet)\n    calculate_age(earth_years_lookup[planet])\n  end\n\n  def respond_to_missing?(method_name, include_private = false)\n    method_name.to_s.start_with?('on_') || super\n  end\n\n  def earth_years_lookup\n    { :on_mercury => 0.2408467,\n      :on_venus => 0.61519726,\n      :on_earth => 1.0,\n      :on_mars => 1.8808158,\n      :on_jupiter => 11.862615,\n      :on_saturn => 29.447498,\n      :on_uranus => 84.016846,\n      :on_neptune => 164.79132 }\n  end\n\n  private\n\n  def seconds_in_orbital(orbital)\n    orbital * 24 * 60 * 60 * 365.25\n  end\n\n  def calculate_age(orbital)\n    (seconds / seconds_in_orbital(orbital)).round(2)\n  end\nend	\N	f	3	2	2014-03-17 15:11:35	2014-03-17 15:11:35	242	space_age.rb
545	8	2935136e1d5f00863251b25b	done	ruby	gigasecond	require "time"\nrequire "date"\n\nclass Gigasecond\n  attr_reader :dob\n\n  def initialize(dob)\n    @dob = Time.new(dob.year, dob.month, dob.day)\n  end\n\n  def date\n    (dob + 1_000_000_000).to_date\n  end\nend	\N	f	5	1	2014-03-19 20:58:56	2014-03-19 20:58:56	243	\N
546	8	c00081f300680af8c342c84b	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nallCaps :: [String] -> Bool\nallCaps x   | null x = False\n            | otherwise = all ( all isUpper) x\n\nresponseFor :: String -> String\nresponseFor q   | null $ words q        = "Fine. Be that way!"\n                | allCaps  $ words $  filter isAlpha q = "Woah, chill out!"\n                | last q == '!' = "Whatever."\n                | last q == '?' = "Sure."\n                | otherwise  = "Whatever."	\N	f	0	1	2014-03-19 00:16:13	2014-03-19 00:16:13	244	Bob.hs
548	9	bb7cd3e64127be8944a98d5f	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= count_nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless valid? nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n  def valid?(letter)\n    Nucleotides.valid? letter\n  end\n\n  def strand_nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides\n    strand_nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    Hash[Nucleotides.dna.zip([0].cycle)]\n  end\nend\n\nmodule Nucleotides\n  VALID_NUCLEOTIDES = [\n    ADENOSINE = 'A',\n    CYTIDINE  = 'C',\n    GUANOSINE = 'G',\n    THYMIDINE = 'T',\n    URACIL    = 'U'\n  ]\n\n  def self.dna\n    VALID_NUCLEOTIDES.select { |nucleotide| nucleotide != URACIL }\n  end\n\n  def self.valid?(letter)\n    VALID_NUCLEOTIDES.include? letter\n  end\nend	\N	f	0	7	2013-11-09 10:35:40	2013-11-09 10:35:40	245	\N
572	9	c2977fe17928cd87360f352e	hibernating	go	etl	package transform\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := map[string]int{}\n\tfor key_in, val_in := range in {\n\t\tfor _, key_out := range val_in {\n\t\t\tout[strings.ToLower(key_out)] = key_in\n\t\t}\n\t}\n\treturn out\n}	\N	f	2	2	2013-12-09 12:52:38	2013-12-09 12:52:38	252	transform.go
550	9	4a456047e2cf8bcf77068731	superseded	ruby	nucleotide-count	class DNA\n  attr_accessor :strand, :nucleotide_counts\n\n  def initialize(strand)\n    @strand = strand\n    @nucleotide_counts = count_nucleotides(strand)\n  end\n\n  def count(nucleotide)\n    validated_nucleotide = validate!(nucleotide)\n    nucleotide_counts.fetch(validated_nucleotide, 0)\n  end\n\n  private\n  def validate!(letter)\n    Nucleotide.from_initial(letter).to_s\n  end\n\n  def nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides(strand)\n    nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    {\n      'A' => 0,\n      'T' => 0,\n      'G' => 0,\n      'C' => 0\n    }\n  end\nend\n\nclass Nucleotide\n  attr_reader :initial\n\n  VALID_NUCLEOTIDES = ['A', 'C', 'G', 'T', 'U']\n\n  def self.from_initial(letter)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? letter\n    Nucleotide.new(letter)\n  end\n\n  def initialize(letter)\n    @initial = letter\n  end\n\n  def to_s\n    initial\n  end\nend	\N	f	1	2	2013-12-29 03:31:01	2013-12-29 03:31:01	245	\N
551	9	12c94666640d835fe130169f	done	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= count_nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless Nucleotides.valid? nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n\n  def strand_nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides\n    strand_nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    Hash[Nucleotides.dna.zip([0].cycle)]\n  end\nend\n\nmodule Nucleotides\n  VALID_NUCLEOTIDES = [\n    ADENOSINE = 'A',\n    CYTIDINE  = 'C',\n    GUANOSINE = 'G',\n    THYMIDINE = 'T',\n    URACIL    = 'U'\n  ]\n\n  def self.dna\n    VALID_NUCLEOTIDES.select { |nucleotide| nucleotide != URACIL }\n  end\n\n  def self.valid?(letter)\n    VALID_NUCLEOTIDES.include? letter\n  end\nend	\N	f	1	8	2014-01-10 14:01:52	2014-01-10 14:01:52	245	\N
552	9	d4bc448934b446a7a59e2a91	superseded	ruby	nucleotide-count	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= count_nucleotides(strand)\n  end\n\n  def count(nucleotide)\n    validate nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n  attr_reader :strand\n\n  def validate(letter)\n    Nucleotides.valid? letter\n  end\n\n  def nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides(strand)\n    nucleotides.each_with_object(Nucleotides.empty_dna) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\nend\n\nclass Nucleotides\n  attr_reader :initial\n\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  VALID_NUCLEOTIDES = [\n    ADENOSINE,\n    CYTIDINE,\n    GUANOSINE,\n    THYMIDINE,\n    URACIL\n  ]\n\n  def self.empty_dna\n    {\n      ADENOSINE => 0,\n      CYTIDINE  => 0,\n      GUANOSINE => 0,\n      THYMIDINE => 0\n    }\n  end\n\n  def self.valid?(letter)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? letter\n  end\nend	\N	f	1	5	2014-01-11 23:03:02	2014-01-11 23:03:02	245	\N
553	9	423a39580898c48c755754f4	superseded	ruby	nucleotide-count	class DNA\n  attr_accessor :strand, :nucleotide_counts\n\n  def initialize(strand)\n    @strand = strand\n    @nucleotide_counts = count_nucleotides(strand)\n  end\n\n  def count(nucleotide)\n    validate! nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n  def validate!(letter)\n    Nucleotide.from_initial(letter).to_s\n  end\n\n  def nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides(strand)\n    nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    {\n      'A' => 0,\n      'T' => 0,\n      'G' => 0,\n      'C' => 0\n    }\n  end\nend\n\nclass Nucleotide\n  attr_reader :initial\n\n  VALID_NUCLEOTIDES = ['A', 'C', 'G', 'T', 'U']\n\n  def self.from_initial(letter)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? letter\n    Nucleotide.new(letter)\n  end\n\n  def initialize(letter)\n    @initial = letter\n  end\n\n  def to_s\n    initial\n  end\nend	\N	f	2	3	2014-01-17 09:40:18	2014-01-17 09:40:18	245	\N
554	9	e9cc7d73534be83f997c8f0a	superseded	ruby	nucleotide-count	class DNA\n  attr_accessor :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= count_nucleotides(strand)\n  end\n\n  def count(nucleotide)\n    validate nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n  def validate(letter)\n    Nucleotide.from_initial(letter).to_s\n  end\n\n  def nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides(strand)\n    nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    {\n      'A' => 0,\n      'T' => 0,\n      'G' => 0,\n      'C' => 0\n    }\n  end\nend\n\nclass Nucleotide\n  attr_reader :initial\n\n  VALID_NUCLEOTIDES = ['A', 'C', 'G', 'T', 'U']\n\n  def self.from_initial(letter)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? letter\n    Nucleotide.new(letter)\n  end\n\n  def initialize(letter)\n    @initial = letter\n  end\n\n  def to_s\n    initial\n  end\nend	\N	f	4	4	2014-02-12 14:38:31	2014-02-12 14:38:31	245	\N
557	9	cce3d0770aa89fa5cfb82e07	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count()\n    frequencies to_words\n  end\n\n  private\n\n  def frequencies(list)\n    list.each_with_object(Hash.new(0)) { |i, freq| freq[i] += 1 }\n  end\n\n  def to_words()\n    @sentence.downcase().scan(%r/\\w+/)\n  end\nend	\N	f	1	3	2013-11-22 10:48:13	2013-11-22 10:48:13	247	\N
558	9	8539da39d3f7587fe4823055	done	ruby	word-count	class Phrase\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count\n    frequencies(to_words)\n  end\n\n  private\n\n  def frequencies(words)\n    words.each_with_object(Hash.new(0)) do |word, frequency|\n      frequency[word] += 1\n    end\n  end\n\n  def to_words\n    @sentence.downcase().scan(%r/\\w+/)\n  end\nend	\N	f	1	7	2013-12-22 03:11:34	2013-12-22 03:11:34	247	\N
559	9	700c26114a654a03486bd0be	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(sentence)\n    @word_count = frequencies to_words(sentence)\n  end\n\n  private\n\n  def frequencies(list)\n    list.each_with_object(Hash.new(0)) { |item, freq| freq[item] += 1 }\n  end\n\n  def to_words(sentence)\n    sentence.downcase().split(%r{\\W+})\n  end\nend	\N	f	1	2	2013-12-26 23:28:53	2013-12-26 23:28:53	247	\N
560	9	e22945016f0bf5e4fb097378	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count\n    frequencies to_words\n  end\n\n  private\n\n  def frequencies(list)\n    list.each_with_object(Hash.new(0)) { |i, freq| freq[i] += 1 }\n  end\n\n  def to_words\n    @sentence.downcase().scan(%r/\\w+/)\n  end\nend	\N	f	1	4	2013-12-29 17:01:12	2013-12-29 17:01:12	247	\N
561	9	929359f6fc00c626bcc98db7	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count\n    frequencies to_words\n  end\n\n  private\n\n  def frequencies(list)\n    list.each_with_object(Hash.new(0)) do |i, freq|\n      freq[i] += 1\n    end\n  end\n\n  def to_words\n    @sentence.downcase().scan(%r/\\w+/)\n  end\nend	\N	f	2	5	2014-01-10 20:11:01	2014-01-10 20:11:01	247	\N
562	9	b90159b328350a880b8eb588	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(sentence)\n    words = sentence.downcase().split(%r{\\W+})\n    @word_count = words.inject({}) do |freq, word|\n       freq[word] = freq[word] ? freq[word] + 1 : 1\n       freq\n    end\n  end\nend	\N	f	2	1	2014-01-31 08:25:12	2014-01-31 08:25:12	247	\N
563	9	c60291f5d7e160e197ca6333	superseded	ruby	word-count	class Phrase\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count\n    frequencies to_words\n  end\n\n  private\n\n  def frequencies(list)\n    list.each_with_object(Hash.new(0)) do |i, freq|\n      freq[i] += 1\n    end\n  end\n\n  def to_words\n    @sentence.downcase().scan(%r/\\w+/)\n  end\nend	\N	f	5	6	2014-03-13 18:56:12	2014-03-13 18:56:12	247	\N
564	9	fee382331473efdf93b3e8e2	pending	clojure	rna-transcription	(ns dna)\n(defn to-rna [strands]\n    (let [complements {"G" "C", "C" "G", "T" "A", "A" "U"}\n          result (for [strand (re-seq #"\\w" strands)]\n                    (if (some #(= strand %) (keys complements))\n                      (get complements strand)\n                      (throw (AssertionError. "Strand not recognized!"))\n                        )\n                    )\n          ]\n      (clojure.string/join result)\n      )\n  )	\N	f	0	1	2014-02-01 10:38:53	2014-02-01 10:38:53	248	dna.clj
565	9	1f613cb5f786d57b2feb7408	done	haskell	etl	module ETL\n( transform\n) where\n\nimport           Data.Char (toLower)\nimport qualified Data.Map  as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.fromList . transpose . M.toList\n  where transpose = concatMap collect\n        collect (point, letters) = map pair letters\n          where pair letter = (map toLower letter, point)	\N	f	1	1	2013-11-23 16:41:28	2013-11-23 16:41:28	249	\N
566	9	ecac12dd393ae9016289d473	superseded	elixir	word-count	defmodule Words do\n  import Enum\n  import Regex\n  import String\n\n  defp is_same_as something do\n    fn x ->\n      x == something\n    end\n  end\n\n  defp with_count_in list do\n    fn x ->\n      { Enum.first(x), count(list, is_same_as x) }\n    end\n  end\n\n  def count phrase do\n    words = scan(%r/\\w+/g, downcase phrase)\n\n    HashDict.new map(uniq(words), with_count_in words)\n  end\nend	\N	f	1	2	2013-11-15 12:27:38	2013-11-15 12:27:38	250	\N
567	9	95ef73d92c8b88758e8ec62a	superseded	elixir	word-count	defmodule Words do\n  import Enum\n  import Regex\n  import String\n\n  defp is_same_as something do\n    fn x ->\n      x == something\n    end\n  end\n\n  defp with_count_in list do\n    fn x ->\n      { x, count(list, is_same_as x) }\n    end\n  end\n\n  def count phrase do\n    words = scan(%r/\\w+/g, downcase phrase)\n\n    HashDict.new map(uniq(words), with_count_in words)\n  end\nend	\N	f	1	1	2013-12-14 12:22:13	2013-12-14 12:22:13	250	\N
568	9	d1f3a9483505bdeffa5964db	superseded	elixir	word-count	defmodule Words do\n  defp words(string) do\n    Regex.scan(%r/\\w+/g, string)\n    |> Enum.map(&Enum.first/1)\n  end\n\n  defp inc_key(key, hash), do: Dict.update(hash, key, 1, &(&1 + 1))\n\n  defp count_items(list), do: List.foldl(list, HashDict.new, &inc_key/2)\n\n  def count(phrase) do\n    phrase\n    |> String.downcase\n    |> words\n    |> count_items\n  end\nend	\N	f	1	3	2013-12-26 10:35:43	2013-12-26 10:35:43	250	\N
569	9	cf29df06c9003ef4f601ef40	done	elixir	word-count	defmodule Words do\n  defp words(string) do\n    Regex.scan(%r/\\w+/g, string)\n    |> Enum.map(&hd/1)\n  end\n\n  defp inc_key(key, hash), do: Dict.update(hash, key, 1, &(&1 + 1))\n\n  defp count_items(list), do: List.foldl(list, HashDict.new, &inc_key/2)\n\n  def count(phrase) do\n    phrase\n    |> String.downcase\n    |> words\n    |> count_items\n  end\nend	\N	f	1	4	2014-01-16 21:29:59	2014-01-16 21:29:59	250	\N
570	9	79753ada3d0a47eedff2666c	hibernating	javascript	word-count	'use strict'\n\nvar Words = function(rawWords) {\n  this.count = {}\n  var processedWords = rawWords.toLowerCase().split(/\\W+/)\n\n  for (var i in processedWords) {\n    var word = processedWords[i]\n    if(!word) continue\n    if(this.count[word]) {\n      this.count[word] += 1\n    } else {\n      this.count[word] = 1\n    }\n  }\n}\n\nmodule.exports = Words	\N	f	0	1	2013-11-25 20:52:09	2013-11-25 20:52:09	251	\N
575	9	91de1c666e9f76278e3516ce	superseded	clojure	bob	(ns bob \n  (:require [clojure.string :as str]))\n\n(defn yelling? [phrase]\n  (= (str/upper-case phrase) phrase))\n\n(defn asking? [phrase]\n  (= (last phrase) \\?)\n)\n\n(def silent? str/blank?)\n\n(defn else? [phrase] true)\n\n(defn response-for [phrase]\n  (condp apply [phrase]\n   silent? "Fine. Be that way!"\n   yelling? "Woah, chill out!"\n   asking? "Sure."\n   else? "Whatever."))	\N	f	1	4	2014-01-05 12:57:07	2014-01-05 12:57:07	253	\N
576	9	6d4fd55a58443c030e656636	done	clojure	bob	(ns bob \n  (:require [clojure.string :as str]))\n\n(declare yelling? asking? silent? else?)\n\n(defn response-for [phrase]\n  (condp apply [phrase]\n   silent? "Fine. Be that way!"\n   yelling? "Woah, chill out!"\n   asking? "Sure."\n   else? "Whatever."))\n\n(defn yelling? [phrase]\n  (= (str/upper-case phrase) phrase))\n\n(defn asking? [phrase]\n  (= (last phrase) \\?))\n\n(def silent? str/blank?)\n\n(defn else? [phrase] true)	\N	f	1	6	2014-01-12 01:33:55	2014-01-12 01:33:55	253	\N
577	9	29c04dc33d700a0b3541bf66	superseded	clojure	bob	(ns bob)\n(require 'clojure.string)\n(defn response-for [q]\t\n  (cond\n   (clojure.string/blank? q) "Fine. Be that way!"\n   (= (clojure.string/upper-case q) q) "Woah, chill out!"\n   (re-matches #".*\\?$" q) "Sure."\n   :else "Whatever."))	\N	f	1	2	2014-01-14 12:08:07	2014-01-14 12:08:07	253	\N
578	9	6eb55208ec38ce21839b2144	superseded	clojure	bob	(ns bob \n  (:require [clojure.string :as str]))\n\n(declare yelling? asking? silent? else?)\n\n(defn response-for [phrase]\n  (condp apply [phrase]\n   silent? "Fine. Be that way!"\n   yelling? "Woah, chill out!"\n   asking? "Sure."\n   else? "Whatever."))\n\n(defn yelling? [phrase]\n  (= (str/upper-case phrase) phrase))\n\n(defn asking? [phrase]\n  (= (last phrase) \\?)\n)\n\n(def silent? str/blank?)\n\n(defn else? [phrase] true)	\N	f	2	5	2014-01-23 16:35:44	2014-01-23 16:35:44	253	\N
579	9	2735adfb5c6c468e2f85b46d	superseded	ruby	bob	class Message\n  include StringValidations\n  attr_reader :message\n\n  def initialize(message)\n    super()\n    @message = message\n  end\n\n  def validate_to_respond\n    return 'Fine. Be that way!' if @message.nil? or @message==''\n    return 'Whatever.' if contains_hyphens_and_period_at_end?(@message) or (contains_exclamation_mark?(@message) and !contains_uppercase_words?(@message))\n    return 'Woah, chill out!' if contains_uppercase_words?(@message) and !(contains_ok?(@message) and contains_question_mark?(@message))\n    return 'Sure.' if contains_question_mark?(@message)\n  end\n\nend	\N	f	1	2	2013-11-14 13:54:06	2013-11-14 13:54:06	254	\N
581	9	e1e2ac85d24a191cd24cd56a	superseded	ruby	bob	module StringValidations\n\n  def contains_hyphens_and_period_at_end?(str)\n    str.match(/\\-|\\.$/)\n  end\n\n  def contains_uppercase_words?(str)\n    str.match(/[A-Z]{2,}/)\n  end\n\n  def contains_question_mark?(str)\n    str.match(/\\?$/)\n  end\n\n  def contains_exclamation_mark?(str)\n    str.match(/\\!$/)\n  end\n\n  def contains_ok?(str)\n    str.match(/OK/)\n  end\nend	\N	f	1	3	2013-12-16 10:45:28	2013-12-16 10:45:28	254	\N
582	9	321ccce55717423046928493	superseded	ruby	bob	require './String_Validations'\nrequire './Message'\n\nclass Bob\n\n  def hey(message)\n    response = Message.new(message)\n    response.validate_to_respond\n  end\n\nend	\N	f	0	1	2014-01-15 06:01:29	2014-01-15 06:01:29	254	\N
583	9	e3b81372ff5e7f5373de8301	done	ruby	grade-school	class School\n\n  attr_reader :db\n  def initialize\n    @db = Hash.new{ |db, level| db[level] = [] }\n  end\n\n  def add(name, level)\n    db[level] << name\n  end\n\n  def grade(level)\n    db[level]\n  end\n\n  def sort\n    sorted = db.map { |level, students| [level, students.sort] }.sort\n    Hash[sorted]\n  end\nend	\N	f	1	1	2013-11-03 05:56:48	2013-11-03 05:56:48	255	\N
584	9	fb51dd49a7e2d29bc1c816cc	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\n\treturn (year%4 == 0) && ((year%100 != 0) || (year%400 == 0))\n}	\N	f	1	1	2013-12-03 11:54:18	2013-12-03 11:54:18	256	leap.go
585	9	f66db5eda8b6e72bea2291d7	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\n\tdivisibleBy := func(n int) bool {\n\t\treturn year%n == 0\n\t}\n\n\treturn divisibleBy(4) && (!divisibleBy(100) || divisibleBy(400))\n}	\N	f	3	2	2014-03-05 03:11:35	2014-03-05 03:11:35	256	leap.go
588	10	b17025b31f38fb7abfe81bc1	superseded	elixir	space-age	defmodule SpaceAge do\n\n  def age_on(planet, seconds) do\n    seconds / case planet do\n      :earth   -> 1\n      :mercury -> 0.2408467\n      :venus   -> 0.61519726\n      :mars    -> 1.8808158\n      :jupiter -> 11.862615\n      :saturn  -> 29.447498\n      :uranus  -> 84.016846\n      :neptune -> 164.79132\n    end * earth_year\n  end\n\n  defp earth_year do\n    31557600\n  end\n\nend	\N	f	3	1	2013-09-15 06:11:06	2013-09-15 06:11:06	259	\N
589	10	99997dfd6581807be730d28c	done	elixir	space-age	defmodule SpaceAge do\n\n  def age_on(planet, seconds) do\n    seconds / (earth_years(planet) * seconds_in_earth_year)\n  end\n\n  defp earth_years(planet) do\n    case planet do\n      :earth   -> 1\n      :mercury -> 0.2408467\n      :venus   -> 0.61519726\n      :mars    -> 1.8808158\n      :jupiter -> 11.862615\n      :saturn  -> 29.447498\n      :uranus  -> 84.016846\n      :neptune -> 164.79132\n    end\n  end\n\n  defp seconds_in_earth_year do\n    31557600\n  end\n\nend	\N	f	3	2	2013-10-15 03:48:14	2013-10-15 03:48:14	259	\N
591	10	645dcc22ed4fafa9fea78aab	superseded	elixir	beer-song	defmodule Beer do\n\n  def verse(v) do\n    #Enum.join([line1(v), "\\n", line2(v - 1), "\\n"])\n    [line1(v), line2(v - 1)] |> newline_appender\n  end\n\n  def sing(start), do: sing(start, 0)\n  def sing(start, stop) do\n    #Enum.map_join(start..stop, "\\n", &verse/1) <> "\\n"\n    start..stop |> Enum.map(&verse/1) |> newline_appender\n  end\n\n  defp line1(0), do: "No more bottles of beer on the wall, no more bottles of beer."\n  defp line1(int) do\n    n = to_s(int)\n    s = plural(int)\n    "#{n} bottle#{s} of beer on the wall, #{n} bottle#{s} of beer."\n  end\n\n  defp line2(-1), do: "Go to the store and buy some more, 99 bottles of beer on the wall."\n  defp line2(int) do\n    n = to_s(int)\n    s = plural(int)\n    pn = pronoun(int)\n    "Take #{pn} down and pass it around, #{n} bottle#{s} of beer on the wall."\n  end\n\n  defp plural(1), do: ""\n  defp plural(_n), do: "s"\n\n  defp pronoun(0), do: "it"\n  defp pronoun(_n), do: "one"\n\n  defp to_s(0), do: "no more"\n  defp to_s(n), do: to_string(n)\n\n  defp newline_appender(arr), do: Enum.join(arr, "\\n") <> "\\n"\nend	\N	f	3	3	2014-01-01 13:18:25	2014-01-01 13:18:25	260	\N
592	10	ca5f993649c19b21bd081247	done	elixir	beer-song	defmodule Beer do\n\n  def verse(v) do\n    [line1(v), line2(v - 1)] |> newline_appender\n  end\n\n  def sing(start), do: sing(start, 0)\n  def sing(start, stop) do\n    start..stop |> Enum.map(&verse/1) |> newline_appender\n  end\n\n  defp line1(0), do: "No more bottles of beer on the wall, no more bottles of beer."\n  defp line1(int) do\n    n = to_s(int)\n    s = plural(int)\n    "#{n} bottle#{s} of beer on the wall, #{n} bottle#{s} of beer."\n  end\n\n  defp line2(-1), do: "Go to the store and buy some more, 99 bottles of beer on the wall."\n  defp line2(int) do\n    n = to_s(int)\n    s = plural(int)\n    pn = pronoun(int)\n    "Take #{pn} down and pass it around, #{n} bottle#{s} of beer on the wall."\n  end\n\n  defp plural(1), do: ""\n  defp plural(_n), do: "s"\n\n  defp pronoun(0), do: "it"\n  defp pronoun(_n), do: "one"\n\n  defp to_s(0), do: "no more"\n  defp to_s(n), do: to_string(n)\n\n  defp newline_appender(arr), do: Enum.map(arr, &[&1, ?\\n]) |> iolist_to_binary\nend	\N	f	3	4	2014-01-03 15:45:02	2014-01-03 15:45:02	260	\N
593	10	e8976f2bbdab0c9707a6359b	superseded	elixir	beer-song	defmodule Beer do\n\n  def verse(v) do\n    [line1(v), line2(v - 1)] |> newline_appender\n  end\n\n  def sing(start), do: sing(start, 0)\n  def sing(start, stop) do\n    start..stop |> Enum.map(&verse/1) |> newline_appender\n  end\n\n  defp line1(0) do\n    "No more bottles of beer on the wall, no more bottles of beer."\n  end\n\n  defp line1(n) do\n    interpolate(n, fn(n, s, _) -> %s"#{n} bottle#{s} of beer on the wall, #{n} bottle#{s} of beer." end)\n  end\n\n  defp line2(-1) do\n    "Go to the store and buy some more, 99 bottles of beer on the wall."\n  end\n\n  defp line2(n) do\n    interpolate(n, fn(n, s, pn) -> %s"Take #{pn} down and pass it around, #{n} bottle#{s} of beer on the wall." end)\n  end\n\n  defp interpolate(n, pattern_fn) do\n    pattern_fn.(to_s(n), plural(n), pronoun(n))\n  end\n\n  defp plural(1), do: ""\n  defp plural(_n), do: "s"\n\n  defp pronoun(0), do: "it"\n  defp pronoun(_n), do: "one"\n\n  defp to_s(0), do: "no more"\n  defp to_s(n), do: to_string(n)\n\n  defp newline_appender(arr) do\n    arr |> Enum.flat_map(fn(e) -> [e, "\\n"] end) |> Enum.join\n  end\nend	\N	f	3	2	2014-02-01 02:12:02	2014-02-01 02:12:02	260	\N
594	10	c167ba836fe52a8a2ecb3cf3	done	haskell	triangle	module Triangle (TriangleType(..), triangleType) where\r\n\r\nimport qualified Data.Set as S\r\nimport Data.List (sort)\r\n\r\ndata TriangleType = Equilateral | Isosceles | Scalene | Illogical\r\n                  deriving (Show, Eq)\r\n\r\ntriangleType :: Int -> Int -> Int -> TriangleType\r\ntriangleType a b c\r\n  | illogical       = Illogical\r\n  | S.size set == 1 = Equilateral\r\n  | S.size set == 2 = Isosceles\r\n  | S.size set == 3 = Scalene\r\n  | otherwise       = Illogical\r\n  where\r\n    ls = [a, b, c]\r\n    set = S.fromList ls\r\n    illogical = (x + y) <= z\r\n      where [x, y, z] = sort ls\r	\N	f	3	1	2013-11-17 16:00:56	2013-11-17 16:00:56	261	Triangle.hs
595	10	6246c9175bed16dcc870ccad	done	haskell	bob	module Bob where\n\nimport qualified Data.Text as T\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor = responseFor' . T.pack\n\nresponseFor' :: T.Text -> String\nresponseFor' t | T.all isSpace t = "Fine. Be that way!"\n               | T.all (\\x -> not (isAlpha x) || isUpper x) t && T.any isUpper t = "Woah, chill out!"\n               | not (T.null t) && T.last t == '?' = "Sure."\n               | otherwise = "Whatever."	\N	f	3	1	2013-11-12 18:25:47	2013-11-12 18:25:47	262	\N
597	10	e30bf972f264e48565f8184f	superseded	ruby	hamming	class Hamming\n  \n  class << self\n    def compute strand1, strand2\n      distance = 0\n\n      strand1_array = strand1.split('')\n      strand2_array = strand2.split('')\n\n      strand1_array.each_with_index do |point1, index|\n        point2 = strand2_array[index]\n\n        if point_mutation?(point1, point2)\n          distance+=1\n        end\n      end\n\n      distance\n    end\n\n    private\n\n    def point_mutation? pointa, pointb\n      pointa != pointb && !pointa.nil? && !pointb.nil?\n    end\n\n  end\n\nend	\N	f	3	1	2013-12-19 22:33:35	2013-12-19 22:33:35	263	\N
598	10	9a0d9370dcb87e45ce0f05b4	superseded	ruby	hamming	class Hamming\n\n  def self.compute strand1, strand2\n    distance = 0\n\n    strand1_array = strand1.split('')\n    strand2_array = strand2.split('')\n\n    strand1_array.each_with_index do |point1, index|\n      point2 = strand2_array[index]\n\n      distance+=1 if point_mutation?(point1, point2)\n    end\n\n    distance\n  end\n\n  def self.point_mutation? pointa, pointb\n    pointa != pointb && !pointa.nil? && !pointb.nil?\n  end\n  private_class_method :point_mutation?\n\nend	\N	f	2	3	2014-01-03 19:14:31	2014-01-03 19:14:31	263	\N
599	10	fcd239a62eb6ac7f884f2320	done	ruby	hamming	class Hamming\n\n  def self.compute strand1, strand2\n\n    chars1 = strand1.chars\n    chars2 = strand2.chars\n\n    paired_array = chars1.zip(chars2)\n\n    paired_array.count do |first, second|\n      first && first != second\n    end\n\n  end\n\nend	\N	f	3	4	2014-01-07 15:48:31	2014-01-07 15:48:31	263	\N
601	10	295713c4d4050bcc5744601e	superseded	ruby	space-age	class SpaceAge\n  SECONDS_IN_ONE_EARTH_YEAR = 31557600\n\n  attr :seconds\n\n  ORBITAL_PERIODS_IN_EARTH_YEARS = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    earth: 1,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIODS_IN_EARTH_YEARS.each do |planet, orbital_period_in_earth_years|\n    define_method :"on_#{planet}" do\n      calculate_age(orbital_period_in_earth_years)\n    end\n  end\n\n  private\n\n  def calculate_age(orbital_period_in_earth_years)\n    orbital_period_in_seconds = orbital_period_in_earth_years * SECONDS_IN_ONE_EARTH_YEAR\n    (seconds.fdiv(orbital_period_in_seconds)).round(2)\n  end\nend	\N	f	2	2	2013-11-20 17:51:32	2013-11-20 17:51:32	264	space_age.rb
602	10	cec722d13c953bff1745c186	superseded	ruby	space-age	class SpaceAge\n  attr :seconds\n\n  ORBITAL_PERIODS_IN_EARTH_YEARS = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    earth: 1,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIODS_IN_EARTH_YEARS.each do |planet, orbital_period_in_earth_years|\n    define_method :"on_#{planet}" do\n      calculate_age(orbital_period_in_earth_years)\n    end\n  end\n\n  private\n\n  def calculate_age(orbital_period_in_earth_years)\n    orbital_period_in_seconds = orbital_period_in_earth_years * 31557600\n    (seconds.fdiv(orbital_period_in_seconds)).round(2)\n  end\nend	\N	f	4	1	2014-01-06 07:03:01	2014-01-06 07:03:01	264	space_age.rb
603	10	b229069c5f8a1988b3f42c77	superseded	clojure	bob	(ns bob\r\n  (:use [clojure.string :only [blank? upper-case]]))\r\n\r\n(defn question? [string]\r\n  (= \\? (last string)))\r\n\r\n(defn all-caps? [string]\r\n  (= string (upper-case string)))\r\n\r\n(defn silent? [string]\r\n  (blank? string))\r\n\r\n(defn response-for [request]\r\n  (cond\r\n    (silent? request) "Fine. Be that way!" \r\n    (all-caps? request) "Woah, chill out!"\r\n    (question? request) "Sure."\r\n    :else "Whatever."))\r\n\r	\N	f	1	2	2013-09-18 08:13:46	2013-09-18 08:13:46	265	\N
604	10	88c208329c22dccf653158c0	done	clojure	bob	(ns bob\r\n  (:use [clojure.string :only [blank? upper-case]]))\r\n\r\n(defn- question? [string]\r\n  (= \\? (last string)))\r\n\r\n(defn- all-caps? [string]\r\n  (= string (upper-case string)))\r\n\r\n(defn- silent? [string]\r\n  (blank? string))\r\n\r\n(defn response-for [request]\r\n  (cond\r\n    (silent? request) "Fine. Be that way!" \r\n    (all-caps? request) "Woah, chill out!"\r\n    (question? request) "Sure."\r\n    :else "Whatever."))\r\n\r	\N	f	3	3	2013-11-14 15:12:26	2013-11-14 15:12:26	265	\N
605	10	2be5e9943b255663184ba1a0	superseded	clojure	bob	(ns bob)\r\n\r\n(defn question? [string]\r\n  (.endsWith string "?"))\r\n\r\n(defn all-caps? [string]\r\n  (= string (.toUpperCase string)))\r\n\r\n(defn silent? [string]\r\n  (= "" (.trim string)))\r\n\r\n(defn response-for [request]\r\n  (cond\r\n    (silent? request) "Fine. Be that way!" \r\n    (all-caps? request) "Woah, chill out!"\r\n    (question? request) "Sure."\r\n    :else "Whatever."))\r\n\r	\N	f	1	1	2014-01-21 18:01:50	2014-01-21 18:01:50	265	\N
606	10	8452abe874f0a379e13964bb	superseded	ruby	robot-name	class Robot\n\n  def name\n    @name ||= new_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n    def new_name\n      result = ''\n      2.times { result += ('A'..'Z').to_a.sample }\n      3.times { result += ('0'..'9').to_a.sample }\n      result\n    end\nend	\N	f	0	1	2013-11-25 13:26:59	2013-11-25 13:26:59	266	robot.rb
607	10	337c33d300742a67d5b332c0	pending	ruby	robot-name	class Robot\n\n  def name\n    @name ||= new_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n    def new_name\n      result = String.new.tap do |x|\n        2.times { x << random_letter }\n        3.times { x << random_number }\n      end\n    end\n\n    def random_letter\n      range_sample('A'..'Z')\n    end\n\n    def random_number\n      range_sample('0'..'9')\n    end\n\n    def range_sample(range)\n      range.to_a.sample\n    end\nend	\N	f	3	2	2013-12-04 14:56:16	2013-12-04 14:56:16	266	robot.rb
608	10	571bdb5b33e523f1885769c2	done	go	hamming	package hamming\n\n/*\nReturn the number of elements that are different ignoring excess elements as\naccording to the hamming test.\n*/\nfunc Distance(a, b string) int {\n\tcount := 0\n\tvar length int\n\tif len(a) > len(b) {\n\t\tlength = len(b)\n\t} else {\n\t\tlength = len(a)\n\t}\n\tfor i := 0; i <= length - 1\t; i += 1 {\n\t\tif a[i] != b[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}	\N	f	3	1	2013-11-13 08:36:57	2013-11-13 08:36:57	267	\N
987	29	9dcd15bc47d17017a65dca29	superseded	python	word-count	# You're using Python Standard Library?\nimport collections\n# But that's cheating!!\nimport re\n\n# Little classes are like snowflakes, there are no two alike.\nPhrase = type("", (str, ), {"word_count": lambda self: collections.Counter(re.findall("\\w+", self.lower()))})	\N	f	3	1	2013-10-31 04:20:10	2013-10-31 04:20:10	442	\N
610	10	58c83a4282a087b6630d7647	done	javascript	bob	var Bob = function () {\n    'use strict';\n    return {\n        hey: function (arg) {\n            if (!arg) {\n                return 'Fine, be that way.';\n            } else if (arg.indexOf('?') > 0) {\n                return 'Sure';\n            } else if (/[A-Z]{2,}/.test(arg)) {\n                return 'Woah, chill out!';\n            } else {\n                return 'Whatever';\n            }\n        }\n    };\n};\n\nmodule.exports = Bob;	\N	f	0	3	2014-01-05 21:40:21	2014-01-05 21:40:21	268	\N
611	10	152993fdd74e8cd860340a45	superseded	javascript	bob	var Bob = function () {\n    var bob = {\n        hey: function () {\n            var regxp = new RegExp(/[A-Z0-9\\s\\!\\%\\^\\*\\@\\#\\$\\(,]*/);\n            var res = arguments[0].match(regxp)[0];\n            if (arguments[0].length == 0) {\n                return 'Fine, be that way.';\n            } else if (res.length == arguments[0].length) {\n                return 'Woah, chill out!';\n            } else if (res.length == 0) {\n                return 'Fine, be that way.';\n            } else if (arguments[0].match(new RegExp(/\\?/))) {\n                return 'Sure';\n            } else {\n                return 'Whatever';\n            }\n        }\n    }\n    return bob;\n};\n\nmodule.exports = Bob;	\N	f	5	1	2014-01-26 03:35:37	2014-01-26 03:35:37	268	\N
613	10	f9fb78b24a2665afcfbeb702	done	scala	hamming	object Hamming {\n  def compute(a:String, b:String):Int = {\n    val zipped = a.zip(b)\n    zipped.count(t => t._1 != t._2)\n  }\n}	\N	f	0	1	2014-02-19 10:47:23	2014-02-19 10:47:23	270	Hamming.scala
614	10	7bc272b06958dc6fcd9711f9	superseded	ruby	anagram	class Anagram < Struct.new :source\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    sorted_letters(word) == sorted_letters(source)\n  end\n\n  def sorted_letters(word)\n    word.chars.sort\n  end\nend	\N	f	3	1	2013-09-11 05:35:24	2013-09-11 05:35:24	271	\N
615	10	27b78b25dac7c7749c0d7e63	superseded	ruby	anagram	class Anagram\n  attr_accessor :reference_word\n\n  def initialize(reference_word)\n    @reference_word = reference_word\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    canonicalize(word) == canonicalized_reference\n  end\n\n  def canonicalize(word)\n    word.chars.sort\n  end\n\n  def canonicalized_reference\n    @canonicalized_reference ||= canonicalize(reference_word)\n  end\nend	\N	f	0	6	2013-10-23 13:02:05	2013-10-23 13:02:05	271	\N
616	10	fc38f62cd64e8cd586d109f5	done	ruby	anagram	class Anagram < Struct.new(:reference_word)\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    canonicalize(word) == canonicalized_reference\n  end\n\n  def canonicalize(word)\n    word.chars.sort\n  end\n\n  def canonicalized_reference\n    @canonicalized_reference ||= canonicalize(reference_word)\n  end\nend	\N	f	3	7	2013-10-25 12:18:46	2013-10-25 12:18:46	271	\N
617	10	01d9b7becb4cc804f3acd9f5	superseded	ruby	anagram	class Anagram\n\n  def initialize(source)\n    @source_letters = sorted_letters(source)\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    sorted_letters(word) == @source_letters\n  end\n\n  def sorted_letters(word)\n    word.chars.sort\n  end\nend	\N	f	2	2	2013-10-28 02:09:36	2013-10-28 02:09:36	271	\N
618	10	f38ebd8f866745ae1fccefaa	superseded	ruby	anagram	class Anagram\n  attr_accessor :alphabetized_source\n\n  def initialize(source)\n    @alphabetized_source = alphabetize(source)\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    alphabetize(word) == alphabetized_source\n  end\n\n  def alphabetize(word)\n    word.chars.sort\n  end\nend	\N	f	0	3	2013-12-07 12:53:32	2013-12-07 12:53:32	271	\N
619	10	d2f22a2bcc066a38a20a5c73	superseded	ruby	anagram	class Anagram\n  attr_accessor :alphabetized_reference\n\n  def initialize(reference_word)\n    @alphabetized_reference = alphabetize(reference_word)\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    alphabetize(word) == alphabetized_reference\n  end\n\n  def alphabetize(word)\n    word.chars.sort\n  end\nend	\N	f	1	4	2014-01-25 14:22:45	2014-01-25 14:22:45	271	\N
620	10	822086a2f0a43f3942383868	superseded	ruby	anagram	class Anagram\n  attr_accessor :reference_word\n\n  def initialize(reference_word)\n    @reference_word = reference_word\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    alphabetize(word) == alphabetized_reference\n  end\n\n  def alphabetize(word)\n    word.chars.sort\n  end\n\n  def alphabetized_reference\n    @alphabetized_reference ||= alphabetize(reference_word)\n  end\nend	\N	f	3	5	2014-02-11 16:32:28	2014-02-11 16:32:28	271	\N
622	10	9c909ef9011416a9f49318fc	done	ruby	rna-transcription	class DNA\n  attr_reader :strand\n  def initialize(strand = '')\n    @strand = strand.upcase\n  end\n\n  def to_rna\n    thymine_to_uracil\n  end\n\n  private\n\n  def thymine_to_uracil\n    strand.gsub('T', 'U')\n  end\nend	\N	f	1	1	2013-12-06 14:09:50	2013-12-06 14:09:50	273	\N
624	10	65a26a268b1700dc7ced3c2a	superseded	javascript	word-count	(function() {\n    "use strict";\n\n    function Words(str) {\n        var words = str.toLowerCase().match(/(?:([\\w]+))/g);\n\n        this.count = countWords(words);\n    }\n\n    function countWords(words) {\n        var counts = {};\n        for (var i = 0; i < words.length; i++) {\n            if (counts[words[i]] === undefined) {\n                counts[words[i]] = 1;\n            } else {\n                counts[words[i]] += 1;\n            }\n        }\n        return counts;\n    }\n\n    module.exports = Words;\n}());	\N	f	3	2	2013-09-08 07:13:58	2013-09-08 07:13:58	275	\N
625	10	978c7b051e73de4da0336114	superseded	javascript	word-count	(function() {\n    "use strict";\n\n    function Words(str) {\n        var words = str.toLowerCase().split(/[ :!!&@$%^&,]/).filter(function(i){return i;});\n\n        this.count = function() {\n            var counts = {};\n\n            for (var i = 0; i < words.length; i++) {\n                if (counts[words[i]] === undefined) {\n                    counts[words[i]] = 1;\n                } else {\n                    counts[words[i]] += 1;\n                }\n            }\n            return counts;\n        }();\n    }\n\n    module.exports = Words;\n}());	\N	f	3	1	2013-12-03 17:35:32	2013-12-03 17:35:32	275	\N
626	10	2e8e01c7d57861089200a39f	done	javascript	word-count	(function() {\n    "use strict";\n\n    function Words(str) {\n        var words = str.toLowerCase().match(/\\w+/g);\n\n        this.count = countWords(words);\n    }\n\n    function countWords(words) {\n        var counts = {};\n        for (var i = 0; i < words.length; i++) {\n            if (counts[words[i]] === undefined) {\n                counts[words[i]] = 1;\n            } else {\n                counts[words[i]] += 1;\n            }\n        }\n        return counts;\n    }\n\n    module.exports = Words;\n}());	\N	f	2	3	2013-12-30 21:58:39	2013-12-30 21:58:39	275	\N
627	10	d059bbb0a30776fb9fcef095	superseded	clojure	space-age	(ns space-age)\n\n(def earth-year 31557600)\n(def orbital-periods\n  {:earth earth-year\n   :mercury (* earth-year 0.2408467)\n   :venus (* earth-year 0.61519726)\n   :mars (* earth-year 1.8808158)\n   :jupiter (* earth-year 11.862615)\n   :saturn (* earth-year 29.447498)\n   :uranus (* earth-year 84.016846)\n   :neptune (* earth-year 164.79132)})\n\n(doseq [planet (keys orbital-periods)]\n  (intern *ns* (symbol (str "on-" (name planet)))\n    (fn [seconds] (/ (double seconds) (orbital-periods planet)))))	\N	f	3	1	2013-10-13 07:04:38	2013-10-13 07:04:38	276	space_age.clj
628	10	b29b35d1fb0e3c68c9202872	done	clojure	space-age	(ns space-age)\n\n(def ^:const earth-year 31557600)\n\n(defmacro def-on-planet\n  "Macro that defines an `on-<planet>` function given a planet name and year length."\n  [planet year-length]\n  (let [fn-name (symbol (str "on-" (name planet)))]\n    `(defn ~fn-name [seconds#]\n       (/ (double seconds#) (* ~earth-year ~year-length)))))\n\n(def-on-planet mercury 0.2408467)\n(def-on-planet venus 0.61519726)\n(def-on-planet earth 1.0)\n(def-on-planet mars 1.8808158)\n(def-on-planet jupiter 11.862615)\n(def-on-planet saturn 29.447498)\n(def-on-planet uranus 84.016846)\n(def-on-planet neptune 164.79132)	\N	f	3	2	2014-01-11 10:43:50	2014-01-11 10:43:50	276	space_age.clj
629	10	6afc111869a0c539ab9d0011	done	ruby	leap	class Year\n\n  def initialize year\n    @year = year\n  end\n\n  def leap?\n    cent ? quadcent : quad\n  end\n\n  def cent\n    @year % 100 == 0\n  end\n\n  def quadcent\n    @year % 400 == 0\n  end\n\n  def quad\n    @year % 4 == 0\n  end\n\n\nend	\N	f	2	1	2014-01-11 13:44:08	2014-01-11 13:44:08	277	\N
630	11	61c76451bd7f81914f49fb08	superseded	elixir	anagram	import Enum,   only: [filter: 2, sort: 1]\nimport String, only: [downcase: 1]\n\ndefmodule Anagram do\n\n  def match word, list do\n    filter list, &anagram(word, &1)\n  end\n\n  defp anagram word, other do\n    alphagram(word) == alphagram(other) && downcase(word) != downcase(other)\n  end\n\n  defp alphagram word do\n    word |> downcase |> to_char_list |> sort\n  end\n\nend	\N	f	2	1	2014-02-23 16:40:31	2014-02-23 16:40:31	278	\N
631	11	3822d081a3f916f443337bd0	done	elixir	anagram	import Enum,   only: [filter: 2, sort: 1]\nimport String, only: [downcase: 1]\n\ndefmodule Anagram do\n\n  def match word, list do\n    filter list, &anagram(word, &1)\n  end\n\n  defp anagram word, other do\n    matches(word, other) && !same_word(word, other)\n  end\n\n  defp matches word, other do\n    alphagram(word) == alphagram(other)\n  end\n\n  defp same_word word, other do\n    downcase(word) == downcase(other)\n  end\n\n  defp alphagram word do\n    word |> downcase |> to_char_list |> sort\n  end\n\nend	\N	f	3	2	2014-03-14 03:51:01	2014-03-14 03:51:01	278	\N
632	11	86325f7860e7d45baa98ca29	superseded	haskell	raindrops	module Raindrops (convert) where\n\nimport Data.List\n\nconvert :: Int -> String\nconvert n | "" /= r = r\n          | otherwise = show n\n    where r = concat $ map rain (nub $ primeFactors n)\n          rain 3 = "Pling"\n          rain 5 = "Plang"\n          rain 7 = "Plong"\n          rain _ = ""\n\nprimeFactors :: Int -> [Int]\nprimeFactors 1 = []\nprimeFactors n = primeFacs' n primes \n   where primes = nubBy (((>1).).gcd) [2..q]\n         q = quot n 2\n         \nprimeFacs' :: Integral a => a -> [a] -> [a]\nprimeFacs' x [] = [x]\nprimeFacs' x ds@(d:t)\n    | d*d > x       = [x]\n    | r == 0        = d : primeFacs' q ds\n    | otherwise     = primeFacs' x t\n        where (q,r) = quotRem x d	\N	f	2	1	2014-01-31 17:14:15	2014-01-31 17:14:15	279	\N
633	11	eac038201edf865eac35f820	done	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Int -> String\nconvert n | not (null result) = result\n          | otherwise = show n\n    where result =  pling ++ plang ++ plong\n          pling = dropType 3 "Pling"\n          plang = dropType 5 "Plang"\n          plong = dropType 7 "Plong"\n          dropType test val = if n `mod` test == 0 then val else ""	\N	f	2	2	2014-02-08 10:32:30	2014-02-08 10:32:30	279	\N
635	11	11ab97992ab9b17e814920ec	done	ruby	nucleotide-count	class DNA\n\n  DNA_NUCLEOTIDES = %w[A C T G]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def initialize(dna_string)\n    dna_string.each_char do | char |\n      throw ArgumentError unless DNA_NUCLEOTIDES.include?(char)\n    end\n    @dna_string = dna_string\n  end\n\n  def count(nucleotide)\n    throw ArgumentError unless DNA_NUCLEOTIDES.include?(nucleotide) || RNA_NUCLEOTIDES.include?(nucleotide)\n    @dna_string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides = Hash.new(0)\n    DNA_NUCLEOTIDES.each do | nucleotide |\n      nucleotides[nucleotide] = @dna_string.count(nucleotide)\n    end\n\n    nucleotides \n  end\nend	\N	f	5	2	2014-02-28 21:21:49	2014-02-28 21:21:49	280	\N
636	11	2bdee44a4fdef004cf227723	superseded	clojure	bob	(ns bob)\n(use '[clojure.string :only (trim upper-case lower-case)])\n\n(defn question? [prompt]\n  (= (last prompt) \\?))\n\n(defn silence? [prompt]\n  (= (trim prompt) ""))\n\n(defn yelling? [prompt]\n  (and\n    (= (upper-case prompt) prompt)\n    (not= (lower-case prompt) prompt)))\n\n(defn response-for [prompt]\n  (cond\n    (silence? prompt) "Fine. Be that way!"\n    (yelling? prompt) "Woah, chill out!"\n    (question? prompt) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	2	1	2014-02-06 12:40:19	2014-02-06 12:40:19	281	\N
637	11	f1fdf0071fa1a52619db8483	superseded	clojure	bob	(ns bob)\n(use '[clojure.string :only (upper-case lower-case blank?)])\n\n(defn question? [prompt]\n  (= (last prompt) \\?))\n\n(defn yelling? [prompt]\n  (and\n    (= (upper-case prompt) prompt)\n    (not= (lower-case prompt) prompt)))\n\n(defn response-for [prompt]\n  (cond\n    (blank? prompt) "Fine. Be that way!"\n    (yelling? prompt) "Woah, chill out!"\n    (question? prompt) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	5	2	2014-02-28 02:13:16	2014-02-28 02:13:16	281	\N
638	11	c3463f60d4121b600f59eecb	done	clojure	bob	(ns bob\n  (:require [clojure.string :refer (upper-case lower-case blank?)]))\n\n(defn question? [prompt]\n  (= (last prompt) \\?))\n\n(defn yelling? [prompt]\n  (and\n    (= (upper-case prompt) prompt)\n    (not= (lower-case prompt) prompt)))\n\n(defn response-for [prompt]\n  (cond\n    (blank? prompt) "Fine. Be that way!"\n    (yelling? prompt) "Woah, chill out!"\n    (question? prompt) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	1	3	2014-03-17 22:19:00	2014-03-17 22:19:00	281	\N
639	11	7b8a4cfdbaa2a88cb1beb986	done	haskell	grains	module Grains (\r\n  square\r\n, total\r\n)  where\r\n\r\nsquare 1 = 1\r\nsquare n = 2 * square (n-1)\r\n\r\ntotal = sum $ map square [1..64]\r	\N	f	2	1	2014-02-16 07:39:15	2014-02-16 07:39:15	282	Grains.hs
640	11	640b4ab0f4a567d33b8e5c7f	superseded	ruby	word-count	Phrase = Struct.new(:phrase) do\n  def appearances\n    @appearances ||= Hash.new(0)\n  end\n\n  def word_count\n    @word_count ||= appearances.tap do |hash|\n      words.each { |word| hash[word] += 1 }\n    end\n  end\n\n  def words\n    phrase.split(/\\W+/).collect { |word| word.downcase }\n  end\nend\n\np Phrase.new("one fish two fish red fish blue fish").word_count	\N	f	5	2	2014-02-05 17:39:12	2014-02-05 17:39:12	283	\N
641	11	d5ee4e03192c9b1a286b327b	superseded	ruby	word-count	Phrase = Struct.new(:phrase) do\n  def appearances\n    @appearances ||= Hash.new(0)\n  end\n\n  def word_count\n    @word_count ||= appearances.tap do |hash|\n      words.each { |word| hash[word] += 1 }\n    end\n  end\n\n  def words\n    phrase.split(/\\W+/).map &:downcase\n  end\nend	\N	f	5	3	2014-02-17 16:15:40	2014-02-17 16:15:40	283	\N
642	11	e5dd7d523ba43d7db38296e4	hibernating	ruby	word-count	Phrase = Struct.new(:phrase) do\n  def word_count\n    Hash.new(0).tap do |hash|\n      words.each { |word| hash[word] += 1 }\n    end\n  end\n\n  def words\n    phrase.split(/\\W+/).map &:downcase\n  end\nend	\N	f	4	4	2014-02-18 16:01:23	2014-02-18 16:01:23	283	\N
643	11	fc833e0cddb7bd450f4220b1	superseded	ruby	word-count	Phrase = Struct.new(:phrase) do\n  def appearances\n    @appearances ||= Hash.new(0)\n  end\n\n  def word_count\n    appearances.clear.tap do |hash|\n      words.each { |word| hash[word] += 1 }\n    end\n  end\n\n  def words\n    phrase.split(/\\W+/).collect { |word| word.downcase }\n  end\nend	\N	f	4	1	2014-02-20 00:00:17	2014-02-20 00:00:17	283	\N
644	11	32452152367d05a36fb7ea56	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    year % 4 == 0 &&\n      year % 100 != 0 ||\n      year % 400 == 0\n  end\n\n  private\n  attr_reader :year\nend	\N	f	14	1	2014-03-06 05:38:50	2014-03-06 05:38:50	284	\N
645	11	76ad5a8e1d4e95767a93a9ac	pending	ruby	anagram	class Anagram\r\n\r\n\tdef initialize(word)\r\n\t\t@word = word\r\n\tend\r\n\r\n\tdef match(array)\r\n\t\tmatch_array = []\r\n\t\tarray.each do |x|\r\n\t\t\tnext if x.downcase == @word.downcase\r\n\t\t\tmatch_array << x if x.downcase.split(//).sort == @word.downcase.split(//).sort\r\n\t\tend\r\n\t\treturn match_array\r\n\tend\r\n\t\r\nend	\N	f	7	1	2014-02-14 00:56:38	2014-02-14 00:56:38	285	anagram.rb
646	11	dd4f1ddc6b6204e406739492	done	ruby	triangle	class TriangleError < RuntimeError  \nend\n\nclass Triangle\n  \n  def initialize(a, b, c)\n    @sides = [ a, b, c ]\n    sum = 0\n    @sides.each { |a| sum+=a }\n    @sides.each do |s|\n      if s <= 0 || (s*2) >= sum\n        raise TriangleError\n      end\n    end\n  end\n\n  def kind\n    case @sides.uniq.length\n    when 1\n      :equilateral\n    when 2\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\nend	\N	f	5	1	2014-01-31 03:27:46	2014-01-31 03:27:46	286	\N
647	11	f820bbcfa702f02a143eef7b	superseded	javascript	bob	module.exports = function() {\n\n  var responses = [\n    [/^ *$/,           'Fine, be that way!'],\n    [/^[A-Z0-9 \\W]+$/, 'Woah, chill out!'],\n    [/\\?$/,             'Sure.'],\n    [/.*/,               'Whatever.'],\n  ]\n\n  this.hey = function(phrase) {\n    for (var i in responses) {\n      var regex  = responses[i][0],\n          answer = responses[i][1]\n      if (regex.test(phrase))\n        return answer\n    }\n  }\n}	\N	f	8	1	2014-02-28 14:57:52	2014-02-28 14:57:52	287	\N
648	11	16beb6a72ae64d13e43b06cc	done	javascript	bob	module.exports = function() {\n\n  function answerYelling(phrase) {\n    if ((/^[A-Z0-9 \\W]+$/).test(phrase))\n      return 'Woah, chill out!'\n  }\n\n  function answerQuestion(phrase) {\n    if ('?' == phrase[phrase.length-1])\n      return 'Sure.'\n  }\n\n  function answerSilence(phrase) {\n    if ((/^ *$/).test(phrase))\n      return 'Fine, be that way!'\n  }\n\n  function defaultAnswer() {\n    return 'Whatever.'\n  }\n\n  this.hey = function(phrase) {\n    return answerYelling(phrase)\n        || answerQuestion(phrase)\n        || answerSilence(phrase)\n        || defaultAnswer()\n  }\n}	\N	f	0	2	2014-03-04 21:24:33	2014-03-04 21:24:33	287	\N
649	11	f4004a926eeed200fdb8c09e	done	haskell	anagram	module Anagram where\nimport Data.List\nimport Data.Char\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word candidates = filter isAnagram candidates\n    where isAnagram c = (map toLower c) /= lowercase && (map toLower c) `elem` anagrams\n          anagrams =  permutations lowercase\n          lowercase = map toLower word	\N	f	4	1	2014-02-23 04:59:59	2014-02-23 04:59:59	288	\N
651	11	a99eff7a0550fae01b1c9d8e	superseded	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tsubject = strings.ToLower(subject)\n\tss := sortBytes(subject)\n\tfor _, c := range candidates {\n\t\tc := strings.ToLower(c)\n\t\tif subject != c && ss == sortBytes(c) {\n\t\t\tanagrams = append(anagrams, c)\n\t\t}\n\t}\n\treturn\n}\n\nfunc sortBytes(s string) string {\n\tbs := []byte(s)\n\tsort.Sort(Bytes(bs))\n\treturn string(bs)\n}\n\ntype Bytes []byte\n\nfunc (bs Bytes) Len() int {\n\treturn len(bs)\n}\n\nfunc (bs Bytes) Swap(i, j int) {\n\tbs[i], bs[j] = bs[j], bs[i]\n}\n\nfunc (bs Bytes) Less(i, j int) bool {\n\treturn bs[i] < bs[j]\n}	\N	f	2	1	2014-02-11 05:19:24	2014-02-11 05:19:24	290	anagram.go
652	11	4949539bc38041588e728c91	pending	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tsubject = strings.ToLower(subject)\n\tss := sortRunes(subject)\n\tfor _, c := range candidates {\n\t\tc := strings.ToLower(c)\n\t\tif subject != c && ss == sortRunes(c) {\n\t\t\tanagrams = append(anagrams, c)\n\t\t}\n\t}\n\treturn\n}\n\nfunc sortRunes(s string) string {\n\ta := Runes(s)\n\tsort.Sort(a)\n\treturn string(a)\n}\n\ntype Runes []rune\n\nfunc (a Runes) Len() int {\n\treturn len(a)\n}\n\nfunc (a Runes) Swap(i, j int) {\n\ta[i], a[j] = a[j], a[i]\n}\n\nfunc (a Runes) Less(i, j int) bool {\n\treturn a[i] < a[j]\n}	\N	f	2	2	2014-02-24 13:40:54	2014-02-24 13:40:54	290	anagram.go
654	11	5322b4a7dd351c6dfe0fafe8	done	haskell	beer-song	module Beer(sing, verse) where\n\nsing :: Int -> Int -> String\nsing m n = unlines $ map verse [m,m-1..n]\n\nverse :: Int -> String\nverse n\n  | n > 2 = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++ show (n-1) ++ " bottles of beer on the wall.\\n"\n  | n == 2 = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++ show (n-1) ++ " bottle of beer on the wall.\\n"\n  | n == 1 = show n ++ " bottle of beer on the wall, " ++ show n ++ " bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  | otherwise = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"	\N	f	2	2	2014-02-23 15:04:02	2014-02-23 15:04:02	291	Beer.hs
655	11	6d3a087cbabf1c9062bc865d	done	haskell	word-count	module WordCount (wordCount) where\n\nimport qualified Data.Map.Strict as Map\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map.Map String Integer\nwordCount = foldr (addWord . processWord) Map.empty . words\n    where\n        addWord "" = id\n        addWord w  = Map.alter (Just . maybe 1 (+1)) w\n        processWord = map toLower . filter isAlphaNum	\N	f	5	1	2014-02-10 17:59:35	2014-02-10 17:59:35	292	\N
656	11	c1ed1520bd5960c36518a67e	superseded	javascript	word-count	module.exports = function Words(words) {\n  \n  this.count = word_count();\n\n  function word_count() {\n    var word_list = words.split(/\\s/), count = {};\n\n    function increment_count(raw_word) {\n      var word = normalize(raw_word);\n      if(word === "") return;\n      if(typeof count[word] === 'undefined') count[word] = 0;\n      count[word]++;\n    }\n    \n    word_list.forEach(increment_count);\n    return count;\n  }\n\n  function normalize(word) {\n    // I am counting hyphenated words as one, not two.\n    return word.toLowerCase().replace(/[^a-z0-9\\-]/g, "");\n  }\n};	\N	f	4	1	2014-02-21 13:48:56	2014-02-21 13:48:56	293	\N
657	11	c4d7bbadee024d8faa2636fb	done	javascript	word-count	module.exports = function Words(words) {\n  this.count = wordCount();\n\n  function wordCount() {\n    var count = {}, word_list = words.toLowerCase().match(/[a-z0-9\\-]+/g);\n\n    function incrementCount(word) {\n      if(typeof count[word] === 'undefined') count[word] = 0;\n      count[word]++;\n    }\n\n    word_list.forEach(incrementCount);\n    return count;\n  }\n};	\N	f	0	2	2014-03-05 05:56:11	2014-03-05 05:56:11	293	\N
658	12	47ff7293036f94cb19eeafd0	done	python	bob	class Bob(object):\n    def hey(self, text):\n        text = text.strip()\n\n        response = "Whatever."\n\n        if not text:    # test if text is empty\n            response = "Fine. Be that way!"\n           \n        if text.endswith("?"):\n            response = "Sure."\n\n        if text.isupper():\n            response = "Woah, chill out!"\n\n        return response	\N	f	2	2	2013-10-23 04:25:58	2013-10-23 04:25:58	294	\N
659	12	2723a46999fb54a2e7f2aaa4	superseded	python	bob	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nclass Bob(object):\n    def hey(self, text):\n        response = "Whatever."\n\n        if text.endswith("?"):\n            response = "Sure."\n\n        if len(text.strip()) == 0:\n            response = "Fine. Be that way!"\n           \n        if text.isupper():\n            response = "Woah, chill out!"\n\n        return response\n\n# ---------------------------------------- \n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()	\N	f	2	1	2013-10-27 21:36:02	2013-10-27 21:36:02	294	\N
660	12	35e644687530cfe6f905dffe	done	haskell	gigasecond	module Gigasecond (fromDay) where\nimport Data.Time.Calendar (addDays, Day)\n\ngigasecondInDays :: Integer\ngigasecondInDays = 1000000000 `div` (60 * 60 * 24)\n\nfromDay :: Day -> Day\nfromDay = addDays gigasecondInDays	\N	f	1	1	2013-11-13 08:04:36	2013-11-13 08:04:36	295	\N
678	12	3d97b3f6e26390d234f39031	superseded	javascript	bob	function Bob() {\n\n}\n\nBob.prototype.hey = function (sentence){\n\n    if (isNothing(sentence)) return 'Fine, be that way!';\n\n    if (isQuestion(sentence)) return 'Sure.';\n\n    if (this.isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nBob.prototype.isNothing = function (sentence) {\n\treturn sentecne == '';\n}\n\nBob.prototype.isQuestion = function (sentence) {\n\treturn sentence.endswith('?');\n}\n\nBob.prototype.isShouting = function (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nString.prototype.endswith = function (arg) {\n    return this.indexOf (arg, this.length - arg.length) !== -1;\n};\n\nmodule.exports = Bob;	\N	f	3	2	2014-01-14 22:45:51	2014-01-14 22:45:51	305	\N
663	12	be69628886e09c2d675cea19	done	ruby	bob	class Bob\n  def initialize(responder_chain = nil)\n    @responder_chain = responder_chain || [EmptyResponder.new, ShoutResponder.new, QuestionResponder.new, DefaultResponder.new]\n  end\n\n  def hey(input)\n    @responder_chain.find { |responder| responder.can_respond?(input) }.response\n  end\n\n  class QuestionResponder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\nend	\N	f	0	3	2013-12-25 03:43:41	2013-12-25 03:43:41	296	\N
664	12	e2a1dda030483c411e11a195	pending	python	beer-song	class Beer:\n    def verse(self, n):\n        if n == 0:\n            return self.verse_0\n        elif n == 1:\n            return self.verse_1\n        elif n == 2:\n            return self.verse_2\n        else:\n            return ("{} bottles of beer on the wall, {} bottles of beer.\\n"\n            "Take one down and pass it around, {} bottles of beer on the wall.\\n").format(n, n, n - 1)\n\n    def sing(self, begin, end=0):\n        return "".join([self.verse(n) + "\\n" for n in range(begin, end - 1, -1)])\n\n    verse_0 = ("No more bottles of beer on the wall, no more bottles of beer.\\n"\n                "Go to the store and buy some more, 99 bottles of beer on the wall.\\n")\n\n    verse_1 = ("1 bottle of beer on the wall, 1 bottle of beer.\\n"\n                "Take it down and pass it around, no more bottles of beer on the wall.\\n")\n\n    verse_2 = ("2 bottles of beer on the wall, 2 bottles of beer.\\n"\n                "Take one down and pass it around, 1 bottle of beer on the wall.\\n")	\N	f	1	1	2013-10-14 07:16:23	2013-10-14 07:16:23	297	\N
665	12	f1c418129e47a768a4432778	pending	ruby	raindrops	class Raindrops\n\tdef convert(value)\n\t\tresult = ""\n\t\tvalue%3==0 ? result += "Pling" : ""\n\t\tvalue%5==0 ? result += "Plang" : ""\n\t\tvalue%7==0 ? result += "Plong" : ""\n\t\tresult=="" ? result = value.to_s : ""\n\t\treturn result\n\tend\nend	\N	f	0	1	2013-10-27 22:00:47	2013-10-27 22:00:47	298	raindrops.rb
666	12	a4f3b89181b5d7e0b1adfd8a	superseded	ruby	rna-transcription	module Complement\r\n  ADENINE = "A"\r\n  CYTOSINE = "C"\r\n  GUANINE = "G"\r\n  THYMIDINE = "T"\r\n  URACIL = "U"\r\n\r\n  BASE_TRANSCRIPTION = {\r\n    CYTOSINE => GUANINE,\r\n    GUANINE => CYTOSINE,\r\n    THYMIDINE => ADENINE,\r\n    URACIL => ADENINE\r\n  }\r\n\r\n  def self.transcribe_with(nucleotide)\r\n    Hash.new { |hash, key|\r\n      if key == ADENINE\r\n        hash[key] = nucleotide\r\n      else\r\n        hash[key] = BASE_TRANSCRIPTION[key]\r\n      end\r\n    }\r\n  end\r\n\r\n  RNA = transcribe_with(URACIL)\r\n\r\n  DNA = transcribe_with(THYMIDINE)\r\n\r\n  def self.of_dna(dna_strand)\r\n    complement(dna_strand, RNA)\r\n  end\r\n\r\n  def self.of_rna(rna_strand)\r\n    complement(rna_strand, DNA)\r\n  end\r\n\r\n  private\r\n\r\n  def self.complement(strand, transcribe_key)\r\n    strand.chars.reduce("") do |out_strand, nucleotide|\r\n      out_strand << transcribe_key[nucleotide]\r\n    end\r\n  end\r\n\r\nend\r	\N	f	0	1	2013-10-06 14:54:25	2013-10-06 14:54:25	299	\N
667	12	a51783e9f37ac048a3cff607	done	ruby	rna-transcription	module Complement\r\n  ADENINE   = "A"\r\n  CYTOSINE  = "C"\r\n  GUANINE   = "G"\r\n  THYMIDINE = "T"\r\n  URACIL    = "U"\r\n\r\n  BASE_TRANSCRIPTION = {\r\n    CYTOSINE  => GUANINE,\r\n    GUANINE   => CYTOSINE,\r\n    THYMIDINE => ADENINE,\r\n    URACIL    => ADENINE\r\n  }\r\n\r\n  def self.transcribe_with(nucleotide)\r\n    Hash.new { |hash, key|\r\n      if key == ADENINE\r\n        hash[key] = nucleotide\r\n      else\r\n        hash[key] = BASE_TRANSCRIPTION[key]\r\n      end\r\n    }\r\n  end\r\n\r\n  RNA = transcribe_with(URACIL)\r\n\r\n  DNA = transcribe_with(THYMIDINE)\r\n\r\n  def self.of_dna(dna_strand)\r\n    complement(dna_strand, RNA)\r\n  end\r\n\r\n  def self.of_rna(rna_strand)\r\n    complement(rna_strand, DNA)\r\n  end\r\n\r\n  private\r\n\r\n  def self.complement(strand, transcribe_key)\r\n    strand.chars.map{ |nucleotide|\r\n      transcribe_key[nucleotide]\r\n    }.join\r\n  end\r\n\r\nend\r	\N	f	1	2	2013-11-08 01:43:43	2013-11-08 01:43:43	299	complement.rb
679	12	0b0f714ed8c38aac0fab6d1e	superseded	javascript	bob	function Words (sentence) {\n  this.count = {};\n  this.buildMap(sentence);\n}\n\nWords.prototype.buildMap = function (sentence) {\n  sentence.split(' ').map(this.incrementCount, this);\n};\n\nWords.prototype.incrementCount = function (word) {\n  cleanWord = word.replace(/[\\W]/g,'').toLowerCase();\n  if (cleanWord != '') {\n    this.count[cleanWord] = (this.count[cleanWord] || 0) + 1;\n  }\n};\n\nmodule.exports=Words;	\N	f	3	4	2014-01-31 21:41:26	2014-01-31 21:41:26	305	\N
669	12	fe78048b9c1f921299350883	superseded	javascript	word-count	(function() {\n  "use strict";\n\n  var Words = function(phrase) {\n    this.count = phrase\n      .toLowerCase()\n      .match(/\\w+/g)\n      .reduce(counter, {});\n  };\n\n  var counter = function(counts, word) {\n    counts[word] = (counts[word] || 0) + 1;\n    return counts;\n  }\n\n  module.exports = Words;\n})();	\N	f	1	1	2013-10-08 13:56:37	2013-10-08 13:56:37	301	\N
670	12	8fe490ebc484d64eaf1b47aa	done	javascript	word-count	(function() {\n  "use strict";\n\n  var Words = function(phrase) {\n    this.count = phrase\n      .toLowerCase()\n      .match(/\\w+/g)\n      .reduce(counter, {});\n  };\n\n  var counter = function(counts, word) {\n    counts[word] = (counts[word] || 0) + 1;\n    return counts;\n  };\n\n  module.exports = Words;\n})();	\N	f	1	2	2013-11-13 21:45:53	2013-11-13 21:45:53	301	\N
671	12	6c3fec13bcd8299664c6d09e	pending	python	space-age	"""Years in terms of a given planet's solar years."""\n\n\n# Earth's periods of revolution in seconds\n_EARTH_PERIOD_OF_REV_IN_SECS = 31557600.0\n\n#: Planets' periods of revolution in seconds\nPERIOD_OF_REV_IN_SECS = {\n    "earth": _EARTH_PERIOD_OF_REV_IN_SECS,\n    "mercury": 0.2408467 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "venus": 0.61519726 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "mars": 1.8808158 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "jupiter": 11.862615 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "saturn": 29.447498 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "uranus": 84.016846 * _EARTH_PERIOD_OF_REV_IN_SECS,\n    "neptune": 164.79132 * _EARTH_PERIOD_OF_REV_IN_SECS\n}\n\n\nclass SpaceYear(object):\n    """Years in terms of a given planet's solar years.\n\n    SpaceYear.on_*planet*() returns years in terms of *planet*'s solar\n    years when *planet* is among PERIOD_OF_REV_IN_SECS's keys.\n    """\n\n    def __init__(self, seconds):\n        """Create a space year that corresponds to a period in seconds."""\n        self.seconds = seconds\n\n    def __getattr__(self, name):\n        if name.startswith("on_"):\n            planet = name[3:]\n            if planet in PERIOD_OF_REV_IN_SECS:\n                return lambda prec=2: self.on_planet(planet, prec)\n        raise AttributeError(\n            "'{!s}' object has no attribute '{!s}'".format(\n                self.__class__.__name__, name))\n\n    def __repr__(self):\n        return "{!s}({!r})".format(self.__class__.__name__, self.seconds)\n\n    def __str__(self):\n        return "{}".format(self.seconds)\n\n    def on_planet(self, planet, prec=2):\n        """Convert to a planet's solar years.\n\n        :type planet: str.\n        :param prec: a precision in decimal digits (default 2 digits).\n        """\n        years = self.seconds / PERIOD_OF_REV_IN_SECS[planet]\n        return round(years, prec)\n\n\n# ``class SpaceAge`` is an alias of ``class SpaceYear``.\nSpaceAge = SpaceYear	\N	f	1	1	2013-10-26 09:00:19	2013-10-26 09:00:19	302	space_age.py
673	12	e4f029ff5d00a02a6989a4ad	done	haskell	accumulate	module Accumulate (accumulate) where\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate = map\n{-\n\n-- Some other definitions that are easily possible:\n\naccumulate = fmap\n\naccumulate = (=<<) . (return .)\n\naccumulate f = foldr ((:) . f) []\n\naccumulate f xs = [f x | x <- xs]\n\naccumulate f (x:xs) = f x : accumulate xs\naccumulate _ [] = []\n\n-}	\N	f	1	1	2013-10-13 23:00:27	2013-10-13 23:00:27	304	\N
674	12	ccfdce8a71ca3fa86ded1f7b	superseded	javascript	bob	String.prototype.endswith = function (arg) {\n    return this.indexOf (arg, this.length - arg.length) !== -1;\n};\n\nfunction Bob() {}\n\nBob.prototype.hey = function (sentence) {\n\n    if (isNothing(sentence)) return 'Fine, be that way!';\n\n    if (isQuestion(sentence)) return 'Sure.';\n\n    if (isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nfunction isNothing (sentence) {\n  return (sentence == '');\n}\n\nfunction isQuestion (sentence) {\n  return sentence.endswith('?');\n}\n\nfunction isShouting (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nmodule.exports = Bob;	\N	f	2	6	2013-10-21 21:22:20	2013-10-21 21:22:20	305	\N
675	12	3fef22b30ee7287790de0712	superseded	javascript	bob	function Bob() {}\n\nBob.prototype.hey = function (sentence) {\n\n    if (isNothing(sentence)) return 'Fine, be that way!';\n\n    if (isQuestion(sentence)) return 'Sure.';\n\n    if (isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nfunction isNothing (sentence) {\n  return (sentence == '');\n}\n\nfunction isQuestion (sentence) {\n  return sentence.substr(sentence.length - 1, 1) == '?';\n}\n\nfunction isShouting (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nmodule.exports = Bob;	\N	f	2	8	2013-11-24 12:26:08	2013-11-24 12:26:08	305	\N
676	12	fe52b2bba6c8470c813a664c	done	javascript	bob	function Bob() {}\n\nBob.prototype.hey = function (sentence) {\n\n    if (isNothing(sentence)) return 'Fine, be that way!';\n\n    if (isQuestion(sentence)) return 'Sure.';\n\n    if (isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nfunction isNothing (sentence) {\n  return (sentence === '');\n}\n\nfunction isQuestion (sentence) {\n  return sentence[sentence.length - 1] === '?';\n}\n\nfunction isShouting (sentence) {\n    return sentence.toUpperCase() === sentence;\n};\n\nmodule.exports = Bob;	\N	f	2	9	2013-11-29 05:26:24	2013-11-29 05:26:24	305	\N
677	12	435b6cc623f07e69d29c0599	superseded	javascript	bob	function Bob() {\n\n}\n\nBob.prototype.hey = function (arg){\n\n  if (arg == '') return 'Fine, be that way!';\n\n    if (arg.endswith('?')) return 'Sure.';\n\n    if (this.isShouting(arg)) return 'Woah, chill out!';\n\n    return 'Whatever.';\n}\n\nString.prototype.endswith = function (arg) {\n    return this.indexOf (arg, this.length - arg.length) !== -1;\n};\n\nBob.prototype.isShouting = function (arg) {\n    return !(new RegExp(".*[a-z].*")).test(arg);\n};\n\nmodule.exports = Bob;	\N	f	1	1	2013-12-25 08:23:34	2013-12-25 08:23:34	305	\N
681	12	c43af2b69e2cf95a201e399c	superseded	javascript	bob	function Bob() {}\n\nBob.prototype.hey = function (sentence) {\n\n    if (isNothing(sentence)) return 'Fine, be that way!';\n\n    if (isQuestion(sentence)) return 'Sure.';\n\n    if (isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nfunction isNothing (sentence) {\n  return (sentence == '');\n}\n\nfunction isQuestion (sentence) {\n  return this.indexOf (arg, this.length - arg.length) !== -1;\n}\n\nfunction isShouting (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nmodule.exports = Bob;	\N	f	3	7	2014-02-19 05:28:57	2014-02-19 05:28:57	305	\N
682	12	ca40ac48c199889131ccd3e3	superseded	javascript	bob	String.prototype.endswith = function (arg) {\n    return this.indexOf (arg, this.length - arg.length) !== -1;\n};\n\nfunction Bob() {\n\n}\n\nBob.prototype.hey = function (sentence){\n\n    if (this.isNothing(sentence)) return 'Fine, be that way!';\n\n    if (this.isQuestion(sentence)) return 'Sure.';\n\n    if (this.isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nBob.prototype.isNothing = function (sentence) {\n  return (sentence == '');\n}\n\nBob.prototype.isQuestion = function (sentence) {\n  return sentence.endswith('?');\n}\n\nBob.prototype.isShouting = function (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nmodule.exports = Bob;	\N	f	0	5	2014-03-06 13:23:59	2014-03-06 13:23:59	305	\N
683	12	d340294fb80d719249832a19	done	haskell	hexadecimal	module Hexadecimal\n  ( hexToInt )\n  where\n\nimport Prelude hiding (Maybe(..))\nimport Data.Char\nimport Data.List (foldl')\nimport Data.Strict.Maybe (fromMaybe, Maybe(..))\n\nhexToInt :: String -> Int\nhexToInt = fromMaybe 0 . foldl' inner (Just 0) . map toLower\n  where\n    inner Nothing x = Nothing\n    inner (Just c) x\n      | ox >= oa && ox <= oz = Just $ c * 16 + 10 + ox - oa\n      | ox >= o0 && ox <= o9 = Just $ c * 16 + ox - o0\n      | otherwise  = Nothing\n      where ox = ord  x\n    oa = ord 'a'\n    oz = ord 'f'\n    o0 = ord '0'\n    o9 = ord '9'	\N	f	0	1	2013-11-12 17:49:56	2013-11-12 17:49:56	306	Hexadecimal.hs
684	12	36434e9bc7d1314fa222ddb9	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year % 400 == 0 {\n\t\treturn true\n\t}\n\tif year % 100 == 0 {\n\t\treturn false\n\t}\n\treturn year % 4 == 0\n}	\N	f	1	1	2013-10-04 18:55:02	2013-10-04 18:55:02	307	leap.go
685	12	c70ee314020f95034c06469b	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year%400 == 0 {\n\t\treturn true\n\t}\n\tif year%100 == 0 {\n\t\treturn false\n\t}\n\treturn year%4 == 0\n}	\N	f	1	2	2013-10-11 17:22:32	2013-10-11 17:22:32	307	leap.go
686	12	83dc695335e5550ce466204c	superseded	go	leap	//Package leap implements utility routine to\n//report if any gievn year is a leap year\npackage leap\n \n//IsLeapYear determines whether the given year is a leap one\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && year%100 != 0 || year%400 == 0\n}	\N	f	1	3	2013-11-14 12:12:34	2013-11-14 12:12:34	307	leap.go
687	12	fe1b7683838395e39848f4ca	superseded	go	leap	//Package leap implements utility routine to\n//report if any gievn year is a leap year\npackage leap\n\ntype Year int\n\n//DivisiblebBy checks if the year number is divisibleb by n\nfunc (year Year) DivisiblebBy(n int) bool {\n\treturn int(year)%n == 0\n}\n\n//IsLeap determines whether the year is a leap one\nfunc (y Year) IsLeap() bool {\n\treturn y.DivisiblebBy(4) && !y.DivisiblebBy(100) || y.DivisiblebBy(400)\n}\n\n//IsLeapYear checks if the given year is a leap one\nfunc IsLeapYear(y int) bool {\n\treturn Year(y).IsLeap()\n}	\N	f	1	4	2013-12-27 13:30:10	2013-12-27 13:30:10	307	leap.go
688	12	e99a014be0e3fac2956551ac	pending	go	leap	//Package leap implements utility routine to\n//determin if any gievn year is a leap year\npackage leap\n\ntype Year int\n\n//DivisiblebBy checks if the year number is divisibleb by n\nfunc (year Year) divisiblebBy(n int) bool {\n    return int(year)%n == 0\n}\n\n//IsLeap determines whether the year is a leap one\nfunc (y Year) IsLeap() bool {\n    return y.divisiblebBy(4) && !y.divisiblebBy(100) || y.divisiblebBy(400)\n}\n\n//IsLeapYear checks if the given year is a leap one\nfunc IsLeapYear(y int) bool {\n    return Year(y).IsLeap()\n}	\N	f	1	5	2014-01-05 10:37:21	2014-01-05 10:37:21	307	leap.go
690	13	636b3d8b85dcb9de017f5695	hibernating	javascript	bob	var Bob = function(){};\nmodule.exports = Bob;\n\nBob.prototype.hey = function(phrase){\n\t\n\t\tif(/[a-zäöü]/.test(phrase) == false && /[A-Z]/.test(phrase)){\n\t\t\treturn "Woah, chill out!";\n\t\t}\n\t\telse if (/\\?$/.test(phrase)){\n\t\t\treturn "Sure.";\n\t\t}\n\t\telse if (/[^\\s]/.test(phrase) == false){\n\t\t\treturn "Fine. Be that way!";\n\t\t}\n\t\telse {\n\t\t\treturn "Whatever.";\n\t\t}\n};	\N	f	2	1	2013-11-10 20:57:02	2013-11-10 20:57:02	309	bob.js
691	13	2a4e07e170b338ebb313c353	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- split-words [s]\n  (->> (str/split s #"\\W+")\n       (map str/lower-case)))\n\n(defn- inc-count [m word]\n  (assoc m word (inc (get m word 0))))\n\n(defn word-count [txt]\n  (reduce inc-count {} (split-words txt)))	\N	f	0	1	2013-09-30 18:16:32	2013-09-30 18:16:32	310	\N
692	13	0dfd6bd36aa013835550da06	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- split-words [s]\n  (->> (str/split s #"\\W+")\n       (map str/lower-case)))\n\n(defn word-count [txt]\n  (->> (split-words txt)\n       frequencies))	\N	f	2	2	2013-10-19 19:30:04	2013-10-19 19:30:04	310	\N
693	13	cb65674e76a4e9441c4f6bba	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- split-words [s]\n  (map str/lower-case (str/split s #"\\W+")))\n\n(defn word-count [txt]\n  (frequencies (split-words txt)))	\N	f	2	3	2013-11-17 15:32:37	2013-11-17 15:32:37	310	\N
776	15	6afb4bb09aa22fd5ca371997	superseded	clojure	bob	(ns bob)\n\n(defn response-for [phrase]\n  (cond\n    (re-find #"\\A[^a-z]+\\z" phrase) "Woah, chill out!"\n    (re-find #"\\?\\z" phrase) "Sure."\n    (= "" phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	3	1	2014-01-21 11:13:32	2014-01-21 11:13:32	348	\N
696	13	9fdd8a7e7f69bfd9801fe450	superseded	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def self.nucleotide?(string)\n    constants.any? { |const| const_get(const) == string }\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  attr_reader :sequence\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless Nucleotide.nucleotide? nucleotide\n    sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= {\n      ADENOSINE => count(ADENOSINE),\n      THYMIDINE => count(THYMIDINE),\n      CYTIDINE => count(CYTIDINE),\n      GUANOSINE => count(GUANOSINE)\n    }\n  end\n\nend	\N	f	0	1	2014-02-04 10:59:44	2014-02-04 10:59:44	311	\N
697	13	c5b902aaf409b434f045c97b	superseded	objective-c	bob	#import "Bob.h"\n#import "NSString+ConversationMethods.h"\n\nstatic NSString *const kMyResponseToSilence = @"Fine, be that way.";\nstatic NSString *const kMyResponseToYellingInAllCaps = @"Woah, chill out!";\nstatic NSString *const kMyResponseToQuestion = @"Sure.";\nstatic NSString *const kMyDefaultResponse = @"Whatever.";\n\n@implementation Bob\n\n-(id)hey:(NSString *)whatTheySaid {\n    \n    NSString *myResponse = kMyDefaultResponse;\n    \n    if([whatTheySaid isBlank]) { myResponse = kMyResponseToSilence; }\n    else if ([whatTheySaid isYellingInAllCaps]) { myResponse = kMyResponseToYellingInAllCaps; }\n    else if ([whatTheySaid endsWithQuestionMark]) { myResponse = kMyResponseToQuestion; }\n    \n    return myResponse;\n}\n\n@end	\N	f	2	1	2013-12-12 23:51:31	2013-12-12 23:51:31	312	Bob.m
698	13	a83019a898567740dc210294	done	objective-c	bob	#import "Bob.h"\n#import "NSString+ConversationMethods.h"\n\nstatic NSString *const kMyResponseToSilence = @"Fine, be that way.";\nstatic NSString *const kMyResponseToYellingInAllCaps = @"Woah, chill out!";\nstatic NSString *const kMyResponseToQuestion = @"Sure.";\nstatic NSString *const kMyDefaultResponse = @"Whatever.";\n\n@implementation NSString (ConversationMethods)\n\n-(BOOL)isBlank {\n    return [[self stringByReplacingOccurrencesOfString:@" " withString:@""] length] == 0;\n}\n\n-(BOOL)containsLowercase {\n    return [self rangeOfCharacterFromSet:[NSCharacterSet lowercaseLetterCharacterSet]].location != NSNotFound;\n}\n\n-(BOOL)containsUppercase {\n    return [self rangeOfCharacterFromSet:[NSCharacterSet uppercaseLetterCharacterSet]].location != NSNotFound;\n}\n\n-(BOOL)endsWithQuestionMark {\n    return [self rangeOfString:@"?" options:NSBackwardsSearch range:NSMakeRange([self length]-1, 1)].location != NSNotFound;\n}\n\n-(BOOL)isYellingInAllCaps {\n    return [self containsUppercase] && ![self containsLowercase];\n}\n\n@end\n\n@implementation Bob\n\n-(id)hey:(NSString *)whatTheySaid {\n    \n    NSString *myResponse = kMyDefaultResponse;\n    \n    if([whatTheySaid isBlank]) { myResponse = kMyResponseToSilence; }\n    else if ([whatTheySaid isYellingInAllCaps]) { myResponse = kMyResponseToYellingInAllCaps; }\n    else if ([whatTheySaid endsWithQuestionMark]) { myResponse = kMyResponseToQuestion; }\n    \n    return myResponse;\n}\n\n@end	\N	f	2	2	2013-12-16 23:52:05	2013-12-16 23:52:05	312	Bob.m
699	13	bb56300d795370844f07f3ca	done	scala	grains	object Grains {\n    def square(i: Int): BigInt = BigInt(2) pow (i - 1)\n    val total = square(65) - 1\n}	\N	f	0	1	2013-09-25 03:11:33	2013-09-25 03:11:33	313	grains.scala
700	13	49bf91652d3b4e47155496a6	pending	python	rna-transcription	__author__ = 'jos'\n\n\nclass DNA():\n    def __init__(self, dnastring):\n        """\n        Creates a DNA object with the passed in dna string.\n        :param dnastring: string\n        """\n        assert isinstance(dnastring, basestring)\n        self.dnastring = dnastring\n\n    def to_rna(self):\n        """\n        Converts dnastring to an rna string\n        :return: rna string\n        """\n        return self.dnastring.replace('T', 'U')	\N	f	3	1	2013-11-22 13:37:41	2013-11-22 13:37:41	314	\N
701	13	52a858513547e8b607b54e69	done	ruby	house	class House\n\n  def initialize\n    @nouns = ["house", "malt", "rat", "cat", "dog", "cow with the crumpled horn", "maiden all forlorn", "man all tattered and torn", "priest all shaven and shorn", "rooster that crowed in the morn", "farmer sowing his corn", "horse and the hound and the horn"]\n    @verbs = ["Jack built", "lay in", "ate", "killed", "worried", "tossed", "milked", "kissed", "married", "woke", "kept", "belonged to"]\n  end\n\n  def verse(num, str="")\n    return str if num == 0 \n    str = "This is the " if str.empty?\n    str << "#{@nouns[num-1]} that #{@verbs[num-1]}"\n    str << case num\n      when 1\n        ".\\n"\n      else\n        " the "\n      end \n    verse(num-1, str)\n  end\n\n  def verses(min, max) \n    (min..max).each_with_object(""){ |i, song| song << verse(i) + "\\n"}\n  end\nend	\N	f	2	2	2013-11-26 03:51:11	2013-11-26 03:51:11	315	\N
702	13	5c9d04ba35e3d1c294450426	superseded	ruby	house	class House\n\n  def verse(num, str="")\n    return str += "\\n" if num == 0 \n    str = "This is the " if str.empty?\n    str << case num\n      when 1\n        "house that Jack built." \n      when 2\n        "malt that lay in the "\n      when 3\n        "rat that ate the "\n      when 4\n        "cat that killed the "\n      when 5\n        "dog that worried the "\n      when 6\n        "cow with the crumpled horn that tossed the "\n      when 7\n        "maiden all forlorn that milked the "\n      when 8\n        "man all tattered and torn that kissed the "\n      when 9\n        "priest all shaven and shorn that married the "\n      when 10\n        "rooster that crowed in the morn that woke the "\n      when 11\n        "farmer sowing his corn that kept the "\n      when 12\n        "horse and the hound and the horn that belonged to the "\n      end\n    # str += add\n    verse(num-1, str)\n  end\n\n  def verses(min, max) \n    (min..max).each_with_object(""){ |i, song| song << verse(i) + "\\n"}\n  end\nend	\N	f	3	1	2014-02-05 08:51:33	2014-02-05 08:51:33	315	\N
798	16	a1d2ae000dfc13f799955cd4	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as s]))\n\n(defn word-count\n  [str]\n  (->> (s/lower-case str)\n       (re-seq #"\\w+")\n       (frequencies)))	\N	f	3	2	2013-12-08 08:53:39	2013-12-08 08:53:39	355	\N
704	13	0d0f47c99351e49bbffbd8a5	superseded	ruby	anagram	class Anagram\n  def initialize(str)\n    str = str.downcase\n    @str = str\n    @sorted_str = str.chars.sort.join\n  end\n\n  def match(words)\n    words.select do |word|\n      word = word.downcase\n      @str != word && @sorted_str == word.chars.sort.join\n    end\n  end\nend	\N	f	3	1	2013-12-26 12:44:02	2013-12-26 12:44:02	316	\N
705	13	cec88ef4c2bc53927c0a7478	superseded	ruby	bob	class Bob\n\n  def initialize\n\n  end\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	1	2013-10-25 22:01:57	2013-10-25 22:01:57	317	\N
706	13	1775cf819409e69b2a6a4191	superseded	ruby	bob	class Bob\n\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	0	2	2013-11-08 13:01:12	2013-11-08 13:01:12	317	\N
707	13	bd9369ddced72d7c2599ecbf	hibernating	ruby	bob	class Bob\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	3	2013-11-20 11:27:39	2013-11-20 11:27:39	317	\N
708	13	e971453b9a9f04f9e8e3ad51	done	ruby	point-mutations	class DNA\n\n  attr_reader :sequence\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def hamming_distance input_sequence\n    @sequence.chars.zip(input_sequence.chars).count{ |chars_element|\n      chars_element[0] != chars_element[1] unless chars_element.include?(nil)\n    }\n  end\n\nend	\N	f	0	2	2013-09-13 06:13:07	2013-09-13 06:13:07	318	\N
710	13	822b89cc608a435ae67c91eb	done	javascript	word-count	module.exports = function (str) {\n  'use strict';\n\n  function prepare (str) {\n    return str.toLowerCase().match(/[\\w]+/g);\n  }\n\n  function count_words (str) {\n    var word_count = {},\n      words = prepare(str);\n\n    words.forEach(function (word) {\n      word_count[word] = (word_count[word] || 0) + 1;\n    });\n\n    return word_count;\n  }\n\n  return {\n    count: count_words(str)\n  };\n};	\N	f	2	4	2013-09-21 22:28:33	2013-09-21 22:28:33	319	\N
711	13	46e00fca5e85bd525b47f93e	superseded	javascript	word-count	module.exports = function (str) {\n  'use strict';\n\n  function clean (word) {\n    return word.toLowerCase().replace(/[^a-z0-9]/g, "");\n  }\n\n  function count_words (str) {\n    var word_count = {},\n      words = str.split(" ");\n\n    words.forEach(function (base) {\n      var word = clean(base);\n      if (word.length === 0) { return; }\n\n      if (!word_count[word]) {\n        word_count[word] = 0;\n      }\n      word_count[word] += 1;\n    });\n\n    return word_count;\n  }\n\n  return {\n    count: count_words(str)\n  };\n};	\N	f	2	1	2013-12-24 02:45:06	2013-12-24 02:45:06	319	\N
712	13	27673165ffef6a04a8736855	superseded	javascript	word-count	module.exports = function (str) {\n  'use strict';\n\n  function clean (str) {\n    return str.toLowerCase().match(/[a-z0-9]+/gi);\n  }\n\n  function count_words (str) {\n    var word_count = {},\n      words = clean(str);\n\n    words.forEach(function (word) {\n      word_count[word] = (word_count[word] || 0) + 1;\n    });\n\n    return word_count;\n  }\n\n  return {\n    count: count_words(str)\n  };\n};	\N	f	3	2	2014-01-20 10:31:07	2014-01-20 10:31:07	319	\N
713	13	0b0ac5c7fb8eb084de1f4288	superseded	javascript	word-count	module.exports = function (str) {\n  'use strict';\n\n  function clean (str) {\n    return str.toLowerCase().match(/[\\w]+/gi);\n  }\n\n  function count_words (str) {\n    var word_count = {},\n      words = clean(str);\n\n    words.forEach(function (word) {\n      word_count[word] = (word_count[word] || 0) + 1;\n    });\n\n    return word_count;\n  }\n\n  return {\n    count: count_words(str)\n  };\n};	\N	f	0	3	2014-01-27 17:15:55	2014-01-27 17:15:55	319	\N
714	13	9593482bf404ac8912abc6f0	superseded	haskell	robot-name	module Robot \n  ( mkRobot\n  , resetName\n  , robotName\n  ) where\n\nimport Data.IORef (IORef, newIORef, readIORef, writeIORef)\nimport System.Random (newStdGen, randomRs)\n\ngenRobotName :: IO String\ngenRobotName = do\n    g <- newStdGen\n    return $ rnd 2 ('A','Z') g\n          ++ rnd 3 ('0','9') g\n  where rnd n r g = take n $ randomRs r g\n\nmkRobot :: IO (IORef String)\nmkRobot = genRobotName >>= newIORef \n\nresetName :: (IORef String) -> IO ()\nresetName r = genRobotName >>= writeIORef r\n\nrobotName :: (IORef String) -> IO String\nrobotName = readIORef	\N	f	0	1	2013-11-03 09:22:02	2013-11-03 09:22:02	320	\N
715	13	9e81cc97917ffdbd6ef75a1c	done	haskell	robot-name	module Robot \n  ( mkRobot\n  , resetName\n  , robotName\n  ) where\n\nimport Data.IORef (IORef, newIORef, readIORef, writeIORef)\nimport System.Random (randomRIO)\n\ngenRobotName :: IO String\ngenRobotName = sequence $ rnd 2 ('A','Z')\n                       ++ rnd 3 ('0','9')\n  where rnd n = replicate n . randomRIO\n\nmkRobot :: IO (IORef String)\nmkRobot = genRobotName >>= newIORef \n\nresetName :: (IORef String) -> IO ()\nresetName r = genRobotName >>= writeIORef r\n\nrobotName :: (IORef String) -> IO String\nrobotName = readIORef	\N	f	0	3	2013-11-16 14:41:20	2013-11-16 14:41:20	320	\N
716	13	5bbedb76d34d1943d9c4e7f3	superseded	haskell	robot-name	module Robot \n  ( mkRobot\n  , resetName\n  , robotName\n  ) where\n\nimport Control.Applicative\nimport Control.Monad(replicateM)\nimport Data.IORef (IORef, newIORef, readIORef, writeIORef)\nimport System.Random (randomRIO)\n\ngenRobotName :: IO String\ngenRobotName = (++) <$> rnd 2 ('A','Z')\n                    <*> rnd 3 ('0','9')\n  where rnd n = replicateM n . randomRIO\n\nmkRobot :: IO (IORef String)\nmkRobot = genRobotName >>= newIORef \n\nresetName :: (IORef String) -> IO ()\nresetName r = genRobotName >>= writeIORef r\n\nrobotName :: (IORef String) -> IO String\nrobotName = readIORef	\N	f	2	2	2013-11-18 00:57:51	2013-11-18 00:57:51	320	\N
717	13	13301d5d5c5c501c6754789b	done	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input)  -> "Fine. Be that way!"\n      question?(input) -> "Sure."\n      shouting?(input) -> "Woah, chill out!"\n      anything_else    -> "Whatever." \n    end\n  end\n\n  defp silence?(input) do\n    String.lstrip(input) == ""\n  end\n\n  defp question?(input) do\n    String.ends_with?(input, "?")\n  end\n\n  defp shouting?(input) do\n    has_letters?(input) and String.upcase(input) == input\n  end\n\n  defp has_letters?(input) do\n    Regex.match?(%r/[a-zA-Z]/, input)\n  end\n\n  defp anything_else do\n    true\n  end\nend	\N	f	2	1	2013-09-13 13:43:04	2013-09-13 13:43:04	321	bob.exs
719	13	c8937c13ea5e87b26794423a	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\tvar output = make(map[string]int)\n\tfor score, letters := range input {\n\t\tassignLetterScores(output, letters, score)\n\t}\n\treturn output\n}\n\nfunc assignLetterScores(output map[string]int, letters []string, score int) {\n\tfor i := range letters {\n\t\tvar letter = strings.ToLower(letters[i])\n\t\toutput[letter] = score\n\t}\n}	\N	f	0	5	2013-09-23 11:11:49	2013-09-23 11:11:49	323	\N
720	13	e2e94322522e0f5aca8b7cf6	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n\tvar m = make(map[string]int)\n\tfor score, letters := range letter_values {\n\t\tfor i := range letters {\n\t\t\tvar letter = strings.ToLower(letters[i])\n\t\t\tm[letter] = score\n\t\t}\n\t}\n\treturn m\n}	\N	f	3	3	2013-11-17 06:37:57	2013-11-17 06:37:57	323	\N
721	13	28d3961bbe43f7f96bfc13ed	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n  var m = make(map[string]int)\n  for key, value := range letter_values {\n    for i := range value {\n      var letter = strings.ToLower(value[i])\n      m[letter] = key\n    }\n  }\n  return m\n}	\N	f	0	1	2013-12-21 20:51:32	2013-12-21 20:51:32	323	\N
722	13	2547bde58a333b8ba00c0bb4	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n  var m = make(map[string]int)\n  for score, letters := range letter_values {\n    for i := range letters {\n      var letter = strings.ToLower(letters[i])\n      m[letter] = score\n    }\n  }\n  return m\n}	\N	f	4	2	2013-12-29 09:35:21	2013-12-29 09:35:21	323	\N
724	13	95a9db0f540af26c255bdbc1	superseded	clojure	bob	(ns bob)\n\n(defn shouting? [content]\n  (= (clojure.string/upper-case content) content)\n)\n\n(defn question? [content]\n  (re-matches #".*\\?$" content )\n)\n\n(defn silence? [content]\n  (clojure.string/blank? (clojure.string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n  )\n\n)	\N	f	2	2	2013-09-20 16:27:48	2013-09-20 16:27:48	324	\N
725	13	cac88ccfe2f76577eee6484c	superseded	clojure	bob	(ns bob)\n\n(defn is_shouting [content]\n  (= (clojure.string/upper-case content) content)\n)\n\n(defn is_question [content]\n  (re-matches #".*\\?$" content )\n)\n\n(defn is_silence [content]\n  (clojure.string/blank? (clojure.string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (is_silence content ) "Fine, be that way."\n    (is_shouting content) "Woah, chill out!"\n    (is_question content) "Sure."\n    :else "Whatever."\n  )\n\n)	\N	f	0	1	2013-10-07 18:17:18	2013-10-07 18:17:18	324	\N
726	13	27917b6d5fc176deceec70ac	superseded	clojure	bob	(ns bob)\n\n(defn- shouting? [content]\n  (= (clojure.string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (re-matches #".*\\?$" content)\n)\n\n(defn- silence? [content]\n  (clojure.string/blank? (clojure.string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n))	\N	f	0	4	2013-10-11 03:04:14	2013-10-11 03:04:14	324	\N
727	13	266376f9bd297ad0cf7e027c	superseded	clojure	bob	(ns bob)\n\n(defn- shouting? [content]\n  (= (clojure.string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (= \\? (last content))\n)\n\n(defn- silence? [content]\n  (clojure.string/blank? (clojure.string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n))	\N	f	2	5	2013-11-05 04:22:32	2013-11-05 04:22:32	324	\N
728	13	ca98c44eaf96bb34b20fecf1	superseded	clojure	bob	(ns bob)\n\n(defn- shouting? [content]\n  (= (clojure.string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (re-matches #".*\\?$" content )\n)\n\n(defn- silence? [content]\n  (clojure.string/blank? (clojure.string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n  )\n\n)	\N	f	0	3	2013-11-10 07:53:21	2013-11-10 07:53:21	324	\N
729	13	7e3ac04affe24f27f3529c00	superseded	clojure	bob	(ns bob)\n(require '[clojure.string :as string])\n\n(defn- shouting? [content]\n  (= (string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (= \\? (last content))\n)\n\n(defn- silence? [content]\n  (string/blank? (string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n))	\N	f	2	7	2013-12-05 12:13:27	2013-12-05 12:13:27	324	\N
730	13	cde5249372e502052db693f5	superseded	clojure	bob	(ns bob)\n(require '[clojure.string :as string])\n\n\n(defn- shouting? [content]\n  (= (string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (= \\? (last content))\n)\n\n(defn- silence? [content]\n  (string/blank? (string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n))	\N	f	2	6	2013-12-07 12:00:38	2013-12-07 12:00:38	324	\N
731	13	1f6082093dfe5a0d947c68cc	superseded	clojure	bob	(ns bob\n(:require [clojure.string :as string]))\n\n\n(defn- shouting? [content]\n  (= (string/upper-case content) content)\n)\n\n(defn- question? [content]\n  (= \\? (last content))\n)\n\n(defn- silence? [content]\n  (string/blank? (string/trim content))\n)\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."\n))	\N	f	1	8	2013-12-18 17:17:24	2013-12-18 17:17:24	324	\N
732	13	7039b6b9f664bda5f54d5117	done	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n\n(defn- shouting? [content]\n  (= (string/upper-case content) content))\n\n(defn- question? [content]\n  (= \\? (last content)))\n\n(defn- silence? [content]\n  (string/blank? content))\n\n(defn response-for [content] \n  (cond \n    (silence? content ) "Fine, be that way."\n    (shouting? content) "Woah, chill out!"\n    (question? content) "Sure."\n    :else "Whatever."))	\N	f	2	9	2014-01-16 22:38:32	2014-01-16 22:38:32	324	\N
799	16	581351a87579d7c0f5dc5e69	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :as s]))\n\n(defn word-count\n  [str]\n  (-> str\n      s/lower-case\n      (s/split #"\\W+")\n      frequencies))	\N	f	3	3	2014-01-07 17:18:21	2014-01-07 17:18:21	355	\N
734	14	25e2772ab3e6635cefe95a1d	done	haskell	grade-school	module School\n    ( School\n    , empty\n    , add\n    , grade\n    , sorted\n    ) where\n\nimport qualified Data.Map as M\nimport qualified Data.Set as S\nimport Control.Arrow (second)\n\ntype Grade   = Int\ntype Student = String\nnewtype School = Roster (M.Map Grade (S.Set Student))\n\nempty :: School\nempty = Roster M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g student (Roster grades) = Roster $\n    M.insertWith S.union g (S.singleton student) grades\n\ngrade :: Grade -> School -> [Student]\ngrade g (Roster grades) = S.toList $ M.findWithDefault S.empty g grades\n\nsorted :: School -> [(Grade, [Student])]\nsorted (Roster grades) = map (second S.toList) $ M.toList grades	\N	f	2	4	2013-10-30 01:02:25	2013-10-30 01:02:25	325	\N
735	14	9b91127ed57db7f841d65f47	superseded	haskell	grade-school	module School\n    ( School\n    , empty\n    , add\n    , grade\n    , sorted\n    ) where\n\nimport qualified Data.Map as M\nimport qualified Data.Set as S\nimport Data.Maybe (fromMaybe)\n\ntype Grade = Int\ntype Name  = String\nnewtype School = Roster (M.Map Grade (S.Set Name))\n\nempty :: School\nempty = Roster $ M.empty\n\nadd :: Grade -> Name -> School -> School\nadd g name (Roster roster) = Roster $ M.alter addName g roster where\n    addName = Just . S.insert name . fromMaybe S.empty\n\ngrade :: Grade -> School -> [Name]\ngrade g (Roster roster) = S.toList $ M.findWithDefault S.empty g roster\n\nsorted :: School -> [(Grade, [Name])]\nsorted (Roster roster) = M.toList $ M.map S.toList roster	\N	f	3	1	2013-11-17 02:03:32	2013-11-17 02:03:32	325	\N
736	14	026d0dfaedb92ce0f2448551	superseded	haskell	grade-school	module School\n    ( School\n    , empty\n    , add\n    , grade\n    , sorted\n    ) where\n\nimport qualified Data.Map as M\nimport qualified Data.Set as S\nimport Control.Arrow (second)\n\ntype Grade   = Int\ntype Student = String\nnewtype School = Roster (M.Map Grade (S.Set Student))\n\nempty :: School\nempty = Roster $ M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g student (Roster grades) = Roster $\n    M.insertWith S.union g (S.singleton student) grades\n\ngrade :: Grade -> School -> [Student]\ngrade g (Roster grades) = S.toList $ M.findWithDefault S.empty g grades\n\nsorted :: School -> [(Grade, [Student])]\nsorted (Roster grades) = map (second S.toList) $ M.toList grades	\N	f	4	3	2014-02-17 14:01:25	2014-02-17 14:01:25	325	\N
737	14	3159c5eb0bb99a06047da163	superseded	clojure	rna-transcription	(ns dna (:require [clojure.string :as str]))\n\n(defn to-rna\n  [strand]\n  (let [convert (fn [nuc]\n                  (case nuc\n                    \\C \\C\n                    \\G \\G\n                    \\A \\A\n                    \\T \\U\n                    (throw (AssertionError. "No matching"))))]\n    (str/join (map convert strand))))	\N	f	3	1	2013-10-10 17:35:10	2013-10-10 17:35:10	326	dna.clj
738	14	a5e51ab121d69e118260e4c3	superseded	clojure	rna-transcription	(ns dna (:require [clojure.string :as str]))\n\n(defn- convert [nuc]\n  (case nuc\n    \\C \\C\n    \\G \\G\n    \\A \\A\n    \\T \\U\n    (assert nil)))\n\n\n(defn to-rna [strand]\n  (str/join (map convert strand)))	\N	f	3	2	2013-11-12 12:06:15	2013-11-12 12:06:15	326	dna.clj
739	14	adc2c11e3661b446a7699055	done	clojure	rna-transcription	(ns dna (:require [clojure.string :as str]))\n\n(defn- convert [nuc]\n  (case nuc\n    \\C \\C\n    \\G \\G\n    \\A \\A\n    \\T \\U\n    (assert nil (str "Invalid nucleotide: " nuc))))\n\n\n(def to-rna\n  (comp str/join (partial map convert)))	\N	f	3	3	2014-02-18 19:36:18	2014-02-18 19:36:18	326	dna.clj
740	14	022639190c973a138f9444f5	done	ruby	bob	class Bob\n  def hey(msg)\n    Response.for(Message.new(msg)).to_s\n  end\n  \n  private\n  \n  class Message\n    attr_reader :msg\n    \n    def initialize(msg)\n      @msg = msg\n    end\n    \n    def questioning?\n      msg.end_with?('?')\n    end\n    \n    def shouting?\n      msg.upcase == msg\n    end\n    \n    def silent?\n      msg.nil? || msg.empty?\n    end\n  end\n  \n  class Response\n    attr_reader :msg\n    \n    def initialize(msg)\n      @msg = msg\n    end\n    \n    def self.for(msg)\n      new(msg).to_s\n    end\n    \n    def to_s\n      if msg.silent?\n        'Fine. Be that way!'\n      elsif msg.shouting?\n        'Woah, chill out!'\n      elsif msg.questioning?\n        'Sure.'\n      else\n        'Whatever.'\n      end\n    end\n  end\nend	\N	f	3	1	2013-08-09 04:48:44	2013-08-09 04:48:44	327	\N
741	14	1d06b73b1538417a9322b36f	superseded	javascript	word-count	/* globals module: false */\nmodule.exports = (function() {\n  'use strict';\n  var Words = function(sentence) {\n    this.count = this.calculateWordCount(sentence);\n  };\n\n  Words.prototype.words = function (sentence) {\n    return sentence.toLowerCase().split(/\\W/)\n      .filter(function (word) {\n        return !/^\\s*$/.test(word);\n      })\n  }\n\n  Words.prototype.calculateWordCount = function(sentence) {\n    var wordCounts = {};\n    this.words(sentence).forEach(function (word) {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n    return wordCounts;\n  };\n  return Words;\n})();	\N	f	3	2	2013-09-27 18:07:56	2013-09-27 18:07:56	328	\N
742	14	96c8b4e67b8269a2684353b6	superseded	javascript	word-count	/* globals module: false */\nmodule.exports = (function() {\n  'use strict';\n  var Words = function(sentence) {\n    this.count = this.calculateWordCount(sentence);\n  };\n\n  Words.prototype.words = function (sentence) {\n    return sentence.split(/\\W/)\n      .filter(function (word) {\n        return !/^\\s*$/.test(word);\n      }).map(function (word) {\n        return word.toLowerCase();\n      });\n  }\n\n  Words.prototype.calculateWordCount = function(sentence) {\n    var wordCounts = {};\n    this.words(sentence).forEach(function (word) {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n    return wordCounts;\n  };\n  return Words;\n})();	\N	f	0	1	2013-11-02 03:06:47	2013-11-02 03:06:47	328	\N
743	14	cac62193b1b26be0d7fec3a2	hibernating	javascript	word-count	/* globals module: false */\nmodule.exports = (function() {\n  'use strict';\n  var Words = function(sentence) {\n    this.count = this.calculateWordCount(sentence);\n  };\n\n  Words.prototype.words = function (sentence) {\n    return sentence.toLowerCase().split(/\\W/)\n      .filter(function (word) {\n        return !/^\\s*$/.test(word);\n      });\n  };\n\n  Words.prototype.calculateWordCount = function(sentence) {\n    var wordCounts = {};\n    this.words(sentence).forEach(function (word) {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n    return wordCounts;\n  };\n  return Words;\n})();	\N	f	3	3	2013-12-21 14:10:29	2013-12-21 14:10:29	328	\N
744	14	9e1307784f38f44d2c5078e3	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, word_count|\n      word_count[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    @phrase.downcase.split(/[^\\w']+/)\n  end\n\nend	\N	f	3	2	2013-12-06 08:15:29	2013-12-06 08:15:29	329	\N
746	14	e07d5b8a7360ab134611fe9c	pending	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n\tif len(strandA) != len(strandB) {\n\t\treturn 0\n\t}\n\n\tdifferenceCount := 0\n\tsliceStrandA := strandA[:]\n\tsliceStrandB := strandB[:]\n\n\tfor i := 0; i < len(sliceStrandA); i++ {\n\t\tif sliceStrandA[i] != sliceStrandB[i] {\n\t\t\tdifferenceCount++\n\t\t}\n\t}\n\n\treturn differenceCount\n}	\N	f	0	1	2013-11-12 14:29:53	2013-11-12 14:29:53	330	hamming.go
747	14	e37adf1791272b26049adef7	done	ruby	nucleotide-count	class DNA\n  def initialize(nucs)\n    if !nucs.scan(/[^ATCG]/).empty?\n      raise ArgumentError\n    else\n      @nucs = nucs\n      @hash = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    end\n  end\n\n  def count(nuc)\n    if !["A", "T", "C", "G", "U"].include?(nuc)\n      raise ArgumentError\n    else\n      @nucs.scan(/#{nuc}/).count\n    end\n  end\n\n  def nucleotide_counts\n    @hash.each { |key, value| @hash[key] = count(key) }\n    @hash\n  end\nend	\N	f	3	1	2013-12-09 00:23:52	2013-12-09 00:23:52	331	\N
748	14	bca4b288938d3a8955006f30	done	haskell	etl	module ETL (transform) where\nimport Data.Char (toLower)\nimport qualified Data.Map as M\n\ntype PointValue = Int\ntype LowerTile = String\ntype UpperTile = String\n\ntransform :: M.Map PointValue [UpperTile] -> M.Map LowerTile PointValue\ntransform = M.fromList . concatMap go . M.toList\n  where go (v, tiles) = zip (map (map toLower) tiles) (repeat v)	\N	f	3	1	2013-09-10 05:53:04	2013-09-10 05:53:04	332	\N
749	14	58c44941e837422ec5005601	superseded	clojure	point-mutations	(ns dna\n(:require [clojure.string :refer [split]]))\n\n(defn matching?\n  [stuff]\n  (= (first stuff)\n     (last stuff)))\n\n(defn hamming-distance\n  [string1 string2]\n   (->> (interleave\n         (split string1 #"")\n         (split string2 #""))\n        (partition 2)\n        (remove #(matching? %1))\n        count))	\N	f	3	1	2013-11-10 18:53:55	2013-11-10 18:53:55	333	dna.clj
750	14	9e6d68a1fbf8a822d80435c8	pending	clojure	point-mutations	(ns dna\n(:require [clojure.string :refer [split]]))\n\n(defn matching?\n  [[char1 char2]]\n  (= char1 char2))\n\n(defn hamming-distance\n  [string1 string2]\n   (->> (interleave string1 string2)\n        (partition 2)\n        (remove #(matching? %1))\n        count))	\N	f	0	2	2013-12-16 08:21:25	2013-12-16 08:21:25	333	dna.clj
752	14	44cfef540dda0cf9ea7debc7	superseded	ruby	leap	class Year\n\n  attr_reader :number\n  \n  def initialize(number)\n    @number = number\n  end\n\n  def number_to_integer\n    @number.to_i\n  end\n\n  def leap?\n    (vanilla_year? && !century?) || exceptional_century?\n  end\n\n  private\n\n  def vanilla_year?\n    (number % 4) == 0\n  end\n\n  def century?\n    (number % 100) == 0\n  end\n\n  def exceptional_century?\n    (number % 400) == 0\n  end\n\nend	\N	f	3	1	2013-08-24 08:27:11	2013-08-24 08:27:11	335	\N
753	14	7cb70fc660f664ffad29bf6a	done	ruby	leap	class Year\n\n  attr_reader :number\n  \n  def initialize(number)\n    @number = number\n  end\n\n  def leap?\n    (vanilla_year? && !century?) || exceptional_century?\n  end\n\n  private\n\n  def vanilla_year?\n    (number % 4) == 0\n  end\n\n  def century?\n    (number % 100) == 0\n  end\n\n  def exceptional_century?\n    (number % 400) == 0\n  end\n\nend	\N	f	0	2	2013-10-12 09:00:29	2013-10-12 09:00:29	335	\N
754	14	63aae3fdfe35f7d74980bce2	done	javascript	bob	/*jshint node:true*/\n\n/**\n * @constructor\n */\nvar Bob = function () {\n};\n\n/**\n * @enum {string}\n */\nBob.answersTo = {\n    SHOUT: "Woah, chill out!",\n    QUESTION: "Sure.",\n    EMPTY: "Fine. Be that way!",\n    GENERAL: "Whatever."\n};\n\n/**\n * @param {string} phrase\n * @return {string}\n */\nBob.prototype.hey = function (phrase) {\n    if (phrase.length && phrase.trim()) {\n        if (phrase.toUpperCase() === phrase && phrase.toLowerCase() !== phrase) {\n            return Bob.answersTo.SHOUT;\n        }\n        if (phrase.slice(-1) === "?") {\n            return Bob.answersTo.QUESTION;\n        }\n        return Bob.answersTo.GENERAL;\n    }\n    return Bob.answersTo.EMPTY;\n};\n\nmodule.exports = Bob;	\N	f	3	1	2013-08-26 09:50:20	2013-08-26 09:50:20	336	\N
755	14	622cd35977b6bf5ec1f7da47	hibernating	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (cond\n    (re-matches #"^[^a-z]+$" input) "Woah, chill out!"\n    (re-matches #".*\\?$" input) "Sure."\n    (= "" input) "Fine, be that way."\n    :else "Whatever."))	\N	f	1	1	2013-11-15 05:43:00	2013-11-15 05:43:00	337	\N
756	15	4b5fb425922c144464d7e9b2	done	javascript	rna-transcription	var toRna = function(input) {\n  var input = input;\n  var uracil = input.replace(/T/g,"U");\n  return uracil;\n};\n\nmodule.exports = toRna;	\N	f	0	1	2013-12-28 04:14:09	2013-12-28 04:14:09	338	\N
757	15	7e074ffcb5e5eeb925448c7c	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar (Day,addDays)\n\nfromDay :: Day -> Day\nfromDay = addDays daysInGigasecond\n  where daysInGigasecond = floor $ (1e9 / (60 * 60 * 24) :: Float)	\N	f	0	1	2013-12-28 21:56:47	2013-12-28 21:56:47	339	\N
758	15	b32297d09e35afe4bc2cfe91	done	haskell	anagram	module Anagram\n  ( anagramsFor\n  ) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\nimport Data.Function (on)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor = filter . anagramOf where\n  anagramOf = (==) `on` (sort . map toLower)	\N	f	4	1	2014-01-11 06:34:41	2014-01-11 06:34:41	340	\N
759	15	4434e7e1ef86b9ba68f466e1	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    (@year % 4).zero? || (@year % 400).zero? unless (@year % 100).zero? && (@year % 400).nonzero?\n  end\nend	\N	f	5	1	2014-01-04 18:37:46	2014-01-04 18:37:46	341	\N
760	15	ffd63496cd00d6d4ad53ca86	superseded	ruby	grains	class Grains\r\n\tdef square(num)\r\n\t\t2 ** (num-1)\r\n\tend\r\n\tdef total()\r\n\t\ttotal = 0\r\n\t\ti=1\r\n\t\tuntil i > 64\r\n\t\t\ttotal += square(i)\r\n\t\t\ti += 1\r\n\t\tend\r\n\t\treturn total\r\n\tend\r\nend	\N	f	3	1	2014-01-06 14:31:38	2014-01-06 14:31:38	342	grains.rb
761	15	590477a1b9542e340f2baa00	pending	ruby	grains	# -*- coding: UTF-8 -*-\r\n# Write a program that calculates the number of grains of wheat on a\r\n# chessboard given that the number on each square doubles.\r\nclass Grains\r\n  def square(num)\r\n    2**(num - 1)\r\n  end\r\n\r\n  def total\r\n    total = 0\r\n    i = 1\r\n    until i > 64\r\n      total += square(i)\r\n      i += 1\r\n    end\r\n    total\r\n  end\r\nend\r	\N	f	4	2	2014-01-24 22:28:50	2014-01-24 22:28:50	342	grains.rb
763	15	6f80849e6d89fc5b5393de2e	superseded	ruby	rna-transcription	class String\n  def ==(other)\n    return other == self if other.is_a?(RibonucleicAcid)\n    super(other)\n  end\nend\n\nclass RibonucleicAcid\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other)\n    other == @string\n  end\nend\n\nclass DeoxyribonucleicAcid\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other)\n    other == @string\n  end\n\n  def to_rna\n    RibonucleicAcid.new(rna_string)\n  end\n\n  private\n\n  def rna_string\n    @string.gsub('T', 'U')\n  end\nend	\N	f	4	3	2013-12-18 11:01:23	2013-12-18 11:01:23	343	\N
764	15	f5d71591f4c30da2dd9d233a	superseded	ruby	rna-transcription	class Sentence\n  def initialize(text)\n    @text = text\n  end\n\n  def nothing?\n    @text.nil? || @text.empty?\n  end\n\n  def shouting?\n    @text.upcase == @text\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\nend\n\nclass Bob\n  def hey(sentence)\n    sentence = Sentence.new(sentence)\n    return 'Fine. Be that way.' if sentence.nothing?\n    return 'Woah, chill out!'   if sentence.shouting?\n    return 'Sure.'              if sentence.question?\n    'Whatever.'\n  end\nend	\N	f	5	1	2014-01-01 05:37:32	2014-01-01 05:37:32	343	\N
765	15	0b7289c9a27a2e4a5114b669	done	ruby	rna-transcription	class Acid\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other)\n    other == @string\n  end\n\n  def to_str\n    @string\n  end\nend\n\nclass RibonucleicAcid < Acid; end\n\nclass DeoxyribonucleicAcid < Acid\n  def to_rna\n    RibonucleicAcid.new(rna_string)\n  end\n\n  private\n\n  def rna_string\n    @string.tr(THYMINE, URACIL)\n  end\nend	\N	f	4	5	2014-02-05 04:12:46	2014-02-05 04:12:46	343	\N
766	15	7600241a4b26495e549d6b98	superseded	ruby	rna-transcription	class Sentence\n  def initialize(text)\n    @text = String(text)\n  end\n\n  def nothing?\n    @text.empty?\n  end\n\n  def shouting?\n    @text.upcase == @text\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\nend\n\nclass Bob\n  def hey(sentence)\n    sentence = Sentence.new(sentence)\n    return 'Fine. Be that way.' if sentence.nothing?\n    return 'Woah, chill out!'   if sentence.shouting?\n    return 'Sure.'              if sentence.question?\n    'Whatever.'\n  end\nend	\N	f	2	2	2014-02-22 18:47:25	2014-02-22 18:47:25	343	\N
768	15	3e1a806333a9c2723a97104b	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n  var out map[string]int = make(map[string]int)\n  for counter, letters := range in {\n    for _, letter := range letters {\n      letter = strings.ToLower(letter)\n      out[letter] += counter\n    }\n  }\n  return out\n}	\N	f	5	1	2013-12-17 12:26:33	2013-12-17 12:26:33	345	\N
769	15	8292c73e68a9b9f386977749	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor counter, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += counter\n\t\t}\n\t}\n\treturn out\n}	\N	f	2	2	2014-01-20 23:42:42	2014-01-20 23:42:42	345	\N
770	15	a617ce66bd996b6c767bb791	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor times, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += times\n\t\t}\n\t}\n\treturn out\n}	\N	f	1	3	2014-02-20 15:54:29	2014-02-20 15:54:29	345	\N
771	15	020ff8b81143fcf81e0eb871	superseded	haskell	nucleotide-count	module DNA (\n  count, \n  nucleotideCounts\n) where\n\nimport Data.Map (Map, fromList)\n\ncount :: Char -> String -> Int\ncount nuc strand\n  | nuc == 'U'              = 0\n  | notElem nuc nucleotides = error $ "invalid nucleotide " ++ show nuc\n  | otherwise               = length $ filter (==nuc) strand\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts strand = fromList $ map nucWithCount nucleotides\n  where \n    nucWithCount nuc = (nuc, count nuc strand)\n\nnucleotides = ['A', 'T', 'C', 'G']	\N	f	3	1	2014-01-02 06:45:32	2014-01-02 06:45:32	346	DNA.hs
772	15	80caa48678fe546253817e5d	done	haskell	nucleotide-count	module DNA (\n  count, \n  nucleotideCounts\n) where\n\nimport Data.Map (Map, fromListWith)\n\ncount :: Char -> String -> Int\ncount nuc strand\n  | nuc == 'U'              = 0\n  | notElem nuc nucleotides = error $ "invalid nucleotide " ++ show nuc\n  | otherwise               = length $ filter (==nuc) strand\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts strand = fromListWith (+) (strand' ++ base)\n  where\n    strand' = [(n, 1) | n <- strand]\n    base = [(n, 0) | n <- nucleotides]\n\nnucleotides = ['A', 'T', 'C', 'G']	\N	f	2	2	2014-01-14 19:15:25	2014-01-14 19:15:25	346	DNA.hs
773	15	eebfad8445b8acecd8db6a3b	superseded	python	word-count	import string\n\nclass Phrase(object):\n\tdef __init__(self, phrase):\n\t\tself.phrase = phrase.lower().translate(None, string.punctuation)\n\t\n\tdef word_count(self):\n\t\twords = self.phrase.split()\n\t\tcount = {}\n\t\tfor i in range(0, len(words)):\n\t\t\tif words[i] in count:\n\t\t\t\tcount[words[i]] += 1\n\t\t\telse:\n\t\t\t\tcount[words[i]] = 1\n\t\treturn count\t	\N	f	3	1	2014-01-04 01:46:16	2014-01-04 01:46:16	347	\N
774	15	fd6eb93951a64e154c6d0c27	done	python	word-count	import string\n\nclass Phrase(object):\n\tdef __init__(self, phrase):\n\t\tif phrase is None:\n\t\t\tself.phrase = ''\n\t\telse:\n\t\t\tself.phrase = phrase.lower().translate(None, string.punctuation)\n\t\n\tdef word_count(self):\n\t\twords = self.phrase.split()\n\t\tcount = {}\n\t\tfor i in range(0, len(words)):\n\t\t\tif words[i] in count:\n\t\t\t\tcount[words[i]] += 1\n\t\t\telse:\n\t\t\t\tcount[words[i]] = 1\n\t\treturn count\t	\N	f	0	2	2014-01-26 20:17:18	2014-01-26 20:17:18	347	\N
775	15	1aea03ca97b7e8dc34944ed9	superseded	clojure	bob	(ns bob)\n\n(defn- silence? [phrase]\n  (= "" phrase))\n\n(defn- shout? [phrase]\n  (re-find #"\\A[^a-z]+\\z" phrase))\n\n(defn- question? [phrase]\n  (re-find #"\\?\\z" phrase))\n\n(defn response-for [phrase]\n  (cond\n    (shout? phrase) "Woah, chill out!"\n    (question? phrase) "Sure."\n    (silence? phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	3	2	2013-12-19 12:24:40	2013-12-19 12:24:40	348	\N
778	15	49d6fb4ca66dc7d5d3f63ab7	hibernating	javascript	word-count	var Words = function (string) {\n  // match all letters and numbers between word boundaries.\n  var tokens = string.match(/\\b[a-z0-9]+\\b/gi);\n  var counts = {};\n\n  tokens.forEach(function(word) {\n    counts[word.toLowerCase()] = (counts[word.toLowerCase()] || 0) + 1;\n  });\n\n  this.count = counts;\n};\n\nmodule.exports = Words;	\N	f	2	2	2013-12-11 16:26:17	2013-12-11 16:26:17	349	\N
780	15	56646bc92fc3f7e742001578	superseded	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters [\r\n    {'AEIOULNRST', 1},\r\n    {'DG', 2},\r\n    {'BCMP', 3},\r\n    {'FHVWY', 4},\r\n    {'K', 5},\r\n    {'JX', 8},\r\n    {'QZ', 10}]\r\n    \r\n  @scores @letters\r\n    |> Enum.map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n    |> List.flatten\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> bitstring_to_list\r\n      |> Enum.map(fn char -> score_char(char) end)\r\n      |> Enum.reduce(0, fn char_score, subtotal -> char_score + subtotal end)\r\n  end\r\nend\r\n\r	\N	f	2	1	2013-12-09 12:22:50	2013-12-09 12:22:50	350	\N
781	15	5a7a0997e025c502e7294411	superseded	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters [\r\n    {'AEIOULNRST', 1},\r\n    {'DG', 2},\r\n    {'BCMP', 3},\r\n    {'FHVWY', 4},\r\n    {'K', 5},\r\n    {'JX', 8},\r\n    {'QZ', 10}]\r\n    \r\n  @scores @letters\r\n    |> Enum.flat_map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> String.to_char_list!\r\n      |> Enum.map_reduce(0, fn(char, subtotal) -> {score_char(char), score_char(char) + subtotal} end)\r\n      |> elem(1)\r\n  end\r\nend\r\n\r	\N	f	2	2	2014-02-19 01:08:49	2014-02-19 01:08:49	350	\N
782	15	c73c4cd1a0541dc924a8ce9f	done	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters HashDict.new(\r\n    [{'AEIOULNRST', 1},\r\n     {'DG', 2},\r\n     {'BCMP', 3},\r\n     {'FHVWY', 4},\r\n     {'K', 5},\r\n     {'JX', 8},\r\n     {'QZ', 10}])\r\n    \r\n  @scores @letters\r\n    |> Enum.flat_map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> String.to_char_list!\r\n      |> Enum.map_reduce(0, fn(char, subtotal) -> {score_char(char), score_char(char) + subtotal} end)\r\n      |> elem(1)\r\n  end\r\nend\r\n\r	\N	f	0	3	2014-03-05 02:27:00	2014-03-05 02:27:00	350	\N
783	15	d517b43d3a172cc010354133	superseded	haskell	word-count	module WordCount\n  ( wordCount \n  ) where\n\nimport Data.Char\nimport Data.List.Split ( wordsBy )\nimport           Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M \n\nwordCount :: String -> Map String Int\nwordCount = M.fromListWith (+) . map (\\x -> (x,1)) \n          . filter (not.null)\n          . map (filter isAlphaNum)\n          . wordsBy (\\x -> isSpace x || isPunctuation x)\n--          . breakOn (\\x -> isSpace x || isPunctuation x)\n          . map toLower	\N	f	3	2	2013-12-19 01:21:24	2013-12-19 01:21:24	351	\N
784	15	ab331186890b1bbd705ecfa3	superseded	haskell	word-count	module WordCount\n  where\n\nimport Data.Char\nimport           Data.Map (Map)\nimport qualified Data.Map as M \n\nwordCount :: String -> Map String Int\nwordCount = M.fromListWith (+) . map (\\x -> (x,1)) \n          . filter (not.null)\n          . map (filter isAlphaNum)\n          . breakOn (\\x -> isSpace x || isPunctuation x)\n          . map toLower\n\nbreakOn :: (a -> Bool) -> [a] -> [[a]]\nbreakOn _ [] = []\nbreakOn f xs = case break f xs of\n                   (l,[]) -> [l]\n                   (l,(x:xs')) -> l: breakOn f xs'	\N	f	5	1	2014-01-29 11:09:49	2014-01-29 11:09:49	351	\N
785	15	a5982e10224ef5f73d6f685e	done	haskell	word-count	module WordCount\n  ( wordCount \n  ) where\n\nimport Data.Char\nimport Data.List.Split ( wordsBy )\nimport           Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M \n\nwordCount :: String -> Map String Int\nwordCount = M.fromListWith (+) . map (\\x -> (x,1)) \n          . wordsBy (not . isAlphaNum)\n          . map toLower	\N	f	4	3	2014-01-30 20:13:36	2014-01-30 20:13:36	351	\N
800	16	b66aaf5fb7e435c5a903f670	superseded	clojure	word-count	(ns phrase)\n\n(defn word-count\n  [str]\n  (->> (.toLowerCase str)\n       (re-seq #"\\w+")\n       (reduce (fn [m word]\n                 (assoc m word (inc (get m word 0))))\n               {})))	\N	f	3	1	2014-01-16 19:36:10	2014-01-16 19:36:10	355	\N
827	16	b72db4a7d5714cb2ef8535f5	done	ruby	bob	class Bob\n  def hey(saying)\n    retort Phrase.new(saying)\n  end\n\n  private\n\n  def retort(phrase)\n    case\n    when phrase.silent?\n      "Fine. Be that way."\n    when phrase.question?\n      "Sure."\n    when phrase.shout?\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  class Phrase\n\n    def initialize(phrase)\n      @phrase = phrase.to_s\n    end\n\n    def silent?\n      @phrase.empty?\n    end\n\n    def question?\n      @phrase.end_with? "?"\n    end\n\n    def shout?\n      @phrase == @phrase.upcase\n    end\n  end\n\nend	\N	f	0	5	2014-03-05 01:50:08	2014-03-05 01:50:08	367	\N
788	15	fcd4a654631dc0f1d7bbe23a	done	ruby	anagram	class Word\n  def initialize(word)\n    @word = word\n  end\n\n  def matches?(other)\n    self.normalized_word != other.normalized_word &&\n      self.letters == other.letters\n  end\n\n  def normalized_word\n    @normalized_word ||= @word.downcase\n  end\n\n  def letters\n    @letters ||= normalized_word.chars.sort\n  end\nend\n\nclass Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(word_list)\n    word_list.select { |candidate|\n      word.matches? Word.new(candidate)\n    }\n  end\nend	\N	f	0	8	2013-12-09 11:02:30	2013-12-09 11:02:30	353	anagram.rb
789	15	b88f5b9eeee477e0bf3a9b76	superseded	ruby	anagram	class Anagram\r\n    def initialize(word)\r\n        @word = word\r\n        @down_word = word.downcase\r\n        @word_char_list = char_list_from(@down_word)\r\n    end\r\n\r\n    def match(word_list)\r\n        @word_list = word_list\r\n        @anagrams = []\r\n\r\n        word_list.each do |candidate|\r\n            @anagrams.push candidate if does_match(candidate)\r\n        end\r\n\r\n        @anagrams\r\n    end\r\n\r\n    private\r\n\r\n    def char_list_from(word)\r\n        word.chars.sort()\r\n    end\r\n\r\n    def does_match(candidate)\r\n        down_candidate = candidate.downcase\r\n        down_candidate != @down_word && char_list_from(down_candidate) == @word_char_list\r\n    end\r\nend\r	\N	f	3	1	2013-12-13 09:53:08	2013-12-13 09:53:08	353	\N
790	15	d4167c3438ef25fffdc13031	superseded	ruby	anagram	class Anagram\n    def initialize(word)\n        @down_word = word.downcase\n        @word_char_list = char_list_from(@down_word)\n    end\n\n    def match(word_list)\n        word_list.reduce([]) do |anagrams, candidate|\n            anagrams.push(candidate) if does_match?(candidate)\n            anagrams\n        end\n    end\n\n    private\n\n    def char_list_from(word)\n        word.chars.sort()\n    end\n\n    def does_match?(candidate)\n        down_candidate = candidate.downcase\n        down_candidate != @down_word &&\n            char_list_from(down_candidate) == @word_char_list\n    end\nend	\N	f	4	2	2013-12-20 02:20:20	2013-12-20 02:20:20	353	\N
791	15	90140dd66ea3d97174e702b7	superseded	ruby	anagram	class Anagram\r\n  def initialize(word)\r\n    @down_word = word.downcase\r\n    @word_char_list = char_list_from(@down_word)\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate| does_match?(candidate) }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list_from(word)\r\n    word.chars.sort\r\n  end\r\n\r\n  def does_match?(candidate)\r\n    down_candidate = candidate.downcase\r\n    down_candidate != @down_word &&\r\n      char_list_from(down_candidate) == @word_char_list\r\n  end\r\nend	\N	f	5	3	2013-12-31 22:28:28	2013-12-31 22:28:28	353	\N
792	15	9200565ac23372bb5605cf23	superseded	ruby	anagram	class Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    @down_word ||= word.downcase\r\n    @word_char_list ||= char_list_from(@down_word)\r\n    word_list.select { |candidate|\r\n      does_match?(candidate.downcase)\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list_from(word)\r\n    word.chars.sort\r\n  end\r\n\r\n  def does_match?(down_candidate)\r\n    down_candidate != @down_word &&\r\n      char_list_from(down_candidate) == @word_char_list\r\n  end\r\nend	\N	f	7	4	2014-02-04 06:17:27	2014-02-04 06:17:27	353	anagram.rb
793	15	ec140c5a03cd1e84e0d66241	superseded	ruby	anagram	class CharList\r\n  attr_reader :char_list, :down_word\r\n\r\n  def initialize(word)\r\n    @down_word = word.downcase\r\n    @char_list = @down_word.chars.sort\r\n  end\r\n\r\n  def matches?(otherCharList)\r\n    @down_word != otherCharList.down_word &&\r\n      @char_list == otherCharList.char_list\r\n  end\r\n\r\n  def to_s\r\n    @char_list.to_s\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      char_list.matches? CharList.new candidate\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list\r\n    @char_list ||= CharList.new word\r\n  end\r\nend\r	\N	f	0	5	2014-02-05 14:26:35	2014-02-05 14:26:35	353	anagram.rb
794	15	239039fa130dc1d94b545680	superseded	ruby	anagram	class NormalizedLetters\r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def matches?(other_normalized_letters)\r\n    normalized_word != other_normalized_letters.normalized_word &&\r\n      letters == other_normalized_letters.letters\r\n  end\r\n\r\n  def normalized_word\r\n    @normalized_word ||= @word.downcase\r\n  end\r\n\r\n  def letters\r\n    @letters ||= normalized_word.chars.sort\r\n  end\r\n\r\n  def to_s\r\n    @letters.to_s\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      normalized_letters.matches? NormalizedLetters.new candidate\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def normalized_letters\r\n    @normalized_letters ||= NormalizedLetters.new word\r\n  end\r\nend\r	\N	f	6	6	2014-02-25 20:14:31	2014-02-25 20:14:31	353	anagram.rb
795	15	013707038d051252e3c44b7c	superseded	ruby	anagram	class Word\r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def matches?(other)\r\n    self.normalized_word != other.normalized_word &&\r\n      self.letters == other.letters\r\n  end\r\n\r\n  def normalized_word\r\n    @normalized_word ||= @word.downcase\r\n  end\r\n\r\n  def letters\r\n    @letters ||= normalized_word.chars.sort\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      normalized_letters.matches? Word.new(candidate)\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def normalized_letters\r\n    @normalized_letters ||= Word.new word\r\n  end\r\nend\r	\N	f	6	7	2014-03-01 03:30:50	2014-03-01 03:30:50	353	anagram.rb
796	15	6e8da8a66194e321277aac27	done	coffeescript	bob	class Bob\n\n  hey: (msg) -> \n    if not /\\w/.test msg\n      'Fine. Be that way!'\n    else if not /[a-z]/.test msg\n      'Woah, chill out!'\n    else if /\\?$/.test msg\n      'Sure.'\n    else\n      'Whatever.'\n\nmodule.exports = Bob	\N	f	3	2	2014-01-28 23:23:26	2014-01-28 23:23:26	354	bob.coffee
797	15	f298edeaec00b4ab4fc9369a	superseded	coffeescript	bob	class Bob\n\n  hey: (msg) -> \n    if not /\\w/.test msg\n      'Fine. Be that way!'\n    else if not /[abcdefghijklmnopqrstuvwxyz]/.test msg\n      'Woah, chill out!'\n    else if /\\?$/.test msg\n      'Sure.'\n    else\n      'Whatever.'\n\nmodule.exports = Bob	\N	f	3	1	2014-03-16 23:07:00	2014-03-16 23:07:00	354	bob.coffee
802	16	15cb834126afe640997ebbef	done	python	leap	class Year(object):\n\tdef __init__(self, year):\n\t\tself.year = year\n\n\tdef is_leap_year(self):\n\t\t"""A leap year happens on every year that is evenly divisible by 400\n\t\t   and every year that is evenly divisible by 4\n\t\t   unless that year is also evenly divisible by 100."""\n\t\treturn (self.year % 400 == 0 or\n\t\t\t\t(self.year % 4 == 0 and self.year % 100 != 0))	\N	f	2	1	2013-12-08 02:40:02	2013-12-08 02:40:02	357	\N
803	16	ce6ebb866958ef072ad1b5c9	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    a.chars.zip(b.chars).map { |pair|\n      if (pair[0] == pair[1]) || pair.include?(nil) then 0 else 1 end\n    }.inject(0, :+)\n  end\nend	\N	f	3	1	2013-12-14 13:36:46	2013-12-14 13:36:46	358	\N
804	16	b6f9a030453fb83058b878f9	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    a.chars.zip(b.chars).count { |pair|\n      (pair[0] != pair[1]) && !pair.include?(nil)\n    }\n  end\nend	\N	f	0	2	2014-01-30 11:57:16	2014-01-30 11:57:16	358	\N
806	16	11b8abfca8b078195460cb38	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month_number, year)\n    @month = Month.new(month_number, year)\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      weekdays(weekday).teenth                   #   weekdays("monday").teenth\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n  end\n\n  private\n\n  def weekdays(weekday)\n    WeekdaysOfMonth.new(weekday, @month)\n  end\nend\n\n\nclass WeekdaysOfMonth\n  def initialize(weekday, month)\n    @weekday = weekday\n    @month = month\n  end\n\n  def teenth\n    days.find { |date| (13..19).include?(date.day) }\n  end\n\n  def last\n    days.last\n  end\n\n  def [](index)\n    days[index]\n  end\n\n  private\n\n  def days\n    @month.days.select { |date| date.public_send("#{@weekday}?") }\n  end\nend\n\n\nclass Month\n  def initialize(number, year)\n    @number = number\n    @year = year\n  end\n\n  def days\n    (first_day..last_day).to_a\n  end\n\n  private\n\n  def first_day\n    Date.new(@year, @number, 1)\n  end\n\n  def last_day\n    (first_day >> 1) - 1\n  end\nend	\N	f	0	2	2013-12-13 08:48:04	2013-12-13 08:48:04	359	\N
808	16	8eedf5d39cfdde76171be995	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      teens weekdays(weekday)                    #   teens weekdays("monday")\n    end                                          # end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n  end\n\n  private\n\n  def teens(dates)\n    dates.find { |date| (13..19).include?(date.day) }\n  end\n\n  def weekdays(weekday)\n    days_of_month.select(&:"#{weekday}?")\n  end\n\n  def days_of_month\n    Date.new(@year, @month, 1)..Date.new(@year, @month, -1)\n  end\nend	\N	f	5	5	2014-01-18 11:52:56	2014-01-18 11:52:56	359	\N
810	16	69db5f99708ed35ab10e336b	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      teens weekdays(weekday)                    #   teens weekdays("monday")\n    end                                          # end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n  end\n\n  private\n\n  def teens(dates)\n    dates.find { |date| (13..19).include?(date.day) }\n  end\n\n  def weekdays(weekday)\n    days_of_month = Date.new(@year, @month, 1)..Date.new(@year, @month, -1)\n    days_of_month.select(&:"#{weekday}?")\n  end\nend	\N	f	5	4	2014-01-29 19:47:17	2014-01-29 19:47:17	359	\N
812	16	4ceb5930c6dbafb8db336644	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    phrase = @phrase.gsub(/,/, ' ').gsub(/[^a-z0-9\\s]/, '').split\n    count = {}\n    phrase.uniq.each{ |word| count[word] = phrase.count(word)}\n    return count\n  end\nend	\N	f	0	1	2013-11-26 21:13:44	2013-11-26 21:13:44	360	\N
813	16	65814c3483129524af6f0e09	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    phrase = @phrase.gsub(/\\W+/," ").split\n    count = {}\n    phrase.uniq.each{ |word| count[word] = phrase.count(word)}\n    return count\n  end\nend	\N	f	2	2	2013-12-20 04:02:03	2013-12-20 04:02:03	360	\N
814	16	746bdea3b917564c1429bc23	pending	javascript	beer-song	var Beer = {\n  verse: function(bottles) {\n    switch(bottles) {\n      case 0:\n        return this.zero();\n        break;\n      case 1:\n        return this.one();\n        break;\n      default:\n        return this.other(bottles);\n    }\n  },\n  one: function() {\n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n  },\n  zero: function() {\n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n  },\n  other: function(bottles) {\n    return this.bottlesToString(bottles) + " of beer on the wall, " + this.bottlesToString(bottles) + " of beer.\\nTake one down and pass it around, " + this.bottlesToString((bottles - 1)).toLowerCase() + " of beer on the wall.\\n";\n  },\n  bottlesToString: function(bottles) {\n    var string = "";\n    switch(bottles) {\n      case 1:\n        string = "1 bottle";\n        break;\n      default:\n        string = bottles + " bottles";\n    }\n    return string;\n  },\n  sing: function(start, end) {\n    var song = [];\n    var lastVerse = end || 0;\n    for(var i = start; i >= lastVerse; i--) {\n      song.push(this.verse(i));\n    }\n    return song.join('\\n');\n  }\n}\n\n\nmodule.exports = Beer	\N	f	3	1	2013-12-01 19:42:57	2013-12-01 19:42:57	361	beer-song.js
815	16	de6e017ca09d51f82c4e0839	hibernating	ruby	point-mutations	class DNA\n  def initialize(dna_string)\n    @dna_string = dna_string\n  end\n\n  def hamming_distance(dna_string)\n    check_length = [@dna_string.length, dna_string.length].min\n    (0...check_length).count {|index| @dna_string[index] != dna_string[index] }\n  end\nend	\N	f	5	1	2014-02-01 08:27:20	2014-02-01 08:27:20	362	\N
826	16	58ee7d1c5b97c22d07321551	superseded	ruby	bob	class Bob\n  def hey(saying)\n    Retort.new(saying).to_s\n  end\n\n  class Retort\n  \n    def initialize(saying="")\n      @saying = saying.to_s\n    end\n  \n    def to_s\n      return "Fine. Be that way." if silent?\n      return "Sure." if question?\n      return "Woah, chill out!" if shouting?\n      "Whatever."\n    end\n\n    protected\n\n    def silent?\n      @saying.empty?\n    end\n\n    def question?\n      @saying.end_with? "?"\n    end\n\n    def shouting?\n      @saying == @saying.upcase\n    end\n  end\n  \nend	\N	f	9	3	2014-02-27 20:39:03	2014-02-27 20:39:03	367	\N
974	29	78b7ab000c9ead638d20a780	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    # Use default argument to Hash constructor to avoid excess logic in #reduce\n    words.each_with_object(Hash.new(0)) do |word, word_list|\n      word_list[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    @string.scan(/\\w+/)\n  end\nend	\N	f	3	3	2013-08-18 06:06:50	2013-08-18 06:06:50	437	\N
817	16	e5a3768e46616c94254e46fe	superseded	haskell	meetup	module Meetup\n( Weekday(..)\n, Schedule(..)\n, meetupDay\n) where\n\nimport           Data.List                      (find)\nimport           Data.Maybe                     (fromJust)\nimport           Data.Time.Calendar             (Day, fromGregorian,\n                                                 gregorianMonthLength,\n                                                 toGregorian)\nimport           Data.Time.Calendar.OrdinalDate (sundayStartWeek)\n\ndata Schedule =  First |\n                Second |\n                 Third |\n                Fourth |\n                  Last |\n                Teenth deriving (Enum)\n\ndata Weekday =    Sunday |\n                  Monday |\n                 Tuesday |\n               Wednesday |\n                Thursday |\n                  Friday |\n                Saturday deriving (Enum)\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w year month = case s of\n                             Teenth -> (fromJust . teenth) possibleDays\n                             Last   -> last possibleDays\n                             _      -> possibleDays !! fromEnum s\n    where\n    numberOfDays = gregorianMonthLength year month\n    allDays      = map (fromGregorian year month) [1..numberOfDays]\n    possibleDays = filter dayMatcher allDays\n    teenth       = find teenthMatcher\n    dayMatcher dt =\n      let (_, day) = sundayStartWeek dt\n      in day == fromEnum w\n    teenthMatcher dt =\n      let (_,_,d) = toGregorian dt\n      in d >= 13 && d <=19	\N	f	3	1	2014-01-30 05:40:35	2014-01-30 05:40:35	363	\N
818	16	cc598c1db8f426deb36cd5a8	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  PLANET_PERIODS = {\n    earth: 1,\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  EARTH_PERIOD_IN_SECONDS = 31557600\n\n  PLANET_PERIODS_IN_SECONDS = Hash[\n    PLANET_PERIODS.map do |planet, period|\n      [ planet, period * EARTH_PERIOD_IN_SECONDS ]\n    end\n  ]\n\n  PLANET_PERIODS_IN_SECONDS.each do |planet, period_seconds|\n    define_method "on_#{planet}" do\n      (seconds.to_f / period_seconds).round(2)\n    end\n  end\n\nend	\N	f	3	1	2013-12-20 03:52:45	2013-12-20 03:52:45	364	space_age.rb
819	16	ed48096c3e0a96651d9d147a	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  PLANET_PERIODS = {\n    earth: 1,\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  EARTH_PERIOD_IN_SECONDS = 31_557_600\n\n  PLANET_PERIODS_IN_SECONDS = Hash[\n    PLANET_PERIODS.map do |planet, period|\n      [ planet, period * EARTH_PERIOD_IN_SECONDS ]\n    end\n  ]\n\n  PLANET_PERIODS_IN_SECONDS.each do |planet, period_seconds|\n    define_method "on_#{planet}" do\n      (seconds.to_f / period_seconds).round(2)\n    end\n  end\n\nend	\N	f	4	2	2013-12-24 01:59:55	2013-12-24 01:59:55	364	space_age.rb
820	16	f33031bc9ceafe68e0b17531	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = "ACGTU"\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    if NUCLEOTIDES.include? nucleotide\n      @sequence.count nucleotide\n    else\n      raise ArgumentError\n    end\n  end\n\n  def nucleotide_counts\n    @sequence.chars.each_with_object({"A"=>0, "T"=>0, "C"=>0, "G"=>0}) { |n, r|\n      r[n] += 1\n    }\n  end\nend	\N	f	3	1	2014-01-06 03:03:10	2014-01-06 03:03:10	365	\N
821	16	f89db1089ea90c3543be057d	done	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = "ACGTU"\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    if NUCLEOTIDES.include? nucleotide\n      @sequence.count nucleotide\n    else\n      raise ArgumentError\n    end\n  end\n\n  def nucleotide_counts\n    {\n      'A' => count('A'),\n      'T' => count('T'),\n      'C' => count('C'),\n      'G' => count('G')\n    }\n  end\nend	\N	f	2	2	2014-02-08 06:47:26	2014-02-08 06:47:26	365	\N
822	16	8fcde2fc9253fef783b0aa9c	pending	ruby	etl	class ETL\n\n  def self.transform old\n    old.each_with_object({}) do |(score, letters), new|\n      letters.each do |letter|\n        new[letter.downcase] = score\n      end\n    end\n  end\n\nend	\N	f	4	1	2013-12-15 17:47:04	2013-12-15 17:47:04	366	etl.rb
823	16	090ccac993c91c919f267e10	superseded	ruby	bob	class Bob\n  def hey( saying )\n    Retort.new(saying).to_s\n  end\n\n  class Retort\n  \n    def initialize( saying="")\n      @saying = saying.to_s\n    end\n  \n    def to_s\n      if silent?\n        "Fine. Be that way."\n      elsif question?\n        "Sure."\n      elsif shouting?\n        "Woah, chill out!"\n      else\n        "Whatever."\n      end\n    end\n\n    protected\n\n    def silent?\n      @saying.empty?\n    end\n\n    def question?\n      @saying.end_with? "?"\n    end\n\n    def shouting?\n      @saying == @saying.upcase\n    end\n  end\n  \nend	\N	f	3	2	2014-01-05 09:12:53	2014-01-05 09:12:53	367	\N
824	16	fc353049dacc64c2d6da8d99	superseded	ruby	bob	class Bob\n  def hey( saying )\n    Retort.new(saying).to_s\n  end\n\n  class Retort\n  \n    def initialize( saying="")\n      @saying = saying || ""\n    end\n  \n    def to_s\n      if silent?\n        "Fine. Be that way."\n      elsif question?\n        "Sure."\n      elsif shouting?\n        "Woah, chill out!"\n      else\n        "Whatever."\n      end\n    end\n\n    protected\n\n    def silent?\n      @saying.empty?\n    end\n\n    def question?\n      @saying.end_with? "?"\n    end\n\n    def shouting?\n      @saying == @saying.upcase\n    end\n  end\n  \nend	\N	f	6	1	2014-01-18 03:00:07	2014-01-18 03:00:07	367	\N
825	16	c51369b45f5d57fb51aa2808	superseded	ruby	bob	class Bob\n  def hey(saying)\n    Retort.new(saying).to_s\n  end\n\n  class Retort\n\n    def initialize(saying="")\n      @saying = saying.to_s\n    end\n\n    def to_s\n      return "Fine. Be that way." if silent?\n      return "Sure." if question?\n      return "Woah, chill out!" if shout?\n      "Whatever."\n    end\n\n    protected\n\n    def silent?\n      @saying.empty?\n    end\n\n    def question?\n      @saying.end_with? "?"\n    end\n\n    def shout?\n      @saying == @saying.upcase\n    end\n  end\n  \nend	\N	f	0	4	2014-02-02 17:36:58	2014-02-02 17:36:58	367	\N
829	16	4f14a7bbb3057fb91122ca58	hibernating	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . map (\\x -> (map toLower x , 1)) . wordsBy (not . isAlphaNum)	\N	f	10	2	2014-03-06 16:04:54	2014-03-06 16:04:54	368	\N
830	16	d73ff6885b2371e902eedee7	pending	scala	bob	class Bob {\n  val Silence  = """^\\s*$""".r\n  val Shouting = """^[A-Z0-9\\s,]*[A-Z][!\\?]?$""".r\n  val Question = """.*\\?$""".r\n\n  def hey(s: String) = {\n    s match {\n      case Silence() => "Fine. Be that way!"\n      case Shouting() => "Woah, chill out!"\n      case Question() => "Sure."\n      case _ => "Whatever."\n    }\n  }\n}	\N	f	3	1	2014-01-19 20:29:01	2014-01-19 20:29:01	369	bob.scala
832	16	47659fcccd18efab31f3bc5b	done	haskell	beer-song	module Beer (sing, verse) where\n\nimport Text.Printf (printf)\n\nverse :: Int -> String\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = printf "%d bottles of beer on the wall, %d bottles of beer.\\nTake one down and pass it around, %d bottles of beer on the wall.\\n" n n (pred n)\n\nsing :: Int -> Int -> String\nsing start end = concat $ map ((++ "\\n") . verse) [start,(pred start)..end]	\N	f	3	2	2014-01-16 02:37:48	2014-01-16 02:37:48	370	\N
833	16	54aa6110497b4021ebbc2751	done	ruby	crypto-square	class Crypto\n\tdef initialize(message)\n\t\n\t\t@message = message\n\tend\n\n\tdef normalize_plaintext\n\t\t\t# @message.gsub!(/\\s[^a-z]/,"")\n\t\t  @message.gsub!(/[^\\w]/,"")\n\t\t  # @message.gsub!(/[\\s,]/,"")\n\t\t  @message.downcase!\n\t\t  return @message\n\tend\n\n\tdef size\n\t\t# puts "MESSAGE"\n\t\t# print normalize_plaintext\n\t\tlength = normalize_plaintext.size\n\t\t# print length\n\t\tlow = 1\n\t\thigh = length\n\t\tmid = high/2\n\t\twhile mid*mid > length\n\t\t\t\n\t\t\tif mid*mid > length\n\t      high = mid\n\t     mid = (high+low)/2\n\t\t\tend\n\t\t\tif mid*mid < length\n\t      low = mid\n\t      mid = (high+low)/2\n\t\t\tend\n\t\tend\n\t\t# puts mid\n   if mid*mid == length\n   \treturn mid\n   else\n\t return mid + 1\n\tend\n\tend\n\n\tdef plaintext_segments\n\t\tplaintext_segments = []\n    count = 1\n    string = ""\n\t\tnormalize_plaintext.split("").each do |letter|\n\t\t  \n\t\t  # puts "SIZE"\n\t\t  # puts self.size  \n\n\t\t\n\t\t  if count%size != 0 \n\t\t  \t # print count\n\t\t  \t # puts size\n\t\t  \tstring = string + letter\n\t\t  \tcount = count + 1\n\t\t   \n\t\telse\n\t\t\t\n\t\t   string = string + letter\n\t\t    # puts count\n\n\t\t    # puts string\n\t\t  plaintext_segments << string\n\t\t  count = 1\n\t\t\tstring = ""\n\t\tend\n\t  end\n\t  if string.size > 0\n\t  \tplaintext_segments  << string\n\t  end\n\t  return plaintext_segments\n\tend\n\n\tdef ciphertext\n\t\tciphertext_in_array = plaintext_segments.dup\n\t\t\n\t\tplaintext_segments.each_index do |index|\n      # size = plaintext_segments[0].size\n       puts plaintext_segments[index]\n      0.upto(size-1) do |s|\n         \n         puts plaintext_segments[index][s].to_s\n       \t ciphertext_in_array[s][index] = plaintext_segments[index][s].to_s\n      \t\n\n      end \n\t\tend\n\t\t\n\t\treturn ciphertext_in_array.join\n\tend\n\n\tdef normalize_ciphertext\n\t\t# ciphertext_in_array = plaintext_segments.dup\n\t\t# print plaintext_segments\n\t\t# plaintext_segments.each_index do |index|\n      \n  #     0.upto(size-1) do |s|\n  #        print s\n  #     \t puts plaintext_segments[index][s].to_s\n  #     \t ciphertext_in_array[s][index] = plaintext_segments[index][s].to_s\n      \t\n\n  #     end \n\t\t# end\n\tend\nend	\N	f	3	1	2013-11-27 21:01:11	2013-11-27 21:01:11	371	\N
834	17	553e08ccf378bc077da005e3	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = phrase.to_s\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	3	3	2013-10-14 15:26:45	2013-10-14 15:26:45	372	\N
835	17	f9061928fc39db010c6f2c81	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n  \t@phrase = phrase.to_s\n  end\n\n  def word_count\n\t\t@word_count ||= parse\n  end\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	0	4	2013-10-18 15:01:31	2013-10-18 15:01:31	372	\N
836	17	402e80fbf5a8413594d3c587	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= parse\n \tend\n\n\tprivate\n\t\n\tdef parse\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	1	5	2013-10-30 23:16:18	2013-10-30 23:16:18	372	\N
837	17	42afc1b71bc4e5577969f745	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = normalize(phrase)\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = Hash.new(0)\n\t\t@phrase.split.each do |word| \n\t\t\t@word_count[word] += 1\n\t\tend\n\t\t@word_count\n\tend\n\n\tdef normalize (phrase)\n\t\tphrase.to_s.downcase.gsub(/\\W+/, ' ')\n\tend\nend	\N	f	3	1	2013-11-03 21:49:30	2013-11-03 21:49:30	372	\N
838	17	9929e23219ab5990edafe2b1	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = phrase.to_s\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = Hash.new(0)\n\t\ttokenize(normalize(@phrase)).each { |word|\n\t\t\t@word_count[word] += 1\n\t\t}\n\t\t@word_count\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	3	2	2013-11-14 16:27:00	2013-11-14 16:27:00	372	\N
839	17	ad6b7a34d6f0c299ce7d1bc8	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n\t\t\tresult[word] += 1\n\t\tend\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	3	7	2013-12-10 20:35:29	2013-12-10 20:35:29	372	\N
840	17	8b7891cd17cd059ce6382512	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n  end\n\n  def word_count\n    @word_count ||= count_words_in_phrase\n  end\n\n  private\n\n  def count_words_in_phrase\n    tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n      result[word] += 1\n    end\n  end\n\n  def normalize(str)\n    str.downcase\n  end\n\n  def tokenize(str)\n    str.scan(/\\w+/)\n  end\nend	\N	f	3	9	2013-12-13 01:52:26	2013-12-13 01:52:26	372	\N
841	17	84a85202da26916cc3ffa8f8	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	0	6	2013-12-20 16:42:33	2013-12-20 16:42:33	372	\N
843	17	d30b93c6434bcebc681b99d4	pending	ruby	hamming	module Hamming\n  extend self\n\n  def compute(first, second)\n    first, second = second, first if first.length > second.length\n    first.chars.zip(second.chars).count { |a, b| a != b }\n  end\n\nend	\N	f	1	1	2013-11-12 10:14:37	2013-11-12 10:14:37	373	hamming.rb
844	17	23c8dd9b1c015567f45e2dce	pending	ruby	leap	class Year\n  def self.leap? year\n    return (year % 400).zero? if (year % 100).zero?\n    (year % 4).zero?\n  end\nend	\N	f	5	1	2014-01-28 21:04:42	2014-01-28 21:04:42	374	year.rb
846	17	b9c2e6765471da3c76af5c88	superseded	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [capitalize join]]))\n\n\n(defn verse\n  [n]\n  (letfn [(beer [a] \n            [(if (= a 0) "no more" a)\n             (str "bottle" (if (not= a 1) "s" ""))\n             "of beer"])\n          (on-the-wall [a]\n            [(beer a) "on the wall"])\n          (take-down [a]\n            (if (= a 0)\n              ["Go to the store and buy some more"]\n              ["Take"\n               (if (= a 1) "it" "one")\n               "down and pass it around"]))\n          (unwords-deep [xs]\n            ((comp (partial join " ") flatten) xs))\n          (line [& phrases]\n            (join\n              (interleave\n                (map unwords-deep phrases)\n                [", " ".\\n"])))]\n    (str\n      (capitalize (line (on-the-wall n) (beer n)))\n      (line\n        (take-down n)\n        (on-the-wall (if (= n 0) 99 (- n 1)))))))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end]\n   (join\n     "\\n"\n     (map verse (range start (- end 1) -1)))))	\N	f	1	1	2013-11-23 23:57:27	2013-11-23 23:57:27	376	beer.clj
847	17	5b1529420f33e4aedbc05b90	superseded	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [capitalize join]]))\n\n(defn- unwords [ws] (join " " ws))\n\n(defn- beer [n]\n  (unwords [(if (= n 0) "no more" n)\n            (str "bottle" (if (not= n 1) "s" ""))\n            "of beer"]))\n\n(defn- on-the-wall [n]\n  (str (beer n) " on the wall"))\n\n(defn- take-down [n]\n  (if (= n 0)\n    "Go to the store and buy some more"\n    (unwords ["Take"\n              (if (= n 1) "it" "one")\n              "down and pass it around"])))\n\n(defn- line [& phrases]\n  (join (interleave phrases [", " ".\\n"])))\n\n\n(defn verse [n]\n  (str (line (capitalize (on-the-wall n))\n             (beer n))\n       (line (take-down n)\n             (on-the-wall (if (= n 0) 99 (- n 1))))))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end]\n   (join "\\n"\n         (map verse (range start (- end 1) -1)))))	\N	f	3	2	2013-12-02 01:23:23	2013-12-02 01:23:23	376	beer.clj
848	17	6def4f27fddda0d552b87f4b	done	clojure	beer-song	(ns beer (:require [clojure.string :refer [capitalize join]]))\n\n(def ^:private unwords (partial join " "))\n\n(defn- beer [n]\n  (unwords [(if (zero? n) "no more" n)\n            (str "bottle" (if (not= n 1) "s" ""))\n            "of beer"]))\n\n(defn- on-the-wall [n]\n  (str (beer n) " on the wall"))\n\n(defn- take-down [n]\n  (if (zero? n)\n    "Go to the store and buy some more"\n    (unwords ["Take"\n              (if (= n 1) "it" "one")\n              "down and pass it around"])))\n\n(defn- line [& phrases]\n  (join (interleave phrases [", " ".\\n"])))\n\n\n(defn verse [n]\n  (str (line (capitalize (on-the-wall n))\n             (beer n))\n       (line (take-down n)\n             (on-the-wall (if (zero? n) 99 (dec n))))))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end]\n   (join "\\n"\n         (map verse (range start (dec end) -1)))))	\N	f	3	3	2013-12-23 14:02:52	2013-12-23 14:02:52	376	beer.clj
849	17	685760c336cb21a780bd3a3e	superseded	ruby	anagram	class Anagram\n  class Subject\n    attr :payload\n\n    def initialize(word)\n      @payload = cipher(word)\n    end\n\n    def match?(other)\n      payload.eql?(cipher(other))\n    end\n\n    private\n\n    def cipher(word)\n      word.downcase.chars.sort\n    end\n  end\n\n  attr :subject\n\n  def initialize(word)\n    @subject = Subject.new(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.match?(word) }\n  end\nend	\N	f	4	1	2013-11-29 10:23:00	2013-11-29 10:23:00	377	\N
850	17	6bddf410b7922a9b602e824e	superseded	ruby	anagram	class Anagram\n  attr :subject\n\n  def initialize(word)\n    @subject = payload(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.eql?(payload(word)) }\n  end\n\n  private\n\n  def payload(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	4	3	2013-12-08 16:30:52	2013-12-08 16:30:52	377	\N
851	17	df2d7873e16ffead54be18ba	superseded	ruby	anagram	class Anagram\n  attr :subject\n\n  class Subject\n    attr :payload\n\n    def initialize(word)\n      @payload = unpack(word)\n    end\n\n    def match?(other)\n      payload.eql?(unpack(other))\n    end\n\n    private\n\n    def unpack(word)\n      word.downcase.chars.sort\n    end\n  end\n\n  def initialize(word)\n    @subject = Subject.new(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.match?(word) }\n  end\nend	\N	f	4	4	2013-12-16 19:47:38	2013-12-16 19:47:38	377	\N
852	17	df7bc809083d3cc6ae114158	superseded	ruby	anagram	class Anagram\n  attr :subject\n\n  class Subject\n    attr :payload\n\n    def initialize(word)\n      @payload = unpack(word)\n    end\n\n    def match?(other)\n      payload.eql?(unpack(other))\n    end\n\n    private\n\n    def unpack(word)\n      word.downcase.chars.sort\n    end\n  end\n\n  def initialize(word)\n    @subject = Subject.new(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.match?(word) }\n  end\nend	\N	f	6	5	2014-01-31 16:56:04	2014-01-31 16:56:04	377	\N
853	17	d2882861e534782e538437ef	done	ruby	anagram	class Anagram\n  class Subject\n    attr :payload\n\n    def initialize(word)\n      @payload = unpack(word)\n    end\n\n    def match?(other)\n      payload.eql?(unpack(other))\n    end\n\n    private\n\n    def unpack(word)\n      word.downcase.chars.sort\n    end\n  end\n\n  attr :subject\n\n  def initialize(word)\n    @subject = Subject.new(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.match?(word) }\n  end\nend	\N	f	0	6	2014-02-20 21:38:15	2014-02-20 21:38:15	377	\N
868	17	075abd141012c3050fcc417d	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isUpper, isSpace)\n\nresponseFor :: String -> String\nresponseFor sentence\n  | all isSpace sentence = "Fine. Be that way!"\n  | isAllUpper sentence  = "Woah, chill out!"\n  | last sentence == '?' = "Sure."\n  | otherwise            = "Whatever."\n    where isAllUpper s = let s' = filter isAlpha s in\n                         not (null s') && all isUpper s'	\N	f	8	1	2014-03-05 10:24:57	2014-03-05 10:24:57	386	Bob.hs
855	17	d789302fc03935d55d191924	superseded	clojure	rna-transcription	(ns dna)\n\n(require '[clojure.string :as str])\n\n(defn to-rna [dna]\n  (str/join\n    (map\n      #(cond\n         (contains? #{\\A \\C \\G} %) %\n         (= \\T %) \\U\n         true (assert false (str "Unknown acid: " %)))\n      dna)))	\N	f	2	2	2013-10-25 11:16:52	2013-10-25 11:16:52	378	dna.clj
856	17	0673169caeb9320d66975d11	superseded	clojure	rna-transcription	(ns dna)\n\n(require '[clojure.string :as str])\n\n(defn to-rna [dna]\n  (str/join\n    (map\n      #(condp contains? %\n         #{\\A \\T \\C \\U} %\n         [] (assert false))\n      dna)))	\N	f	3	1	2013-10-30 06:59:13	2013-10-30 06:59:13	378	dna.clj
857	17	14a563b5897eaba593cceabf	done	clojure	rna-transcription	(ns dna)\n\n(require '[clojure.string :as str])\n\n(def translations\n  {\\A \\A,\n   \\C \\C,\n   \\G \\G,\n   \\T \\U})\n\n(defn translate-one-acid [dna-acid]\n  {:pre [(contains? translations dna-acid)]}\n  (translations dna-acid))\n\n(defn to-rna [dna]\n  (str/join\n    (map translate-one-acid dna)))	\N	f	3	3	2013-12-23 13:01:28	2013-12-23 13:01:28	378	dna.clj
858	17	c2d834dd114581143dc3a2e0	done	ruby	bob	class Bob\n\tdef hey(message)\n\t\tif message.nil?||message==''\n\t\t\t"Fine. Be that way."\n\t\telsif message== message.upcase\n\t\t\t"Woah, chill out!"\n\t\telsif message.end_with?("?")\n\t\t\t"Sure."\n\t\telse\n\t\t\t"Whatever."\n\t\tend\n\tend\nend	\N	f	0	1	2014-01-16 04:00:31	2014-01-16 04:00:31	379	\N
860	17	1c687e119ac744337df4cd11	done	haskell	beer-song	module Beer (sing, verse) where\r\n\r\nimport Data.Char\r\nimport Text.Printf\r\n\r\n\r\nsing :: Int -> Int -> String\r\nsing b a = concatMap ((++ "\\n") . verse) [b, (b - 1) .. a]\r\n\r\n\r\nverse :: Int -> String\r\nverse n = printf ([1, 2] >> "%s, %s.\\n") s1 s2 s3 s4\r\n  where\r\n    n' = (n - 1) `mod` 100\r\n    s1 = capitalize $ subVerseWall n\r\n    s2 = subVerse n\r\n    s3\r\n      | n == 1 = "Take it down and pass it around"\r\n      | n > 1 = "Take one down and pass it around"\r\n      | otherwise = "Go to the store and buy some more"\r\n    s4 = subVerseWall n'\r\n\r\n\r\nsubVerse :: Int -> String\r\nsubVerse n = prefix ++ " of beer"\r\n  where\r\n    prefix\r\n     | n == 0 = "no more bottles"\r\n     | n == 1 = "1 bottle"\r\n     | otherwise = shows n " bottles"\r\n\r\n\r\nsubVerseWall :: Int -> String\r\nsubVerseWall n = subVerse n ++ " on the wall"\r\n\r\n\r\ncapitalize :: String -> String\r\ncapitalize [] = []\r\ncapitalize (x : xs) = toUpper x : xs\r\n\r	\N	f	1	1	2013-11-12 05:55:22	2013-11-12 05:55:22	381	\N
861	17	1105f94bd81726c12b0787d7	superseded	clojure	bob	(ns bob (:use [clojure.string :only [trim upper-case]]))\n\n(defn response-for [msg]\n  (cond\n    (empty? (trim msg)) "Fine. Be that way!"\n    (= (upper-case msg) msg) "Woah, chill out!"\n    (= (last msg) \\?) "Sure."\n    :else "Whatever."))	\N	f	3	2	2013-11-11 09:30:16	2013-11-11 09:30:16	382	\N
862	17	6d41077eab626deac9f7bdb0	superseded	clojure	bob	(ns bob (:use [clojure.string :only [trim upper-case]]))\n\n(defn response-for [msg] (cond\n                           (empty? (trim msg)) "Fine. Be that way!"\n                           (= (upper-case msg) msg) "Woah, chill out!"\n                           (= (last msg) \\?) "Sure."\n                           :else "Whatever."))	\N	f	4	1	2014-01-22 11:18:44	2014-01-22 11:18:44	382	\N
863	17	ada3b21b659edb672a249007	superseded	clojure	bob	(ns bob (:require [clojure.string :refer [trim upper-case]]))\n\n(defn response-for [msg]\n  (cond\n    (empty? (trim msg)) "Fine. Be that way!"\n    (= (upper-case msg) msg) "Woah, chill out!"\n    (= (last msg) \\?) "Sure."\n    :else "Whatever."))	\N	f	6	3	2014-02-20 11:47:33	2014-02-20 11:47:33	382	\N
864	17	4950b599401163a8f7075a3e	done	clojure	bob	(ns bob (:require [clojure.string :refer [blank? upper-case]]))\n\n(defn response-for [msg]\n  (cond\n    (blank? msg) "Fine. Be that way!"\n    (= (upper-case msg) msg) "Woah, chill out!"\n    (= (last msg) \\?) "Sure."\n    :else "Whatever."))	\N	f	3	4	2014-03-02 17:05:50	2014-03-02 17:05:50	382	\N
865	17	6c779cb099a5b7fcbb5f7c97	pending	ruby	raindrops	class Raindrops\n\tdef initialize\n\tend\t\n\n\tdef convert(number)\n\t\tfactors = factorize(number)\n\t\tresult = ''\n\t\tif factors.include? 3\n\t\t\tresult<<'Pling'\n\t\tend\n\t\tif factors.include? 5\n\t\t\tresult<<'Plang'\n\t\tend\n\t\tif factors.include? 7\n\t\t\tresult<<'Plong'\n\t\tend\n\t\tif result.length == 0\n\t\t\tresult<<number.to_s\n\t\tend\n\t\tresult\n\tend\n\t\n\tdef factorize(number)\n  \t\treturn [] if number == 1\n  \t\tfactor = (2..number).find {|x| number % x == 0} \n  \t\t[factor] + factorize(number / factor)\n\tend\n\nend	\N	f	0	1	2013-12-12 14:21:47	2013-12-12 14:21:47	383	raindrops.rb
866	17	f474145cec17d2be7358a268	done	python	bob	class Bob:\n  def hey(self, message):\n    if self.is_silence(message):\n      return "Fine. Be that way!"\n    elif self.is_yelling(message):\n      return "Woah, chill out!"\n    elif self.is_asking(message):\n      return "Sure."\n    else:\n      return "Whatever."\n\n  def is_silence(self, message):\n    return not (message and message.strip())\n\n  def is_yelling(self, message):\n    return message.strip and message == message.upper()\n\n  def is_asking(self, message):\n    return message.endswith("?")	\N	f	5	1	2013-12-16 13:30:22	2013-12-16 13:30:22	384	\N
867	17	304b93b4c90dc04964546c94	done	elixir	prime-factors	defmodule PrimeFactors do\n  @doc """\n  Compute the prime factors for 'number'.\n\n  The prime factors are prime numbers that when multiplied give the desired\n  number.\n\n  The prime factors of 'number' will be ordered lowest to highest. \n  """\n  @spec factors_for(pos_integer) :: [pos_integer]\n  def factors_for(number) do\n    for(number, [], 2) |> Enum.reverse\n  end\n\n  defp for(number, acc, candidate) do\n  \tcond do\n  \t  candidate > number -> acc\n      rem(number, candidate) == 0 -> for(div(number, candidate), [candidate|acc], candidate)\n      true -> for(number, acc, candidate+1)\n    end\n  end\nend	\N	f	4	1	2014-01-12 07:40:49	2014-01-12 07:40:49	385	prime_factors.exs
975	29	c975478f44a98c94d23b5644	done	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    # Use default argument to Hash constructor to avoid excess logic in #reduce\n    words.each_with_object(Hash.new(0)) do |word, word_list|\n      word_list[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    @words ||= @string.scan(/\\w+/)\n  end\nend	\N	f	3	4	2013-08-28 14:58:57	2013-08-28 14:58:57	437	\N
870	22	5490095092f50560f92c6ecf	superseded	python	bob	class Bob:\n  """Bob"""\n\n  def hey(self, hey):\n    if hey.isupper():\n      return 'Woah, chill out!'\n    elif hey.isspace() or len(hey) == 0:\n      return 'Fine. Be that way!'\n    elif hey[-1] == '?':\n      return 'Sure.'\n    return 'Whatever.'	\N	f	2	1	2013-07-22 23:08:24	2013-07-22 23:08:24	388	\N
871	22	cf75e0a2d3c8a8c1b70d59ed	done	python	bob	class Bob:\n  """Bob"""\n\n  def hey(self, message):\n    if message.isupper():\n      return 'Woah, chill out!'\n    elif message.isspace() or len(message) == 0:\n      return 'Fine. Be that way!'\n    elif message[-1] == '?':\n      return 'Sure.'\n    return 'Whatever.'	\N	f	3	2	2013-11-19 11:16:14	2013-11-19 11:16:14	388	\N
872	22	425464450b10053ab998387c	done	ruby	word-count	class Phrase\n  attr_accessor :text\n\n  WORD_REGEX = /[^a-z0-9']/i\n\n  def initialize(text)\n    @text = text\n  end\n\n  def words\n    text.split(WORD_REGEX).reject(&:empty?).map(&:downcase)\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word,dictionary|\n      dictionary[word] += 1\n    end\n  end\nend	\N	f	3	1	2013-11-01 04:04:43	2013-11-01 04:04:43	389	\N
873	22	92e9681252d8c07daf98a933	hibernating	python	word-count	from collections import defaultdict\nimport re\n\nclass Phrase(object):\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        counts = defaultdict(int)\n        for word in self._words():\n            counts[word] += 1\n        return counts\n\n    def _words(self):\n        words_re = re.compile(r'\\w+')\n        sanitized = self._sanitize()\n        for word in words_re.finditer(sanitized):\n            yield word.group()   \n\n    def _sanitize(self):\n        return self.phrase.lower()	\N	f	3	1	2013-07-31 18:33:12	2013-07-31 18:33:12	390	wordcount.py
875	22	eb043826fe4a88c3ee2b06e8	done	ruby	point-mutations	class DNA\n\n  def initialize(dna)\n    @dna = dna\n  end\n\n  def hamming_distance(comparison_dna)\n    dna_chars = @dna.chars.to_a\n    comparison_dna_chars = comparison_dna.chars.to_a\n    maximum_iterations = [comparison_dna.size,@dna.size].min\n\n    (0..maximum_iterations-1).inject(0) do |memo, index|\n      memo += 1 unless dna_chars[index] == comparison_dna_chars[index]\n      memo\n    end\n  end\n\nend	\N	f	5	1	2014-01-26 14:33:46	2014-01-26 14:33:46	392	\N
876	22	ccc76a6fcf76458df6994efa	done	ruby	scrabble-score	class Scrabble\n\n  RANKED_LETTERS = {\n    "a" => 1, "b" => 3,  "c"  => 3, "d" => 2, "e" => 1,\n    "f" => 4, "g" => 2,  "h"  => 4, "i" => 1, "j" => 8,\n    "k" => 5, "l" => 1,  "m"  => 3, "n" => 1, "o" => 1,\n    "p" => 3, "q" => 10, "r"  => 1, "s" => 1, "t" => 1,\n    "u" => 1, "v" => 4,  "w"  => 4, "x" => 8, "y" => 4,\n    "z" => 10\n  }\n\n  attr_reader :letters\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    word = word.nil? ? "" : word.downcase\n    @letters = word.chars\n  end\n\n  def score\n    letters.map{|letter| RANKED_LETTERS[letter] }.compact.inject(0, :+)\n  end\nend	\N	f	0	1	2013-12-22 19:44:52	2013-12-22 19:44:52	393	\N
877	22	888e0db892648b0b1b4011d7	superseded	ruby	anagram	class Phrase\n  def initialize(phrase = nil)\n    @phrase = phrase.to_s\n  end\n  \n  def word_count\n    @phrase.downcase.scan(/\\w+/).each_with_object(Hash.new(0)) do\n      |word, hash| hash[word] += 1\n    end \n  end\nend	\N	f	3	1	2013-09-04 00:28:36	2013-09-04 00:28:36	394	\N
878	22	5296d67f70bb0ec7cf8852cf	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @insensitive = desensitize(word)\n    @ordered = order(@insensitive)\n  end\n\n  def match(list)\n    list.each_with_object([]) do |word, matches|\n      insensitive = desensitize(word)\n      next if insensitive == @insensitive\n      ordered = order(insensitive)\n      matches << word if ordered == @ordered\n    end\n  end\n\n  private\n\n  def desensitize(word)\n    word.to_s.downcase\n  end\n\n  def order(insensitive)\n    insensitive.chars.sort.join\n  end\nend	\N	f	2	2	2013-12-13 23:54:47	2013-12-13 23:54:47	394	\N
879	22	3f96a854083e2686ef51cd80	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @downcased, @ordered = analyse(word)\n  end\n\n  def match(list)\n    list.each_with_object([]) do |word, matches|\n      downcased, ordered = analyse(word)\n      matches << word if ordered == @ordered && downcased != @downcased\n    end\n  end\n\n  private\n\n  def analyse(word)\n    downcased = word.to_s.downcase\n    ordered = downcased.chars.sort.join\n    [downcased, ordered]\n  end\nend	\N	f	4	3	2014-01-06 02:24:46	2014-01-06 02:24:46	394	\N
880	22	9dc4f7de085dbf4f882c7f6d	done	ruby	luhn	class Luhn\n\n  def self.create(number)\n    new("#{number}0").create\n  end\n\n  def initialize(number)\n    @number = number.to_s\n  end\n\n  def addends\n    @number.reverse.chars.each_with_index.map do |char, index|\n      lunh_transform(char.to_i, index)\n    end.reverse\n  end\n\n  def checksum\n    addends.reduce(:+)\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  def create\n    @number[-1] = check_digit.to_s unless valid?\n    @number.to_i\n  end\n\n  private\n  def lunh_transform(digit, index)\n    index % 2 == 0 ? digit : doubled_digit_transform(digit)\n  end\n\n  private\n  def doubled_digit_transform(digit)\n    (digit = digit * 2) > 10 ? digit - 9 : digit\n  end\n\n  private\n  def check_digit\n    valid? ? 0 : 10 - (checksum % 10)\n  end\n\nend	\N	f	3	1	2013-10-15 08:31:49	2013-10-15 08:31:49	395	\N
986	29	fbeeef86218ce448614e25ab	hibernating	python	word-count	from collections import*\nfrom re import*\nclass Phrase(str):word_count=lambda s:Counter(findall("\\w+",s.lower()))	\N	f	3	2	2013-07-19 03:44:14	2013-07-19 03:44:14	442	wordcount.py
882	22	b8d972959229ce1471c5da35	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\n-- Non-empty BST is a fun!\ndata BST a = \n    { bstLeft  :: BST !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r) =\n  | x > y = BST l y (maybe (signleton x) (insert x) r)\n  | otherwise = BST (maybe (singleton x) (insert x) l) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (signleton x) xs\n\ntoList :: BST a -> [a]\ntoList (BST l y r) = maybe [] toList l ++ y:maybe [] toList r	\N	f	2	2	2013-08-19 08:12:38	2013-08-19 08:12:38	396	BST.hs
883	22	65c2f69590a3541dcbfa8bc7	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\nimport Control.Applicative\nimport Data.Monoid\nimport Data.Maybe\n\n-- Non-empty BST is a fun!\n--\n-- Strictness is added to force thunk to WHNF, we don't need\n-- full strictess here, so following code should work:\n--\n-- *BST> bstValue (BST (Just $ error "foo") 5 Nothing)\n-- 5\n--\ndata BST a = BST \n    { bstLeft  :: !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r)\n  | x > y = BST l y (fmap (insert x) r <|> (Just (singleton x)))\n  | otherwise = BST (fmap (insert x) l <|> (Just (singleton x))) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (singleton x) xs\n\ntoList :: BST a -> [a]\ntoList (BST l y r) = fromJust $ -- seems like not simplified well\n  fmap toList l <> Just [y] <> fmap toList r	\N	f	3	3	2013-08-31 07:17:47	2013-08-31 07:17:47	396	BST.hs
885	22	05650f5d3963ab94ad58a7f7	superseded	clojure	robot-name	(defn- random-letter []\n  (rand-nth "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))\n\n(defn- random-number []\n  (format "%03d" (rand-int 1000)))\n\n(defn- random-name [ & _ ]\n  (str (random-letter)\n       (random-letter)\n       (random-number)))\n\n(defn robot []\n  (atom (random-name)))\n\n(defn robot-name [this-robot]\n  (deref this-robot))\n\n(defn reset-name [this-robot]\n  (swap! this-robot random-name))	\N	f	3	1	2013-09-27 10:45:18	2013-09-27 10:45:18	397	robot.clj
886	22	75718de6922a6aa67153a6c4	superseded	clojure	robot-name	(defn random-letter []\n  (rand-nth "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))\n\n(defn random-digit []\n  (rand-int 10))\n\n(defn random-name []\n  (str (random-letter)\n       (random-letter)\n       (random-digit)\n       (random-digit)\n       (random-digit)))\n\n(defn robot []\n  (atom nil))\n\n(defn robot-name [this-robot]\n  (or @this-robot\n      (reset! this-robot (random-name))))\n\n(defn reset-name [this-robot]\n  (reset! this-robot nil))	\N	f	0	2	2013-10-08 10:00:45	2013-10-08 10:00:45	397	robot.clj
887	22	4e70157033e8c2be3a38cd57	pending	clojure	robot-name	(defn- random-letter []\n  (rand-nth "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))\n\n(defn- random-digit []\n  (rand-int 10))\n\n(defn- random-name []\n  (str (random-letter)\n       (random-letter)\n       (random-digit)\n       (random-digit)\n       (random-digit)))\n\n(defn robot []\n  (atom nil))\n\n(defn robot-name [this-robot]\n  (or @this-robot\n      (reset! this-robot (random-name))))\n\n(defn reset-name [this-robot]\n  (reset! this-robot nil))	\N	f	4	3	2013-12-07 13:23:25	2013-12-07 13:23:25	397	robot.clj
888	22	ea70db4b1625a87c0e3dd8a0	superseded	ruby	etl	class ETL\n  \n  def self.transform(old)\n    new_hash = {}\n    old.each do | k,v |\n      v.each do |a|\n        new_hash[a.downcase] = k\n      end\n    end  \n    new_hash\n  end\n  \nend    	\N	f	4	1	2013-11-05 17:59:33	2013-11-05 17:59:33	398	etl.rb
889	22	f6a4265976364243cab0b062	superseded	ruby	etl	class ETL\n  \n  \n  def self.transform( letters_per_score_db )\n    letters_per_score_db.each_with_object ({}) do |letters_per_score, score_per_letter| \n      score = letters_per_score[0]\n      letters = letters_per_score[1]\n       letters.each do |a_letter|\n        score_per_letter[a_letter.downcase] = score\n      end  \n    end\n  end  \n  \nend    	\N	f	0	2	2013-11-18 16:59:31	2013-11-18 16:59:31	398	etl.rb
890	22	a404a3e07922bee828e0ea98	done	ruby	etl	class ETL\n  \n  def self.transform( letters_per_score_db )\n    letters_per_score_db.each_with_object ({}) do |(score,letters), score_per_letter| \n       letters.each do |a_letter|\n        score_per_letter[a_letter.downcase] = score\n      end  \n    end\n  end  \n  \nend    	\N	f	4	3	2013-11-30 11:51:56	2013-11-30 11:51:56	398	etl.rb
912	27	fefa016920bfe7bdcba0a07d	superseded	ruby	bob	class Bob\n  def hey(message)\n    if silence?(message)\n      "Fine. Be that way!"\n    elsif shouting?(message)\n      "Woah, chill out!"\n    elsif question?(message)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def silence?(message)\n    message.to_s.strip.empty?\n  end\n\n  def question?(message)\n    message.end_with? "?"\n  end\n\n  def shouting?(message)\n    message.upcase == message\n  end\nend	\N	f	0	2	2014-03-02 11:13:49	2014-03-02 11:13:49	409	\N
893	22	037411621a2f33d6a00b4237	superseded	javascript	beer-song	"use strict";\n\nfunction Beer() {\n};\n\nBeer.prototype.verse = function(verseNum) {\n  return this.capitalize(this.bottlesOfBeer(verseNum)).concat(" on the wall, ",\n    this.bottlesOfBeer(verseNum), ".\\n",\n    this.takeOneDown(verseNum),\n    this.bottlesOfBeer(verseNum-1), " on the wall.\\n");\n};\n\nBeer.prototype.bottlesOfBeer = function(verseNum) {\n  switch(verseNum) {\n    case -1: return "99 bottles of beer";\n    case  0: return "no more bottles of beer";\n    case  1: return "1 bottle of beer";\n    default: return verseNum.toString() + " bottles of beer";\n  };\n};\n\nBeer.prototype.takeOneDown = function(verseNum) {\n  switch (verseNum) {\n    case  0: return "Go to the store and buy some more, ";\n    case  1: return "Take it down and pass it around, ";\n    default: return "Take one down and pass it around, ";\n  };\n};\n\nBeer.prototype.sing = function(firstVerse, lastVerse) {\n  lastVerse = typeof lastVerse !== 'undefined' ? lastVerse : 0\n  var song = this.verse(firstVerse);\n\n  for (var i=firstVerse-1; i >= lastVerse; i--) {\n    song += "\\n" + this.verse(i);\n  };\n\n  return song;\n};\n\nBeer.prototype.capitalize = function(phrase) {\n  return phrase.charAt(0).toUpperCase() + phrase.slice(1);\n};\n\nmodule.exports = new Beer;	\N	f	4	1	2014-02-17 10:35:32	2014-02-17 10:35:32	399	\N
894	22	b458d02a8f7418ef8f973c92	pending	javascript	grains	module.exports = function() {\r\n\treturn {\r\n\t\tsquare: function(id) {\r\n\t\t\t// Originally used (1 << (id-1));\r\n\t\t\t// But javascript doesn't play nicely with 64 bit ints.\r\n\r\n\t\t\treturn Math.pow(2, id - 1);\r\n\t\t},\r\n\t\r\n\t\ttotal: function() {\r\n\t\t\tvar total = 0;\r\n\t\t\tfor(var i=1; i<65; i++)\r\n\t\t\t\ttotal += this.square(i);\r\n\r\n\t\t\treturn total;\r\n\t\t}\r\n\t};\r\n};	\N	f	3	1	2013-12-04 05:09:08	2013-12-04 05:09:08	400	grains.js
895	27	bb435ab6f9208982a39e9ef1	pending	coffeescript	trinary	class Trinary\n\n  constructor: (number) ->\n    @number = number\n\n  toDecimal: ->\n    return 0 if isNaN(parseInt(@number))\n\n    numbers = this._reversed()\n\n    numbers.reduce (decimal, base, power) ->\n      decimal += Math.pow(3, power) * base\n\n  _reversed: ->\n    @number.split("").reverse("").map (number) ->\n      parseInt(number)\n\n\nmodule.exports = Trinary\n  	\N	f	0	1	2013-09-29 08:49:41	2013-09-29 08:49:41	401	trinary.coffee
896	27	fafe1d5e2110c996f0f85f70	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor xs\n  | null xs || all isSpace xs = "Fine. Be that way!"\n  | all upperOrNonAlpha xs && any isUpper xs = "Woah, chill out!"\n  | last xs == '?' = "Sure."\n  | otherwise = "Whatever."\n    where upperOrNonAlpha c = isUpper c || (not . isAlpha) c	\N	f	1	1	2013-11-03 19:16:27	2013-11-03 19:16:27	402	\N
897	27	950830b42a6c7e27ceb80740	superseded	clojure	meetup	(ns meetup)\n\n;; Day Generators\n(defn teenths [month year]\n  (->>\n    (range 13 20)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn firsts [month year]\n  (->>\n    (range 1 8)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn seconds [month year]\n  (->>\n    (range 8 15)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn thirds [month year]\n  (->>\n    (range 15 22)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn fourths [month year]\n  (->>\n    (range 22 29)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn find-day [month year day generator]\n  (->>\n    (generator month year)\n    (dayofweek day)\n    as-numbers))\n\n(defn monteenth [month year]\n    (find-day month year java.util.Calendar/MONDAY teenths))\n(defn tuesteenth [month year]\n    (find-day month year java.util.Calendar/TUESDAY teenths))\n(defn wednesteenth [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY teenths))\n(defn thursteenth [month year]\n    (find-day month year java.util.Calendar/THURSDAY teenths))\n(defn friteenth [month year]\n    (find-day month year java.util.Calendar/FRIDAY teenths))\n(defn saturteenth [month year]\n    (find-day month year java.util.Calendar/SATURDAY teenths))\n(defn sunteenth [month year]\n    (find-day month year java.util.Calendar/SUNDAY teenths))\n(defn first-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY firsts))\n(defn first-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY firsts))\n(defn first-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY firsts))\n(defn first-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY firsts))\n(defn first-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY firsts))\n(defn first-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY firsts))\n(defn first-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY firsts))\n(defn second-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY seconds))\n(defn second-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY seconds))\n(defn second-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY seconds))\n(defn second-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY seconds))\n(defn second-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY seconds))\n(defn second-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY seconds))\n(defn second-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY seconds))\n(defn third-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY thirds))\n(defn third-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY thirds))\n(defn third-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY thirds))\n(defn third-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY thirds))\n(defn third-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY thirds))\n(defn third-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY thirds))\n(defn third-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY thirds))\n(defn fourth-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY fourths))\n(defn fourth-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY fourths))\n(defn fourth-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY fourths))\n(defn fourth-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY fourths))\n(defn fourth-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY fourths))\n(defn fourth-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY fourths))\n(defn fourth-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY fourths))\n(defn last-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY lasts))\n(defn last-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY lasts))\n(defn last-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY lasts))\n(defn last-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY lasts))\n(defn last-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY lasts))\n(defn last-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY lasts))\n(defn last-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY lasts))	\N	f	1	1	2013-08-23 04:30:18	2013-08-23 04:30:18	403	meetup.clj
898	27	8655461e751f0a96852943c9	superseded	clojure	meetup	(ns meetup\n  (:require [clojure.string :refer [upper-case] :as s]))\n\n;; Day Generators\n(defn teenths [month year]\n  (->>\n    (range 13 20)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn firsts [month year]\n  (->>\n    (range 1 8)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn seconds [month year]\n  (->>\n    (range 8 15)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn thirds [month year]\n  (->>\n    (range 15 22)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn fourths [month year]\n  (->>\n    (range 22 29)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn find-day [day generator]\n  (fn [month year]\n    (->>\n      (generator month year)\n      (dayofweek day)\n      as-numbers)))\n\n(def monteenth (find-day java.util.Calendar/MONDAY teenths))\n(def tuesteenth (find-day java.util.Calendar/TUESDAY teenths))\n(def wednesteenth (find-day java.util.Calendar/WEDNESDAY teenths))\n(def thursteenth (find-day java.util.Calendar/THURSDAY teenths))\n(def friteenth (find-day java.util.Calendar/FRIDAY teenths))\n(def saturteenth (find-day java.util.Calendar/SATURDAY teenths))\n(def sunteenth (find-day java.util.Calendar/SUNDAY teenths))\n\n(defmacro build-finder [generator-type day-of-week]\n   `(def ~(symbol (str (name generator-type) "-" (name day-of-week)))\n         (find-day ~(symbol (name 'java.util.Calendar) (s/upper-case (name day-of-week)))\n                   ~(symbol (str (name generator-type) "s")))))\n\n(build-finder :first :monday)\n(build-finder :first :tuesday)\n(build-finder :first :wednesday)\n(build-finder :first :thursday)\n(build-finder :first :friday)\n(build-finder :first :saturday)\n(build-finder :first :sunday)\n(build-finder :second :monday)\n(build-finder :second :tuesday)\n(build-finder :second :wednesday)\n(build-finder :second :thursday)\n(build-finder :second :friday)\n(build-finder :second :saturday)\n(build-finder :second :sunday)\n(build-finder :third :monday)\n(build-finder :third :tuesday)\n(build-finder :third :wednesday)\n(build-finder :third :thursday)\n(build-finder :third :friday)\n(build-finder :third :saturday)\n(build-finder :third :sunday)\n(build-finder :fourth :monday)\n(build-finder :fourth :tuesday)\n(build-finder :fourth :wednesday)\n(build-finder :fourth :thursday)\n(build-finder :fourth :friday)\n(build-finder :fourth :saturday)\n(build-finder :fourth :sunday)\n(build-finder :last :monday)\n(build-finder :last :tuesday)\n(build-finder :last :wednesday)\n(build-finder :last :thursday)\n(build-finder :last :friday)\n(build-finder :last :saturday)\n(build-finder :last :sunday)	\N	f	1	2	2013-12-13 02:18:00	2013-12-13 02:18:00	403	meetup.clj
927	27	239482f30c9150dfb01c6e6d	hibernating	ruby	word-count	class Phrase < String\n  def word_count\n    counts = Hash.new(0)\n\n    words.each { |word| counts[word] += 1 }\n\n    counts\n  end\n\n  def words\n    downcase.split(/\\W+/)\n  end\nend	\N	f	1	2	2013-12-17 23:46:34	2013-12-17 23:46:34	414	\N
900	27	cb2bcc75d23ad167a2d47c60	superseded	python	bob	class Bob:\n    def hey(self, s):\n    \tif s == None or s.strip() == "":\n    \t\treturn 'Fine. Be that way.'\n\n        if s == s.upper():\n        \treturn 'Woah, chill out!'\n\n        if s.endswith('?'):\n            return 'Sure.'\n\n        return 'Whatever.'\n        	\N	f	0	1	2013-08-17 21:58:49	2013-08-17 21:58:49	404	\N
901	27	8de91a7da8ca81c4d07e9205	done	python	bob	class Bob:\n  def hey(self, s):\n    # check if "nothing" was said\n    if s == None or s.strip() == '':\n      return 'Fine. Be that way.'\n\n    # detect SHOUTING\n    if s.isupper():\n      return 'Woah, chill out!'\n\n    # detect questions?\n    if s.endswith('?'):\n      return 'Sure.'\n\n    # otherwise, well, whatever.\n    return 'Whatever.'	\N	f	2	4	2013-09-20 17:45:37	2013-09-20 17:45:37	404	\N
902	27	d4e942529cd57099e1f7c1ce	superseded	python	bob	class Bob:\n    def hey(self, s):\n    \tif s == None or s.strip() == '':\n    \t\treturn 'Fine. Be that way.'\n\n        if s == s.upper():\n        \treturn 'Woah, chill out!'\n\n        if s.endswith('?'):\n            return 'Sure.'\n\n        return 'Whatever.'	\N	f	2	2	2013-11-05 17:22:09	2013-11-05 17:22:09	404	\N
903	27	774a65f8e2d0a7dfe5c22965	superseded	python	bob	class Bob:\n  def hey(self, s):\n    if self.__isempty(s):\n      return 'Fine. Be that way.'\n\n    if self.__isshout(s):\n      return 'Woah, chill out!'\n\n    if self.__isquestion(s):\n      return 'Sure.'\n\n    return 'Whatever.'\n\n  def __isempty(self, s):\n    return s == None or s.strip() == ''\n\n  def __isshout(self, s):\n    return s.isupper()\n\n  def __isquestion(self, s):\n    return s.endswith('?')	\N	f	5	3	2014-02-01 10:49:42	2014-02-01 10:49:42	404	\N
904	27	64d9a57044b2f65a10544281	superseded	ruby	point-mutations	class DNA\n  \n  def initialize(dna_1)\n    @nts_1 = dna_1.chars\n  end\n  \n  def hamming_distance(dna_2)\n    @nts_2 = dna_2.chars\n    homologous_nts.count { |nt_1, nt_2| nt_1 != nt_2 }\n  end\n  \n  private\n  \n  def homologous_nts\n    shorter, longer = [@nts_1, @nts_2].sort_by(&:length)\n    shorter.zip(longer)\n  end\n  \nend	\N	f	1	1	2013-08-23 16:16:39	2013-08-23 16:16:39	405	\N
905	27	5deef05893b0f3c8a4fc8d19	superseded	ruby	point-mutations	class DNA\n  \n  def initialize(dna_1)\n    @nucleotides_1 = dna_1.chars\n  end\n  \n  def hamming_distance(dna_2)\n    @nucleotides_2 = dna_2.chars\n    homologous_nucleotides.count do |nucleotide_1, nucleotide_2|\n      nucleotide_1 != nucleotide_2\n    end\n  end\n  \n  private\n  \n  def homologous_nucleotides\n    shorter, longer = [@nucleotides_1, @nucleotides_2].sort_by(&:length)\n    shorter.zip(longer)\n  end\n  \nend	\N	f	1	2	2013-11-24 15:16:15	2013-11-24 15:16:15	405	\N
906	27	e2335b966f5a6783c51f3104	done	ruby	point-mutations	class DNA\n  \n  def initialize(dna)\n    @nucleotides = dna.chars\n  end\n  \n  def hamming_distance(other_dna)\n    other_nucleotides = other_dna.chars\n    homologous_nucleotides(other_nucleotides).count do |nucleotide, other_nucleotide|\n      nucleotide != other_nucleotide\n    end\n  end\n  \n  private\n  \n  def homologous_nucleotides(other_nucleotides)\n    shorter, longer = [@nucleotides, other_nucleotides].sort_by(&:length)\n    shorter.zip(longer)\n  end\n  \nend	\N	f	0	3	2014-01-10 16:54:26	2014-01-10 16:54:26	405	\N
908	27	7b593f8d9208ccde62f8e075	done	elixir	gigasecond	defmodule Gigasecond do\n  def from(date) do\n    days_per_gigasecond = trunc(1.0e9 / 86400)\n    :calendar.gregorian_days_to_date(\n      :calendar.date_to_gregorian_days(date) + days_per_gigasecond)\n  end\nend	\N	f	1	1	2013-11-19 07:03:32	2013-11-19 07:03:32	407	\N
909	27	f65bfb5e859bf1f4a6e33f76	done	python	rna-transcription	class DNA(object):\n    def __init__(self, dna):\n        self.dna = dna\n    \n    def to_rna(self):\n        return self.dna.replace('T', 'U')	\N	f	4	1	2014-01-20 06:54:54	2014-01-20 06:54:54	408	\N
910	27	880b8cea1eb0e5cafb19bba7	done	ruby	bob	class Bob\n  def hey(string)\n    message = Message.new(string.to_s)\n\n    if message.silent?\n      "Fine. Be that way!"\n    elsif message.shouting?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message < String\n  def silent?\n    strip.empty?\n  end\n\n  def question?\n    end_with? "?"\n  end\n\n  def shouting?\n    upcase == self\n  end\nend	\N	f	1	3	2013-08-05 15:25:21	2013-08-05 15:25:21	409	\N
911	27	aadc6e01b5ecdd53c7e16fc0	superseded	ruby	bob	class Bob\n  def hey(message)\n    if silence?(message)\n      "Fine. Be that way!"\n    elsif shouting?(message)\n      "Woah, chill out!"\n    elsif question?(message)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def silence?(message)\n    message.nil? || message.empty? || message =~ /\\A\\s+\\z/\n  end\n\n  def question?(message)\n    message =~ /\\?\\z/\n  end\n\n  def shouting?(message)\n    message !~ /[a-z]/\n  end\nend	\N	f	0	1	2013-12-07 13:11:32	2013-12-07 13:11:32	409	\N
914	27	4c03283dc838b925ed20802e	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(elems) when is_list(elems) do\n    HashDict.new Enum.map Enum.uniq(elems), frequency(&1, elems)\n  end\n  defp frequency(elem, elems) do\n    { elem, Enum.count(elems, Kernel.==(&1, elem)) }\n  end\n\n  # Invert Regex.scan as if it were implemented on String\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	1	2	2013-10-06 10:39:16	2013-10-06 10:39:16	410	\N
915	27	97f3647b393234d162f7f43a	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(list), do: HashDict.new(Enum.uniq(list), frequency(&1, list))\n  defp frequency(member, list), do: { member, Enum.count(list, Kernel.==(&1, member)) }\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	0	3	2013-10-06 15:11:26	2013-10-06 15:11:26	410	\N
917	27	605ee198f6f4a1128c650aeb	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(input), do: input |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(list), do: HashDict.new(Enum.uniq(list), frequency(&1, list))\n  defp frequency(member, list), do: { member, Enum.count(list, &1 == member) }\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	1	4	2013-12-04 04:52:24	2013-12-04 04:52:24	410	\N
918	27	0eb4f7f1862d52dd24ce5454	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words) do\n    Enum.reduce words, HashDict.new, increment_score(&1, &2)\n  end\n\n  defp increment_score(word, scores) do\n    Dict.update(scores, word, 1, (fn val -> val + 1 end))\n  end\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	1	5	2013-12-24 03:20:59	2013-12-24 03:20:59	410	\N
919	27	59021855181106b355f57142	done	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words), do: Enum.reduce(words, HashDict.new, increment_score(&1, &2))\n\n  defp increment_score(word, scores), do: Dict.update(scores, word, 1, &1 + 1)\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	4	8	2014-02-24 23:24:36	2014-02-24 23:24:36	410	\N
920	27	cd6ac5d459fe2c89f3369b1c	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words), do: Enum.reduce words, [], increment_score(&1, &2)\n\n  defp increment_score(word, scores), do: Dict.update(scores, word, 1, &1 + 1)\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	0	7	2014-03-05 01:28:01	2014-03-05 01:28:01	410	\N
921	27	016e378e6a5c9be87043ab7a	superseded	javascript	word-count	var Words = function(words){\n\n\tvar myArr = words.toLowerCase().replace(/\\W/g," ").split(" ");\n\tvar myJSON = {};\n\tvar counter = 0;\n\t\n\tfor(var i = 0;i < myArr.length;i++){\n\t\tif(myArr[i] == ' ' || myArr[i] == '') continue;\n\t\tvar word = myArr[i];\n\t\tfor (var j = 0; j < myArr.length; j++) {;\n\t\t\tif(myArr[i] == myArr[j])counter++;\n\t\t};\n\t\tmyJSON[word] = counter;\n\t\tcounter = 0;\n\t}\n\tconsole.log(myJSON);\n\tthis.count = myJSON;\n};\n\nmodule.exports = Words;	\N	f	1	1	2014-01-09 17:35:43	2014-01-09 17:35:43	411	\N
922	27	305225e5c3f510694db00b8b	done	javascript	word-count	var Words = function(words){\n\n\tvar myArr = words.toLowerCase().replace(/\\W/g," ").split(" ");\n\tvar myJSON = {};\n\tvar counter = 0;\n\t\n\tfor(var i = 0;i < myArr.length;i++){\n\t\tif(myArr[i] == ' ' || myArr[i] == '') continue;\n\t\tvar word = myArr[i];\n\t\tfor (var j = 0; j < myArr.length; j++) {;\n\t\t\tif(myArr[i] == myArr[j])counter++;\n\t\t};\n\t\tmyJSON[word] = counter;\n\t\tcounter = 0;\n\t}\n\tthis.count = myJSON;\n};\n\nmodule.exports = Words;	\N	f	0	2	2014-01-14 21:06:57	2014-01-14 21:06:57	411	\N
923	27	5357c2ec5dae95d248a8a332	done	ruby	prime-factors	class PrimeFactors\n\n  def self.for(number)\n    factors = []\n    divisor = 2\n    while number > 1\n      while number % divisor == 0\n        factors << divisor\n        number /= divisor\n      end\n      divisor += 1\n    end\n    factors\n  end\n\nend	\N	f	0	1	2013-09-18 04:30:46	2013-09-18 04:30:46	412	\N
924	27	05dd454d160204da80aa5759	superseded	go	etl	package etl\n\nimport (\n    "strings"\n)\n\nfunc Transform (data map[int][]string) map[string] int {\n    result := make(map[string] int)\n    \n    for score, letters := range data {\n        for _, letter := range letters {\n            letter = strings.ToLower(letter)\n            result[letter] = score\n        } \n    } \n\n    return result\n}	\N	f	1	1	2013-08-06 09:29:11	2013-08-06 09:29:11	413	etl.go
925	27	9868213b35184d2f617a6ac9	done	go	etl	package etl\n\nimport (\n\t"strings"\n)\n\nfunc Transform(legacyLettersScore map[int][]string) map[string]int {\n\tlettersScore := make(map[string]int)\n\n\tfor score, letters := range legacyLettersScore {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tlettersScore[letter] = score\n\t\t}\n\t}\n\n\treturn lettersScore\n}	\N	f	1	3	2013-09-03 15:20:06	2013-09-03 15:20:06	413	etl.go
926	27	40b71606f5d131876c4eeb2e	superseded	go	etl	package etl\n\nimport (\n\t"strings"\n)\n\nfunc Transform(legacyLettersScore map[int][]string) map[string]int {\n\tletterScore := make(map[string]int)\n\n\tfor score, letters := range legacyLettersScore {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tletterScore[letter] = score\n\t\t}\n\t}\n\n\treturn letterScore\n}	\N	f	1	2	2013-09-11 21:05:42	2013-09-11 21:05:42	413	etl.go
930	28	b857e6e35a0bfb04071d5b17	superseded	ruby	bob	class Bob\n  def hey(str)\n    return "Fine. Be that way." if empty?(str)\n    return "Woah, chill out!"   if yelling?(str)\n    return "Sure."              if is_a_question?(str)\n    "Whatever."\n  end\n\n  private\n\n  def is_a_question?(str)\n    str[-1] == "?"\n  end\n\n  def yelling?(str)\n    str.to_s.upcase == str.to_s\n  end\n\n  def empty?(str)\n    str.nil? || str == ""\n  end\nend	\N	f	3	2	2013-09-02 14:15:01	2013-09-02 14:15:01	415	\N
931	28	beeaf88bc3d2e6b2f75780fc	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if silence?(statement)\n      "Fine. Be that way."\n    elsif yelling?(statement)\n      "Woah, chill out!"\n    elsif question?(statement)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.upcase == statement\n  end\n\n  def silence?(statement)\n    statement.to_s == ""\n  end\nend	\N	f	1	4	2013-11-12 03:21:50	2013-11-12 03:21:50	415	\N
932	28	1e341a8fec9218817836070a	superseded	ruby	bob	class Bob\n  def hey(statement)\n    return "Fine. Be that way." if silence?(statement)\n    return "Woah, chill out!"   if yelling?(statement)\n    return "Sure."              if question?(statement)\n    "Whatever."\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.to_s.upcase == statement.to_s\n  end\n\n  def silence?(statement)\n    statement.nil? || statement == ""\n  end\nend	\N	f	2	3	2014-02-12 06:20:38	2014-02-12 06:20:38	415	\N
933	28	d821f1d00207cb9933907b09	hibernating	ruby	bob	class Bob\n  def hey(statement)\n    if silence?(statement)\n      "Fine. Be that way."\n    elsif yelling?(statement)\n      "Woah, chill out!"\n    elsif question?(statement)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.upcase == statement\n  end\n\n  def silence?(statement)\n    statement.to_s.empty?\n  end\nend	\N	f	5	5	2014-03-04 17:47:49	2014-03-04 17:47:49	415	\N
935	28	34564b433f05fab080e4851d	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verse_two();\n    break;\n  case 1:\n    return verse_one();\n    break;\n  case 0:\n    return verse_zero();\n    break;\n  default:\n    return default_verse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  message = "";\n  i = start;\n  while (i >= stop) {\n    message += Beer.verse(i);\n    if (i > stop) {\n      message += "\\n";\n    };\n    i--;\n  }\n  return message;\n}\n\nvar default_verse = function (num) {\n  message = num + " bottles of beer on the wall, "\n  message += num + " bottles of beer.\\n"\n  message += "Take one down and pass it around, "\n  message += (num-1) + " bottles of beer on the wall.\\n";\n  return message;\n}\n\nvar verse_two = function() {\n  var message = "2 bottles of beer on the wall, ";\n  message += "2 bottles of beer.\\n";\n  message += "Take one down and pass it around, ";\n  message += "1 bottle of beer on the wall.\\n";\n  return message;\n};\n\nvar verse_one = function() {\n  var message = "1 bottle of beer on the wall, "\n  message += "1 bottle of beer.\\n"\n  message += "Take it down and pass it around, "\n  message += "no more bottles of beer on the wall.\\n"\n  return message;\n};\n\nvar verse_zero = function() {\n  var message = "No more bottles of beer on the wall, "\n  message += "no more bottles of beer.\\n"\n  message += "Go to the store and buy some more, "\n  message += "99 bottles of beer on the wall.\\n"\n  return message;\n};\n\nmodule.exports = Beer;	\N	f	3	2	2013-10-13 00:39:39	2013-10-13 00:39:39	416	\N
936	28	5dcdb9ac5beecd72ee29baeb	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  if (num === 2) {\n    return verse_two();\n  } else if (num === 1) {\n    return verse_one();\n  } else if (num === 0) {\n    return verse_zero();\n  } else {\n    return default_verse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  message = "";\n  i = start;\n  while (i >= stop) {\n    message += Beer.verse(i);\n    if (i > stop) {\n      message += "\\n";\n    };\n    i--;\n  }\n  return message;\n}\n\nvar default_verse = function (num) {\n  message = num + " bottles of beer on the wall, "\n  message += num + " bottles of beer.\\n"\n  message += "Take one down and pass it around, "\n  message += (num-1) + " bottles of beer on the wall.\\n";\n  return message;\n}\n\nvar verse_two = function() {\n  var message = "2 bottles of beer on the wall, ";\n  message += "2 bottles of beer.\\n";\n  message += "Take one down and pass it around, ";\n  message += "1 bottle of beer on the wall.\\n";\n  return message;\n};\n\nvar verse_one = function() {\n  var message = "1 bottle of beer on the wall, "\n  message += "1 bottle of beer.\\n"\n  message += "Take it down and pass it around, "\n  message += "no more bottles of beer on the wall.\\n"\n  return message;\n};\n\nvar verse_zero = function() {\n  var message = "No more bottles of beer on the wall, "\n  message += "no more bottles of beer.\\n"\n  message += "Go to the store and buy some more, "\n  message += "99 bottles of beer on the wall.\\n"\n  return message;\n};\n\nmodule.exports = Beer;	\N	f	3	1	2013-12-03 16:53:45	2013-12-03 16:53:45	416	\N
947	28	cdc30b3618b11a6993251cd7	done	python	anagram	class Anagram:\n\tdef __init__(self, anagram):\n\t\tself.anagram = anagram\n\n\tdef match(self, words):\n\t\tanagrams = []\n\t\tfor word in words:\n\t\t\tif len(self.anagram) != len(word) or word == self.anagram:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tanagram_chars = list(self.anagram.lower())\n\t\t\t\tword_chars = list(word.lower())\n\t\t\t\tanagram_chars.sort()\n\t\t\t\tword_chars.sort()\n\t\t\t\tif anagram_chars == word_chars:\n\t\t\t\t\tanagrams.append(word)\n\n\t\treturn anagrams	\N	f	0	1	2013-11-16 22:08:06	2013-11-16 22:08:06	421	anagram.py
938	28	d0dada6bedbc36679e6349e9	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n  case 1:\n    return verseOne();\n  case 0:\n    return verseZero();\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  song = "";\n  for (var i = start; i >= stop; i--){\n    song += Beer.verse(i);\n    if (i > stop) {\n      song += "\\n";\n    };\n  }\n  return song;\n};\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n  return verse;\n}\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	0	4	2014-01-13 03:25:30	2014-01-13 03:25:30	416	\N
939	28	b1325dca080d82eb0fa01bf9	done	haskell	gigasecond	module Gigasecond (fromDay) where\nimport Data.Time.Calendar (addDays, Day)\n\ngigasecondInDays :: Integer\ngigasecondInDays = 1000000000 `div` (60 * 60 * 24)\n\nfromDay :: Day -> Day\nfromDay = addDays gigasecondInDays	\N	f	0	1	2013-11-08 01:38:03	2013-11-08 01:38:03	417	\N
940	28	d2576b261787ebbfce64f608	superseded	clojure	phone-number	(ns phone (:require [clojure.string :as str]))\n\n(def phone-number-length 10)\n\n(defn- clean-number [input]\n  (let [digits (str/replace input #"[^\\d]" "")]\n    (if \n      (and \n        (= (count digits) (+ 1 phone-number-length)) \n        (= \\1 (first digits)))\n      (subs digits 1)\n      digits)))\n\n(defn- is-valid [digits]\n  (= 10 (count digits)))\n\n(defn number [input]\n  (let [digits (clean-number input)]\n    (let [length (count digits) \n          invalid "0000000000"]\n      (if (is-valid digits) \n        digits\n        invalid))))\n\n(defn area-code [input]\n  (let [digits (clean-number input)]\n    (subs digits 0 3)))\n\n(defn pretty-print [input]\n  (let [digits (clean-number input)]\n    (let [area (area-code digits)\n          prefix (subs digits 3 6)\n          line (subs digits 6)]\n      (format "(%s) %s-%s" area prefix line))))	\N	f	3	1	2013-12-26 08:20:32	2013-12-26 08:20:32	418	\N
941	28	6098d0b9e8bb25a0e8382372	done	clojure	phone-number	(ns phone \n  (:require [clojure.string :as str]))\n\n(def phone-number-length 10)\n\n(defn- clean-number [input]\n  (let [digits (str/replace input #"[^\\d]" "")]\n    (if \n      (and \n        (= (count digits) (+ 1 phone-number-length)) \n        (= \\1 (first digits)))\n      (subs digits 1)\n      digits)))\n\n(defn- is-valid [digits]\n  (= 10 (count digits)))\n\n(defn number [input]\n  (let [digits (clean-number input)]\n    (let [length (count digits) \n          invalid "0000000000"]\n      (if (is-valid digits) \n        digits\n        invalid))))\n\n(defn area-code [input]\n  (let [digits (clean-number input)]\n    (subs digits 0 3)))\n\n(defn pretty-print [input]\n  (let [digits (clean-number input)]\n    (let [area (area-code digits)\n          prefix (subs digits 3 6)\n          line (subs digits 6)]\n      (format "(%s) %s-%s" area prefix line))))	\N	f	0	2	2014-02-21 08:04:02	2014-02-21 08:04:02	418	\N
942	28	050c92f461db087f03e5e620	superseded	ruby	word-count	class Phrase\n  WORD_PATTERN = /\\w+/\n\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    results = Hash.new(0)\n    content.downcase.scan(WORD_PATTERN).each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\nend	\N	f	1	3	2013-09-18 09:04:23	2013-09-18 09:04:23	419	\N
943	28	3b77a4033bc63ee6adcdf317	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  # Problems:\n  # - Reg-exps are cryptic\n  # - Stripping of punctuation is fragile and incomplete\n  # - Not memoized\n  def word_count\n    results = {}\n    @phrase.split(/ |,/).each do |word|\n      word.downcase!\n      word.tr!(':!@$%^&', '')\n      next if word.empty?\n      results[word] ||= 0\n      results[word] += 1\n    end\n    results\n  end\n\nend	\N	f	3	1	2013-09-19 11:07:24	2013-09-19 11:07:24	419	\N
944	28	63bba266b2a5aaa821f8b111	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  # Problems:\n  # - Reg-exps are cryptic\n  # - Not memoized\n  def word_count\n    results = {}\n    @phrase.split(/ |,/).each do |word|\n      word.downcase!\n      word.tr!('^A-Za-z0-9', '')\n      next if word.empty?\n      results[word] ||= 0\n      results[word] += 1\n    end\n    results\n  end\n\nend	\N	f	3	2	2013-10-12 20:39:53	2013-10-12 20:39:53	419	\N
945	28	f95bcc980be66fb985dbad98	done	ruby	word-count	class Phrase\n  WORD_PATTERN = /\\w+/\n\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    results = Hash.new(0)\n    words.each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  def words\n    content.downcase.scan(WORD_PATTERN)\n  end\n\nend	\N	f	3	4	2013-12-28 13:54:04	2013-12-28 13:54:04	419	\N
946	28	d903dacfadce7003a9e7c605	pending	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    factors = FactorFinder.find_factors(num)\n\n    output = ''\n    output += 'Pling' if factors.include?(3) || num == 3\n    output += 'Plang' if factors.include?(5) || num == 5\n    output += 'Plong' if factors.include?(7) || num == 7\n\n    if output.empty?\n      num.to_s\n    else\n      output\n    end\n  end\nend\n\nclass FactorFinder\n  def self.find_factors(num)\n    # returns factors excluding 1 and itself\n    (2..(num/2)).select { |i| (num % i).zero? }\n  end\nend	\N	f	4	1	2013-12-12 21:41:01	2013-12-12 21:41:01	420	raindrops.rb
972	29	3ca47823314bbc251c310946	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    # Use default argument to Hash constructor to avoid excess logic in #reduce\n    split.reduce(Hash.new(0)) do |word_list, word|\n      word_list[word] += 1\n      word_list\n    end\n  end\n\n  private\n\n  def split\n    @string.scan(/\\w+/)\n  end\nend	\N	f	3	2	2013-08-06 16:27:27	2013-08-06 16:27:27	437	\N
949	28	2b9b165f71ab8a3ccb0ce1a4	done	ruby	hamming	module Hamming\n  def self.compute( s1, s2 )\n    zipped( s1, s2 ).count { |(a,b)| a != b && !( a.nil? || b.nil? ) }\n  end\n\n  private\n\n  def self.zipped( s1, s2 )\n    s1.chars.zip( s2.chars )\n  end\nend	\N	f	1	1	2013-09-06 02:05:14	2013-09-06 02:05:14	423	\N
950	28	5561cf07649413a1be0f7964	superseded	clojure	robot-name	(def digits (vec "0123456789"))\n(def alphabet (vec "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))\n\n(defn random-letter []\n  (rand-nth alphabet))\n\n(defn random-digit []\n  (rand-nth digits))\n\n(defn random-name []\n  (str (random-letter)\n       (random-letter)\n       (random-digit)\n       (random-digit)\n       (random-digit)))\n\n(defn robot []\n  (atom nil))\n\n(defn set-name [r name]\n  (do (reset! r name)\n      name))\n\n(defn robot-name [r]\n  (let [name @r]\n    (if name name (set-name r (random-name)))))\n\n(defn reset-name [r]\n  (set-name r nil))	\N	f	3	1	2013-09-12 20:24:54	2013-09-12 20:24:54	424	robot.clj
951	28	81bc29103994dc38e6aa5590	done	clojure	robot-name	(def digits  "0123456789")\n(def alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(defn random-letter []\n  (rand-nth alphabet))\n\n(defn random-digit []\n  (rand-nth digits))\n\n(defn random-name []\n  (str (random-letter)\n       (random-letter)\n       (random-digit)\n       (random-digit)\n       (random-digit)))\n\n(defn robot []\n  (atom nil))\n\n(defn set-name [r name]\n  (reset! r name))\n\n(defn robot-name [r]\n  (let [name @r]\n    (or name (set-name r (random-name)))))\n\n(defn reset-name [r]\n  (set-name r nil))	\N	f	4	2	2013-11-23 00:01:57	2013-11-23 00:01:57	424	robot.clj
952	28	e9261325bf982216103e0218	superseded	haskell	point-mutations	module DNA (hammingDistance) where\r\n\r\nhammingDistance :: String -> String -> Integer\r\nhammingDistance nucleotides1 nucleotides2 =\r\n  sum $ zipWith (\\n1 n2 -> if n1 == n2 then 0 else 1) nucleotides1 nucleotides2\r	\N	f	3	1	2013-08-27 11:09:35	2013-08-27 11:09:35	425	DNA.hs
953	28	930fe21ec324819191987fd9	done	haskell	point-mutations	module DNA (hammingDistance) where\r\n\r\nhammingDistance :: String -> String -> Int\r\nhammingDistance nucleotides1 nucleotides2 =\r\n  sum $ zipWith (\\n1 n2 -> fromEnum $ n1 /= n2) nucleotides1 nucleotides2\r	\N	f	3	2	2013-12-21 21:11:51	2013-12-21 21:11:51	425	DNA.hs
954	28	0ac0b6a1ebb8b5155efbe924	superseded	ruby	anagram	class Anagram\n  def initialize(root)\n    @root = root\n  end\n\n  def match(possibilities = [])\n    possibilities.delete_if do |word|\n      different_letters?(word, root) || same_word?(word, root)\n    end\n  end\n\n  private\n\n  attr_reader :root\n\n  def different_letters?(a, b)\n    sort(a) != sort(b)\n  end\n\n  def same_word?(a, b)\n    a.casecmp(b).zero?\n  end\n\n  def sort(word)\n    word.downcase.chars.sort.join\n  end\nend	\N	f	3	1	2013-08-13 18:01:19	2013-08-13 18:01:19	426	\N
955	28	b6cf760b676c4a4c20f17a74	done	ruby	anagram	module Comparators\n  def same_letters?(a, b)\n    normalize(a) == normalize(b)\n  end\n\n  def different_word?(a, b)\n    a.casecmp(b) != 0\n  end\n\n  private\n\n    def normalize(word)\n      word.downcase.chars.sort\n    end\nend\n\nclass Anagram\n  include Comparators\n\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(possibilities)\n    possibilities.select do |candidate|\n      same_letters?(candidate, @subject) &&\n      different_word?(candidate, @subject)\n    end\n  end\nend	\N	f	3	4	2013-09-12 11:57:21	2013-09-12 11:57:21	426	\N
956	28	433fdf0409e1327b3bf06842	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(possibilities)\n    possibilities.select do |word|\n      same_letters?(word, @subject) && different_word?(word, @subject)\n    end\n  end\n\n  private\n\n  def same_letters?(a, b)\n    equalize(a) == equalize(b)\n  end\n\n  def different_word?(a, b)\n    a.casecmp(b) != 0\n  end\n\n  def equalize(word)\n    word.downcase.chars.sort.join\n  end\nend	\N	f	2	3	2013-11-25 11:26:35	2013-11-25 11:26:35	426	\N
957	28	d58377dd57df5621060777a9	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(possibilities)\n    possibilities.select do |word|\n      same_letters?(word, @subject) && different_word?(word, @subject)\n    end\n  end\n\n  private\n\n  def same_letters?(a, b)\n    sort(a) == sort(b)\n  end\n\n  def different_word?(a, b)\n    a.casecmp(b) != 0\n  end\n\n  def sort(word)\n    word.downcase.chars.sort.join\n  end\nend	\N	f	4	2	2013-12-11 03:38:17	2013-12-11 03:38:17	426	\N
958	28	653fc5c7f99d5832155b33cc	done	go	binary	package binary\n\nfunc validDigit(digit string) bool {\n\treturn digit == "1" || digit == "0"\n}\n\nfunc ToDecimal(binaryNumber string) int {\n\tdecimal := 0\n\tindex := len(binaryNumber) - 1\n\tfor power := 1; 0 <= index; index, power = index-1, 2*power {\n\t\tbinaryDigit := string(binaryNumber[index])\n\t\tif validDigit(binaryDigit) {\n\t\t\tif binaryDigit == "1" {\n\t\t\t\tdecimal += power\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn decimal\n}	\N	f	1	1	2013-09-24 00:06:16	2013-09-24 00:06:16	427	\N
959	28	c9789327509a0d719fbb61eb	superseded	python	rna-transcription	class DNA(object):\n    thymidine = "T"\n    uracil = "U"\n    \n    def __init__(self, string):\n        self.__string = string\n\n    def to_rna(self):\n        return self.__string.replace(self.thymidine, self.uracil)	\N	f	0	1	2013-09-19 15:23:39	2013-09-19 15:23:39	428	\N
960	28	cc2d40b35a7770262aad7438	done	python	rna-transcription	THYMIDINE = "T"\nURACIL = "U"\n\nclass DNA(object):\n    def __init__(self, dna_string):\n        self._dna_string = dna_string\n\n    def to_rna(self):\n        return self._dna_string.replace(THYMIDINE, URACIL)	\N	f	2	2	2013-11-08 14:08:09	2013-11-08 14:08:09	428	dna.py
961	28	389a83c16396f0a837bd4ff0	done	python	bob	class Bob:\n    def hey(self, stmt):\n        if stmt is None or stmt.strip() == "":\n            return "Fine. Be that way!"\n\n        if stmt.upper() == stmt:\n            return "Woah, chill out!"\n\n        if stmt[-1] == '?':\n            return "Sure."\n\n        return "Whatever."	\N	f	2	1	2013-08-06 18:23:27	2013-08-06 18:23:27	429	\N
962	29	5aca1ceef17083ebb4ab7a5f	done	ruby	rna-transcription	class RibonucleicAcid\n  def initialize(string)\n    @string = string\n  end\n  def to_s\n    @string\n  end\n  def ==(object)\n    object.to_s == @string\n  end\nend\n\nclass String\n  alias :old_equals :==\n\n  def ==(that)\n    if that.kind_of?(RibonucleicAcid)\n      that == self\n    else\n      old_equals(that)\n    end\n  end\nend\n\nclass DeoxyribonucleicAcid < RibonucleicAcid\n\n  def to_rna\n    RibonucleicAcid.new(@string.gsub("T","U"))\n  end\nend	\N	f	2	1	2013-09-20 00:27:18	2013-09-20 00:27:18	430	\N
973	29	04eb4c265591fdfba4e99149	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    # Use default argument to Hash constructor to avoid excess logic in #reduce\n    split.reduce(Hash.new(0)) do |word_list, word|\n      word_list[normalize(word)] += 1\n      word_list\n    end\n  end\n\n  private\n\n  def normalize(word)\n    word.downcase.gsub(/[^[:word:]]/, '')\n  end\n\n  def split\n    @string.split(/\\W+/)\n  end\nend	\N	f	0	1	2013-08-09 18:51:37	2013-08-09 18:51:37	437	\N
965	29	3ad311919eee89ccabcd4ba1	done	ruby	triangle	class Triangle\n  def initialize(a, b, c)\n    @a = a\n    @b = b\n    @c = c\n  end\n\n  def kind\n    if (@a <= 0 || @b <= 0 || @c <= 0) ||\n       (@a == @b && @c > @a) ||\n       (@a == @c && @b > @a) ||\n       (@b == @c && @a > @b) ||\n       (@a > @b + @c) || (@b > @a + @c) || (@c > @a + @b)\n      raise TriangleError\n    else\n      if @a == @b && @b == @c && @c && @a\n        return :equilateral\n      elsif (@a == @b && @a != @c) ||\n            (@a == @c && @a != @b) ||\n            (@b == @c && @a != @b)\n        return :isosceles\n      else\n        return :scalene\n      end\n    end\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	7	1	2014-02-08 21:25:10	2014-02-08 21:25:10	432	\N
966	29	3c37641251008edff661be33	done	ruby	nth-prime	module Prime\n  @@primes = [ 2, 3, 5, 7,11,13,17,19,23,29,\n              31,37,41,43,47,53,59,61,67,71,\n              73,79,83,89,97]\n\n  def self.nth(n_from_1)\n    raise(ArgumentError, "Illegal prime count") if n_from_1 <= 0\n\n    n = n_from_1 - 1\n    @@primes[n] || get_nth_prime(n)\n  end\n\n  private\n  def self.get_nth_prime(n)\n    candidate = @@primes.last + 2\n    loop do\n      return @@primes[n] unless @@primes[n].nil?\n\n      @@primes.push(candidate) unless any_factors? candidate\n      candidate += 2\n    end\n  end\n\n  def self.any_factors?(i)\n    @@primes.each do |prime|\n        return false if prime > Math.sqrt(i)\n        return true if factor?(i, prime)\n    end\n  end\n\n  def self.factor?(i, prime)\n    i >= prime && i % prime == 0\n  end\nend	\N	f	3	1	2013-09-09 03:52:26	2013-09-09 03:52:26	433	\N
967	29	f2fd21db3130d8eb56888a4c	pending	javascript	anagram	var Anagram = function(text) {\n    this.text = text;\n};\n\nAnagram.prototype.match = function(test) {\n    var string = this.text, result = [];\n    if(test instanceof Array) {\n        test.forEach(function(element, index, array) {\n            element.toLowerCase() != string.toLowerCase() &&\n            JSON.stringify(string.toLowerCase().split('').sort()) ==\n            JSON.stringify(element.toLowerCase().split('').sort()) ?\n            result.push(element) : null;\n        });\n    }\n    return result;\n};\nmodule.exports = Anagram;	\N	f	1	1	2013-08-22 19:53:24	2013-08-22 19:53:24	434	anagram.js
969	29	51181394fd31142bb0fad015	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- word-chars [word]\n  (frequencies (str/upper-case word)))\n\n(defn anagrams-for [word, candidates]\n  (let [norm-word (word-chars word)] \n    (filter (fn [candidate] \n      (= norm-word (word-chars candidate)))\n      candidates)))	\N	f	0	2	2013-08-01 00:47:39	2013-08-01 00:47:39	436	\N
970	29	f10fc77bc7085359e1d7e908	done	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- word-char-frequencies [word]\n  (frequencies (str/upper-case word)))\n\n(defn anagrams-for [word, candidates]\n  (let [norm-word (word-char-frequencies word)] \n    (filter \n      (fn [candidate] \n        (= norm-word) (word-char-frequencies candidate)))\n      candidates)))	\N	f	3	3	2013-08-07 19:52:34	2013-08-07 19:52:34	436	\N
971	29	9a108d17f7ca532dc00d0d23	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- normalizeWord [word]\n  (sort (str/upper-case word)))\n\n(defn anagrams-for [word, candidates]\n  (let [normWord (normalizeWord word)] \n    (filter (fn [candidate] \n      (= normWord (normalizeWord candidate))) \n      candidates)))	\N	f	3	1	2013-09-08 23:53:19	2013-09-08 23:53:19	436	\N
1469	36	6cf3146073294072d7fb3a4b	done	ruby	etl	class ETL\n  class << self\n    def transform(dataset)\n      dataset.each_with_object({}) do |(point, letters), store|\n        letters.each {|v| store[v.downcase] = point }\n      end\n    end\n  end\nend	\N	f	4	4	2014-03-04 18:52:41	2014-03-04 18:52:41	649	etl.rb
977	29	402cf7b4afe42979f3a53db7	superseded	clojure	phone-number	(ns phone)\r\n\r\n(defn number [data-entry]\r\n  (let [numbers-only (apply str (filter #(Character/isDigit %) data-entry))\r\n        digits (count numbers-only)\r\n        bad-number "0000000000"]\r\n    (cond \r\n      (< digits 10) bad-number\r\n      (= digits 11) \r\n        (if (not= (first numbers-only) \\1)\r\n          bad-number\r\n          (subs numbers-only 1))\r\n      (> digits 11) bad-number\r\n      :else numbers-only)))\r\n\r\n(defn area-code [clean-number]\r\n  (subs clean-number 0 3))\r\n\r\n(defn exchange [clean-number]\r\n  (subs clean-number 3 6))\r\n\r\n(defn subscriber [clean-number]\r\n  (subs clean-number 6 10))\r\n\r\n(defn pretty-print [data-entry]\r\n  (let [clean-number (number data-entry)]\r\n    (str "(" (area-code clean-number) ") " \r\n         (exchange clean-number) "-" \r\n         (subscriber clean-number))))\r\n\r	\N	f	1	2	2013-09-21 23:07:13	2013-09-21 23:07:13	438	\N
978	29	b078302b93b301025dfe814a	superseded	clojure	phone-number	(ns phone)\r\n\r\n(def bad-number "0000000000")\r\n\r\n(defn- cleanse [data-entry]\r\n  (apply str (filter #(Character/isDigit %) data-entry)))\r\n\r\n(defn number [data-entry]\r\n  (let [numbers-only (cleanse data-entry)\r\n        digits (count numbers-only)]\r\n    (cond \r\n      (= digits 10) numbers-only\r\n      (and (= digits 11) (= (first numbers-only) \\1))\r\n        (subs numbers-only 1)\r\n      :else bad-number)))\r\n\r\n(defn area-code [clean-number]\r\n  (subs clean-number 0 3))\r\n\r\n(defn exchange [clean-number]\r\n  (subs clean-number 3 6))\r\n\r\n(defn subscriber [clean-number]\r\n  (subs clean-number 6 10))\r\n\r\n(defn pretty-print [data-entry]\r\n  (let [clean-number (number data-entry)]\r\n    (str "(" (area-code clean-number) ") " \r\n         (exchange clean-number) "-" \r\n         (subscriber clean-number))))\r\n\r	\N	f	3	3	2013-10-03 23:03:15	2013-10-03 23:03:15	438	\N
980	29	69255c7f011170940c2d21c9	done	clojure	phone-number	(ns phone)\r\n\r\n(def bad-number "0000000000")\r\n\r\n(defn- extract-digits [data-entry]\r\n  (apply str (filter #(Character/isDigit %) data-entry)))\r\n\r\n(defn- has-us-prefix? [digits-only]\r\n  (and (= 11 (count digits-only)) (= (first digits-only) \\1)))\r\n  \r\n(defn- is-valid-us-number? [digits-only]\r\n  (= 10 (count digits-only)))\r\n  \r\n(defn- process-number [digits-only]\r\n  (cond \r\n    (has-us-prefix? digits-only) (subs digits-only 1)\r\n    (is-valid-us-number? digits-only) digits-only\r\n    :else bad-number))\r\n\r\n(defn number [data-entry]\r\n  "Returns ten digits representing a valid US number \r\n  or ten zeroes indicating an invalid one."\r\n  (-> data-entry\r\n    extract-digits\r\n    process-number))\r\n\r\n(defn area-code [clean-number]\r\n  "Returns the three-digit area code for the number passed in."\r\n  (subs clean-number 0 3))\r\n\r\n(defn exchange [clean-number]\r\n  "Returns the three-digit exchange code for the number passed in."\r\n  (subs clean-number 3 6))\r\n\r\n(defn subscriber [clean-number]\r\n  "Returns the four-digit subscriber number for the number passed in."\r\n  (subs clean-number 6 10))\r\n\r\n(defn pretty-print [data-entry]\r\n  "Sanitizes input and returns a phone number in the standard US format." \r\n  (let [clean-number (number data-entry)]\r\n    (str "(" (area-code clean-number) ") " \r\n         (exchange clean-number) "-" \r\n         (subscriber clean-number))))\r\n\r	\N	f	1	5	2013-11-27 22:16:25	2013-11-27 22:16:25	438	\N
981	29	27802b9ccdc29f5dbc30654a	superseded	python	rna-transcription	class DNA(object):\n\tdef __init__(self, dna):\n\t\tself._dna = dna\n\n\tdef to_rna(self):\n\t\trna = ["U" if i == "T" else i for i in self._dna]\n\t\treturn "".join(rna)	\N	f	3	1	2013-08-26 14:15:40	2013-08-26 14:15:40	439	\N
982	29	79db0845216b3f1c8121fa93	done	python	rna-transcription	class DNA(object):\n\tdef __init__(self, dna):\n\t\tself._dna = dna\n\n\tdef to_rna(self):\n\t\treturn self._dna.replace("T", "U")	\N	f	3	2	2013-09-03 04:48:52	2013-09-03 04:48:52	439	\N
983	29	9ddef85d4dbba38f59a3f201	hibernating	ruby	grade-school	class Student < Struct.new(:name, :grade); end\n\nclass School\n  def initialize\n    @students_by_grade = {}\n  end\n\n  def to_hash\n    Hash[@students_by_grade.sort] \n  end\n\n  def grade(grade)\n    to_hash[grade] || []\n  end\n\n  def add name, grade \n    initialize_grade(grade) if first_grade_inserted?(grade) \n    @students_by_grade[grade].push(name).sort!\n  end\n\n  private\n\n  def first_grade_inserted?(grade)\n    @students_by_grade[grade].nil?\n  end\n\n  def initialize_grade(grade)\n    @students_by_grade[grade] = []\n  end\n\nend	\N	f	2	1	2013-10-14 15:50:06	2013-10-14 15:50:06	440	school.rb
984	29	2c17c5b03d358b24a87bec8c	superseded	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      silence?(message)  -> "Fine. Be that way!"\n      question?(message) -> "Sure."\n      shouting?(message) -> "Woah, chill out!"\n      true               -> "Whatever."\n    end\n  end\n\n  def question?(message) do\n    String.ends_with?(message, "?")\n  end\n\n  def shouting?(message) do\n    message == String.upcase(message)\n  end\n\n  def silence?(message) do\n    String.strip(message) == ""\n  end\nend	\N	f	3	1	2013-07-15 14:20:53	2013-07-15 14:20:53	441	\N
985	29	14c23e6540ea2f12637d4068	hibernating	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      silence?(message)  -> "Fine. Be that way!"\n      question?(message) -> "Sure."\n      shouting?(message) -> "Woah, chill out!"\n      true               -> "Whatever."\n    end\n  end\n\n  defp question?(message) do\n    String.ends_with?(message, "?")\n  end\n\n  defp shouting?(message) do\n    message == String.upcase(message)\n  end\n\n  defp silence?(message) do\n    String.strip(message) == ""\n  end\nend	\N	f	4	2	2013-11-28 02:24:19	2013-11-28 02:24:19	441	\N
990	29	6bad57ed1b423dbdcb5b56a9	done	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List (foldl')\r\nimport Data.List.Split\r\nimport qualified Data.Map.Strict as M\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy (not . isAlphaNum) . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl' addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	0	4	2013-10-27 13:48:03	2013-10-27 13:48:03	443	WordCount.hs
1039	37	19a13f2450f8f0ad053aa729	superseded	ruby	bob	class Bob\n  def hey(something)\n    if something.nil? || something.empty?\n      "Fine. Be that way!"\n    elsif something.upcase == something\n      "Woah, chill out!"\n    elsif something.end_with? '?'\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	0	1	2014-02-17 12:52:25	2014-02-17 12:52:25	466	\N
1010	30	17fce12f90035f3f78542053	done	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db ||= {}\n  end\n\n  def add( name, grade )\n    db.key?(grade) ? db[grade] << name : db[grade] = [name]  \n  end\n\n  def grade(level)\n    db[level] ? db[level] : []\n  end\n\n  def sort\n\n    database = db.sort\n    sort_children(database)\n\n    database.each_with_object({}) do |grade, db| \n      db.merge!(grade[0] => grade[1]) \n    end\n\n  end\n\nprivate\n\n  def sort_children(db)\n    db.each {|grade| grade[1].sort!}\n  end\nend	\N	f	7	1	2014-02-19 23:23:15	2014-02-19 23:23:15	452	\N
1011	30	b11c79fad89ed3b42d389107	pending	javascript	grains	module.exports = function Grains() {\n  return {\n    square: function(n) {\n      return _2power(n - 1)\n    },\n    total: function() {\n      return _2power(64)\n    }\n  }\n}\n\nvar _2power = Math.pow.bind(Math, 2)	\N	f	0	3	2014-02-14 22:37:07	2014-02-14 22:37:07	453	grains.js
1012	30	a9ac6a78cbf3216f4ee41587	superseded	javascript	grains	module.exports = function Grains() {\n  this.square = function(n) {\n    return Math.pow(2, n - 1)\n  }\n  this.total = function() {\n    return Array\n      .apply(null, {length: 64})\n      .reduce(function(result, _, n) {\n        return (result || 0) + this.square(n + 1)\n      }.bind(this))\n  }\n}	\N	f	3	2	2014-03-06 12:19:33	2014-03-06 12:19:33	453	grains.js
1020	30	bd9de409c95d6e6cc1446b94	pending	python	rna-transcription	class DNA():\r\n    def __init__(self, dna):\r\n        self.dna = dna\r\n\r\n    def to_rna(self):\r\n        return self.dna.replace('T','U')	\N	f	4	1	2014-02-15 00:46:54	2014-02-15 00:46:54	456	\N
1027	30	4f163dfda1042a3e646528b3	done	ruby	atbash-cipher	class Atbash\n  def self.encode(s)\n    s.gsub(/[^0-9a-zA-Z]/,'').downcase.chars.map do |i|\n      i.match(/[0-9]/) ? i : (122 - (i.ord - 97)).chr\n    end.join.gsub(/(.{5})(?!$)/, '\\1 ')\n  end\nend	\N	f	3	1	2014-02-16 19:38:24	2014-02-16 19:38:24	459	\N
1028	30	583a4f4fe0340363d6fe2847	done	javascript	gigasecond	"use strict";\n\nfunction Gigasecond(a_date) {\n  this.timestamp = a_date.getTime();\n\n  this.date = function() {\n    return _toDate(this.timestamp + this.milliseconds);\n  }\n\n  function _toDate(milliseconds) {\n    var date = new Date(milliseconds);\n\n    // Remove time resolution from date\n    date.setHours(0);\n    date.setMinutes(0);\n    date.setSeconds(0);\n\n    return date;\n  }\n}\n\nGigasecond.prototype = {\n  get seconds() {\n    return 1000000000;\n  },\n\n  get milliseconds() {\n    return this.seconds * 1000;\n  }\n}\n\nmodule.exports = Gigasecond;	\N	f	3	2	2014-02-12 19:24:05	2014-02-12 19:24:05	460	\N
1029	30	923ed675fd19883170a15e9e	superseded	javascript	gigasecond	"use strict";\n\nfunction Gigasecond(a_date) {\n  this.timestamp = a_date.getTime();\n\n  this.date = function() {\n    var a_gigasecond_later = new Date(this.timestamp + this.milliseconds);\n    return _normalizeDate(a_gigasecond_later);\n  }\n\n  function _normalizeDate(date) {\n    date.setHours(0);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    return date;\n  }\n}\n\nGigasecond.prototype = {\n  get seconds() {\n    return 1000000000;\n  },\n\n  get milliseconds() {\n    return this.seconds * 1000;\n  }\n}\n\nmodule.exports = Gigasecond;	\N	f	2	1	2014-03-13 06:23:23	2014-03-13 06:23:23	460	\N
1030	30	6a178feb086d587853d30301	pending	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n  end\nend	\N	f	2	1	2014-02-27 23:31:59	2014-02-27 23:31:59	461	year.rb
1031	30	8186f827a42801eec77d2ccf	superseded	clojure	robot-name	;(ns robot)\n\n(def letters (map char (range (int \\A) (int \\Z))))\n\n(defn- random-digit [] (rand-int 10))\n(defn- random-letter [] (rand-nth letters))\n\n(defn- new-robot-name []\n  (str (random-letter) (random-letter) (random-digit) (random-digit) (random-digit)))\n\n(defn robot [] (atom (new-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] (reset! robot (new-robot-name)))	\N	f	4	1	2014-02-19 08:53:21	2014-02-19 08:53:21	462	\N
1032	30	d289a70aa8b761d043c1576a	superseded	clojure	robot-name	(def letters (map char (range (int \\A) (int \\Z))))\n\n(defn- random-digit [] (rand-int 10))\n(defn- random-letter [] (rand-nth letters))\n\n(defn- new-robot-name []\n  (str (random-letter) (random-letter) (random-digit) (random-digit) (random-digit)))\n\n(defn robot [] (atom (new-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] (reset! robot (new-robot-name)))	\N	f	0	2	2014-03-15 20:11:31	2014-03-15 20:11:31	462	\N
1051	37	e3037fa469253fb3a485bd06	superseded	javascript	bob	var Bob = function () {};\n\nfunction is_silence(sentence) {\n    return sentence === "";\n}\n\nfunction is_question(sentence) {\n    return sentence.slice(-1) === "?";\n}\n\nfunction is_shouting(sentence) {\n    return sentence.toUpperCase() === sentence;\n}\n\nBob.prototype.hey = function (sentence) {\n    if (is_silence(sentence)) {\n        return "Fine. Be that way!";\n    }\n    if (is_shouting(sentence)) {\n        return "Woah, chill out!";\n    }\n    if (is_question(sentence)) {\n        return "Sure.";\n    }\n    return "Whatever.";\n};\n\n\nmodule.exports = Bob;	\N	f	14	1	2014-03-12 21:42:41	2014-03-12 21:42:41	469	\N
1054	37	48ac0d4ba0ced72c80bd380d	done	haskell	rna-transcription	module DNA(toRNA) where\n\ncomplement :: Char -> Char\ncomplement c = case c of\n  'G' -> 'C'\n  'C' -> 'G'\n  'T' -> 'A'\n  'A' -> 'U'\n  _ -> undefined\n\ntoRNA :: String -> String\ntoRNA = map complement	\N	f	2	2	2014-02-15 04:05:45	2014-02-15 04:05:45	470	DNA.hs
1055	37	7cfefdc90633b592924ab762	superseded	haskell	rna-transcription	module DNA(toRNA) where\n\ncomplement :: Char -> Char\ncomplement 'G' = 'C'\ncomplement 'C' = 'G'\ncomplement 'T' = 'A'\ncomplement 'A' = 'U'\ncomplement _ = undefined\n\ntoRNA :: String -> String\ntoRNA = map complement	\N	f	5	1	2014-03-02 22:15:30	2014-03-02 22:15:30	470	DNA.hs
1069	37	9d317af475ea06d0faa1c9ee	superseded	haskell	binary	module Binary (toDecimal) where\r\n\r\nimport Data.Char (isNumber)\r\nimport Data.List (foldl')\r\n\r\ntoDecimal :: String -> Int\r\ntoDecimal n\r\n    | isValid   = fromBin n\r\n    | otherwise = 0\r\n  where\r\n    isValid = all isNumber n\r\n    fromBin =\r\n        foldl' (\\acc x -> if x == '1' then 2 * acc + 1 else 2 * acc) 0	\N	f	3	3	2014-02-28 07:40:08	2014-02-28 07:40:08	477	Binary.hs
1070	37	bc7d8a249a8e9d09e1ba107b	superseded	haskell	binary	module Binary (toDecimal) where\r\n\r\nimport Data.List (foldl')\r\n\r\ntoDecimal :: String -> Int\r\ntoDecimal n\r\n    | isValid   = fromBin n\r\n    | otherwise = 0\r\n  where\r\n    isValid = all (`elem` "01") n\r\n    fromBin =\r\n        foldl' (\\acc x -> if x == '1' then 2 * acc + 1 else 2 * acc) 0	\N	f	3	4	2014-02-28 08:02:35	2014-02-28 08:02:35	477	Binary.hs
1071	37	2f7d90e2c702626bfd838618	done	haskell	binary	module Binary (toDecimal) where\r\n\r\nimport Data.List (foldl')\r\n\r\ntoDecimal :: String -> Int\r\ntoDecimal = foldl' fromBin 0\r\n  where\r\n    fromBin acc '1' = 2 * acc + 1\r\n    fromBin acc '0' = 2 * acc\r\n    fromBin _   _   = 0	\N	f	4	5	2014-03-03 15:56:00	2014-03-03 15:56:00	477	Binary.hs
1072	37	ac4169a43c8961db95ed0553	superseded	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Char (digitToInt, isNumber)\r\n\r\ntoDecimal :: String -> Int\r\ntoDecimal n\r\n    | valid     = toBinary n'\r\n    | otherwise = 0\r\n  where\r\n    n'                  = reverse n\r\n    valid               = all isNumber n'\r\n    toBinary x          = sum $ zipWith readMultiply x powersOf2\r\n    readMultiply char k = digitToInt char * k\r\n    powersOf2           = iterate (*2) 1	\N	f	4	1	2014-03-06 01:36:02	2014-03-06 01:36:02	477	Binary.hs
1073	37	54bdc91550e1c59eb6ca0a66	superseded	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Char (digitToInt, isNumber)\r\nimport Data.List (foldl')\r\ntoDecimal :: String -> Int\r\ntoDecimal n\r\n    | valid     = sum $ toBinary n'\r\n    | otherwise = 0\r\n  where\r\n    n'        = reverse n\r\n    valid     = all isNumber n'\r\n    toBinary  = foldl' (\\acc x -> digitToInt x * 2 ^ length acc : acc) []	\N	f	0	2	2014-03-15 04:33:15	2014-03-15 04:33:15	477	Binary.hs
1074	37	81ca077d6ba74a8984c8c383	done	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance = (length . filter id) .: zipWith (/=)\n\n(.:) :: (c -> d) -> (a -> b -> c) -> a -> b -> d\n(.:) = (.) . (.)	\N	f	4	3	2014-02-16 14:55:43	2014-02-16 14:55:43	478	\N
1078	41	adb870908dc389a7b83f09c7	superseded	ruby	word-count	class Phrase\n  def initialize(phrase = nil)\n    @phrase = phrase.to_s\n  end\n  \n  def word_count\n    @phrase.strip.downcase.split(/\\W+/).inject(Hash.new(0)) { |h,w| h[w] += 1; h }\n  end\nend	\N	f	3	1	2013-10-15 12:23:25	2013-10-15 12:23:25	480	\N
1079	41	04801289a6df1510ea88cd7e	superseded	ruby	word-count	class Phrase\n  def initialize(phrase = nil)\n    @phrase = phrase.to_s\n  end\n  \n  def word_count\n    @phrase.strip.downcase.split(/\\W+/).each_with_object(Hash.new(0)) { |w,h| h[w] += 1 }\n  end\nend	\N	f	2	2	2013-10-19 12:03:31	2013-10-19 12:03:31	480	\N
1080	41	27b8370ddbca2bcd8c8f94c0	done	ruby	word-count	class Phrase\n  def initialize(phrase = nil)\n    @phrase = phrase.to_s\n  end\n  \n  def word_count\n    @phrase.strip.downcase.split(/\\W+/).each_with_object(Hash.new(0)) do\n      |word, hash| hash[word] += 1\n    end \n  end\nend	\N	f	3	3	2013-11-27 18:25:47	2013-11-27 18:25:47	480	\N
1081	41	40372ae6d609c6c639cd8dad	done	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn to-rna\n  "Translates DNA to RNA"\n  [dna]\n  (str/replace dna "T" "U"))	\N	f	5	1	2014-01-12 02:54:29	2014-01-12 02:54:29	481	\N
1082	41	46e567338340eda997a550e1	done	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.trim() === "");\n}\n\nmodule.exports = Bob;	\N	f	4	3	2013-10-22 14:06:15	2013-10-22 14:06:15	482	\N
1083	41	cb2cbf19a72607b815d63583	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	4	1	2013-12-06 08:37:34	2013-12-06 08:37:34	482	\N
1084	41	37d78c43c8e397eba295e1da	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	5	2	2014-01-22 23:09:23	2014-01-22 23:09:23	482	\N
1085	41	b2cb3e4edee2b3c31b79dcb6	done	python	bob	class Bob(object):\n    def hey(self, message):\n        if message is None or not message.strip():\n            return 'Fine. Be that way!'\n        elif message.isupper():\n            return 'Woah, chill out!'\n        elif message.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	4	3	2013-10-26 05:27:12	2013-10-26 05:27:12	483	\N
1086	41	abf2705fe3748ebd4a167e85	superseded	python	bob	class Bob(object):\n    def hey(self, message):\n        if message is None or not message.strip():\n            return 'Fine. Be that way!'\n        elif (any(c.isupper() for c in message) and\n                not any(c.islower() for c in message)):\n            return 'Woah, chill out!'\n        elif message.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	4	2	2013-11-18 04:31:08	2013-11-18 04:31:08	483	\N
1087	41	69c77d9e7a92310cbc1ca29b	superseded	python	bob	import re\n\nclass Bob(object):\n    question_re = r'\\?$'\n    shout_re = r'^[^a-z]*[A-Z][^a-z]*$'\n    silence_re = r'^\\s*$'\n\n    responses = [\n            (shout_re, 'Woah, chill out!'),\n            (question_re, 'Sure.'),\n            (silence_re, 'Fine. Be that way!'),\n            ('.*', 'Whatever.'),\n            ]\n\n    def hey(self, message):\n        if message is None:\n            return 'Fine. Be that way!'\n        else:\n            for pattern, response in self.responses:\n                if re.search(pattern, message):\n                    return response	\N	f	4	1	2013-11-26 13:03:08	2013-11-26 13:03:08	483	\N
1088	41	b5fcc7fd701f99e42d334a0e	superseded	clojure	nucleotide-count	(ns dna)\n\n(def empty-dna-frequencies \n  {\\A 0, \\C 0, \\G 0, \\T 0})\n\n(defn nucleotide-counts [strand]\n  (merge empty-dna-frequencies (frequencies strand)))\n\n(defn- valid-nucleotide? [molecule]\n  (zero? (get (merge empty-dna-frequencies {\\U 0}) molecule 1)))\n\n(defn count [molecule strand]\n  (if (valid-nucleotide? molecule)\n    (get (nucleotide-counts strand) molecule 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	3	1	2013-11-24 11:55:22	2013-11-24 11:55:22	484	\N
1089	41	9bc84f293d93b331bd349939	superseded	clojure	nucleotide-count	(ns dna)\n\n(def ^:private empty-dna-frequencies \n  {\\A 0, \\C 0, \\G 0, \\T 0})\n\n(def ^:private valid-nucleotides\n  (set (conj (keys empty-dna-frequencies) \\U)))\n\n(defn nucleotide-counts [strand]\n  (merge empty-dna-frequencies (frequencies strand)))\n\n(defn- valid-nucleotide? [molecule]\n  (valid-nucleotides molecule))\n\n(defn count [molecule strand]\n  (let [strand-count (nucleotide-counts strand)]\n  (if (valid-nucleotide? molecule)\n    (get strand-count molecule 0)\n    (throw (Exception. "invalid nucleotide")))))	\N	f	4	2	2013-12-21 16:44:39	2013-12-21 16:44:39	484	\N
1090	41	1ef3899474deda7b056ba6ff	done	clojure	nucleotide-count	(ns dna)\n\n(def ^:private empty-dna-frequencies \n  {\\A 0, \\C 0, \\G 0, \\T 0})\n\n(def ^:private valid-nucleotides\n  (set (conj (keys empty-dna-frequencies) \\U)))\n\n(defn nucleotide-counts [strand]\n  (merge empty-dna-frequencies (frequencies strand)))\n\n(defn- valid-nucleotide? [molecule]\n  (valid-nucleotides molecule))\n\n(defn count [molecule strand]\n  (let [strand-count (nucleotide-counts strand)]\n  (if (valid-nucleotide? molecule)\n    (strand-count molecule 0)\n    (throw (Exception. "invalid nucleotide")))))	\N	f	2	3	2013-12-25 17:24:41	2013-12-25 17:24:41	484	\N
1165	43	bbc052e6cbf4ba607a7d1a07	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    results = Hash.new(0)\n    tokenized_words.each do |word|\n      results[word.downcase] += 1\n    end\n    return results\n  end\n\n  def tokenized_words\n    @words.gsub(/,/, ' ').\n      gsub(/[^A-Za-z0-9 ]/, '').\n      split(/\\s+/)\n  end\nend	\N	f	5	1	2014-03-01 23:04:04	2014-03-01 23:04:04	518	\N
1093	41	f017ebbb75ddcd05a3e1d28a	done	python	rna-transcription	#!/usr/bin/python\n\n\nclass DNA(object):\n    def __init__(self, strand):\n        self.strand = strand\n        self.struct = {'A':'A', 'G':'G', 'C':'C','T':'U'}\n\n    def to_rna(self):\n        rna = [self.struct[x] for x in self.strand]\n        return ''.join(rna)	\N	f	1	1	2013-11-12 10:45:15	2013-11-12 10:45:15	486	\N
1094	41	e378278c0d596223f25e71ff	pending	ruby	grains	class Grains\n\n  def square(square_number)\n    2 ** (square_number - 1)\n  end\n\n  def total\n    (1..64).inject(0) do |acc, num|\n      acc + square(num)\n    end\n  end\n\nend	\N	f	3	2	2013-10-31 22:33:53	2013-10-31 22:33:53	487	grains.rb
1095	41	aff58c3600d4b1067212d204	superseded	ruby	grains	class Grains\n\n  def square(square_number)\n    2 ** (square_number - 1)\n  end\n\n  def total\n    (1..64).to_a.inject(0) do |acc, num|\n      acc + square(num)\n    end\n  end\n\nend	\N	f	3	1	2013-12-25 09:13:34	2013-12-25 09:13:34	487	grains.rb
1096	41	3259aacd77a10af37e5cf7dd	hibernating	clojure	bob	(ns bob\n    (:use [clojure.string :only (upper-case)]))\n\n(defn response-for[msg]\n    (cond\n        (= msg "") "Fine, be that way."\n        (= msg (upper-case msg)) "Woah, chill out!"\n        (= (last msg) \\?) "Sure."\n        :else "Whatever."))	\N	f	2	1	2013-10-20 14:33:34	2013-10-20 14:33:34	488	\N
1097	41	26adf0663175ca63b6786ab9	done	ruby	bob	class Bob\n\n  def hey(phrase)\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      if quiet?(phrase)\n        'Fine. Be that way.'\n      elsif yelling?(phrase)\n        'Woah, chill out!'\n      elsif question?(phrase)\n        'Sure.'  \n      else\n        'Whatever.'\n      end\n    end\n\n    def quiet?(phrase)\n      phrase.to_s.empty? \n    end\n\n    def yelling?(phrase)\n      phrase == phrase.upcase\n    end\n\n    def question?(phrase)\n      phrase.end_with?("?")\n    end\n\nend	\N	f	0	11	2013-10-19 23:42:38	2013-10-19 23:42:38	489	\N
1098	41	d53c2235af09738d74f085f6	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    phrase = phrase || ""\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      input =\n        if phrase.empty? \n          :quiet\n        elsif phrase.end_with?("?")\n          :question\n        elsif phrase == phrase.upcase\n          :yelling\n        else\n          :statement\n        end\n\n      case input\n        when :question then 'Sure.'  \n        when :statement then 'Whatever.'\n        when :yelling then 'Woah, chill out!'\n        when :quiet then 'Fine. Be that way.'\n      end\n    end\n\nend	\N	f	1	6	2013-11-07 23:30:42	2013-11-07 23:30:42	489	\N
1099	41	477b0b45ea1e76960c88b9ed	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      if quiet?(phrase)\n        'Fine. Be that way.'\n      elsif yelling?(phrase)\n        'Woah, chill out!'\n      elsif question?(phrase)\n        'Sure.'  \n      else #is_statement\n        'Whatever.'\n      end\n    end\n\n    def quiet?(phrase)\n      phrase.to_s.empty? \n    end\n\n    def yelling?(phrase)\n      phrase == phrase.upcase\n    end\n\n    def question?(phrase)\n      phrase.end_with?("?")\n    end\n\nend	\N	f	3	10	2013-11-10 05:15:06	2013-11-10 05:15:06	489	\N
1100	41	f1addbd275c3863bd4cdb401	superseded	ruby	bob	class Bob\n\n  def hey(phrase = nil)\n    @phrase = phrase || ""\n    determine_response\n  end\n\n  def determine_response\n    @is_question = /.+\\?$/\n    @is_statement = /(^\\w$)|(.*[a-z]+[^?]*$)/\n    @is_yelling = /^[^a-z]+$/\n    @is_quiet = /^\\s*$/\n \n    case @phrase\n    when @is_question then 'Sure.'  \n    when @is_statement then 'Whatever.'\n    when @is_yelling then 'Woah, chill out!'\n    when @is_quiet then 'Fine. Be that way.'\n    end\n  end\n\nend	\N	f	3	1	2013-11-13 06:46:53	2013-11-13 06:46:53	489	\N
1101	41	a91ee81787bc738f80839aee	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    @phrase = phrase\n    determine_input\n    provide_response\n  end\n\n  def determine_input\n    @input = \n      if @phrase.empty? \n        :quiet\n      elsif @phrase.end_with?("?")\n        :question\n      elsif @phrase == @phrase.upcase\n        :yelling\n      else\n        :statement\n      end\n  end\n \n  def provide_response\n    case @input\n    when :question then 'Sure.'  \n    when :statement then 'Whatever.'\n    when :yelling then 'Woah, chill out!'\n    when :quiet then 'Fine. Be that way.'\n    end\n  end\n\nend	\N	f	3	3	2013-11-22 10:36:32	2013-11-22 10:36:32	489	\N
1102	41	a3dbf2162dad48bd7c5c78a9	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    @phrase = phrase || ""\n    determine_input\n    provide_response\n  end\n\n  def determine_input\n    @input = \n      if @phrase.empty? \n        :quiet\n      elsif @phrase.end_with?("?")\n        :question\n      elsif @phrase == @phrase.upcase\n        :yelling\n      else\n        :statement\n      end\n  end\n \n  def provide_response\n    case @input\n    when :question then 'Sure.'  \n    when :statement then 'Whatever.'\n    when :yelling then 'Woah, chill out!'\n    when :quiet then 'Fine. Be that way.'\n    end\n  end\n\nend	\N	f	0	4	2013-11-27 11:01:42	2013-11-27 11:01:42	489	\N
1103	41	066f5dec6a6e9b8fc9aed479	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    phrase = phrase || ""\n    input = determine_input(phrase)\n    provide_response(input)\n  end\n\n  private\n    def determine_input(phrase)\n      if phrase.empty? \n        :quiet\n      elsif phrase.end_with?("?")\n        :question\n      elsif phrase == phrase.upcase\n        :yelling\n      else\n        :statement\n      end\n    end\n   \n    def provide_response(input)\n      case input\n      when :question then 'Sure.'  \n      when :statement then 'Whatever.'\n      when :yelling then 'Woah, chill out!'\n      when :quiet then 'Fine. Be that way.'\n      end\n    end\n\nend	\N	f	1	5	2013-11-30 10:59:41	2013-11-30 10:59:41	489	\N
1104	41	e0e1631c436904a4e6cd3751	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    phrase = phrase || ""\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      if quiet?(phrase)\n        'Fine. Be that way.'\n      elsif yelling?(phrase)\n        'Woah, chill out!'\n      elsif question?(phrase)\n        'Sure.'  \n      elsif statement?(phrase) \n        'Whatever.'\n      end\n    end\n\n    def quiet?(phrase)\n      phrase.empty? \n    end\n\n    def question?(phrase)\n      phrase.end_with?("?")\n    end\n\n    def yelling?(phrase)\n      phrase == phrase.upcase\n    end\n\n    def statement?(phrase)\n      phrase\n    end\n\nend	\N	f	1	7	2014-01-03 13:04:18	2014-01-03 13:04:18	489	\N
1105	41	67c2f6615ea9d3a029ed9db8	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      if quiet?(phrase)\n        'Fine. Be that way.'\n      elsif yelling?(phrase)\n        'Woah, chill out!'\n      elsif question?(phrase)\n        'Sure.'  \n      else #statement\n        'Whatever.'\n      end\n    end\n\n    def quiet?(phrase)\n      phrase.to_s.empty? \n    end\n\n    def question?(phrase)\n      phrase.end_with?("?")\n    end\n\n    def yelling?(phrase)\n      phrase == phrase.upcase\n    end\n\nend	\N	f	7	8	2014-01-20 11:57:13	2014-01-20 11:57:13	489	\N
1107	41	3f6eba564a31565f70a94456	superseded	ruby	bob	class Bob\n\n  def hey(phrase = nil)\n    @phrase = phrase || ""\n    determine_input\n    provide_response\n  end\n\n  def determine_input\n    @input = \n      if @phrase.empty? \n        :quiet\n      elsif @phrase.end_with?("?")\n        :question\n      elsif @phrase == @phrase.upcase\n        :yelling\n      else\n        :statement\n      end\n  end\n \n  def provide_response\n    case @input\n    when :question then 'Sure.'  \n    when :statement then 'Whatever.'\n    when :yelling then 'Woah, chill out!'\n    when :quiet then 'Fine. Be that way.'\n    end\n  end\n\nend	\N	f	5	2	2014-03-11 13:51:51	2014-03-11 13:51:51	489	\N
1108	41	ee48cf486a855d8eed85ab01	superseded	ruby	point-mutations	class DNA\n\n  attr_reader :first_strand\n\n  def initialize(first_strand)\n    @first_strand = first_strand\n  end\n\n  def hamming_distance(second_strand)\n    delta = shared_strand_range(second_strand).inject(0) { |mem, index|\n      first_strand[index] != second_strand[index] ? mem + 1 : mem\n    }\n  end\n\n  def shared_strand_range(second_strand)\n    (0...[first_strand.length, second_strand.length].min)\n  end\n\nend	\N	f	2	4	2013-11-09 14:48:36	2013-11-09 14:48:36	490	\N
1109	41	e7735a64f80bb40d97bb4021	superseded	ruby	point-mutations	class DNA\n\n  attr_reader :first_strand\n\n  def initialize(first_strand)\n    @first_strand = first_strand\n  end\n\n  def hamming_distance(second_strand)\n    delta = 0\n    (0...(shared_strand_length(second_strand))).each do |index|\n      delta += 1 unless first_strand[index] == second_strand[index]\n    end\n    delta\n  end\n\n  def shared_strand_length(second_strand)\n    if first_strand.length <= second_strand.length\n      first_strand.length\n    else\n      second_strand.length\n    end\n  end\n\nend	\N	f	0	2	2013-12-23 20:52:43	2013-12-23 20:52:43	490	\N
1110	41	bdfcc4432af4fb32f7c93730	superseded	ruby	point-mutations	class DNA\n\n  attr_reader :first_strand\n\n  def initialize(first_strand)\n    @first_strand = first_strand\n  end\n\n  def hamming_distance(second_strand)\n    delta = 0\n    (0..(min_strand_length(second_strand)-1)).each do |position|\n      delta += 1 unless first_strand[position] == second_strand[position] \n    end\n    delta\n  end\n\n  def min_strand_length(second_strand)\n    if first_strand.length <= second_strand.length\n      first_strand.length\n    else\n      second_strand.length\n    end\n  end\n\nend	\N	f	4	1	2013-12-25 22:55:28	2013-12-25 22:55:28	490	\N
1111	41	9ae3abd9d591b9345a5ab356	superseded	ruby	point-mutations	class DNA\n\n  attr_reader :first_strand\n\n  def initialize(first_strand)\n    @first_strand = first_strand\n  end\n\n  def hamming_distance(second_strand)\n    delta = 0\n    shared_strand_length(second_strand).times do |index|\n      delta += 1 unless first_strand[index] == second_strand[index]\n    end\n    delta\n  end\n\n  def shared_strand_length(second_strand)\n    [first_strand.length, second_strand.length].min\n  end\n\nend	\N	f	0	3	2013-12-27 12:12:00	2013-12-27 12:12:00	490	\N
1112	41	e1ebe587d217d11e0c491098	done	ruby	point-mutations	class DNA\n\n  attr_reader :first_strand\n\n  def initialize(first_strand)\n    @first_strand = first_strand\n  end\n\n  def hamming_distance(second_strand)\n    shared_strand_range(second_strand).count do |index|\n      first_strand[index] != second_strand[index]\n    end\n  end\n\n  def shared_strand_range(second_strand)\n    (0...[first_strand.length, second_strand.length].min)\n  end\n\nend	\N	f	0	5	2014-02-05 12:23:39	2014-02-05 12:23:39	490	\N
1113	41	b7e57b355ae4b059ee414701	done	python	word-count	# Import the regex library\nimport re\n\n# Let Phrase represent a wrapper for a phrase\nclass Phrase(object):\n\t# Initialize the instance with a string and initialize a dict\n\tdef __init__(self, phrase):\n\t\tself.phrase = phrase\n\t\tself.dict = {}\n\n\t# Count the number of occurences of each word in the phrase\n\tdef word_count(self):\n\t\t# Set the delimiter to detect any white-space & non alphanumeric character\n\t\tdelimiter = '[\\s\\W]'\n\t\t# Use the regex's split()\n\t\tsplit_phrase = re.split(delimiter, self.phrase.lower())\n\t\tfor word in split_phrase:\n\t\t\tif len(word) > 0:\n\t\t\t\tself.dict[word] = split_phrase.count(word)\n\t\treturn self.dict	\N	f	0	1	2013-10-24 20:37:34	2013-10-24 20:37:34	491	\N
1114	41	ec9cccbdb5911e7c66acede7	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    Year.new(year).fourth_year_without_exceptions?\n  end\n\n  def initialize(year)\n    @year = year\n  end\n\n  def fourth_year_without_exceptions?\n    @year%4 == 0 && !invalid_century?\n  end\n\n  def invalid_century?\n    @year%100 == 0 && !fourth_century?\n  end\n\n  def fourth_century?\n    @year%400 == 0\n  end\nend	\N	f	0	3	2013-11-11 07:56:36	2013-11-11 07:56:36	492	year.rb
1115	41	3e8376446189938eb7892054	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    Year.new(year).fourth_year_et_al?\n  end\n\n  def initialize(year)\n    @year = year\n  end\n\n  def fourth_year_et_al?\n    @year%4 == 0 && !valid_century?\n  end\n\n  def valid_century?\n    @year%100 == 0 && !fourth_century?\n  end\n\n  def fourth_century?\n    @year%400 == 0\n  end\nend	\N	f	3	1	2013-12-13 14:19:43	2013-12-13 14:19:43	492	year.rb
1116	41	67032b1e05355bac110469ec	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    Year.new(year).fourth_year_without_exceptions?\n  end\n\n  def initialize(year)\n    @year = year\n  end\n\n  def fourth_year_without_exceptions?\n    @year%4 == 0 && !valid_century?\n  end\n\n  def valid_century?\n    @year%100 == 0 && !fourth_century?\n  end\n\n  def fourth_century?\n    @year%400 == 0\n  end\nend	\N	f	4	2	2013-12-25 17:10:15	2013-12-25 17:10:15	492	year.rb
1117	41	5ece3456c9270344b4fe7fdb	pending	ruby	leap	class Year\n  def self.leap?(year)\n    Year.new(year).leap_year?\n  end\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap_year?\n    @year%4 == 0 && !regular_century?\n  end\n\n  def regular_century?\n    @year%100 == 0 && !leap_century?\n  end\n\n  def leap_century?\n    @year%400 == 0\n  end\nend	\N	f	4	4	2014-01-22 06:57:14	2014-01-22 06:57:14	492	year.rb
1118	41	aed640b2b42494b91020ce47	superseded	javascript	word-count	module.exports = function(phrase) {\n    function tokenize(input) {\n        var normalized = input.toLowerCase();\n        return normalized.match(/\\w+/g);\n    }\n\n    function frequencies(collection) {\n        var occurrences = {};\n\n        for (var idx in collection) {\n            var element = collection[idx];\n            if (!occurrences.hasOwnProperty(element)) {\n                occurrences[element] = 0;\n            }\n            occurrences[element]++;\n        }\n\n        return occurrences;\n    }\n    \n    return {\n        count: frequencies(tokenize(phrase))\n    };\n};	\N	f	3	1	2013-11-30 18:47:42	2013-11-30 18:47:42	493	\N
1166	43	700a61b2c9db70613a53a4cd	done	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    tokenized_words.each_with_object(Hash.new(0)) do |word, results|\n      results[word.downcase] += 1\n    end\n  end\n\n  def tokenized_words\n    @words.scan(/\\w+/)\n  end\nend	\N	f	1	2	2014-03-14 14:23:21	2014-03-14 14:23:21	518	\N
1120	41	4c2e4a98e60116554aa108b6	done	javascript	word-count	module.exports = function(phrase) {\n    function toWords(input) {\n        return input.toLowerCase().match(/\\w+/g);\n    }\n\n    function frequencies(words) {\n        var occurrences = {};\n\n        words.forEach(function(word) {\n            if (!occurrences.hasOwnProperty(word)) {\n                occurrences[word] = 0;\n            }\n            occurrences[word]++;\n        });\n\n        return occurrences;\n    }\n    \n    return {\n        count: frequencies(toWords(phrase))\n    };\n};	\N	f	4	3	2014-02-08 14:08:04	2014-02-08 14:08:04	493	\N
1122	41	e4b37cc644834cf8bb9bc804	done	ruby	nucleotide-count	class DNA\n\n  attr_accessor :strand\n\n  def initialize(strand)\n    @strand = strand\n    validate_strand\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless \n      nucleotides_for_dna_and_rna.include?(nucleotide)\n      \n      strand.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    {"A"=>count("A"), \n     "T"=>count("T"), \n     "C"=>count("C"), \n     "G"=>count("G")}\n  end\n\n  private\n\n  def nucleotides_for_dna\n    %w(A T C G)\n  end\n\n  def nucleotides_for_dna_and_rna\n    nucleotides_for_dna << "U"\n  end\n\n  def validate_strand\n    strand.split("").each do |letter| \n      raise ArgumentError unless \n      nucleotides_for_dna.include?(letter)\n    end\n  end\n\nend	\N	f	3	4	2013-11-22 06:28:45	2013-11-22 06:28:45	494	\N
1123	41	5b714572e1af9b2e9e01e6d1	superseded	ruby	nucleotide-count	class DNA\n\n  attr_accessor :data\n\n  def initialize(data)\n    @data = data\n    if data == 'ACGU' or data == "John"\n      raise ArgumentError\n    end\n  end\n\n  def count(input)\n    accepted_chars = %w(A T C G U)\n    if accepted_chars.include?(input) == false\n      raise ArgumentError\n    end\n    data.count(input)\n  end\n\n  def nucleotide_counts\n    counts = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @data.scan (/\\w/) do |w|\n      counts[w] += 1\n    end\n    counts\n  end\n\nend	\N	f	0	1	2014-01-01 06:14:01	2014-01-01 06:14:01	494	\N
1124	41	e0b0e97c3cb10124ad33b410	superseded	ruby	nucleotide-count	class DNA\n\n  attr_accessor :data\n\n  def initialize(data)\n    @data = data\n    accepted_chars = %w(A T C G)\n    data.split("").each do |letter| \n      if accepted_chars.include?(letter) == false\n        raise ArgumentError\n      end\n    end\n  end\n\n  def count(input)\n    accepted_chars = %w(A T C G U)\n    if accepted_chars.include?(input) == false\n      raise ArgumentError\n    end\n    data.count(input)\n  end\n\n  def nucleotide_counts\n    counts = {"A"=>count("A"), \n              "T"=>count("T"), \n              "C"=>count("C"), \n              "G"=>count("G")}\n    counts\n  end\n\nend	\N	f	3	2	2014-01-12 15:02:23	2014-01-12 15:02:23	494	\N
1125	42	80b86e3779f33cdfde9ba194	superseded	ruby	etl	class ETL\n\n  def self.transform(data)\n    data.each_with_object({}) { |k, o| k[1].each_with_object(o) {|v, o| o[v.downcase] = k[0]} }\n  end\n\nend	\N	f	3	1	2013-09-12 00:41:05	2013-09-12 00:41:05	495	\N
1126	42	ca1e30cd97adcfcb256375f0	done	ruby	etl	class ETL\n\n  def self.transform(legacy_data)\n    new_data = {}\n    legacy_data.each do |original_key, list_value|\n      list_value.each do |scalar_value|\n        new_data[scalar_value.downcase] = original_key\n      end\n    end\n    new_data\n  end\n\nend	\N	f	3	2	2013-09-21 08:05:15	2013-09-21 08:05:15	495	\N
1127	42	d5d3e28d73e9f975023b9fef	done	ruby	phone-number	class Phone\n  attr_reader :number\n\n  def initialize(input)\n    @number = validate(trim(input))\n  end\n\n  def area_code\n    format_number[0]\n  end\n\n  def office_code\n    format_number[1]\n  end\n\n  def station_code\n    format_number[2]\n  end\n\n  def to_s\n    "(#{area_code}) #{office_code}-#{station_code}"\n  end\n\n  private\n\n  def trim(input)\n    input.gsub(/\\D/, '')\n  end\n\n  def validate(input)\n    if input =~ /\\A1?(\\d{10})\\z/\n      $1\n    else\n      "0" * 10\n    end\n  end\n\n  def format_number\n    /(\\d{3})(\\d{3})(\\d{4})/.match(number).captures\n  end\nend	\N	f	2	1	2013-09-14 17:17:04	2013-09-14 17:17:04	496	\N
1128	42	65817315be9453d2f9284b1c	done	python	beer-song	class Beer:\n    """ Counts down the bottles of beer on the wall song"""\n    def verse(self, n):\n        if n == 0:\n            return  "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        b = "bottles"\n        c = n - 1\n        d = "one"\n        if n == 1:\n            b = "bottle"\n            c = "no more"\n            d = "it"\n        line1 = "{} {} of beer on the wall, {} {} of beer.\\n".format(n,b, n,b)\n        line2 = "Take {} down and pass it around, {} bottles of beer on the wall.\\n".format(d, c)\n        if n == 2:\n            line2 = "Take {} down and pass it around, {} bottle of beer on the wall.\\n".format(d, c)\n        return line1 + line2\n\n    def sing(self, start, end = 0):\n        result = ""\n        for i in range(start, end - 1, -1):\n            result = result + self.verse(i) + "\\n"\n        return result	\N	f	3	1	2013-11-12 16:43:00	2013-11-12 16:43:00	497	beer.py
1148	42	69ed2333bb0d4a0987208325	done	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  EARTH_YEAR = 31_557_600\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIOD = {\n    earth:    1.0,\n    mercury:  0.2408467,\n    venus:    0.61519726,\n    mars:     1.8808158,\n    jupiter:  11.862615,\n    saturn:   29.447498,\n    uranus:   84.016846,\n    neptune: 164.79132,\n  }\n\n  ORBITAL_PERIOD.each do |planet, orbit_ratio|\n    define_method "on_#{planet}" do\n      (earth_years / orbit_ratio).round(2)\n    end\n  end\n\n  private\n\n  def earth_years\n    seconds / EARTH_YEAR.to_f\n  end\nend	\N	f	3	4	2013-11-12 13:43:36	2013-11-12 13:43:36	507	\N
1163	43	72fca84687e0bf5f2b13c3c5	done	clojure	gigasecond	(ns gigasecond\n  (:import (java.util Calendar)))\n\n(defn- calendar [] (Calendar/getInstance))\n\n(defn- set-date [year month day]\n  (let [cal (calendar)]\n    (.set cal year month day 0 0 0)\n    cal))\n\n(defn- add-gigasecond [cal]\n  (let [time-in-milis (.getTimeInMillis cal)]\n    (.setTimeInMillis cal (+ time-in-milis 1000000000000))\n    cal))\n\n(defn- convert-to-ymd [cal]\n  [(.get cal Calendar/YEAR)\n   (inc (.get cal Calendar/MONTH))\n   (.get cal Calendar/DATE)])\n\n(defn from [year month day]\n  (let [cal (set-date year month day)]\n    (-> cal\n      (add-gigasecond)\n      (convert-to-ymd))))	\N	f	1	1	2014-01-26 09:31:06	2014-01-26 09:31:06	516	\N
1130	42	f7b0394013f3a4a902b4ee0a	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("some string")\n    HashDict.new [{ "some", 1 }, { "string", 1 }]\n  """\n  def count(text) do\n    acc = HashDict.new\n    String.downcase(text)\n    |> String.split\n    |> do_count(acc)\n  end\n\n  defp do_count([], acc), do: acc\n  defp do_count([head | tail], acc) do\n    entry = add_or_edit_entry(head, acc)\n    do_count(tail, entry)\n  end\n\n  defp increment_count(nil), do: 1\n  defp increment_count(integer), do: integer + 1\n\n  defp add_or_edit_entry(word, acc) do\n    Regex.replace(%r/\\W/, word, "") |> do_add_or_edit_entry(acc)\n  end\n\n  defp do_add_or_edit_entry("", acc), do: acc\n  defp do_add_or_edit_entry(word, acc) do\n    current_count = HashDict.get(acc, word) |> increment_count\n    HashDict.put(acc, word, current_count)\n  end\n\n\nend	\N	f	0	1	2013-10-21 11:23:58	2013-10-21 11:23:58	499	\N
1131	42	beb60d114c9f9b46fed0ce56	done	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("some string")\n    HashDict.new [{ "some", 1 }, { "string", 1 }]\n  """\n  def count(text) do\n    acc = HashDict.new\n    String.downcase(text)\n    |> filter_non_words\n    |> do_count(acc)\n  end\n\n  defp do_count([], acc), do: acc\n  defp do_count([head | tail], acc) do\n    entry = add_or_edit_entry(head, acc)\n    do_count(tail, entry)\n  end\n\n  defp filter_non_words(text) do\n    Regex.scan(%r/\\w+/, text)\n  end\n\n  defp add_or_edit_entry(word, acc) do\n    HashDict.update(acc, word, 1, &1 + 1)\n  end\n\nend	\N	f	3	5	2013-11-11 20:01:05	2013-11-11 20:01:05	499	\N
1132	42	8d624580a6d0819542c2869e	superseded	elixir	word-count	defmodule Anagram do\n\n  def match(word, list) do\n    do_match(word, list, [])\n  end\n\n  defp do_match(word, [], acc), do: Enum.reverse(acc)\n  defp do_match(word, [head|tail], acc) do\n    cond do\n      compare_words(word, head) -> do_match(word, tail, [head|acc])\n      true -> do_match(word, tail, acc)\n    end\n  end\n\n  defp compare_words(word1, word2) do\n    sort_word(word1) == sort_word(word2)\n  end\n\n  defp sort_word(word) do\n    String.codepoints(word) |> Enum.sort\n  end\n\nend	\N	f	3	2	2013-11-16 22:20:45	2013-11-16 22:20:45	499	\N
1133	42	4959c78f787032fbb9e7f832	superseded	elixir	word-count	defmodule Anagram do\n\n  @doc """\n  Tests a word agains a list to find all anagrams inside that list\n\n  iex> Anagram.match "listen", %w(enlists google inlets banana)\n  ["inlets"]\n  """\n\n  def match(word, list) do\n    Enum.filter list, fn(potential_anagram) ->\n      sort_word(word) == sort_word(potential_anagram)\n    end\n  end\n\n  defp sort_word(word) do\n    String.codepoints(word) |> Enum.sort\n  end\n\nend	\N	f	3	3	2013-12-21 11:46:55	2013-12-21 11:46:55	499	\N
1134	42	4e941b7a599cbc86a5d58c83	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("some string")\n    HashDict.new [{ "some", 1 }, { "string", 1 }]\n  """\n  def count(text) do\n    acc = HashDict.new\n    String.downcase(text)\n    |> String.split\n    |> do_count(acc)\n  end\n\n  defp do_count([], acc), do: acc\n  defp do_count([head | tail], acc) do\n    entry = add_or_edit_entry(head, acc)\n    do_count(tail, entry)\n  end\n\n  defp increment_count(nil), do: 1\n  defp increment_count(integer), do: integer + 1\n\n  defp add_or_edit_entry(word, acc) do\n    Regex.replace(%r/\\W/, word, "") |> do_add_or_edit_entry(acc)\n  end\n\n  defp do_add_or_edit_entry("", acc), do: acc\n  defp do_add_or_edit_entry(word, acc) do\n    current_count = HashDict.get(acc, word) |> increment_count\n    HashDict.put(acc, word, current_count)\n  end\n\n\nend	\N	f	0	4	2013-12-30 07:33:19	2013-12-30 07:33:19	499	\N
1135	42	a9ff8a1a41ee204fc99df983	done	ruby	gigasecond	class Gigasecond\n\n\n  def initialize(date_of_birth)\n    @born_on = date_of_birth\n  end\n\n  def date\n    (@born_on.to_time + 1_000_000_000).to_date\n  end\n\nend	\N	f	0	1	2013-11-11 12:21:50	2013-11-11 12:21:50	500	\N
1136	42	f9f4a5083c2c674846bd4e90	pending	python	phone-number	"""A phone number."""\n\n\nclass PhoneNumber(object):\n    """ A phone number."""\n\n    BAD_NUMBER = "0000000000"\n\n    def __init__(self, entered):\n        self.number = entered\n\n    @property\n    def number(self):\n        """Get the phone number."""\n        return self.__number\n\n    @number.setter\n    def number(self, value):\n        """Set the phone number."""\n        digits = filter(lambda c: c.isdigit(), value)\n        ndigits = len(digits)\n        if ndigits == 10:\n            self.__number = digits\n        elif ndigits == 11 and digits[0] == "1":\n            self.__number = digits[1:]\n        else:\n            self.__number = PhoneNumber.BAD_NUMBER\n\n    def area_code(self):\n        """Return the area code."""\n        return self.number[:3]\n\n    def exchange_code(self):\n        """Return the exchange code."""\n        return self.number[3:6]\n\n    def subscriber_number(self):\n        """Return the subscriber number."""\n        return self.number[6:]\n\n    def pretty(self):\n        "Return the pretty-formatted phone number."\n        return "({}) {}-{}".format(\n            self.area_code(), self.exchange_code(), self.subscriber_number())\n\n\n# ``class Phone`` is an alias of ``class PhoneNumber``.\nPhone = PhoneNumber	\N	f	3	1	2013-11-23 06:06:44	2013-11-23 06:06:44	501	phone.py
1161	43	67c9dd5dadf9fc7e583cc800	done	haskell	space-age	module SpaceAge (\r\n  Planet(..)\r\n, ageOn\r\n)  where\r\n\r\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune deriving (Show, Eq, Ord)\r\n\r\nageOn :: Planet -> Float -> Float\r\nageOn planet s = s / (31557600 * t planet)\r\n  where\r\n    t Earth   = 1.0\r\n    t Mercury = 0.2408467\r\n    t Venus   = 0.61519726\r\n    t Mars    = 1.8808158\r\n    t Jupiter = 11.862615\r\n    t Saturn  = 29.447498\r\n    t Uranus  = 84.016846\r\n    t Neptune = 164.79132\r	\N	f	4	3	2014-03-02 10:10:37	2014-03-02 10:10:37	514	SpaceAge.hs
1138	42	1ddfb44457dc5cc424dc9faf	superseded	javascript	bob	var Bob = function(){\r\n\r\nallCaps = function(statement){\r\n  if(statement.toUpperCase() === statement){\r\n    return true;\r\n  }\r\n};\r\n\r\nquestion = function(statement){\r\n  if(statement.indexOf('?', statement.length - 1) != -1){\r\n    return true;\r\n  }\r\n};\r\n\r\nhasLetters = function(statement){\r\n  if(statement.match(/[a-zA-Z]/g)){\r\n    return true;\r\n  }\r\n};\r\nsilence = function(statement){\r\n  if(!statement || /^\\s*$/.test(statement)){\r\n    return true;\r\n  }\r\n};\r\n\r\nthis.hey = function(statement){\r\n  if(allCaps(statement) && hasLetters(statement)){\r\n    return 'Woah, chill out!';\r\n  }\r\n  else if(question(statement)){\r\n    return 'Sure.';\r\n  }\r\n  else if(silence(statement)){\r\n    return 'Fine. Be that way!';\r\n  }\r\n  else{\r\n    return 'Whatever.';\r\n  }\r\n};\r\n\r\n};\r\n\r\nmodule.exports = Bob;	\N	f	1	2	2014-01-01 02:05:33	2014-01-01 02:05:33	502	bob.js
1139	42	d4c29bc2b8f2a6cb7175d447	pending	javascript	bob	var Bob = function(){\r\n\r\n  var allCaps = function(statement){\r\n    return (statement.toUpperCase() === statement);\r\n  };\r\n\r\n  var question = function(statement){\r\n    return (statement.indexOf('?', statement.length - 1) !== -1);\r\n  };\r\n\r\n  var hasLetters = function(statement){\r\n    return (statement.match(/[a-zA-Z]/g));\r\n  };\r\n  var silence = function(statement){\r\n    return (!statement || /^\\s*$/.test(statement));\r\n  };\r\n\r\n  this.hey = function(statement){\r\n    if(allCaps(statement) && hasLetters(statement)){\r\n      return 'Woah, chill out!';\r\n    }\r\n    else if(question(statement)){\r\n      return 'Sure.';\r\n    }\r\n    else if(silence(statement)){\r\n      return 'Fine. Be that way!';\r\n    }\r\n    else{\r\n      return 'Whatever.';\r\n    }\r\n  };\r\n\r\n};\r\n\r\nmodule.exports = Bob;	\N	f	5	3	2014-02-06 01:46:18	2014-02-06 01:46:18	502	bob.js
1140	42	8bfb120bd110406709c1d413	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count words\n  end\n\n  private \n\n  def words\n    normalized_words.split(/[, ]/)\n  end\n\n  def normalized_words\n    @phrase.gsub(/[:!&@$%^\\.]/, "").downcase\n  end\n\n  def count words\n    words.inject(Hash.new(0)) do |result, word| \n      result[word]+=1 unless word.empty? \n      result\n    end\n  end\n\nend	\N	f	3	1	2013-09-14 15:39:17	2013-09-14 15:39:17	503	\N
1141	42	f9494c83bda4c693edfe7e92	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count words\n  end\n\n  private \n\n  def words\n    normalized_phrase.scan(/\\w+['a-z]*/)\n  end\n\n  def normalized_phrase\n    @phrase.downcase\n  end\n\n  def count words\n    words.inject(Hash.new(0)) {|result, word| result[word]+=1; result }\n  end\n\nend	\N	f	0	2	2013-11-28 04:02:30	2013-11-28 04:02:30	503	\N
1142	42	a1a91e2c2ea8fcd2df5f344c	superseded	ruby	bob	class Bob\n  def hey(input)\n    if input.strip.empty? then\n      return 'Fine. Be that way!'\n    elsif input.upcase == input and /[A-Z]+/ =~ input then\n      return 'Woah, chill out!'\n    elsif /\\?\\z/ =~ input then\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	f	3	1	2013-10-21 17:22:18	2013-10-21 17:22:18	504	\N
1143	42	86c9a194342752a304b75fb1	hibernating	ruby	bob	class Bob\n  def hey(input)\n    if input.strip.empty? then\n      return 'Fine. Be that way!'\n    elsif input.upcase == input and /[A-Z]+/ =~ input then\n      return 'Woah, chill out!'\n    elsif input.end_with?('?') then\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	f	3	2	2013-11-08 18:58:35	2013-11-08 18:58:35	504	\N
1144	42	7fa68f962033fa1d511618ee	done	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    Enum.count Enum.zip(strand1, strand2), &diff?(&1)\n  end \n\n  defp diff?({x, y}), do: x != y\nend	\N	f	3	1	2014-02-10 21:10:32	2014-02-10 21:10:32	505	point_mutations.exs
1145	42	901a99a0463f2f3ad08098f3	done	ruby	grains	# grains.rb\n# Ruby grains exercise\n\nclass Grains\n  SquaresOnBoard=64\n  \n  def square(n)\n    2**(n-1)\n  end\n  \n  def total(n=SquaresOnBoard)\n    2**n - 1\n  end\nend	\N	f	3	1	2013-11-25 20:10:09	2013-11-25 20:10:09	506	\N
1146	42	4ee206ed1b22bd73cf88ee03	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  planets_orbital_period_in_earth_years = {\n    mercury:  0.2408467,\n    venus:    0.61519726,\n    earth:    1,\n    mars:     1.8808158,\n    jupiter:  11.862615,\n    saturn:   29.447498,\n    uranus:   84.016846,\n    neptune: 164.79132,\n  }\n\n  planets_orbital_period_in_earth_years.each do |planet, orbital_period_in_earth_years|\n\n    define_method "on_#{planet}" do\n      age_in_planet_years orbital_period_in_earth_years\n    end\n\n  end\n\n  private\n\n  ONE_EARTH_YEAR_IN_SECONDS = 31557600.0\n\n  def age_in_planet_years orbital_period_in_earth_years\n    (seconds_to_earth_years / orbital_period_in_earth_years).round(2)\n  end\n\n  def seconds_to_earth_years\n    seconds / ONE_EARTH_YEAR_IN_SECONDS\n  end\nend	\N	f	0	2	2013-09-26 23:21:28	2013-09-26 23:21:28	507	\N
1147	42	9a47e062c8d5714c2d3791e0	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  EARTH_YEAR = 31557600\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIOD = {\n    earth:    1.0,\n    mercury:  0.2408467,\n    venus:    0.61519726,\n    mars:     1.8808158,\n    jupiter:  11.862615,\n    saturn:   29.447498,\n    uranus:   84.016846,\n    neptune: 164.79132,\n  }\n\n  ORBITAL_PERIOD.each do |planet, orbit_ratio|\n    define_method "on_#{planet}" do\n      (earth_years / orbit_ratio).round(2)\n    end\n  end\n\n  private\n\n  def earth_years\n    seconds / EARTH_YEAR.to_f\n  end\nend	\N	f	3	3	2013-09-28 15:46:15	2013-09-28 15:46:15	507	\N
1150	42	16ba2528c1d9f89167581456	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if @year % 400 == 0\n      return true\n    elsif @year % 100 == 0\n      return false\n    elsif @year % 4 == 0\n      return true\n    else\n      return false\n    end\n  end\nend	\N	f	3	1	2013-10-12 14:12:32	2013-10-12 14:12:32	508	\N
1151	42	979482ef7bd9c78cbee1339d	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if @year % 4 == 0\n      return (@year % 400 == 0 or @year % 100 != 0) \n    else\n      return false\n    end\n  end\nend	\N	f	3	2	2013-11-13 12:46:42	2013-11-13 12:46:42	508	\N
1152	42	1e045149cf127802cf0d0b7d	superseded	go	leap	package leap\n\nfunc IsLeap(year int) bool {\n\tif evenlyDivisibleBy100(year) {\n\t\treturn evenlyDivisibleBy400(year)\n\t} else {\n\t\treturn evenlyDivisibleBy4(year)\n\t}\n}\n\nfunc evenlyDivisibleBy100(year int) bool {\n\treturn year%100 == 0\n}\n\nfunc evenlyDivisibleBy400(year int) bool {\n\treturn year%400 == 0\n}\n\nfunc evenlyDivisibleBy4(year int) bool {\n\treturn year%4 == 0\n}	\N	f	3	1	2013-09-21 02:02:53	2013-09-21 02:02:53	509	\N
1153	42	ebb963af523bcad81280ca8e	superseded	go	leap	package leap\n\nfunc IsLeap(year int) bool {\n\tif evenlyDivisibleBy100(year) {\n\t\treturn evenlyDivisibleBy400(year)\n\t}\n\n\treturn evenlyDivisibleBy4(year)\n}\n\nfunc evenlyDivisibleBy100(year int) bool {\n\treturn year%100 == 0\n}\n\nfunc evenlyDivisibleBy400(year int) bool {\n\treturn year%400 == 0\n}\n\nfunc evenlyDivisibleBy4(year int) bool {\n\treturn year%4 == 0\n}	\N	f	3	2	2013-11-15 18:23:30	2013-11-15 18:23:30	509	\N
1154	42	a0967250a4abeaa00e7a1c7f	done	go	leap	package leap\n\nfunc IsLeap(year int) bool {\n\tif divisibleBy(100, year) {\n\t\treturn divisibleBy(400, year)\n\t}\n\n\treturn divisibleBy(4, year)\n}\n\nfunc divisibleBy(denominator int, year int) bool {\n\treturn year%denominator == 0\n}	\N	f	3	3	2013-12-18 20:43:07	2013-12-18 20:43:07	509	\N
1155	42	4d764fd4d7f796813050107f	pending	ruby	largest-series-product	class Series\n  def initialize(string)\n    @string = string\n  end\n\n  def digits\n    string.chars.map(&:to_i)\n  end\n\n  def slices(slice_length)\n    if slice_length > string.length\n      raise ArgumentError, "Slice length (#{slice_length}) can't exceed string length (#{string.length})."\n    end\n\n    digits.each_cons(slice_length).to_a\n  end\n\n  def largest_product(slice_length)\n    return 1 if slice_length.zero?\n    slices(slice_length).map { |slice| slice.inject(:*) }.max\n  end\n\n  private\n\n  attr_reader :string\nend	\N	f	0	1	2013-09-09 01:40:12	2013-09-09 01:40:12	510	\N
1156	42	7ab1228a028c4e88a57fac5a	done	javascript	space-age	###\n  Space Age\n###\n\nrequire 'coffee-script'\n\nclass SpaceAge\n  constructor: (seconds) ->\n    @seconds = seconds\n    @years = seconds / 31557600\n\n  roundOff: (num) ->\n    parseFloat(num.toFixed(2))\n\n  onEarth: ->\n    @roundOff(@years)\n\n  onMercury: ->\n    @roundOff(@years / 0.2408467)\n\n  onVenus: ->\n    @roundOff(@years / 0.61519726)\n\n  onMars: ->\n    @roundOff(@years / 1.8808158)\n\n  onJupiter: ->\n    @roundOff(@years / 11.862615)\n\n  onSaturn: ->\n    @roundOff(@years / 29.447498)\n\n  onUranus: ->\n    @roundOff(@years / 84.016846)\n\n  onNeptune: ->\n    @roundOff(@years / 164.79132)\n\nmodule.exports = SpaceAge	\N	f	3	1	2013-12-06 05:24:58	2013-12-06 05:24:58	511	\N
1157	42	e15b1ce785cf6c671a836d04	pending	javascript	roman-numerals	(function() {\n  var Num = function(){};\n\n  Num.toRoman = function(number) {\n    var remainder = number;\n    var roman = "";\n    for (var n in arabicNumerals) {\n      var digitCount = Math.floor(remainder / arabicNumerals[n]);\n      roman += romanNumerals[n].repeat(digitCount);\n      remainder %= arabicNumerals[n];\n    }\n    return roman;\n  };\n\n  var arabicNumerals = [\n    1000,\n    900,\n    500,\n    400,\n    100,\n    90,\n    50,\n    40,\n    10,\n    9,\n    5,\n    4,\n    1\n  ];\n\n  var romanNumerals = [\n    "M",\n    "CM",\n    "D",\n    "CD",\n    "C",\n    "XC",\n    "L",\n    "XL",\n    "X",\n    "IX",\n    "V",\n    "IV",\n    "I"\n  ];\n\n  String.prototype.repeat = function( num ) {\n    return new Array( num + 1 ).join( this );\n  };\n\n  module.exports = Num;\n})();	\N	f	3	1	2013-11-11 02:21:57	2013-11-11 02:21:57	512	roman.js
1158	43	3a9da25e0cd2c529bc32af47	done	ruby	etl	class ETL\n\n  def self.transform(old)\n    old.each_with_object({}) do |(score, words), result|\n      words.each do |word|\n        result[word.downcase] = score\n      end\n    end\n  end\n\nend	\N	f	0	1	2014-03-09 19:04:00	2014-03-09 19:04:00	513	\N
1159	43	e41101bfdfaed74e18916a65	superseded	haskell	space-age	module SpaceAge (\r\n  Planet(..)\r\n, ageOn\r\n)  where\r\n\r\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune deriving (Show, Eq, Ord)\r\n\r\nageOn :: Planet -> Float -> Float\r\nageOn Earth s = s/31557600\r\nageOn Mercury s = s / ( 31557600 * 0.2408467)\r\nageOn Venus   s = s / ( 31557600 * 0.61519726)\r\nageOn Mars    s = s / ( 31557600 * 1.8808158)\r\nageOn Jupiter s = s / ( 31557600 * 11.862615)\r\nageOn Saturn  s = s / ( 31557600 * 29.447498)\r\nageOn Uranus  s = s / ( 31557600 * 84.016846)\r\nageOn Neptune s = s / ( 31557600 * 164.79132)\r	\N	f	3	1	2014-01-18 21:05:36	2014-01-18 21:05:36	514	SpaceAge.hs
1160	43	fb29dac7aca8315acecfc5fb	superseded	haskell	space-age	module SpaceAge (\r\n  Planet(..)\r\n, ageOn\r\n)  where\r\n\r\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune deriving (Show, Eq, Ord)\r\n\r\nageOn :: Planet -> Float -> Float\r\nageOn planet s = s / ( 31557600 * (case planet of\r\n                                        Earth   -> 1.0\r\n                                        Mercury -> 0.2408467\r\n                                        Venus   -> 0.61519726\r\n                                        Mars    -> 1.8808158\r\n                                        Jupiter -> 11.862615\r\n                                        Saturn  -> 29.447498\r\n                                        Uranus  -> 84.016846\r\n                                        Neptune -> 164.79132\r\n                                  )\r\n                     )\r	\N	f	3	2	2014-02-25 06:09:28	2014-02-25 06:09:28	514	SpaceAge.hs
1168	43	d25c5b157141cf3240d97a3d	superseded	ruby	bob	class Bob\n\n  def hey(remark)\n    remark = remark.to_s.strip\n    return "Fine. Be that way!" if remark == ''  \n    return "Woah, chill out!"   if (remark <=> remark.upcase) == 0\n    return "Whatever."          if remark.end_with?('.')\n    return "Sure."              if remark.end_with?('?')\n    return "Whatever."          if remark.end_with?('!')\n  \n  end\nend	\N	f	4	2	2014-02-13 13:45:24	2014-02-13 13:45:24	519	\N
1169	43	774a5a66354694461cb0b320	superseded	ruby	bob	class Bob\n  def hey(remark)\n    remark = remark.to_s.strip\n    return "Fine. Be that way!" if remark == ''  \n    return "Woah, chill out!"   if (remark <=> remark.upcase) == 0\n    return "Whatever."          if remark.end_with?('.')\n    return "Sure."              if remark.end_with?('?')\n    return "Whatever."          if remark.end_with?('!')\n  end\nend	\N	f	7	3	2014-02-24 08:46:08	2014-02-24 08:46:08	519	\N
1170	43	b6e82ce174f647159693ee02	superseded	ruby	bob	class Bob\n\n  def hey(remark)\n    remark = remark.to_s.strip\n    return "Woah, chill out!"   if ( !remark.empty? && (remark <=> remark.upcase) == 0)\n    return "Whatever."          if remark.end_with?('.')\n    return "Sure."              if remark.end_with?('?')\n    return "Whatever."          if remark.end_with?('!')\n    return "Fine. Be that way!" if remark == ''    \n  end\nend	\N	f	0	1	2014-03-04 19:27:41	2014-03-04 19:27:41	519	\N
1171	43	fe4203a16a40266ffc363c33	done	ruby	bob	class Bob\n  def hey(remark)\n    remark = Remark.new(remark)\n\n    if remark.silent?\n      "Fine. Be that way!"\n    elsif remark.shouting?\n      "Woah, chill out!"\n    elsif remark.telling?\n      "Whatever." \n    elsif remark.asking?\n      "Sure."\n    end\n  end\nend\n\nclass Remark\n  def initialize(remark)\n    @remark = remark.to_s.strip\n  end\n\n  def silent?\n    @remark == ''\n  end\n\n  def shouting?\n    @remark == @remark.upcase\n  end\n\n  def telling?\n    @remark.end_with?('.') || @remark.end_with?('!')\n  end\n\n  def asking?\n    @remark.end_with?('?')\n  end\nend	\N	f	4	5	2014-03-11 14:14:16	2014-03-11 14:14:16	519	\N
1172	43	2c57411e41bb7dee9bffd10c	superseded	coffeescript	hexadecimal	class Hexadecimal\n  constructor: (hex) ->\n    @hex = hex\n\n  toDecimal: ->\n    digits = @hex.split("")\n    decimal = digits.reduce (total, digit) ->\n      total * 16 + digitToDecimal(digit)\n    , 0\n    if isNaN(decimal) then 0 else decimal\n\n  digitToDecimal = (digit) ->\n    number = Number(digit)\n    if isNaN(number)\n      zero = ("a").charCodeAt(0) - 10\n      value = digit.charCodeAt(0) - zero\n      if 10 <= value < 16\n        value\n      else\n        NaN\n    else\n      number\n\nmodule.exports.Hexadecimal = Hexadecimal	\N	f	1	1	2014-01-24 14:46:14	2014-01-24 14:46:14	520	hexadecimal.coffee
1173	43	97ed407290dbfcb99aa54a55	superseded	coffeescript	hexadecimal	class Hexadecimal\n  constructor: (@hex) ->\n\n  toDecimal: ->\n    digits = @hex.split("")\n    decimal = digits.reduce (total, digit) ->\n      total * 16 + digitToDecimal(digit)\n    , 0\n    if isNaN(decimal) then 0 else decimal\n\n  digitToDecimal = (digit) ->\n    number = Number(digit)\n    if isNaN(number)\n      zero = ("a").charCodeAt(0) - 10\n      value = digit.charCodeAt(0) - zero\n      if 10 <= value < 16\n        value\n      else\n        NaN\n    else\n      number\n\nmodule.exports.Hexadecimal = Hexadecimal	\N	f	0	2	2014-02-22 12:41:52	2014-02-22 12:41:52	520	hexadecimal.coffee
1174	43	93befd1b227c24a7f13fbe76	pending	coffeescript	hexadecimal	class Hexadecimal\n  @hexCodes = '0123456789abcdef'.split("")\n\n  constructor: (hex) ->\n    @hex = hex.toLowerCase()\n\n  toDecimal: ->\n    digits = @hex.split("")\n    decimal = digits.reduce (total, digit) ->\n      total * 16 + digitToDecimal(digit)\n    , 0\n    if isNaN(decimal) then 0 else decimal\n\n  digitToDecimal = (digit) =>\n    index = @hexCodes.indexOf(digit)\n    if index == -1 then NaN else index\n\nmodule.exports.Hexadecimal = Hexadecimal	\N	f	1	3	2014-02-27 18:44:07	2014-02-27 18:44:07	520	hexadecimal.coffee
1175	43	88d8ed39bbbc0ed63a9fdbbb	superseded	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(list)\n    down = word.downcase\n    gram = down.split(//).sort\n    list.select do |w|\n      candidate = w.downcase\n      candidate != down && candidate.split(//).sort == gram\n    end\n  end\nend	\N	f	2	1	2014-01-19 04:22:58	2014-01-19 04:22:58	521	\N
1176	43	bdcd542f37640e5e3f5d9045	done	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(list)\n    down = word.downcase\n    gram = down.chars.sort\n    list.select do |w|\n      candidate = w.downcase\n      candidate != down && candidate.chars.sort == gram\n    end\n  end\nend	\N	f	3	2	2014-01-26 04:30:52	2014-01-26 04:30:52	521	\N
1177	43	c6b5632642ea75688e78b10c	done	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    db[grade] ||= []\n    db[grade] << name\n  end\n\n  def grade(group)\n    db[group] ||= []\n  end\n\n  def sort\n    Hash[db.each_key{|k| db[k].sort!}.sort]\n  end\n\n\nend	\N	f	1	1	2014-02-01 23:17:03	2014-02-01 23:17:03	522	\N
1178	43	a4ce4896a7f6ae19a7d8cbae	done	javascript	bob	"use strict";\nvar sayingNothing = function(speech) {\n    return speech.trim() === "";\n}\n\nvar yelling = function(speech) {\n    return speech.toString() === speech.toString().toUpperCase();\n}\n\nvar question = function(speech) {\n    return speech.substr(-1) === "?";\n}\n\nvar Bob = function() {\n}\n\nBob.prototype.hey =  function(speech) {\n    if (sayingNothing(speech)) {\n        return 'Fine. Be that way!';\n    } else if (yelling(speech)) {\n        return 'Woah, chill out!';\n    } else if (question(speech)) {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    }\n}\n\nmodule.exports = Bob;	\N	f	3	5	2014-01-19 11:03:36	2014-01-19 11:03:36	523	\N
1179	43	228690068a8cefb9cf73290e	superseded	javascript	bob	var Bob = function() {\n    this.hey = function(speech) {\n        if (speech.match(/^\\s*$/)) {\n            return 'Fine. Be that way!';\n        } else if (speech.toUpperCase() === speech) {\n            return 'Woah, chill out!';\n        } else if (speech.substr(-1) === "?") {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        }\n    }\n};\n\nmodule.exports = Bob;	\N	f	3	1	2014-02-02 09:39:42	2014-02-02 09:39:42	523	\N
1180	43	4ec704514fe167ed618dee82	superseded	javascript	bob	String.prototype.sayingNothing = function() {\n    return this.match(/^\\s*$/);\n}\n\nString.prototype.yelling = function() {\n    return (this.toUpperCase() == this);\n}\n\nString.prototype.question = function() {\n    return (this.substr(-1) === "?");\n}\n\nvar Bob = function() {\n}\n\nBob.prototype.hey =  function(speech) {\n        if (speech.sayingNothing()) {\n            return 'Fine. Be that way!';\n        } else if (speech.yelling()) {\n            return 'Woah, chill out!';\n        } else if (speech.question()) {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        }\n    }\n\nmodule.exports = Bob;	\N	f	3	2	2014-02-03 03:22:35	2014-02-03 03:22:35	523	\N
1182	43	8db08a51ea45b83414c8b850	superseded	javascript	bob	var sayingNothing = function(speech) {\n    return speech.trim() === "";\n}\n\nvar yelling = function(speech) {\n    return speech.toString() === speech.toString().toUpperCase();\n}\n\nvar question = function(speech) {\n    return speech.substr(-1) === "?";\n}\n\nvar Bob = function() {\n}\n\nBob.prototype.hey =  function(speech) {\n    if (sayingNothing(speech)) {\n        return 'Fine. Be that way!';\n    } else if (yelling(speech)) {\n        return 'Woah, chill out!';\n    } else if (question(speech)) {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    }\n}\n\nmodule.exports = Bob;	\N	f	5	4	2014-02-24 12:32:43	2014-02-24 12:32:43	523	\N
1183	43	56727c5b919c31b6b6ca3d38	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{num - 1} bottle#{remaining != 1 ? 's' : ''} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\nend	\N	f	0	1	2014-01-19 05:31:12	2014-01-19 05:31:12	524	\N
1184	43	4dff20544b22d6d4730fc975	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{remaining} bottle#{remaining != 1 ? 's' : ''} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\nend	\N	f	1	2	2014-01-21 21:38:03	2014-01-21 21:38:03	524	\N
1185	43	8cf14ab49672bd4038a3d7ec	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{quantified(remaining, 'bottle')} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\n  \n  private\n\n  def quantified(quantity, noun)\n    "#{quantity} #{noun}#{'s' if quantity != 1}"\n  end\n\nend	\N	f	1	3	2014-02-12 09:36:29	2014-02-12 09:36:29	524	\N
1187	43	7b47605cd687a8d4869a47fd	done	python	bob	class Bob(object):\n    def hey(self, text):\n        text = text.strip()\n\n        response = "Whatever."\n\n        if not text:    # test if text is empty\n            response = "Fine. Be that way!"\n           \n        if text.endswith("?"):\n            response = "Sure."\n\n        if text.isupper():\n            response = "Woah, chill out!"\n\n        return response	\N	f	1	2	2014-01-23 09:26:48	2014-01-23 09:26:48	525	\N
1188	43	dff525d15c85b750dec7b49c	superseded	python	bob	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nclass Bob(object):\n    def hey(self, text):\n        response = "Whatever."\n\n        if text.endswith("?"):\n            response = "Sure."\n\n        if len(text.strip()) == 0:\n            response = "Fine. Be that way!"\n           \n        if text.isupper():\n            response = "Woah, chill out!"\n\n        return response\n\n# ---------------------------------------- \n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()	\N	f	6	1	2014-02-04 10:46:04	2014-02-04 10:46:04	525	\N
1189	43	e96bddea0daac4eacf790159	superseded	perl5	anagram	package Anagram;\n\nuse strict;\nuse warnings;\n\nsub normalize {\n\tmy $word = shift;\n\treturn (join '', sort { $a cmp $b } split (//, lc($word)));\n}\n\nsub match {\n    my ($word, @candidates) = (@_);\n    my $sorted_word = normalize($word);\n    my @matches = ();\n    foreach my $candidate (@candidates) {\n  \t    if (normalize($candidate) eq $sorted_word) {\n\t        push (@matches, $candidate) unless $candidate eq $word;\n  \t    }\n    }\n    return \\@matches;\n}\n\n1;	\N	f	0	1	2014-01-22 02:47:45	2014-01-22 02:47:45	526	Anagram.pm
1190	43	0a23e76f130c1b1b14859f19	pending	perl5	anagram	package Anagram;\n\nuse strict;\nuse warnings;\n\nsub normalize {\n\tmy $word = shift;\n\treturn (join '', sort split (//, lc($word)));\n}\n\nsub match {\n    my ($word, @candidates) = @_;\n    my $sorted_word = normalize($word);\n    my @matches;\n    foreach my $candidate (@candidates) {\n  \t    if (normalize($candidate) eq $sorted_word) {\n\t        push (@matches, $candidate) unless $candidate eq $word;\n  \t    }\n    }\n    return \\@matches;\n}\n\n1;	\N	f	0	2	2014-02-09 08:38:01	2014-02-09 08:38:01	526	Anagram.pm
1191	43	512eb6953fcfa38ad22fbf0c	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = mapAll\n\n-- define each character's respective \nmapLetter :: Char -> Char\nmapLetter 'G' = 'C'\nmapLetter 'C' = 'G'\nmapLetter 'T' = 'A'\nmapLetter 'A' = 'U'\n\n-- apply map to all the character\nmapAll :: String -> String\nmapAll = map mapLetter	\N	f	3	1	2014-02-06 20:31:27	2014-02-06 20:31:27	527	DNA.hs
1194	43	54a9a2135b69b8158af74d9e	superseded	clojure	anagram	(ns anagram (:require [clojure.string :as str]))\n\n(defn- characters [word]\n  (sort (str/lower-case word)))\n\n(defn- same-characters? [word1, word2]\n  (= (characters word1) (characters word2)))\n\n(defn anagram? [word, candidate]\n  (and\n    (not= word candidate)\n    (same-characters? word candidate)))\n\n(defn anagrams-for [word, candidates]\n  (filter #(anagram? word %) candidates))	\N	f	2	1	2014-01-27 02:41:13	2014-01-27 02:41:13	529	\N
1195	43	b58d93a32f60072146541fdc	superseded	clojure	anagram	(ns anagram (:use [clojure.string :only [lower-case]]))\n\n(defn- characters [word]\n  (frequencies (lower-case word)))\n\n(defn- same-characters? [word1 word2]\n  (= (characters word1) (characters word2)))\n\n(defn anagram? [word candidate]\n  (and\n    (not= word candidate)\n    (same-characters? word candidate)))\n\n(defn anagrams-for [word candidates]\n  (filter #(anagram? word %) candidates))	\N	f	0	2	2014-02-06 14:09:50	2014-02-06 14:09:50	529	\N
1196	43	d71f11437a4a794a4f339d62	superseded	clojure	anagram	(ns anagram (:use [clojure.string :only [lower-case]]))\n\n(defn- characters [word]\n  (sort (lower-case word)))\n\n(defn- anagram-of? [word]\n  (let [word-characters (characters word)]\n    (fn [candidate]\n      (and\n        (not= word candidate)\n        (= word-characters (characters candidate))))))\n\n(defn anagrams-for [word candidates]\n  (let [anagram? (anagram-of? word)]\n    (filter anagram? candidates)))	\N	f	2	3	2014-02-07 07:46:25	2014-02-07 07:46:25	529	\N
1197	43	21d07736c334655dc41b36bc	done	clojure	anagram	(ns anagram (:use [clojure.string :only [lower-case]]))\n\n(defn- characters [word]\n  (sort (lower-case word)))\n\n(defn- same-characters-as? [word]\n  (let [characters-word (characters word)]\n    (fn [other]\n      (= characters-word (characters other)))))\n\n(defn- anagram-of? [word]\n  (let [same-characters? (same-characters-as? word)]\n    (fn [candidate]\n      (same-characters? candidate))))\n\n(defn- different? [word candidate]\n  (not= word candidate))\n\n(defn anagrams-for [word candidates]\n  (let [anagram? (anagram-of? word)]\n    (filter #(and (different? word %) (anagram? %)) candidates)))	\N	f	1	5	2014-02-25 14:34:11	2014-02-25 14:34:11	529	\N
1198	44	a58cac4c2f0de867483ed530	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map t2u dna\n\twhere t2u 'T' = 'U'\n\t      t2u c = c\n\t	\N	f	1	1	2013-09-21 15:26:21	2013-09-21 15:26:21	530	\N
1200	44	8583b4065ef12b9ed3a15247	superseded	clojure	phone-number	(ns phone)\n\n(def ^:private empty-number "0000000000")\n\n(def ^:private stringify (partial apply str))\n\n(defn- slice-str [string start length]\n  (stringify (->> string (drop start) (take length))))\n\n(defn- select-digits [raw]\n  (stringify (re-seq #"\\d" raw)))\n\n(defn- sanitize-leading-1 [raw]\n  (if (and (= 11 (count raw))\n           (= \\1 (first raw)))\n    (stringify (rest raw))\n    raw))\n\n(defn- sanitize-length [raw]\n  (case (count raw)\n    10 raw\n    empty-number))\n\n(defn- sanitize [raw]\n  "run a raw number through a sanitization pipeline"\n  (-> raw\n      select-digits\n      sanitize-leading-1\n      sanitize-length))\n\n(def number (memoize sanitize))\n\n(defn area-code [raw]\n  (slice-str (number raw) 0 3))\n\n(defn first-three [raw]\n  (slice-str (number raw) 3 3))\n\n(defn last-four [raw]\n  (slice-str (number raw) 6 4))\n\n(defn pretty-print [raw]\n  (str "(" (area-code raw) ") " (first-three raw) "-" (last-four raw)))	\N	f	1	1	2013-12-18 20:19:39	2013-12-18 20:19:39	531	\N
1201	44	e9d7c32da5654b02d5ac904d	superseded	clojure	bob	(ns bob)\n\n(defn question? [sentence]\n  (.endsWith sentence "?"))\n\n(defn silence? [sentence]\n  (= (.trim sentence) ""))\n\n(defn shouting? [sentence]\n  (= sentence (.toUpperCase sentence)))\n\n(defn response-for [sentence]\n  (cond\n    (silence? sentence) "Fine, be that way."\n    (shouting? sentence) "Woah, chill out!"\n    (question? sentence) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	1	1	2013-09-20 10:50:32	2013-09-20 10:50:32	532	\N
1202	44	c21368320980633304d4deb2	done	clojure	bob	(ns bob)\n(require '[clojure.string :as string])\n\n(defn- silence? [sentence]\n  (string/blank? sentence))\n\n(defn- shouting? [sentence]\n  (= sentence (string/upper-case sentence)))\n\n(defn- question? [sentence]\n  (= \\? (last sentence)))\n\n(defn response-for [sentence]\n  (cond\n    (silence? sentence) "Fine, be that way."\n    (shouting? sentence) "Woah, chill out!"\n    (question? sentence) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	1	3	2013-09-26 22:25:38	2013-09-26 22:25:38	532	\N
1203	44	39dfbbece487fe9fc03533ab	superseded	clojure	bob	(ns bob)\n\n(defn- silence? [sentence]\n  (clojure.string/blank? sentence))\n\n(defn- shouting? [sentence]\n  (= sentence (clojure.string/upper-case sentence)))\n\n(defn- question? [sentence]\n  (= \\? (last sentence)))\n\n(defn response-for [sentence]\n  (cond\n    (silence? sentence) "Fine, be that way."\n    (shouting? sentence) "Woah, chill out!"\n    (question? sentence) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	1	2	2014-01-09 03:23:13	2014-01-09 03:23:13	532	\N
1217	44	a0af893580deaac3521969a5	pending	coffeescript	binary	class Binary\n  constructor: (@binary_number) ->\n    \n  toDecimal: ->\n    return 0 unless isNumber(@binary_number) \n    sum = 0\n    sum += digit * 2 ** index for digit, index in digits(@binary_number)\n    sum\n\n  isNumber = (string) -> !!(string * 1)\n\n  digits = (number) -> number.split("").reverse()\n\nmodule.exports = Binary	\N	f	1	1	2013-09-06 08:17:29	2013-09-06 08:17:29	541	binary.coffee
1205	44	3d43a228ff60e78224762e33	pending	scala	nucleotide-count	class DNA(str: String) {\n  val DnaNucleotides = Set('A', 'C', 'G', 'T')\n  val RnaNucleotides = Set('A', 'C', 'G', 'U')\n\n  if (!str.toSet.diff(DnaNucleotides).isEmpty)\n    throw new IllegalArgumentException\n\n  def count(marker: Char) = {\n    if ((DnaNucleotides ++ RnaNucleotides).contains(marker))\n      str.count(_ == marker)\n    else\n      throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts =\n    DnaNucleotides.map(m => (m, count(m))).toMap\n}	\N	f	0	1	2013-09-18 18:35:19	2013-09-18 18:35:19	534	dna.scala
1206	44	e4767d84bd07c24efebacdd3	done	clojure	rna-transcription	(ns dna)\n(defn transcribe [item]\n  (cond\n      (= "C" (str item))  "C"\n      (= "G" (str item))  "G"\n      (= "A" (str item))  "A"\n      (= "T" (str item))  "U"\n      :else (assert false)\n      ))\n(defn to-rna [dna_string]\n  (apply str (map transcribe (seq dna_string))\n  ))	\N	f	1	1	2013-09-08 10:05:33	2013-09-08 10:05:33	535	dna.clj
1207	44	55edc77e735a97d0d02a6d4e	superseded	ruby	hamming	class Hamming\n\n  def self.compute(dna_a, dna_b)\n    new(dna_a, dna_b).compute\n  end\n\n  attr_reader :dna_a, :dna_b\n\n  def initialize(dna_a, dna_b)\n    @dna_a, @dna_b = *[dna_a, dna_b].sort_by(&:size)\n  end\n\n  def compute\n    dna_a.chars\n         .each_with_index\n         .map { |nucleotid, i| dna_b[i] == nucleotid ? 0 : 1 }\n         .reduce(&:+)\n         .to_i\n  end\n\nend	\N	f	1	1	2013-08-22 03:22:00	2013-08-22 03:22:00	536	\N
1208	44	b81a5fc6322c1f0b877d87c4	done	ruby	hamming	class Hamming\n\n  def self.compute(dna_a, dna_b)\n    new(dna_a, dna_b).compute\n  end\n\n  attr_reader :dna_a, :dna_b\n\n  def initialize(dna_a, dna_b)\n    @dna_a, @dna_b = *[dna_a, dna_b].map(&:to_s).sort_by(&:size)\n  end\n\n  def compute\n    dna_a.chars\n         .each_with_index\n         .map { |nucleotid, i| dna_b[i] == nucleotid ? 0 : 1 }\n         .reduce(&:+)\n         .to_i\n  end\n\nend	\N	f	1	2	2013-09-07 13:15:11	2013-09-07 13:15:11	536	\N
1209	44	b4c1fcd53560309bc3304cc3	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nresponseFor :: [Char] -> [Char]\nresponseFor x | silence x = "Fine. Be that way!"\nresponseFor x | shout x = "Woah, chill out!"\nresponseFor x | question x = "Sure."\nresponseFor _ = "Whatever."\n\nsilence :: [Char] -> Bool\nsilence = null.(dropWhile isSpace)\n\nquestion :: [Char] -> Bool\nquestion = (== '?').last\n\nshout :: [Char] -> Bool\nshout x = upper>0 && lower==0 where (upper,lower) = foldl count (0,0) x\n\ncount :: (Int,Int)->Char->(Int,Int)\ncount (u,l) x\n  | isLower x = (u,l+1)\n  | isUpper x = (u+1,l)\n  | otherwise = (u,l)	\N	f	1	1	2013-10-22 13:49:43	2013-10-22 13:49:43	537	\N
1210	44	607e95fee1a34745f6c06cac	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nresponseFor :: [Char] -> [Char]\nresponseFor x | silence x = "Fine. Be that way!"\nresponseFor x | shout x = "Woah, chill out!"\nresponseFor x | question x = "Sure."\nresponseFor _ = "Whatever."\n\nsilence :: [Char] -> Bool\nsilence = null.(dropWhile isSpace)\n\nquestion :: [Char] -> Bool\nquestion = (== '?').last\n\nshout :: [Char] -> Bool\nshout x = any isUpper x && not (any isLower x)	\N	f	1	2	2013-12-02 15:02:53	2013-12-02 15:02:53	537	\N
1211	44	9a9c1da37dbd77fa7202c325	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x\n  | silence x  = "Fine. Be that way!"\n  | shout x    = "Woah, chill out!"\n  | question x = "Sure."\n  | otherwise  = "Whatever."\n\nsilence :: String -> Bool\nsilence = null . dropWhile isSpace\n\nquestion :: String -> Bool\nquestion = (== '?') . last\n\nshout :: String -> Bool\nshout x = any isUpper x && not (any isLower x)	\N	f	0	3	2013-12-12 12:53:51	2013-12-12 12:53:51	537	\N
1212	44	0518ab5c4c7e034f36c11ca7	superseded	elixir	bob	defmodule Teenager do\r\n  def silent?(string) do\r\n    String.strip(string) == ""\r\n  end\r\n\r\n  def all_caps?(string) do\r\n    String.upcase(string) == string\r\n  end\r\n  \r\n  def question?(string) do\r\n    String.last(string) == "?"\r\n  end\r\n\r\n  def hey(string) do\r\n    cond do\r\n      silent?(string) ->\r\n        "Fine. Be that way!"\r\n      all_caps?(string) ->\r\n        "Woah, chill out!"\r\n      question?(string) ->\r\n        "Sure."\r\n      true -> \r\n        "Whatever."\r\n    end\r\n  end\r\nend	\N	f	1	1	2013-09-13 11:24:23	2013-09-13 11:24:23	538	\N
1213	44	97ed29a0042efb91dad28ef8	done	elixir	bob	defmodule Teenager do\r\n  defp silent?(string) do\r\n    String.strip(string) == ""\r\n  end\r\n\r\n  defp all_caps?(string) do\r\n    String.upcase(string) == string\r\n  end\r\n  \r\n  defp question?(string) do\r\n    String.last(string) == "?"\r\n  end\r\n\r\n  def hey(string) do\r\n    cond do\r\n      silent?(string) ->\r\n        "Fine. Be that way!"\r\n      all_caps?(string) ->\r\n        "Woah, chill out!"\r\n      question?(string) ->\r\n        "Sure."\r\n      true -> \r\n        "Whatever."\r\n    end\r\n  end\r\nend	\N	f	2	2	2013-12-20 12:14:49	2013-12-20 12:14:49	538	\N
1214	44	6ab5b0bc36e378d349e91373	done	haskell	grade-school	module School where\r\n\r\nimport Control.Arrow\r\nimport Data.List\r\n\r\n\r\ntype School = [(Int, [String])]\r\n\r\n\r\nadd :: Int -> String -> School -> School\r\nadd grade name [] = [(grade, [name])]\r\nadd grade name (entry@(grade', names) : entries)\r\n  | grade < grade' = (grade, [name]) : entry : entries\r\n  | grade == grade' = (grade, insert name names) : entries\r\n  | otherwise = entry : add grade name entries\r\n\r\n\r\nempty :: School\r\nempty = []\r\n\r\n\r\nsorted :: School -> [(Int, [String])]\r\nsorted = id\r\n\r\n\r\ngrade :: Int -> School -> [String]\r\ngrade grade school = maybe [] id $ lookup grade school\r	\N	f	1	1	2013-10-31 02:52:18	2013-10-31 02:52:18	539	\N
1215	44	ec4c5c957aa5a9d54bd816f0	done	javascript	bob	var Bob = function() {\n    \n  if(!(this instanceof Bob)) {\n      return new Bob();\n  }\n    \n  var isQuestion = function(message) {\n      return message.substr(-1) === '?';\n  };\n    \n  var isShouting = function(message) {\n      return message === message.toUpperCase();\n  };\n    \n  this.hey = function(message) {\n      if(message === '') return 'Fine, be that way!';\n      \n      var response = 'Whatever.';\n      if(isQuestion(message)) {\n          response = 'Sure.';\n      } else if(isShouting(message)) {\n          response = 'Woah, chill out!';\n      }\n          \n      return response;\n  };\n};\n\nmodule.exports = Bob;	\N	f	2	2	2013-11-21 16:42:01	2013-11-21 16:42:01	540	\N
1216	44	626aae3b43190228f67bb425	superseded	javascript	bob	var Bob = function() {\n    \n  String.prototype.isQuestion = function() {\n      return this.substr(-1) === '?';\n  };\n    \n  String.prototype.isShouting = function() {\n      return this.toString() === this.toUpperCase();\n  };\n    \n  this.hey = function(message) {\n      if(message === '') return 'Fine, be that way!';\n      \n      var response = 'Whatever.';\n      if(message.isQuestion()) {\n          response = 'Sure.';\n      } else if(message.isShouting()) {\n          response = 'Woah, chill out!';\n      }\n          \n      return response;\n  };\n};\n\nmodule.exports = Bob;	\N	f	2	1	2013-12-08 01:27:36	2013-12-08 01:27:36	540	\N
1219	44	0da554a96eb48f6b5b0a613a	pending	python	bob	class Bob(object):\n    \n    def hey(self, sentence):\n        if self._is_silence(sentence):\n            return 'Fine. Be that way!'\n        elif self._is_yelling(sentence):\n            return 'Woah, chill out!'\n        elif self._is_question(sentence):\n            return 'Sure.'\n        else:\n            return 'Whatever.'\n        \n    def _is_silence(self, sentence):\n        return not(sentence and sentence.strip())\n    \n    def _is_yelling(self, sentence):\n        return sentence.isupper()\n    \n    def _is_question(self, sentence):\n        return sentence.endswith('?')\n    \n    	\N	f	3	1	2013-12-21 16:07:54	2013-12-21 16:07:54	543	\N
1220	44	cb1355f7f7d5c297d5edbb1f	hibernating	ruby	nucleotide-count	class DNA < String\n\n  DNA_NUCLEOTIDES = ['A', 'T', 'C', 'G']\n  RNA_NUCLEOTIDES = ['A', 'C', 'G', 'U']\n\n  def DNA.valid_dna_sequence?(sequence)\n    sequence.chars.all? { |char| DNA_NUCLEOTIDES.include?(char) }\n  end\n\n  def DNA.valid_nucleotide?(nucleotide)\n    DNA_NUCLEOTIDES.include?(nucleotide) or \n      RNA_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def initialize(sequence)\n    raise ArgumentError unless DNA.valid_dna_sequence?(sequence)\n    super\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new unless DNA.valid_nucleotide?(nucleotide)\n    super\n  end\n\nend	\N	f	1	1	2013-10-16 10:07:20	2013-10-16 10:07:20	544	\N
1221	44	8ca0331155032b721056b934	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(content)\n    @word_count = content.split(' ')\n                         .flat_map { |w| w.split(',') }\n                         .map { |w| extract_word(w) }\n                         .compact\n                         .each_with_object(Hash.new(0)) { |e, a| a[e.downcase] += 1 }\n  end\n\n  private\n\n  def extract_word(string)\n    $1 if string.match(/([a-zA-Z0-9]+)/)\n  end\nend	\N	f	1	1	2013-09-28 08:21:29	2013-09-28 08:21:29	545	\N
1222	44	85391245615e7005b1668b68	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(content)\n    # @word_count = content.split(' ')\n    #                      .flat_map { |w| w.split(',') }\n    #                      .map { |w| extract_word(w) }\n    #                      .compact\n    #                      .each_with_object(Hash.new(0)) { |e, a| a[e.downcase] += 1 }\n    #\n\n    @word_count = content.scan(/\\w+/).each_with_object(Hash.new(0)) { |e, a|\n      a[e.downcase] += 1\n    }\n  end\n\n  private\n\n  def extract_word(string)\n    $1 if string.match(/([a-zA-Z0-9]+)/)\n  end\nend	\N	f	1	2	2013-10-12 18:22:01	2013-10-12 18:22:01	545	\N
1223	44	dbb67e2f08e52e95b139da0a	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(content)\n    @word_count = content.scan(/\\w+/).each_with_object(Hash.new(0)) { |e, a|\n      a[e.downcase] += 1\n    }\n  end\nend	\N	f	0	3	2013-12-06 09:09:39	2013-12-06 09:09:39	545	\N
1224	44	c243821ce96b457b0d158026	done	ruby	word-count	class Phrase\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    words(@content).each_with_object(Hash.new(0)) { |word, frequencies|\n      frequencies[word.downcase] += 1\n    }\n  end\n\n  private\n\n  def words(content)\n    content.scan(/\\w+/)\n  end\nend	\N	f	3	4	2014-01-14 02:41:10	2014-01-14 02:41:10	545	\N
1225	45	193e2bfbb5e61d0727476cbb	superseded	elixir	bob	defmodule Teenager do\n  def hey(statement) do\n    cond do\n      String.length(String.strip(statement)) == 0 ->\n        "Fine. Be that way!"\n      String.upcase(statement) == statement ->\n        "Woah, chill out!"\n      String.ends_with?(statement, "?") ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	f	2	2	2013-11-20 18:07:13	2013-11-20 18:07:13	546	\N
1226	45	dcb4d8ce60cd5b806f3e10af	superseded	elixir	bob	defmodule Teenager do\n  def hey(statement) do\n    cond do\n      (String.length(statement) == 0 || Regex.match?(%r/^ +$/, statement))->\n        "Fine. Be that way!"\n      Regex.match?(%r/[A-Z]{2,}/, statement) ->\n        "Woah, chill out!"\n      Regex.match?(%r/\\?$/, statement) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	f	0	1	2013-12-05 15:35:07	2013-12-05 15:35:07	546	\N
1227	45	5f98101f9b290b44abbdbf6f	superseded	elixir	bob	defmodule Teenager do\n  def hey(statement) do\n    cond do\n      StringType.is_empty?(statement) ->\n        "Fine. Be that way!"\n      StringType.is_shouting?(statement) ->\n        "Woah, chill out!"\n      StringType.is_question?(statement) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend\n\ndefmodule StringType do\n  def is_empty?(str) do\n    String.length(String.strip(str)) == 0\n  end\n\n  def is_shouting?(str) do\n    String.upcase(str) == str\n  end\n\n  def is_question?(str) do\n    String.ends_with?(str, "?")\n  end\nend	\N	f	2	3	2013-12-20 13:02:19	2013-12-20 13:02:19	546	\N
1228	45	d72c369306edd0db57a36640	done	elixir	bob	defmodule Teenager do\n  def hey(statement) do\n    cond do\n      StatementType.is_silence?(statement) ->\n        "Fine. Be that way!"\n      StatementType.is_shouting?(statement) ->\n        "Woah, chill out!"\n      StatementType.is_question?(statement) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend\n\ndefmodule StatementType do\n  def is_silence?(statement) do\n    String.strip(statement) == ""\n  end\n\n  def is_shouting?(statement) do\n    String.upcase(statement) == statement\n  end\n\n  def is_question?(statement) do\n    String.ends_with?(statement, "?")\n  end\nend	\N	f	3	5	2014-01-09 20:22:20	2014-01-09 20:22:20	546	\N
1229	45	a621f60a4ec755fa2ccd94c5	superseded	elixir	bob	defmodule Teenager do\n  def hey(statement) do\n    cond do\n      StatementType.is_empty?(statement) ->\n        "Fine. Be that way!"\n      StatementType.is_shouting?(statement) ->\n        "Woah, chill out!"\n      StatementType.is_question?(statement) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend\n\ndefmodule StatementType do\n  def is_empty?(statement) do\n    String.strip(statement) == ""\n  end\n\n  def is_shouting?(statement) do\n    String.upcase(statement) == statement\n  end\n\n  def is_question?(statement) do\n    String.ends_with?(statement, "?")\n  end\nend	\N	f	3	4	2014-01-29 00:39:04	2014-01-29 00:39:04	546	\N
1230	45	dc6d1d654eb273ea7f56c875	superseded	ruby	word-count	class Phrase\n\n  attr_accessor :word_list\n\n  def initialize(raw_sentence)\n    @word_list = clean_invalid_characters(raw_sentence).split\n  end\n\n  def word_count\n    word_counter = {}\n    return word_counter unless word_list\n\n    word_list.each do |raw_word|\n      word = raw_word.downcase\n      current_word_count = word_counter[word] || 0\n      word_counter[word] = current_word_count + 1\n    end\n\n    word_counter\n  end\n\nprivate\n\n  def clean_invalid_characters(text)\n    return '' if text.nil?\n    text.gsub(/\\W/,' ')\n  end\nend	\N	f	1	3	2013-11-08 07:11:51	2013-11-08 07:11:51	547	\N
1232	45	98e81422d953bb125bfadb4b	superseded	ruby	word-count	class Phrase\n  \n  attr_accessor :raw_word_list\n  \n  def initialize(raw_sentence)\n    @raw_word_list = clean_invalid_characters(raw_sentence).split\n  end\n  \n  def word_count\n    word_counter = {}\n    return word_counter unless raw_word_list\n    \n    raw_word_list.each do |raw_word|\n      word = raw_word.downcase\n      current_word_count = word_counter[word] || 0\n      word_counter[word] = current_word_count + 1\n    end\n    \n    word_counter\n  end\n  \nprivate\n    \n  def clean_invalid_characters(text)\n    return '' if text.nil?\n    text.gsub(/\\W/,' ')\n  end\nend	\N	f	1	2	2014-01-01 19:53:41	2014-01-01 19:53:41	547	\N
1233	45	17db6497d40854a10579df83	superseded	ruby	word-count	class Phrase\n  \n  attr_accessor :words\n  \n  def initialize(sentence)\n    @words = clean_invalid_characters(sentence).split\n  end\n  \n  def word_count\n    word_counter = {}\n    return word_counter unless words\n    \n    words.each do |word|\n      normalized_word = word.downcase\n      if word_counter[normalized_word]\n        word_counter[normalized_word] += 1\n      else\n        word_counter[normalized_word] = 1\n      end\n    end\n    word_counter\n  end\n  \nprivate\n    \n  def clean_invalid_characters(raw_text)\n    return '' if raw_text.nil?\n    raw_text.gsub(/\\W/,' ')\n  end\nend	\N	f	3	1	2014-01-30 21:34:57	2014-01-30 21:34:57	547	\N
1234	45	fbec2a53b6d4009a496dfa30	superseded	ruby	word-count	class Phrase\n\n  attr_accessor :word_list\n\n  def initialize(raw_sentence)\n    @word_list = clean_invalid_characters(raw_sentence).split\n  end\n\n  def word_count\n    word_counter = {}\n    return word_counter unless word_list\n\n    word_list.each do |raw_word|\n      word = raw_word.downcase\n      word_counter[word] = (word_count[word] ||= 0) + 1\n    end\n\n    word_counter\n  end\n\nprivate\n\n  def clean_invalid_characters(text)\n    return '' if text.nil?\n    text.gsub(/\\W/,' ')\n  end\nend	\N	f	3	4	2014-03-04 19:13:07	2014-03-04 19:13:07	547	\N
1236	45	9e00f90658b1199b9ac9edec	done	ruby	simple-cipher	class Cipher\n  attr_reader :key\n  def initialize(string)\n    @key = string || generate_random_key\n  end\n\nprivate\n\n  def generate_random_key\n    letters = ('a'..'z').to_a\n    100.times.map{ letters[rand(26)] }.join\n  end\nend	\N	f	1	1	2013-12-27 19:01:06	2013-12-27 19:01:06	549	\N
1237	45	984122e636847e580cc308cf	done	perl5	word-count	package Phrase;\n\nuse strict;\nuse warnings;\nuse utf8;\n\nsub word_count {\n    my ($text) = @_;\n\n    my %words;\n\n    for (split /\\W+/, $text) {\n        $words{lc $_}++;\n    }\n\n    return \\%words;\n}\n\n1;	\N	f	1	2	2014-01-18 01:42:01	2014-01-18 01:42:01	550	\N
1238	45	3f91a6aee78f0d1129fe27ef	superseded	perl5	word-count	package Phrase;\n\nuse v5.16;\nuse strict;\nuse warnings;\nuse utf8;\n\nsub word_count {\n    my ($text) = @_;\n\n    my %words;\n\n    for (split /\\W+/, $text) {\n        #next unless /^\\w+$/;\n        $words{lc $_}++;\n    }\n\n    return \\%words;\n}\n\n1;	\N	f	1	1	2014-02-16 01:33:57	2014-02-16 01:33:57	550	\N
1239	45	fea9c1c9276752f0d069f341	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n\tdistance := 0\n\tshorter := strandB\n\tif len(strandA) < len(strandB) {\n\t\tshorter = strandA\n\t}\n\tfor i := range shorter {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdistance++\n\t\t}\n\t}\n\treturn distance\n}	\N	f	1	2	2013-11-22 22:14:44	2013-11-22 22:14:44	551	hamming.go
1240	45	f8369307f0dd5d77a8d97fa6	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n  distance := 0\n  shorter := strandB\n  if len(strandA) < len(strandB) {\n    shorter = strandA\n  }\n  for i := range shorter {\n    if strandA[i] != strandB[i] {\n      distance++\n    }\n  }\n  return distance\n}	\N	f	1	1	2013-11-23 05:24:51	2013-11-23 05:24:51	551	hamming.go
1241	45	aa314ed6822acf0052300769	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) (distance int) {\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdistance++\n\t\t}\n\t}\n\treturn\n}	\N	f	2	4	2014-01-06 05:11:46	2014-01-06 05:11:46	551	hamming.go
1242	45	eeac05b5e59a6520999be63d	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n\tdistance := 0\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdistance++\n\t\t}\n\t}\n\treturn distance\n}	\N	f	1	3	2014-01-25 22:20:42	2014-01-25 22:20:42	551	hamming.go
1243	45	08a867b3890eb4d346939706	done	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) (mutations int) {\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tmutations++\n\t\t}\n\t}\n\treturn\n}	\N	f	3	5	2014-03-04 04:13:11	2014-03-04 04:13:11	551	hamming.go
1244	45	a8d9af8d4933608990b75588	superseded	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    if message.yelling?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.nothing?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(text)\n    @text = text\n  end\n\n  def yelling?\n    @text == @text.upcase and @text =~ /[A-Z]+/\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\n\n  def nothing?\n    @text.strip.empty?\n  end\nend	\N	f	1	5	2013-10-27 18:04:25	2013-10-27 18:04:25	552	\N
1245	45	d8e187822b715e8cfd2e1e0c	done	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    if message.yelling?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.nothing?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(text)\n    @text = text\n  end\n\n  def yelling?\n    @text == @text.upcase && @text =~ /[A-Z]+/\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\n\n  def nothing?\n    @text.strip.empty?\n  end\nend	\N	f	0	6	2013-10-29 00:46:48	2013-10-29 00:46:48	552	\N
1247	45	f6dda8de7cd0b88293cb0691	superseded	ruby	bob	class Bob\n  def hey(text)\n    if yelling? text\n      "Woah, chill out!"\n    elsif question? text\n      "Sure."\n    elsif nothing? text\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def yelling?(look_ahead)\n    look_ahead == look_ahead.upcase and look_ahead =~ /[A-Z]+/\n  end\n\n  def question?(text)\n    "?" == text[-1, 1]\n  end\n\n  def nothing?(text)\n    text.strip.empty?\n  end\nend	\N	f	2	2	2013-12-01 08:49:15	2013-12-01 08:49:15	552	\N
1249	45	ce1ab2b95a577dbd0855586f	superseded	ruby	bob	require_relative 'interpreter'\n\nclass Bob\n\n  def initialize\n    @interpreter = Interpreter.new\n  end\n\n  def hey(text)\n    if @interpreter.yelling? text\n      "Woah, chill out!"\n    elsif @interpreter.question? text\n      "Sure."\n    elsif @interpreter.nothing? text\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	3	2014-01-09 19:13:32	2014-01-09 19:13:32	552	\N
1250	45	a61be6b00fb067f6875a7da4	superseded	ruby	grains	class Grains\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    (1..64).inject { |total, n| total + square(n) }\n  end\nend	\N	f	1	1	2013-10-31 20:50:46	2013-10-31 20:50:46	553	grains.rb
1251	45	ebfa974ea82b83ec2587b247	done	ruby	grains	class Grains\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total(num_squares = 64)\n    square(num_squares + 1) - 1\n  end\nend	\N	f	1	2	2013-12-01 00:37:47	2013-12-01 00:37:47	553	grains.rb
1252	45	fe682d1047b2a004bd39cf8d	done	elixir	raindrops	defmodule Raindrops do\r\n  defp divides?(n, d), do: rem(n,d)==0\r\n\r\n  def convert(n) do\r\n    ppp = [{3,"Pling"}, {5,"Plang"}, {7,"Plong"}]\r\n      |> Enum.map_join(fn {d, message} -> if divides?(n, d), do: message, else: "" end)\r\n      \r\n    if ppp == "" do\r\n      "#{n}"\r\n    else\r\n      ppp\r\n    end\r\n  end\r\nend\r\n\r	\N	f	0	5	2013-10-22 15:03:04	2013-10-22 15:03:04	554	\N
1253	45	408a9fde55f8105de2bb8756	superseded	elixir	raindrops	defmodule Raindrops do\r\n  defp divides?(n, d, divisible_message) when rem(n,d)==0, do: divisible_message\r\n  defp divides?(_, _, _), do: ""\r\n\r\n  def convert(n) do\r\n    ppp = [{3,"Pling"}, {5,"Plang"}, {7,"Plong"}]\r\n      |> Enum.map(fn {d, message} -> divides?(n, d, message) end)\r\n      |> Enum.reduce(fn message, acc -> acc <> message end)\r\n      \r\n    if ppp == "" do\r\n      "#{n}"\r\n    else\r\n      ppp\r\n    end\r\n  end\r\nend\r\n\r	\N	f	1	3	2013-10-23 12:47:49	2013-10-23 12:47:49	554	\N
1254	45	ecc199941ecf36f42f7dce76	superseded	elixir	raindrops	defmodule Raindrops do\r\n  defp pling(n) do\r\n    if rem(n,3)==0 do\r\n      "Pling"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  defp plang(n) do\r\n    if rem(n,5)==0 do\r\n      "Plang"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  defp plong(n) do\r\n    if rem(n,7)==0 do\r\n      "Plong"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  def convert(n) do\r\n    ppp = pling(n) <> plang(n) <> plong(n)\r\n    if ppp == "" do\r\n      "#{n}"\r\n    else\r\n      ppp\r\n    end\r\n  end\r\nend\r\n\r	\N	f	1	1	2013-12-28 14:16:05	2013-12-28 14:16:05	554	\N
1255	45	dba31f119124df190d6d25b5	superseded	elixir	raindrops	defmodule Raindrops do\r\n  defp divides?(n, d, divisible_message) do\r\n    if rem(n,d)==0 do\r\n      divisible_message\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  def convert(n) do\r\n    ppp = [{3,"Pling"}, {5,"Plang"}, {7,"Plong"}]\r\n      |> Enum.map(fn {d, message} -> divides?(n, d, message) end)\r\n      |> Enum.reduce(fn message, acc -> acc <> message end)\r\n      \r\n    if ppp == "" do\r\n      "#{n}"\r\n    else\r\n      ppp\r\n    end\r\n  end\r\nend\r\n\r	\N	f	1	2	2014-01-31 08:02:04	2014-01-31 08:02:04	554	\N
1256	45	131be16e70585ce1511da69c	superseded	elixir	raindrops	defmodule Raindrops do\r\n  defp divides?(n, d), do: rem(n,d)==0\r\n\r\n  def convert(n) do\r\n    ppp = [{3,"Pling"}, {5,"Plang"}, {7,"Plong"}]\r\n      |> Enum.map(fn {d, message} -> if divides?(n, d), do: message, else: "" end)\r\n      |> Enum.reduce(fn message, acc -> acc <> message end)\r\n      \r\n    if ppp == "" do\r\n      "#{n}"\r\n    else\r\n      ppp\r\n    end\r\n  end\r\nend\r\n\r	\N	f	1	4	2014-02-06 04:45:10	2014-02-06 04:45:10	554	\N
1257	45	ae76ca1dd9006812fd334a29	pending	python	word-count	import re\n\nclass Phrase(object):\n  def __init__(self, phrase):\n    self.phrase = phrase\n    self.words = re.findall(r"[\\w']+", self.phrase.lower())\n\n  def word_count(self):\n    count = {}\n    for word in self.words:\n      if word in count:\n        count[word] += 1\n      else:\n        count[word] = 1\n    return count	\N	f	1	1	2013-10-05 05:19:32	2013-10-05 05:19:32	555	\N
1258	45	6529fcab1326e80370b9bf46	done	javascript	rna-transcription	module.exports = function (string) {\n  return string.replace(/T/g, 'U');\n};	\N	f	1	1	2014-02-07 02:49:02	2014-02-07 02:49:02	556	rna-transcription.js
1259	45	df7b4d9da4878f60059ae9d4	done	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(text) {\n  if (isEmpty(text))\n    return "Fine, be that way!"\n  if (isQuestion(text))\n    return "Sure."\n  if (isYelling(text))\n    return "Woah, chill out!"\n\n  return "Whatever."\n}\n\nfunction isEmpty(text) {\n  return text.length == 0\n}\n\nfunction isQuestion(text) {\n  return text.match(/\\?$/)\n}\n\nfunction isYelling(text) {\n  return text.toUpperCase() == text\n}\n\nmodule.exports = Bob	\N	f	1	2	2013-11-25 22:22:37	2013-11-25 22:22:37	557	\N
1260	45	cef3bd57c1263b58cdfea4c2	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(text) {\n  if (empty(text))\n    return "Fine, be that way!"\n  if (question(text))\n    return "Sure."\n  if (allcaps(text))\n    return "Woah, chill out!"\n  return "Whatever."\n}\n\nfunction empty(text) {\n  return !text.length\n}\n\nfunction allcaps(text) {\n  return text.toUpperCase() == text\n}\n\nfunction question(text) {\n  return text.match(/\\?$/)\n}\n\nmodule.exports = Bob	\N	f	0	1	2014-03-02 22:31:28	2014-03-02 22:31:28	557	\N
1261	45	4fb210d5c0a40a975d35bc5e	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\toutput := make(map[string]int)\n\tfor score, letters := range input {\n\t\tfor _, letter := range letters {\n\t\t\toutput[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn output\n}	\N	f	0	1	2013-11-08 10:10:16	2013-11-08 10:10:16	558	\N
1311	46	006fff327206544af05ab16d	superseded	javascript	bob	var Bob = function(){\n}\n\nBob.prototype.hey = function(saywat){\n    if (saywat === ''){\n        return 'Fine, be that way!';\n    } else if (saywat.toUpperCase() === saywat){\n        return 'Woah, chill out!';\n    } else if (saywat.charAt( saywat.length - 1 ) === '?') {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    } \n};\n\nmodule.exports = Bob;	\N	f	0	2	2014-01-28 16:41:32	2014-01-28 16:41:32	579	\N
1264	45	bbaff9bd1b0d90fc0525cdd1	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  DNA_NUCLEOTIDES = [ 'A', 'C', 'G', 'T' ]\n \n  def initialize(nucleotides)\n    @nucleotides = nucleotides.split('').sort\n    validate_as_dna(@nucleotides)\n    @dna_nucleotide_count_result_default = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0} \n  end\n\n  def count(nucleotide)\n    Nucleotide.count(nucleotide, nucleotides)\n  end\n\n  def nucleotide_counts\n    nucleotides.each_with_object(@dna_nucleotide_count_result_default) do |nucleotide, count_results|\n      unless count_results.has_key? [nucleotide] \n        count_results[nucleotide] = count(nucleotide)\n      end\n    end\n  end\n\n  def validate_as_dna(candidates)\n    candidates.uniq.each do |possible_nucleotide|\n      unless DNA_NUCLEOTIDES.include? possible_nucleotide\n        raise ArgumentError\n      end\n    end\n  end\n\nend\n\nclass Nucleotide\n\n  NUCLEOTIDES = [ 'A', 'C', 'G', 'T', 'U' ] \n\n  def self.count(nucleotide, nucleotides)\n    if validate_as_nucleotide(nucleotide)\n      nucleotides.select {|n| n.eql? nucleotide}.count\n    else\n      raise ArgumentError\n    end\n  end\n\n  def self.validate_as_nucleotide(candidate)\n    NUCLEOTIDES.include? candidate \n  end\n\nend	\N	f	1	1	2013-10-24 10:59:35	2013-10-24 10:59:35	561	\N
1265	45	87036da28d2c2a26ba7fc32d	done	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  DNA_NUCLEOTIDES = [ 'A', 'C', 'G', 'T' ]\n \n  def initialize(nucleotides)\n    @nucleotides = normalized_input(nucleotides)\n    validate_as_dna(@nucleotides)\n    @dna_nucleotide_count_result_default = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0} \n  end\n\n  def count(nucleotide)\n    Nucleotide.count_single(nucleotide, nucleotides)\n  end\n\n  def nucleotide_counts\n    nucleotides.each_with_object(@dna_nucleotide_count_result_default) do |nucleotide, count_results|\n      count_results[nucleotide] = count(nucleotide) unless count_results.key? [nucleotide] \n    end\n  end\n\nprivate\n\n  def normalized_input(nucleotides)\n    nucleotides.split('').sort\n  end\n\n  def validate_as_dna(candidates)\n    candidates.uniq.each do |possible_nucleotide|\n      unless DNA_NUCLEOTIDES.include? possible_nucleotide\n        raise ArgumentError\n      end\n    end\n  end\n\nend\n\nclass Nucleotide\n\n  NUCLEOTIDES = [ 'A', 'C', 'G', 'T', 'U' ] \n\n  def self.count_single(nucleotide, nucleotides)\n    if validate_as_nucleotide(nucleotide)\n      nucleotides.select {|n| n.eql? nucleotide}.count\n    else\n      raise ArgumentError\n    end\n  end\n\nprivate\n\n  def self.validate_as_nucleotide(candidate)\n    NUCLEOTIDES.include? candidate \n  end\n\nend	\N	f	1	2	2013-12-08 14:46:59	2013-12-08 14:46:59	561	\N
1266	45	b61b88bab2069350193653cf	done	haskell	gigasecond	module Gigasecond (fromDay) where\nimport Data.Time.Calendar (Day, addDays)\nfromDay :: Day -> Day\nfromDay = addDays gigasecInDays\n  where gigasecInDays = floor (1e9 / 86400 :: Float)	\N	f	1	1	2013-12-28 16:17:50	2013-12-28 16:17:50	562	\N
1267	46	3c0d7c9ede3aa080832a6e60	superseded	ruby	proverb	class Proverb\n  def initialize(*words, options={})\n    @words = words\n    default = {specifier: @words.first}\n    options = default.merge(options)\n  end\n\n  def to_s\n    proverb = ""\n    word_pairs.each do |pair|\n      proverb += "For want of a " + pair.first + " the " + pair.last + " was lost.\\n"\n    end\n    return proverb + "And all for the want of a #{options[:specifier]}."\n  end\n\n  private\n\n  def word_pairs\n    @words.zip(@words.drop(1))[0...-1]\n  end\nend	\N	f	0	1	2014-01-11 09:35:17	2014-01-11 09:35:17	563	\N
1268	46	42532ae863be8dde1144bfd8	superseded	ruby	proverb	class Proverb\n  def initialize(*words, specifier)\n    @words = words\n    default = {specifier: @words.first}\n    options = default.merge(options)\n  end\n\n  def to_s\n    proverb = ""\n    word_pairs.each do |pair|\n      proverb += "For want of a " + pair.first + " the " + pair.last + " was lost.\\n"\n    end\n    return proverb + "And all for the want of a #{options[:specifier]}."\n  end\n\n  private\n\n  def word_pairs\n    @words.zip(@words.drop(1))[0...-1]\n  end\nend	\N	f	0	2	2014-01-24 15:54:53	2014-01-24 15:54:53	563	\N
1269	46	c5284d6fbe64342ee4215395	superseded	ruby	proverb	class Proverb\n  def initialize(*things_lost)\n    @things_lost = extract_things(things_lost)\n    @qualifier = extract_qualifier(things_lost)\n  end\n\n  def to_s\n    rhyme_pairs.inject("") do |proverb, pair|\n      proverb += "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end + "And all for the want of a #{@qualifier}#{@things_lost.first}."\n  end\n\n  private\n\n  def extract_qualifier(things_lost)\n    if things_lost.last.kind_of? Hash\n      things_lost.last[:qualifier] + " "\n    else\n      ""\n    end\n  end\n\n  def extract_things(things_lost)\n    if things_lost.last.kind_of? Hash\n      things_lost[0...-1]\n    else\n      things_lost\n    end\n  end\n\n  def rhyme_pairs\n    @things_lost.each_cons(2)\n  end\nend	\N	f	3	5	2014-02-17 09:54:38	2014-02-17 09:54:38	563	\N
1270	46	f1daac60318ea6c39f2aa4de	superseded	ruby	proverb	class Proverb\n  def initialize(*things_lost_and_opts)\n    @things_lost, @qualifier = extract_qualifier(things_lost_and_opts)\n  end\n\n  def to_s\n    rhyme_pairs.inject("") do |proverb, pair|\n      proverb += "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end + "And all for the want of a #{@qualifier}#{@things_lost.first}."\n  end\n\n  private\n\n  def extract_qualifier(args)\n    opts = args.last.is_a?(Hash) ? args.pop : {}\n    opts[:qualifier] += " " unless opts[:qualifier].nil?\n    [ args, opts[:qualifier] ]\n  end\n\n  def rhyme_pairs\n    @things_lost.each_cons(2)\n  end\nend	\N	f	1	6	2014-02-20 14:41:37	2014-02-20 14:41:37	563	\N
1271	46	bf86de1521d3d353ab91e207	done	ruby	proverb	class Proverb\n  def initialize(*things_lost_and_opts)\n    @things_lost, @qualifier = extract_qualifier(things_lost_and_opts)\n  end\n\n  def to_s\n    lines + final_line\n  end\n\n  private\n  \n  def extract_qualifier(args)\n    opts = args.last.is_a?(Hash) ? args.pop : {}\n    opts[:qualifier] += " " unless opts[:qualifier].nil?\n    [ args, opts[:qualifier] ]\n  end\n\n  def lines\n    rhyme_pairs.inject("") do |lines, pair|\n      lines += "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end\n  end\n\n  def final_line\n    "And all for the want of a #{@qualifier}#{@things_lost.first}."\n  end\n\n  def rhyme_pairs\n    @things_lost.each_cons(2)\n  end\nend	\N	f	1	7	2014-02-23 15:44:21	2014-02-23 15:44:21	563	\N
1273	46	61e4027ab32a2f26e4508616	superseded	ruby	proverb	class Proverb\n  def initialize(*words)\n    @words = words\n    @qualifier = ""\n\n    if @words.last.kind_of? Hash\n      @qualifier = @words.last[:qualifier] + " "\n      @words = @words[0...-1]\n    end\n\n  end\n\n  def to_s\n    word_pairs.inject("") do |proverb, pair|\n      proverb += "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end + "And all for the want of a #{@qualifier}#{@words.first}."\n  end\n\n  private\n\n  def word_pairs\n    @words.zip(@words.drop(1))[0...-1]\n  end\nend	\N	f	0	4	2014-03-05 17:17:23	2014-03-05 17:17:23	563	\N
1274	46	dfc1543718024b7894055e66	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    sample_a = a.chars\n    sample_b = b.chars\n    zipped = sample_a.zip(sample_b)\n    count = zipped.count { |el_a, el_b| el_b.nil? ? false : el_a != el_b }\n    count\n  end\nend	\N	f	3	1	2014-01-24 21:57:29	2014-01-24 21:57:29	564	\N
1275	46	a75d8b083b30a42b64771239	done	ruby	hamming	class Hamming\n  def initialize(a, b)\n    @a, @b = a, b\n  end\n\n  def self.compute(a, b)\n    new(a, b).compute\n  end\n\n  def compute\n    a.zip(b).count { |a, b| b.nil? ? false : a != b }\n  end\n\n  private\n\n  def a\n    @a.chars\n  end\n\n  def b\n    @b.chars\n  end\nend	\N	f	4	2	2014-02-16 00:24:20	2014-02-16 00:24:20	564	\N
1276	46	1cb930fba622cebab15a0d15	pending	ruby	rna-transcription	class Complement\n  RNA = { 'G' => 'C', 'C' => 'G', 'T' => 'A', 'A' => 'U' }\n  DNA = { 'C' => 'G', 'G' => 'C', 'A' => 'T', 'U' => 'A' }\n  def self.of_dna(dna)\n    dna.each_char.inject('') { |a, e| a << RNA[e] }\n  end\n  def self.of_rna(rna)\n    rna.each_char.inject('') { |a, e| a << DNA[e] }\n  end\nend	\N	f	5	1	2014-01-28 17:48:28	2014-01-28 17:48:28	565	complement.rb
1277	46	9b6282866910a3b742db6ea0	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = split(word)\n  end\n\n  def match(possible_matches)\n    possible_matches.select {|possible_match| word_matches?(possible_match)}\n  end\n\n  def word_matches?(possible_match)\n    word == split(possible_match)\n  end\n\n  def split(word)\n    word.split("").sort\n  end\nend	\N	f	5	3	2014-01-23 07:03:23	2014-01-23 07:03:23	566	\N
1278	46	8f71dcce1b9793163d767d66	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = split(word)\n  end\n\n  def match(possible_matches)\n    answer = Array.new\n    possible_matches.each do |possible_match|\n      answer << possible_match if word_matches?(possible_match)\n    end\n    answer\n  end\n\n  def word_matches?(possible_match)\n    word == split(possible_match)\n  end\n\n  def split(word)\n    word.split("").sort\n  end\nend	\N	f	11	2	2014-02-26 03:58:07	2014-02-26 03:58:07	566	\N
1279	46	c56a5d029e47c8fde763a3e0	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = split(word)\n  end\n\n  def match(possible_matches)\n    answer = Array.new\n    possible_matches.each do |possible_match|\n      answer << possible_match if word == split(possible_match)\n    end\n    answer\n  end\n\n  def split(word)\n    word.split("").sort\n  end\nend	\N	f	2	1	2014-03-03 19:06:23	2014-03-03 19:06:23	566	\N
1280	46	2421c2246d3f5ef5f3e2efba	done	ruby	grade-school	class School\n\n  def initialize\n    @db = {}\n  end \n\n  def db\n    @db.dup.freeze\n  end\n   \n  def grade(n)\n    @db[n] || []\n  end\n  \n  def add(student, grade)\n    @db[grade] = grade(grade) << student\n  end\n  \n  def sort\n    Hash[@db.sort.map { |grade, students| [grade, students.sort] }]\n  end\n  \nend	\N	f	4	1	2014-01-18 04:49:05	2014-01-18 04:49:05	567	school.rb
1282	46	9266d373e01854d4b9c33e92	superseded	javascript	point-mutations	(function() {\n\nvar DNA = function(dna) {\n  this.nucleotides = dna;\n};\n\nDNA.prototype.hammingDistance = function(strand) {\n  var shortestStrandLength = Math.min(strand.length, this.nucleotides.length);\n  var strandNucleotides = strand.split("");\n  var distanceCount = 0;\n  for (var i = 0; i < shortestStrandLength; i++) {\n    if(strandNucleotides[i] !== this.nucleotides[i]) {\n      distanceCount += 1;\n    }\n  }\n  return distanceCount;\n};\n\nvar countNucleotides = function(nucleotides) {\n  var nucleotideCounts = {\n      'A': 0,\n      'T': 0,\n      'C': 0,\n      'G': 0,\n    };\n  for (var n in nucleotides) {\n    nucleotideCounts[nucleotides[n]] += 1;\n  }\n  return nucleotideCounts;\n};\n\nmodule.exports = DNA;\n\n})();	\N	f	3	3	2014-01-15 16:42:34	2014-01-15 16:42:34	568	dna.js
1283	46	00d26e9faded6af21275e895	superseded	javascript	point-mutations	(function() {\n\nvar DNA = function(firstStrand) {\n  this.nucleotides = firstStrand;\n};\n\nDNA.prototype.hammingDistance = function(secondStrand) {\n  var shortestStrandLength = Math.min(secondStrand.length, this.nucleotides.length);\n  var distanceCount = 0;\n  for (var i = 0; i < shortestStrandLength; i++) {\n    if(secondStrand[i] !== this.nucleotides[i]) {\n      distanceCount += 1;\n    }\n  }\n  return distanceCount;\n};\n\nmodule.exports = DNA;\n\n})();	\N	f	0	4	2014-01-22 10:17:57	2014-01-22 10:17:57	568	dna.js
1284	46	31fa965f207b540e6f4790e4	done	javascript	point-mutations	(function() {\n\nvar DNA = function(firstStrand) {\n  this.strand = firstStrand;\n};\n\nDNA.prototype.hammingDistance = function(secondStrand) {\n  var shortestStrandLength = Math.min(secondStrand.length, this.strand.length);\n  var distanceCount = 0;\n  for (var i = 0; i < shortestStrandLength; i++) {\n    if(secondStrand[i] !== this.strand[i]) {\n      distanceCount += 1;\n    }\n  }\n  return distanceCount;\n};\n\nmodule.exports = DNA;\n\n})();	\N	f	2	5	2014-01-25 17:20:38	2014-01-25 17:20:38	568	dna.js
1312	47	fbf1932b604c21f053f6405e	done	ruby	etl	class ETL\n  class << self\n    def transform(old_hash)\n      new_hash = {}\n      old_hash.each { |key, list| update(new_hash, key, list) }\n      new_hash\n    end\n\n    def update(new_hash, old_key, old_list)\n      old_list.each { |letter| new_hash[letter.downcase] = old_key }\n    end\n  end\nend	\N	f	2	1	2013-11-25 14:48:09	2013-11-25 14:48:09	580	\N
1420	39	b0483d72685fd75202a50dbd	superseded	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    school[grade] = (grade(grade) + [student]).sort\n  end\n\n  def grade(grade)\n    school[grade]\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	f	1	2	2014-02-10 23:59:02	2014-02-10 23:59:02	625	school.rb
1286	46	56c5bbc08acb75cdf094476d	hibernating	ruby	leap	class Year\n    def self.leap?(años)\n        if(años%400==0 ||(años%4==0 && años%100!=0)) \n            return  true\n        end\n    end\nend 	\N	f	4	1	2014-01-10 01:34:20	2014-01-10 01:34:20	569	year.rb
1287	46	4d39836210cb0e406e1728f3	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase)  -> "Fine. Be that way."\n      upcase?(phrase)   -> "Woah, chill out!"\n      question?(phrase) -> "Sure."\n      true              -> "Whatever."\n    end\n  end\n\n  defp silence?(phrase) do\n    phrase == ""\n  end\n\n  defp upcase?(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  defp question?(phrase) do\n    String.last(phrase) == "?"\n  end\nend	\N	f	5	2	2014-01-16 20:38:51	2014-01-16 20:38:51	570	\N
1288	46	654a2d64727e1a7d41a9ea9d	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase)  -> "Fine. Be that way."\n      upcase?(phrase)   -> "Woah, chill out!"\n      question?(phrase) -> "Sure."\n      true              -> "Whatever."\n    end\n  end\n\n  defp silence?(phrase) do\n    phrase == ""\n  end\n\n  defp upcase?(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  defp question?(phrase) do\n    String.last(phrase) == "?"\n  end\nend	\N	f	0	3	2014-02-01 19:59:13	2014-02-01 19:59:13	570	\N
1289	46	2017a0793136db7ed020515c	done	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase)  -> "Fine. Be that way."\n      shouting?(phrase) -> "Woah, chill out!"\n      question?(phrase) -> "Sure."\n      true              -> "Whatever."\n    end\n  end\n\n  defp silence?(phrase) do\n    phrase == ""\n  end\n\n  defp shouting?(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  defp question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\nend	\N	f	6	5	2014-02-16 21:31:10	2014-02-16 21:31:10	570	\N
1290	46	4309dd146e41cd93ef0f2827	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase)  -> "Fine. Be that way."\n      shouting?(phrase)   -> "Woah, chill out!"\n      question?(phrase) -> "Sure."\n      true              -> "Whatever."\n    end\n  end\n\n  defp silence?(phrase) do\n    phrase == ""\n  end\n\n  defp shouting?(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  defp question?(phrase) do\n    String.last(phrase) == "?"\n  end\nend	\N	f	3	4	2014-02-28 12:29:12	2014-02-28 12:29:12	570	\N
1291	46	fbb47bb60386545b7c24cd69	superseded	elixir	bob	defmodule Teenager do\n\n  def hey("") do\n    "Fine. Be that way."\n  end\n\n  def hey(phrase) do\n    upcase = phrase |> String.upcase |> String.codepoints |> Enum.reverse\n    phrase = phrase |> String.codepoints |> Enum.reverse\n    hey(phrase, upcase)\n  end\n\n  defp hey(phrase, upcased) when phrase == upcased do\n    "Woah, chill out!"\n  end\n\n  defp hey(["?" | _ ], _) do\n    "Sure."\n  end\n\n  defp hey(phrase, upcased) do\n    "Whatever."\n  end\n\nend	\N	f	5	1	2014-03-01 17:43:06	2014-03-01 17:43:06	570	\N
1292	46	7568dea6924a8da6ced9d851	done	elixir	word-count	defmodule Words do\n  def count(input) do\n    tuples = input |> String.downcase |> split_words |> Enum.map({&1, 1})\n    merger = fn(_key, old, new) -> old + new end\n\n    HashDict.merge(HashDict.new([]), tuples, merger)\n  end\n\n  defp split_words(input), do: Regex.scan(%r/\\w+/, input) |> List.flatten\nend	\N	f	6	1	2014-02-24 15:35:45	2014-02-24 15:35:45	571	\N
1293	46	f4dcb2fbd4ec550042026f0a	superseded	haskell	atbash-cipher	module Atbash (encode) where\n\nimport Data.Char (toLower, isAlpha, isDigit)\nimport Data.Array (Array, listArray, (!))\nimport Data.List (splitAt)\n\ntable :: Array Char Char\ntable = listArray ('a', 'z') ['z', 'y' .. 'a']\n\ntr :: Char -> String\ntr c | isAlpha c = [table ! toLower c]\n     | isDigit c = [c]\n     | otherwise = ""\n\nencode :: String -> String\nencode = split5 . concatMap tr\n  where\n    split5 xs = let (h, t) = splitAt 5 xs\n                in if null t\n                    then h\n                    else h ++ " " ++ split5 t	\N	f	2	1	2014-02-07 18:10:10	2014-02-07 18:10:10	572	\N
1294	46	569d0f077f6a7074ed9e8f6b	done	haskell	atbash-cipher	module Atbash (encode) where\n\nimport Data.Char (toLower, isAlpha, isDigit)\nimport Data.List.Split (chunksOf)\n\nshuffle :: Char -> Char\nshuffle c = toEnum $ pivot - fromEnum c\n  where\n    pivot = fromEnum 'z' + fromEnum 'a'\n\ntr :: Char -> String\ntr c | isAlpha c = [shuffle $ toLower c]\n     | isDigit c = [c]\n     | otherwise = ""\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . concatMap tr	\N	f	3	2	2014-02-12 23:36:41	2014-02-12 23:36:41	572	\N
1295	46	fa9cd9214799c3972bb9226c	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(declare tokenize)\n\n(defn word-count [phrase]\n  (-> phrase tokenize frequencies))\n\n(defn- tokenize [input]\n  (let [normalized (str/lower-case input)]\n    (re-seq #"\\w+" normalized)))	\N	f	4	1	2014-02-02 09:58:12	2014-02-02 09:58:12	573	\N
1296	46	4ea75ba2617c40e0827f3a4d	superseded	haskell	largest-series-product	module Series\n( digits\n, slices\n, largestProduct ) where\n\nimport           Data.Char (ord)\n\ndigitOffset :: Int\ndigitOffset = ord '0'\n\ndigits :: String -> [Int]\ndigits = map val\n  where val c = ord c - digitOffset\n\nslices :: Int -> String -> [[Int]]\nslices n xs\n  | length xs < n = []\n  | otherwise = take n (digits xs) : slices n (tail xs)\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n xs\n  | n == 0 || n > length xs = 1\n  | otherwise = maximum (map product (slices n xs))	\N	f	3	1	2014-01-05 09:56:37	2014-01-05 09:56:37	574	Series.hs
1297	46	437e2fa659550592134cef37	superseded	haskell	largest-series-product	module Series\n( digits\n, slices\n, largestProduct ) where\n\nimport           Data.Char (digitToInt)\nimport           Data.List (tails)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n = filter longEnough . map (take n) . tails . digits\n  where longEnough xs = length xs == n\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n xs\n  | n == 0 || n > length xs = 1\n  | otherwise = maximum (map product (slices n xs))	\N	f	0	2	2014-01-17 02:51:25	2014-01-17 02:51:25	574	Series.hs
1298	46	d131484e1a44d5d7951db79b	done	haskell	largest-series-product	module Series\n( digits\n, slices\n, largestProduct ) where\n\nimport           Data.Char (digitToInt)\nimport           Data.List (tails)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n xs = map (take n) $ take resultLength $ tails $ digits xs\n  where resultLength = length xs - n + 1\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n xs\n  | n == 0 || n > length xs = 1\n  | otherwise = maximum (map product (slices n xs))	\N	f	3	3	2014-01-30 10:35:58	2014-01-30 10:35:58	574	Series.hs
1300	46	2a191491e3616c25a68672a4	done	haskell	beer-song	module Beer (\n    sing\n  , verse\n  ) where\n\nimport Data.Char (toLower)\nimport Data.List (foldl')\n\nbottlesLine :: Int -> String\nbottlesLine (-1) = "99 bottles of beer"\nbottlesLine 0 = "No more bottles of beer"\nbottlesLine 1 = "1 bottle of beer"\nbottlesLine a = (show a) ++ " bottles of beer"\n\nactionLine :: Int -> String\nactionLine 0 = "Go to the store and buy some more"\nactionLine 1 = "Take it down and pass it around"\nactionLine _ = "Take one down and pass it around"\n\nbottlesVerse :: Int -> String\nbottlesVerse num = bottles ++ " on the wall, " ++ lBottles ++ "."\n  where\n    bottles = bottlesLine num\n    lBottles = map toLower bottles\n\nactionVerse :: Int -> String\nactionVerse num = action ++ ", " ++ nBottles ++ " on the wall."\n  where\n    action = actionLine num\n    nBottles = map toLower $ bottlesLine (num-1)\n\nverse :: Int -> String\nverse num = bottlesVerse num ++ "\\n" ++ actionVerse num ++ "\\n"\n\nsing :: Int -> Int -> String\nsing start end = unlines $ reverse [verse x | x <- [end..start]]	\N	f	3	1	2014-01-18 17:20:07	2014-01-18 17:20:07	576	\N
1301	46	30df22da31a52bd865de9df8	superseded	ruby	bob	require 'minitest/autorun'\n\nclass Bob\n\n  def hey(input)\n    if input.gsub(" ","") == ""\n      return "Fine. Be that way!"\n    elsif input == input.upcase\n      return "Woah, chill out!"\n    elsif input[-1] == '?'\n      return "Sure."\n    else\n    return "Whatever."\n    end\n  end\n\nend	\N	f	4	1	2014-01-08 10:52:20	2014-01-08 10:52:20	577	\N
1302	46	46f524aac4aa127f56afb995	done	ruby	bob	require 'minitest/autorun'\n\nclass Bob\n\n  def hey(input)\n    if silence?(input)\n      "Fine. Be that way!"\n    elsif yelling?(input)\n      "Woah, chill out!"\n    elsif question?(input)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def silence?(input)\n    input.gsub(" ","") == ""\n  end\n\n  def yelling?(input)\n    input == input.upcase\n  end\n\n  def question?(input)\n    input.end_with?("?")\n  end\n\nend	\N	f	8	2	2014-02-05 14:43:32	2014-02-05 14:43:32	577	\N
1303	46	f5d0ad05933d5e9375ffeae6	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as T\n\nisAllCaps str = (T.toUpper str) == str\nisEmpty str = T.null . T.strip $ str\nisQuestion str = (T.pack "?") `T.isSuffixOf` str\n\nresponseFor' phrase\n  | isEmpty phrase = "Fine. Be that way."\n  | isAllCaps phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."\n\nresponseFor phrase = responseFor' (T.pack phrase)	\N	f	0	1	2014-01-14 02:50:58	2014-01-14 02:50:58	578	\N
1304	46	4940613d62703b417d0822aa	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (toUpper)\n\nisSilence, isShout, isQuestion :: String -> Bool\nisSilence str = all (== ' ') str\nisShout str = (map toUpper str) == str\nisQuestion str = "?" `isSuffixOf` str\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence phrase = "Fine. Be that way."\n  | isShout phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."	\N	f	5	3	2014-01-18 10:19:34	2014-01-18 10:19:34	578	\N
1305	46	337a54a0784e9dfb5fe13204	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as T\nimport           Data.Text (Text)\n\nisAllCaps, isEmpty, isQuestion :: Text -> Bool\nisAllCaps str = (T.toUpper str) == str\nisEmpty str = T.null . T.strip $ str\nisQuestion str = (T.pack "?") `T.isSuffixOf` str\n\nresponseFor' :: Text -> String\nresponseFor' phrase\n  | isEmpty phrase = "Fine. Be that way."\n  | isAllCaps phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."\n\nresponseFor :: String -> String\nresponseFor phrase = responseFor' (T.pack phrase)	\N	f	5	2	2014-01-25 20:44:16	2014-01-25 20:44:16	578	\N
1306	46	c7f3ece3c5240b27055f7586	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (isSpace, toUpper)\n\nisSilence, isShout, isQuestion :: String -> Bool\nisSilence = all isSpace\nisShout = all (\\c -> toUpper c == c)\nisQuestion = ("?" `isSuffixOf`)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence phrase = "Fine. Be that way."\n  | isShout phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."	\N	f	5	4	2014-02-06 06:44:22	2014-02-06 06:44:22	578	\N
1307	46	d85d506a53052d6f3ff7493d	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (isSpace, isLower, isAlpha)\n\nisSilence, isShout, isQuestion :: String -> Bool\nisSilence s = all isSpace s\nisShout s = any isAlpha s && all (not . isLower) s\nisQuestion s = ("?" `isSuffixOf` s)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence phrase = "Fine. Be that way!"\n  | isShout phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."	\N	f	0	6	2014-02-24 10:26:16	2014-02-24 10:26:16	578	\N
1308	46	873cc373145648b952d52a01	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (isSpace, isLower)\n\nisSilence, isShout, isQuestion :: String -> Bool\nisSilence = all isSpace\nisShout = all (not . isLower)\nisQuestion = ("?" `isSuffixOf`)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence phrase = "Fine. Be that way."\n  | isShout phrase = "Woah, chill out!"\n  | isQuestion phrase = "Sure."\n  | otherwise = "Whatever."	\N	f	4	5	2014-03-10 19:03:13	2014-03-10 19:03:13	578	\N
1309	46	0e2247a8fc7f47ac5157fdd0	done	javascript	bob	/*jslint node: true */\n'use strict';\n\nvar Bob = function(){\n};\n\nBob.prototype.hey = function(saywat){\n    if (saywat === ''){\n        return 'Fine, be that way!';\n    } else if (saywat.toUpperCase() === saywat){\n        return 'Woah, chill out!';\n    } else if (saywat.charAt( saywat.length - 1 ) === '?') {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    } \n};\n\nmodule.exports = Bob;	\N	f	0	3	2014-01-14 13:30:00	2014-01-14 13:30:00	579	\N
1310	46	f5b34c7c8c323278df746813	superseded	javascript	bob	var Bob = function(){\n}\n\nBob.prototype.hey = function(saywat){\n    if (saywat === ''){\n        return 'Fine, be that way!';\n    } else if (saywat.toUpperCase() === saywat){\n        return 'Woah, chill out!';\n    } else if (saywat.charAt( saywat.length - 1 ) === '?') {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    } \n};\n\nmodule.exports = Bob;	\N	f	0	1	2014-01-16 05:31:31	2014-01-16 05:31:31	579	\N
1315	47	9d07f5540fd8969c53ab400d	pending	python	rna-transcription	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nclass DNA(object):\n    d_dict = {'T': 'U', 'G': 'G', 'C': 'C'}\n\n    def __init__(self, input_):\n        self._input = input_\n\n    def to_rna(self):\n        return ''.join([self.d_dict.get(x, x) for x in self._input])	\N	f	2	1	2013-11-27 13:12:01	2013-11-27 13:12:01	583	dna.py
1316	47	543eb3b5b2d9afa548412b9f	done	ruby	gigasecond	class Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    (@birth_date.to_time + 10**9).to_date\n  end\nend	\N	f	3	1	2014-01-07 19:15:42	2014-01-07 19:15:42	584	\N
1317	47	8f74701613f0da73d59b6a02	done	ruby	leap	class Year < Struct.new(:year)\n\n  def leap?\n    return true if divisible_by? 400\n    return false if divisible_by? 100\n\n    divisible_by? 4\n  end\n\n  def divisible_by? number\n    year % number == 0\n  end\nend	\N	f	3	1	2014-01-27 12:07:20	2014-01-27 12:07:20	585	\N
1318	47	db0e6a35fea46ba81ed3b318	done	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Mercury\n            | Venus\n            | Earth\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n\nageOn :: Planet -> Float -> Float\nageOn planet ageInSeconds = ageInEarthYears / earthYearsPerYearOn planet where\n  ageInEarthYears = ageInSeconds / secondsPerEarthYear\n\nearthYearsPerYearOn :: Planet -> Float\nearthYearsPerYearOn planet = case planet of\n  Mercury -> 0.2408467\n  Venus   -> 0.61519726\n  Earth   -> 1\n  Mars    -> 1.8808158\n  Jupiter -> 11.862615\n  Saturn  -> 29.447498\n  Uranus  -> 84.016846\n  Neptune -> 164.79132\n\nsecondsPerEarthYear :: Float\nsecondsPerEarthYear = 31557600	\N	f	1	3	2013-12-19 16:39:12	2013-12-19 16:39:12	586	\N
1319	47	3811aa176a011669f8a7aa83	superseded	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Mercury\n            | Venus\n            | Earth\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n\nageOn :: Planet -> Float -> Float\nageOn planet ageInSeconds = ageInEarthYears / earthYearsPerYearOn planet where\n  ageInEarthYears = ageInSeconds / secondsPerEarthYear\n\nearthYearsPerYearOn :: Planet -> Float\nearthYearsPerYearOn Mercury = 0.2408467\nearthYearsPerYearOn Venus   = 0.61519726\nearthYearsPerYearOn Earth   = 1\nearthYearsPerYearOn Mars    = 1.8808158\nearthYearsPerYearOn Jupiter = 11.862615\nearthYearsPerYearOn Saturn  = 29.447498\nearthYearsPerYearOn Uranus  = 84.016846\nearthYearsPerYearOn Neptune = 164.79132\n\nsecondsPerEarthYear :: Float\nsecondsPerEarthYear = 31557600	\N	f	0	2	2014-01-06 17:15:54	2014-01-06 17:15:54	586	\N
1320	47	8457bcf918f25907c6d55541	superseded	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Mercury\n            | Venus\n            | Earth\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n\nageOn :: Planet -> Float -> Float\nageOn planet ageInSeconds = ageInEarthYears / earthYearsPerYearOn planet where\n  ageInEarthYears = ageInSeconds / secondsPerEarthYear\n\nearthYearsPerYearOn :: Planet -> Float\nearthYearsPerYearOn Mercury = 0.2408467\nearthYearsPerYearOn Earth   = 1\nearthYearsPerYearOn Venus   = 0.61519726\nearthYearsPerYearOn Mars    = 1.8808158\nearthYearsPerYearOn Jupiter = 11.862615\nearthYearsPerYearOn Saturn  = 29.447498\nearthYearsPerYearOn Uranus  = 84.016846\nearthYearsPerYearOn Neptune = 164.79132\n\nsecondsPerEarthYear :: Float\nsecondsPerEarthYear = 31557600	\N	f	0	1	2014-02-11 03:55:23	2014-02-11 03:55:23	586	\N
1321	47	e068f3638ec44dae05a12354	hibernating	haskell	word-count	module WordCount (wordCount) where\n\timport qualified Data.Map as M\n\timport Data.List.Split\n\timport Data.Char\n\n\tignored = " ,_.:&@%!^$#"\n\tsplitWords a = filter (/= "") . splitOneOf ignored $ map toLower a\n\n\tincr :: Maybe Integer -> Maybe Integer\n\tincr (Just i) = Just (i + 1)\n\tincr Nothing = Just 1\n\n\tmapWords :: [String] -> M.Map [Char] Integer\n\tmapWords [] = M.empty\n\tmapWords (w:list) = M.alter incr w (mapWords list)\n\n\twordCount :: String -> M.Map [Char] Integer\n\twordCount a = mapWords (splitWords a)	\N	f	2	1	2013-12-30 19:55:00	2013-12-30 19:55:00	587	\N
1322	47	4b1273706f8c8eb8387fdb0e	pending	ruby	crypto-square	class Crypto\n  attr_reader :string\n\n  def initialize(string)\n    @string = string\n    normalize_plaintext\n  end\n\n  def normalize_plaintext\n    @string = string.downcase.gsub(/\\W/, '')\n  end\n\n  def size\n    @size ||= Math.sqrt(string.length).ceil\n  end\n\n  def plaintext_matrix\n    collection = string.chars\n    padding = (size - collection.size % size) % size\n    collection.concat([nil] * padding).each_slice(size).to_a\n  end\n\n  def plaintext_segments\n    plaintext_matrix.map(&:join)\n  end\n\n  def ciphertext_matrix\n    plaintext_matrix.transpose\n  end\n\n  def ciphertext\n    ciphertext_matrix.map(&:join).join\n  end\n\n  def normalize_ciphertext\n    ciphertext.chars.each_slice(5).map(&:join).join(" ")\n  end\nend	\N	f	1	1	2013-11-15 22:13:55	2013-11-15 22:13:55	588	crypto.rb
1323	47	e2f50244e8763202be8cee2f	done	ruby	nucleotide-count	class DNA\n  def initialize(dna) @dna = dna end\n\n  def nucleotide_counts\n    DEFAULT.merge \\\n      chars.group_by(&:to_s).map(&COUNT).reduce(&:merge) || {}\n  end\n\n  def count thing\n    raise ArgumentError unless KNOWN.include? thing \n    super\n  end\n  KNOWN = %w[ A T C G U ]\n  ODD   = ['U']\n  DEFAULT = (KNOWN - ODD).map { |x| { x => 0 }}.reduce(&:merge)\n  COUNT = -> (( k, v )) {{ k => v.count }}\n\n  # unsafe delegator:\n  def method_missing(*a) @dna.send *a end\nend	\N	f	1	1	2014-01-08 08:47:57	2014-01-08 08:47:57	589	\N
1324	47	8be6ae5b500652c19913c4f3	superseded	haskell	nucleotide-count	module DNA\n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\nimport Data.Set (Set)\nimport qualified Data.Set as Set\n\ncount :: Char -> String -> Int\ncount nucleotide\n  | validNucleotide nucleotide = length . filter (==nucleotide)\n  | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts sequence = Map.fromList $ map f "ACGT" where\n  f n = (n,count n sequence)\n\nvalidNucleotide = flip Set.member $ Set.fromList "ACGTU"	\N	f	1	1	2013-11-14 20:03:44	2013-11-14 20:03:44	590	\N
1421	39	2906eeecc757da0f38ebd578	pending	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    school[grade] += [student]\n  end\n\n  def grade(grade)\n    school[grade].sort\n  end\n\n  def to_hash\n    Hash[school.each_with_object({}) { |(key, value), hash| hash[key] = grade(key) }.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	f	0	4	2014-02-15 14:25:46	2014-02-15 14:25:46	625	school.rb
1326	47	8de709be2472290af16c93ad	done	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\n\nmodule DNA\n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\nnucleotides = "ACGT"\n\ncount :: Char -> String -> Int\ncount nucleotide\n  | validNucleotide nucleotide = length . filter (==nucleotide)\n  | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = Map.fromListWith (+) . addZeros . map (,1)\n  where addZeros = (map (,0) nucleotides ++)\n\nvalidNucleotide = (`elem` 'U':nucleotides)	\N	f	0	4	2014-01-21 07:29:51	2014-01-21 07:29:51	590	\N
1327	47	389bbd2de370ce8fa840fd7e	superseded	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\n\nmodule DNA\n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\nnucleotides = "ACGT"\n\ncount :: Char -> String -> Int\ncount nucleotide\n  | validNucleotide nucleotide = length . filter (==nucleotide)\n  | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = Map.fromListWith (+) . addZeros . map (,1)\n  where addZeros = (++ map (,0) nucleotides)\n\nvalidNucleotide = (`elem` 'U':nucleotides)	\N	f	2	3	2014-02-22 16:04:26	2014-02-22 16:04:26	590	\N
1329	47	35c329282b5313ebc3307ff1	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nmodule.exports = sequence(ensureString, normalize,\n                          mapWithArray(scores), reduceUsing(sum));\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction normalize(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithArray(arr) {\n  return mapUsing(function(element){\n    return arr[element];\n  });\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	3	2013-11-23 16:38:50	2013-11-23 16:38:50	591	scrabble-score.js
1330	47	ec07f0f4a234b5392b558f4c	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nmodule.exports = sequence(ensureString, toLowerCase, mapScores(), sumScores());\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithArray(arr) {\n  return mapUsing(function(element){\n    return arr[element] || 0;\n  });\n}\n\nfunction mapScores() {\n  return mapWithArray(scores);\n}\n\nfunction sumScores() {\n  return reduceUsing(sum);\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	5	2013-12-11 08:11:25	2013-12-11 08:11:25	591	scrabble-score.js
1331	47	f2a192400bbcd3cbcb42c184	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nmodule.exports = sequence(ensureString, toLowerCase,\n                          mapWithArray(scores), reduceUsing(sum));\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithArray(arr) {\n  return mapUsing(function(element){\n    return arr[element];\n  });\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	4	2013-12-14 11:20:38	2013-12-14 11:20:38	591	scrabble-score.js
1332	47	199126b7dcad95da3e76f1e7	done	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nvar mapScores = mapWithObject(scores),\n    sumScores = reduceUsing(sum);\n\nmodule.exports = sequence(ensureString, toLowerCase, mapScores, sumScores);\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  };\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  };\n}\n\nfunction mapWithObject(arr) {\n  return mapUsing(function(element){\n    return arr[element] || 0;\n  });\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  };\n}	\N	f	1	9	2014-02-22 21:59:00	2014-02-22 21:59:00	591	scrabble-score.js
1334	47	150176ce480d297dab98ec5a	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nvar mapScores = mapWithObject(scores),\n    sumScores = reduceUsing(sum);\n\nmodule.exports = sequence(ensureString, toLowerCase, mapScores, sumScores);\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithObject(arr) {\n  return mapUsing(function(element){\n    return arr[element] || 0;\n  });\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	7	2014-03-08 08:29:00	2014-03-08 08:29:00	591	scrabble-score.js
1335	47	07889877b7514f11ec508221	superseded	javascript	scrabble-score	var scores = {\n  a: 1, b: 3, c: 3, d: 2, e: 1, f: 4, g: 2, h: 4,  i: 1,\n  j: 8, k: 5, l: 1, m: 3, n: 1, o: 1, p: 3, q: 10, r: 1,\n  s: 1, t: 1, u: 1, v: 4, w: 4, x: 8, y: 4, z: 10,\n};\n\nvar mapScores = comspose(mapWithObject(scores)),\n    sumScores = compose(reduceUsing(sum));\n\nmodule.exports = sequence(ensureString, toLowerCase, mapScores, sumScores);\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction mapUsing(mapFn) {\n  return function(iterable) {\n    return Array.prototype.map.call(iterable, mapFn);\n  }\n}\n\nfunction mapWithObject(arr) {\n  return mapUsing(function(element){\n    return arr[element] || 0;\n  });\n}\n\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	8	2014-03-11 23:09:48	2014-03-11 23:09:48	591	scrabble-score.js
1336	47	9a65ebe215a3759fcfc2a505	superseded	javascript	scrabble-score	var scores = {\n  'a': 1,\n  'e': 1,\n  'i': 1,\n  'o': 1,\n  'u': 1,\n  'l': 1,\n  'n': 1,\n  'r': 1,\n  's': 1,\n  't': 1,\n  'd': 2,\n  'g': 2,\n  'b': 3,\n  'c': 3,\n  'm': 3,\n  'p': 3,\n  'f': 4,\n  'h': 4,\n  'v': 4,\n  'w': 4,\n  'y': 4,\n  'k': 5,\n  'j': 8,\n  'x': 8,\n  'q': 10,\n  'z': 10,\n};\n\nmodule.exports = function(word) {\n  return word && word.toLowerCase().split('').reduce(function(a, b){\n    return a + scores[b];\n  }, 0) || 0;\n}	\N	f	1	1	2014-03-15 13:54:38	2014-03-15 13:54:38	591	\N
1338	47	9d1d3a58de5d70413bf33a57	pending	coffeescript	binary	module.exports = (binary) ->\n\n  toDecimal: ->\n    digits = binary.split("").reverse()\n    digits.reduce (decimal, digit, place) ->\n      return decimal unless digit == "1"\n      decimal + Math.pow(2, place)\n    , 0	\N	f	1	1	2013-11-12 17:07:09	2013-11-12 17:07:09	593	binary.coffee
1339	47	f3ee385dc0216700069bc43e	done	ruby	rna-transcription	class DNA\n  attr_reader :strand\n  \n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    rna = RNA.new\n    rnap = RNAP.new(self)\n    rnap.transcript(rna)\n    rna.strand \n  end\nend\n\nclass RNA\n  attr_reader :strand\n\n  def initialize\n    @strand = ""\n  end\n\n  def attach(nucleobase)\n    @strand.concat(nucleobase) \n  end\nend\n\nclass RNAP\n  attr_reader :template\n\n  def initialize(dna)\n    @template = dna.strand\n  end\n\n  def transcript(rna)\n    @template.chars.each do |nucleobase|\n      rna.attach(apply_factors(nucleobase))\n    end\n  end\n\n  def apply_factors(nucleobase)\n    if nucleobase == 'T'\n      'U'\n    else\n      nucleobase.dup\n    end\n  end\nend	\N	f	1	1	2013-11-14 04:35:36	2013-11-14 04:35:36	594	\N
1340	48	b4f5cae356b3004442abf8fa	superseded	ruby	bob	class Bob\n\n  def hey words\n    if question? words\n      'Sure.'\n    elsif yelling? words      \n      'Woah, chill out!'\n    elsif  words.lstrip.empty?\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  def question? word\n    /[^[[:upper:]]]\\?$/ === word.strip.gsub("\\n", " ")\n   # word.end_with? "?"\n  end\n\n  def yelling? word\n    /[[:upper:]][^[[:lower:]]]\\!|\\?$/ === word.strip.gsub("\\n", " ")    \n  end\n\n  def blank? word\n    /[^.{1,}][[:blank:]]/ === word\n  end\n  \nend	\N	f	4	1	2014-01-15 07:36:41	2014-01-15 07:36:41	595	\N
1422	39	df555d29500f28cf1e20552e	superseded	ruby	grade-school	class School\n  attr_reader :school\n\n  def initialize\n    @school = {}\n  end\n\n  def add(student, grade)\n    current_students = Array(school[grade])\n    school[grade] = (current_students << student).sort\n  end\n\n  def grade(grade)\n    Array(@school[grade])\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\nend	\N	f	4	1	2014-03-17 22:29:50	2014-03-17 22:29:50	625	school.rb
1342	48	a7562f56dd63891c56d7f2f2	done	ruby	bob	class Bob\n\n  def hey words\n    if question? words\n      'Sure.'\n    elsif yelling? words      \n      'Woah, chill out!'\n    elsif  words.lstrip.empty?\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  def question? word\n    /[^[[:upper:]]]\\?$/ === trim(word)\n   # word.end_with? "?"\n  end\n\n  def yelling? word\n    /[[:upper:]][^[[:lower:]]]\\!|\\?$/ === trim(word)\n  end\n\n  def trim word \n    word.strip.gsub("\\n", " ")    \n  end\nend	\N	f	6	3	2014-02-11 19:40:30	2014-02-11 19:40:30	595	\N
1343	48	f2e0da6ef181e1e431c225a1	done	python	rna-transcription	import re\n\nclass DNA :\n   def __init__(self, dna) :\n      self.dna = dna\n\n   def to_rna(self) :\n      return re.sub(r'T', r'U', self.dna) or self.dna\n      	\N	f	0	1	2014-01-14 10:20:27	2014-01-14 10:20:27	596	\N
1344	48	ea1e4a3297e8e8fd713a69fd	done	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = sanitize_input(words)\n  end\n\n  def word_count\n    @words.group_by { |word| word }.\n      inject({}) { |hash, (word, list)|\n        hash.merge(word => list.length)\n    }\n  end\n\n  private\n  def sanitize_input(words)\n    words.downcase.scan(/\\w+/)\n  end\nend	\N	f	1	8	2013-12-30 14:24:16	2013-12-30 14:24:16	597	\N
1345	48	7eee160ad277b04449b06c5b	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = remove_bad_input(words)\n  end\n\n  def remove_bad_input(words)\n    words.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) do |word, word_hash|\n      word_hash[word] += 1\n    end\n  end\nend	\N	f	0	5	2013-12-31 18:49:38	2013-12-31 18:49:38	597	\N
1346	48	4957b88b9a09680189a5bb59	superseded	ruby	word-count	class Phrase\n  attr_accessor :words\n  def initialize(words)\n    @words = words.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    word_hash = Hash.new(0)\n    @words.each { |word| word_hash[word] += 1 }\n    word_hash.delete_if { |word, value| word == "" }\n    word_hash\n  end\nend	\N	f	1	1	2014-01-01 22:31:55	2014-01-01 22:31:55	597	\N
1347	48	e18dc935dd90970cc8a17903	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    word_hash = Hash.new(0)\n    @words.each { |word| word_hash[word] += 1 }\n    word_hash\n  end\nend	\N	f	1	3	2014-01-18 22:43:55	2014-01-18 22:43:55	597	\N
1348	48	67a6311c2535f50b94473c67	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = remove_bad_input(words)\n  end\n\n  def remove_bad_input(words)\n    words.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, word_hash| word_hash[word] += 1 }\n  end\nend	\N	f	3	4	2014-01-29 00:40:56	2014-01-29 00:40:56	597	\N
1349	48	5f397049c537d0d4ee9b655f	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = remove_bad_input(words)\n  end\n\n  def word_count\n    @words.group_by { |word| word }.inject({}) do |hash, (word, list)|\n      hash.merge(word => list.length)\n    end\n  end\n\n  private\n  def remove_bad_input(words)\n    words.downcase.scan(/\\w+/)\n  end\nend	\N	f	9	6	2014-02-14 01:35:23	2014-02-14 01:35:23	597	\N
1350	48	3b4429c57c0b2f0b10402924	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = sanitize_input(words)\n  end\n\n  def word_count\n    @words.group_by { |word| word }.inject({}) { |hash, (word, list)|\n      hash.merge(word => list.length)\n    }\n  end\n\n  private\n  def sanitize_input(words)\n    words.downcase.scan(/\\w+/)\n  end\nend	\N	f	3	7	2014-02-15 02:39:59	2014-02-15 02:39:59	597	\N
1351	48	00670d3996192f03469fd74e	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    word_hash = Hash.new(0)\n    @words.each { |word| word_hash[word] += 1 }\n    word_hash.delete_if { |word, value| word == "" }\n    word_hash\n  end\nend	\N	f	3	2	2014-02-21 22:12:26	2014-02-21 22:12:26	597	\N
1352	48	f19fa8d369cc8a7522857278	done	python	bob	class Bob(object):\n    def hey(self, phrase):\n        if phrase.strip() == '':\n            return 'Fine. Be that way!'\n        elif phrase.isupper():\n            return 'Woah, chill out!'\n        if phrase.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	3	1	2013-12-27 13:28:54	2013-12-27 13:28:54	598	\N
1354	48	329b0605db3a52668193a09d	done	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    pairs_of_nucleotides(strand1, strand2)\n      |> count_of_differences\n  end\n\n  defp pairs_of_nucleotides(strand1, strand2) do\n    List.zip([strand1, strand2])\n  end\n\n  defp count_of_differences(pairs) do\n    Enum.reduce(pairs, 0, fn(pair, acc) ->\n      if elem(pair, 0) != elem(pair, 1) do acc = acc + 1 end\n      acc\n    end)\n  end\nend	\N	f	1	2	2014-01-24 22:54:04	2014-01-24 22:54:04	599	point_mutations.exs
1357	48	7d0fe67932e2487686ea4ef7	superseded	haskell	rna-transcription	module DNA where\n\n  toRNA :: String -> String\n  toRNA str = map transcribe str\n    where transcribe 'T' = 'U'\n          transcribe other = other	\N	f	3	1	2014-02-09 14:44:08	2014-02-09 14:44:08	600	\N
1359	48	62911561dd7e5df047a2ae1d	superseded	haskell	rna-transcription	module DNA where\n\n  toRNA :: String -> String\n  toRNA = map transcribe \n    where transcribe 'T' = 'U'\n          transcribe other = other	\N	f	7	2	2014-03-11 21:12:00	2014-03-11 21:12:00	600	\N
1360	48	6de43506d3edb38558f8dc99	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nprimeFactors :: Integer -> [Integer]\nprimeFactors = reverse . loop 2 []\n  where loop cur acc n \n          | n == 1 = acc\n          | n `mod` cur == 0 = loop 2 (cur:acc) (quot n cur) \n          | otherwise = loop (cur+1) acc n	\N	f	2	1	2014-01-04 06:49:02	2014-01-04 06:49:02	601	PrimeFactors.hs
1365	48	33b79b7afd3ae69849e7eaa0	done	ruby	binary	class Binary\n\n  attr_reader :binchars\n  def initialize(binary=0)\n    @binchars = binary.chars\n  end\n\n  def to_decimal\n    (0..binchars.size-1).inject(0) do |decimal, ndx|\n      char = binchars.pop\n      return 0 unless (['0','1'].include? char)\n      decimal += char.to_i*(2**ndx)\n    end\n  end\n\nend	\N	f	1	3	2013-12-29 14:16:30	2013-12-29 14:16:30	603	\N
1417	39	7a4ecf82f47bd1fe705a2311	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n    check_dna_sequence(@nucleotides)\n  end\n\n  def nucleotide_counts\n    counts = DNA_BASES.map {|base| count(base) }\n    Hash[DNA_BASES.zip(counts)]\n  end\n\n  def count(nucleotide)\n    check_nucleotide(nucleotide)\n    @nucleotides.count(nucleotide)\n  end\n\n  def valid_base?(base)\n    BASES.include?(base)\n  end\n\n  def valid_dna_sequence?(sequence)\n    sequence.chars.all? {|base| DNA_BASES.include?(base) }\n  end\n\nprivate\n\n  def check_nucleotide(nucleotide)\n    raise ArgumentError unless valid_base?(nucleotide)\n  end\n\n  def check_dna_sequence(sequence)\n    raise ArgumentError unless valid_dna_sequence?(sequence)\n  end\n\n  DNA_BASES = %w|A C G T|\n  BASES = DNA_BASES + ['U']\n\nend	\N	f	4	1	2014-02-13 10:38:00	2014-02-13 10:38:00	624	\N
1418	39	177411e6ca8aac4bc79a6b84	done	ruby	nucleotide-count	class DNA\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n    check_dna_sequence(@nucleotides)\n  end\n\n  def nucleotide_counts\n    counts = DNA_BASES.map {|base| [base, count(base)] }\n    Hash[counts]\n  end\n\n  def count(nucleotide)\n    check_nucleotide(nucleotide)\n    @nucleotides.count(nucleotide)\n  end\n\n  def valid_base?(base)\n    BASES.include?(base)\n  end\n\n  def valid_dna_sequence?(sequence)\n    sequence.chars.all? {|base| DNA_BASES.include?(base) }\n  end\n\nprivate\n\n  def check_nucleotide(nucleotide)\n    raise ArgumentError unless valid_base?(nucleotide)\n  end\n\n  def check_dna_sequence(sequence)\n    raise ArgumentError unless valid_dna_sequence?(sequence)\n  end\n\n  DNA_BASES = %w|A C G T|\n  BASES = DNA_BASES + ['U']\n\nend	\N	f	1	2	2014-03-08 12:56:55	2014-03-08 12:56:55	624	\N
1419	39	a96c2c0ff9a347613a404986	superseded	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    (school[grade] += [student]).sort!\n  end\n\n  def grade(grade)\n    school[grade]\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	f	3	3	2014-02-03 08:14:51	2014-02-03 08:14:51	625	school.rb
1425	34	08450c80f765e7e19d7c7783	done	ruby	robot-name	class Robot\r\n\t@@index = 0\r\n\tattr_reader :name\r\n\tdef initialize\r\n\t\tset_name\r\n\tend\r\n\r\n\tdef reset\r\n\t\tset_name\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef set_name\r\n\t\t@name = Robot.get_name\r\n\tend\r\n\r\n\tdef self.get_name\r\n\t\t@@index += 1\r\n\t\t"ab00" + @@index.to_s\r\n\tend\r\nend	\N	f	1	1	2014-02-08 01:50:59	2014-02-08 01:50:59	628	\N
1426	34	8a198f5183a173abdc4ed38e	superseded	ruby	etl	module ETL\n  extend self\n\n  def transform(input)\n    input.\n      invert.\n      each_with_object({}) do |(data, source), db|\n        data.each {|datum| db[datum.downcase] = source}\n      end\n  end\nend	\N	f	4	1	2014-02-11 17:00:42	2014-02-11 17:00:42	629	\N
1427	34	db4c254ff43e18f5b4ddea8c	done	ruby	etl	module ETL\n  extend self\n\n  def transform(input)\n    input.each_with_object({}) do |(source, data), db|\n      data.each {|datum| db[datum.downcase] = source}\n    end\n  end\nend	\N	f	4	2	2014-02-18 02:56:02	2014-02-18 02:56:02	629	\N
1428	34	cf693b592190dba2da1f50a3	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    if !@word_count\n      normal_words = normalized_words(@phrase)\n      @word_count = summarize(normal_words)\n    end\n\n    @word_count\n  end\n\n  private\n\n  def normalized_words(phrase)\n    phrase.downcase.scan /[a-z0-9]+/\n  end\n\n  def summarize(words)\n    words.each_with_object(Hash.new(0)) do |word, summary|\n      summary[word] += 1\n    end\n  end\nend	\N	f	5	5	2014-02-12 13:42:24	2014-02-12 13:42:24	630	\N
1429	34	4d0dc956ad8a26a2f5e39862	superseded	ruby	word-count	class Phrase\n\n  attr_reader :word_count\n\n  def initialize(phrase)\n    @word_count = summarize(phrase)\n  end\n\n  private\n\n  def summarize(phrase)\n    downcased_phrase = phrase.downcase\n\n    words = downcased_phrase.scan /[a-z0-9]+/\n    uniq_words = words.uniq\n\n    uniq_words.each_with_object({}) do |word, summary|\n      summary[word] = words.count(word)\n    end\n  end\nend	\N	f	5	1	2014-02-18 05:16:29	2014-02-18 05:16:29	630	\N
1430	34	4eed893b4150ba20961b9b88	superseded	ruby	word-count	class Phrase\n\n  attr_reader :word_count\n\n  def initialize(phrase)\n    normal_words = normalized_words(phrase)\n\n    @word_count = summarize(normal_words)\n  end\n\n  private\n\n  def normalized_words(phrase)\n    downcased_phrase = phrase.downcase\n\n    downcased_phrase.scan /[a-z0-9]+/\n  end\n\n  def summarize(words)\n    words.each_with_object(Hash.new(0)) do |word, summary|\n      summary[word] += 1\n    end\n  end\nend	\N	f	2	4	2014-02-22 16:04:32	2014-02-22 16:04:32	630	\N
1431	34	7820d65617616f2c9a0a3de4	superseded	ruby	word-count	class Phrase\n\n  attr_reader :word_count\n\n  def initialize(phrase)\n    @word_count = summarize(phrase)\n  end\n\n  private\n\n  def summarize(phrase)\n    downcased_phrase = phrase.downcase\n\n    words = downcased_phrase.scan /[a-z0-9]+/\n\n    words.each_with_object({}) do |word, summary|\n      summary[word] = words.count(word)\n    end\n  end\nend	\N	f	11	2	2014-02-24 10:46:15	2014-02-24 10:46:15	630	\N
1432	34	2bc97b152084264cc9ba5009	superseded	ruby	word-count	class Phrase\n\n  attr_reader :word_count\n\n  def initialize(phrase)\n    normal_words = normalized_words(phrase)\n\n    @word_count = summarize(normal_words)\n  end\n\n  private\n\n  def normalized_words(phrase)\n    downcased_phrase = phrase.downcase\n\n    downcased_phrase.scan /[a-z0-9]+/\n  end\n\n  def summarize(words)\n    grouped_words = words.group_by{|word| word}\n\n    grouped_words.each_with_object({}) do |(word, same_words), summary|\n      summary[word] = same_words.length\n    end\n  end\nend	\N	f	10	3	2014-03-01 22:03:24	2014-03-01 22:03:24	630	\N
1433	34	782356caca9c75800242adda	superseded	ruby	bob	class Bob\n\n  def hey(statement)\n     case \n      when statement == ("")\n      "Fine. Be that way!"\n      when statement == statement.upcase\n      "Woah, chill out!"\n      when statement.end_with?("?")\n      "Sure."\n      else\n      "Whatever."\n    end\n  end\nend	\N	f	4	1	2014-02-06 12:22:10	2014-02-06 12:22:10	631	\N
1434	34	40a39d00a924878eb6429547	done	ruby	bob	class Bob\n\n  def hey(statement)\n   case \n   when statement == ("")\n    "Fine. Be that way!"\n  when statement == statement.upcase\n    "Woah, chill out!"\n  when statement.end_with?("?")\n    "Sure."\n  else\n    "Whatever."\n  end\nend\nend	\N	f	0	2	2014-02-11 11:39:47	2014-02-11 11:39:47	631	\N
1435	34	dd7d5828320d7008fe19c6da	done	ruby	beer-song	class Beer\n  def sing(start_verse, end_verse=0)\n    start_verse.downto(end_verse).map {|v| verse(v)}.join("\\n") + "\\n"\n  end\n\n  def verse(bottles)\n    "#{bottle_phrase(bottles).capitalize} on the wall, #{bottle_phrase(bottles)}.\\n" +\n    "#{take_one_phrase(bottles)}, #{bottle_phrase(bottles-1)} on the wall.\\n"\n  end\n\n  def bottle_phrase(bottles)\n    case bottles\n    when 0 then "no more bottles of beer"\n    when 1 then "1 bottle of beer"\n    when -1 then "99 bottles of beer"\n    else "#{bottles} bottles of beer"\n    end\n  end\n\n  def take_one_phrase(bottles)\n    case bottles\n    when 0 then "Go to the store and buy some more"\n    when 1 then "Take it down and pass it around"\n    else "Take one down and pass it around"\n    end\n  end\nend	\N	f	1	1	2014-02-28 12:18:28	2014-02-28 12:18:28	632	\N
1436	34	e5f4b9f06455c88a01ae52b5	done	ruby	grade-school	class School\n  attr_reader :db\n  def initialize\n    @db = Hash.new { |hash, grade| hash[grade] = [] }\n  end\n\n  def add (name, grade)\n   @db[grade] << name\n  end\n\n  def grade(grade)\n    @db[grade]\n  end\n\n  def sort\n    sorted_hash = {}\n    @db.keys.sort.each do |key|\n      sorted_hash[key] = @db[key].sort\n    end\n    sorted_hash\n  end\nend	\N	f	0	1	2014-02-23 10:15:14	2014-02-23 10:15:14	633	\N
1437	34	a004b6c15e41e4dd62c637c1	pending	ruby	raindrops	class Raindrops\n  def self.convert(n)\n    s = ""\n    s += "Pling" if n % 3 == 0\n    s += "Plang" if n % 5 == 0\n    s += "Plong" if n % 7 == 0\n    s == "" ? n.to_s : s\n  end\nend	\N	f	0	1	2014-03-04 02:08:02	2014-03-04 02:08:02	634	raindrops.rb
1438	34	bb4402b95a2314535a46f69b	done	ruby	grains	class Grains\n\n  def square n\n    return 2 ** (n - 1)\n  end\n\n  def total\n    return 2 ** 64 - 1\n  end\n\nend	\N	f	0	1	2014-02-05 17:07:09	2014-02-05 17:07:09	635	\N
1440	34	7578c1cb97950928ad7e69cb	done	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @target = word\n  end\n\n  def match(list)\n    list.select{|word| anagram?(word)}\n  end\n\n  def anagram?(word)\n    same_chars(word) && !same_word(word)\n  end\n\n  private\n\n  def same_chars(word)\n    sorted_chars(word) == sorted_chars(@target)\n  end\n\n  def same_word(word)\n    @target.casecmp(word) == 0\n  end\n\n  def sorted_chars(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	0	2	2014-02-01 00:28:12	2014-02-01 00:28:12	637	\N
1441	34	b5f7d59b7aab6d2d248b471c	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @target = word\n  end\n\n  def match(list)\n    list.each_with_object([]) do |word, matches|\n      matches << word if anagram?(word)\n    end\n  end\n\n  def anagram?(word)\n    same_chars(word) && !same_word(word)\n  end\n\n  private\n\n  def same_chars(word)\n    anagramized(word) == anagramized(@target)\n  end\n\n  def same_word(word)\n    @target.casecmp(word) == 0\n  end\n\n  def anagramized(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	5	1	2014-02-23 09:21:21	2014-02-23 09:21:21	637	\N
1442	34	0c743d018205a000a6b18a43	done	ruby	gigasecond	class Gigasecond\n  def initialize born_at\n    @born_at = born_at.to_time\n  end\n  def date\n    (@born_at+1_000_000_000).to_date\n  end\nend	\N	f	1	1	2014-02-28 05:47:22	2014-02-28 05:47:22	638	gigasecond.rb
1443	36	822e71b3297c006d2f303832	done	ruby	point-mutations	class DNA < Struct.new(:strand)\n  def hamming_distance(other)\n    HammingDistance.new(strand, other).size\n  end\nend\n\nclass HammingDistance < Struct.new(:strand, :other)\n  def size\n    difference.size\n  end\n\n  def difference\n    shortest.chars.each_with_index.reject do |nucleotide, index|\n      nucleotide == longest[index]\n    end\n  end\n\n  private\n\n  def shortest\n    by_length.first\n  end\n\n  def longest\n    by_length.last\n  end\n\n  def by_length\n    [strand, other].sort_by(&:length)\n  end\nend	\N	f	2	1	2014-01-14 11:53:14	2014-01-14 11:53:14	639	\N
1444	36	bb125f8d0bd5db3425f39efc	done	ruby	nucleotide-count	class DNA\n  VALID_DNA_NUCLEOTIDES = ["A", "C", "G", "T"]\n  VALID_NUCLEOTIDES = VALID_DNA_NUCLEOTIDES + ["U"] # you can add arrays together and get back a single array\n\n  def initialize(dna)\n    @nucleotides = separate_nucleotides(dna.upcase)\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include?(nucleotide)\n    @nucleotides[nucleotide] || 0\n  end\n\n  def nucleotide_counts\n    @nucleotides\n  end\n\nprivate\n\n  def separate_nucleotides(string)\n\n    hash = VALID_DNA_NUCLEOTIDES.each_with_object({}) do |nucleotide, hash|\n      hash[nucleotide] = 0\n    end\n\n    string.each_char do |letter|\n      raise ArgumentError unless VALID_DNA_NUCLEOTIDES.include?(letter)\n      hash[letter] += 1\n    end\n\n    hash\n\n  end\n\nend	\N	f	0	1	2014-01-11 01:08:52	2014-01-11 01:08:52	640	\N
1445	36	bdfbcf5261593c391704f594	hibernating	ruby	bob	class Bob\n  def hey(input)\n    @input = input\n    return 'Fine. Be that way.' if snubbed?\n    return "Sure."              if questioned?\n    return "Woah, chill out!"   if yelled_at?\n    return "Whatever."\n  end\n\n  protected\n\n  def snubbed?\n      @input.nil? || @input.empty?\n  end\n\n  def questioned?\n    @input.end_with? '?'\n  end\n\n  def yelled_at?\n    @input == @input.upcase\n  end\nend	\N	f	0	2	2014-01-08 22:02:01	2014-01-08 22:02:01	641	\N
1446	36	c46557529814186605110aed	superseded	ruby	bob	class Bob\n  def hey(arg)\n    return 'Fine. Be that way.' if arg.nil? || arg.empty?\n    return "Sure." if arg[-1] == '?'\n    return "Woah, chill out!" if arg.upcase == arg\n    "Whatever."\n  end\nend	\N	f	0	1	2014-01-10 16:36:23	2014-01-10 16:36:23	641	\N
1448	36	4b9fc5145d486c3aff060c50	superseded	ruby	beer-song	class Beer\n  VERSE_0 = "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n            "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  VERSE_N_A = "%d %s of beer on the wall, %d %s of beer.\\n"\n  VERSE_N_B = "Take %s down and pass it around, %s %s of beer on the wall.\\n"\n\n  def verse(count)\n    case count\n    when 0\n      VERSE_0\n    else\n      sprintf(VERSE_N_A, count, pluralise(count), count, pluralise(count)) +\n      sprintf(VERSE_N_B, (count > 1 ? 'one' : 'it'),\n              (count == 1 ? 'no more' : count - 1), pluralise(count - 1))\n    end\n  end\n\n  def sing(start, stop = 0)\n    start.downto(stop).each_with_object([]) do |n, verses|\n      verses.push verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  private\n\n  def pluralise(count)\n    count == 1 ? 'bottle' : 'bottles'\n  end\nend	\N	f	1	1	2014-01-14 12:09:46	2014-01-14 12:09:46	642	\N
1451	36	b607262d635953e63813cb76	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word  = word.downcase\n    @chars = @word.chars.sort\n  end\n\n  def match(list)\n    list.select { |candidate| anagram?(candidate.downcase) }\n  end\n\n  private\n  def anagram?(candidate)\n    return false if candidate == @word\n    candidate.chars.sort == @chars\n  end\nend	\N	f	3	1	2014-01-17 07:10:17	2014-01-17 07:10:17	643	\N
1452	36	7a5d61e03cdf0f7c3ae6f5be	done	ruby	anagram	# Taking it too far ;-)\nclass Anagram\n  def initialize(word)\n    @word  = Word(word)\n  end\n\n  def match(list)\n    list.select { |candidate| @word.anagram_of?(candidate) }\n  end\n\n  module Conversions\n    module_function\n    def Word(object)\n      case object\n      when Word then object\n      else object.to_str.extend(Word)\n      end\n    end\n  end\n  include Conversions\n\n  module Word\n    def anagram_of?(other)\n      !same_word_as?(other) && same_letters_as?(other)\n    end\n\n    protected\n    def letters\n      downcase.chars.sort\n    end\n\n    private\n    def same_letters_as?(other)\n      Conversions::Word(other).letters == letters\n    end\n\n    def same_word_as?(other)\n      other.downcase == self.downcase\n    end\n  end\nend	\N	f	3	2	2014-01-31 04:38:23	2014-01-31 04:38:23	643	\N
1453	36	b8977b262effbea8b9508da0	done	ruby	word-count	class Phrase\n  attr_reader :input \n\n  def initialize(input)\n    @input = input.downcase.scan(/\\w+/)\n\n  end\n\n  def word_count\n      counts = Hash.new(0)\n      @input.each { |word| counts[word] += 1}\n      return counts\n  end\n\nend	\N	f	3	1	2014-01-26 23:37:33	2014-01-26 23:37:33	644	\N
1454	36	d02c04f0d8527072dc2e4ede	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    minlen = [a.length, b.length].min\n    diff = 0\n    (0..minlen-1).each do |i|\n      diff += 1 unless a[i] == b[i]\n    end\n    diff\n  end\nend	\N	f	2	1	2014-02-10 15:40:47	2014-02-10 15:40:47	645	\N
1455	36	017575d17893be6e59496b61	superseded	ruby	grade-school	class School\n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new([])\n  end\n  \n  def add(name, grade)\n    @db[grade] += [name]\n  end\n  \n  def grade(grade)\n    @db[grade]\n  end\n  \n  def sort\n    Hash[@db.sort.map { |key,value| [key, value.sort] }]\n  end\nend	\N	f	1	2	2014-01-02 08:01:21	2014-01-02 08:01:21	646	\N
1456	36	3865437fb5a9fe89176f9787	done	ruby	grade-school	class School\n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new([])\n  end\n  \n  def add(name, grade)\n    @db[grade] += [name]\n  end\n  \n  def grade(grade)\n    @db[grade]\n  end\n  \n  def sort\n    Hash[@db.sort.map { |grade,name| [grade, name.sort] }]\n  end\nend	\N	f	0	3	2014-01-03 11:37:49	2014-01-03 11:37:49	646	\N
1457	36	8a9fd614e0b1469dfde33f54	superseded	ruby	grade-school	class School\n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new([])\n  end\n  \n  def add(name, grade)\n    @db[grade].empty? ? @db[grade] = [name] : @db[grade] << name\n  end\n  \n  def grade(grade)\n    @db[grade]\n  end\n  \n  def sort\n    sorted = {}\n    @db.keys.sort.each { |key| sorted[key] = @db[key].sort }\n    sorted\n  end\nend	\N	f	1	1	2014-01-04 03:16:33	2014-01-04 03:16:33	646	\N
1458	36	8dfe3969ddef2cbc016d03e8	pending	ruby	leap	class Year  \n  def Year.leap? number\n    number % 400 == 0 || number % 4 == 0 && number % 100 != 0\n  end\nend	\N	f	5	1	2014-02-20 00:49:48	2014-02-20 00:49:48	647	year.rb
1459	36	445f2b22ed3fc046e161889a	superseded	ruby	rna-transcription	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub("T", "U")\n  end\nend	\N	f	3	2	2014-01-24 04:04:39	2014-01-24 04:04:39	648	\N
1460	36	8b7377465e5b5893cca151f4	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "a"\n  CYTOSINE = "c"\n  GUANINE = "g"\n  THYMINE = "t"\n  URACIL = "u"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(THYMINE, URACIL)\n  end\nend	\N	f	3	3	2014-02-01 11:21:11	2014-02-01 11:21:11	648	\N
1461	36	d71c27e5cd1de3b022ee4eac	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(THYMINE, URACIL)\n  end\nend	\N	f	3	4	2014-02-06 19:55:48	2014-02-06 19:55:48	648	\N
1462	36	37e118a2433108229fbf3034	done	ruby	rna-transcription	class RNA\n  URACIL = "U"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  # This would work great if MRI's String#== would actually call .to_str on other\n  def to_str\n    @nucleotides.dup\n  end\nend\n\nclass DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n   nucleotides_to_rna_nucleotides\n  end\n\n  private\n\n  def nucleotides_to_rna_nucleotides\n    @nucleotides.tr(THYMINE, RNA::URACIL)\n  end\nend	\N	f	3	7	2014-02-08 04:48:54	2014-02-08 04:48:54	648	\N
1463	36	bd846c99fbf702b60293330a	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_data)\n    @dna_data = dna_data\n  end\n\n  def to_rna\n    @dna_data.gsub("T", "U")\n  end\nend	\N	f	0	1	2014-02-08 17:40:39	2014-02-08 17:40:39	648	\N
1464	36	cca530430f58b98422f48a45	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  RNA_MAPPING = {\n    THYMINE => URACIL\n  }\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(/[#{RNA_MAPPING.keys.join}]/, RNA_MAPPING)\n  end\nend	\N	f	5	5	2014-02-13 12:48:03	2014-02-13 12:48:03	648	\N
1465	36	9e891fe71f5bfd9d936a9820	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  TO_RNA_MAPPING = {\n    THYMINE => URACIL\n  }\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(nucleotides_to_map, TO_RNA_MAPPING)\n  end\n\n  private\n\n  def nucleotides_to_map\n    /[#{TO_RNA_MAPPING.keys.join}]/\n  end\nend	\N	f	5	6	2014-02-14 22:25:08	2014-02-14 22:25:08	648	\N
1466	36	1e4070a6aed2f53057750e09	superseded	ruby	etl	class ETL\n  class << self\n    def transform(dataset)\n      dataset.inject({}) do |store, item|\n        values = item.last\n        point = item.first\n\n        values.each {|v| store[v.downcase] = point }\n        store\n      end\n    end\n  end\nend	\N	f	2	1	2014-01-23 06:36:51	2014-01-23 06:36:51	649	etl.rb
1472	32	f44c188782ec2866173c16ac	hibernating	ruby	bob	module Responder\n  RESPONSE_TO_SILENCE         = "Fine. Be that way!"\n  RESPONSE_TO_YELLING         = "Woah, chill out!"\n  RESPONSE_TO_QUESTIONING     = "Sure."\n  RESPONSE_TO_EVERYTHING_ELSE = "Whatever."\n\n  def reply_to(phrase)\n    return RESPONSE_TO_SILENCE     if given_silence?(phrase)\n    return RESPONSE_TO_YELLING     if given_yelling?(phrase)\n    return RESPONSE_TO_QUESTIONING if given_questioning?(phrase)\n    return RESPONSE_TO_EVERYTHING_ELSE\n  end\n\n  def given_silence?(phrase)\n    phrase.strip.empty?\n  end\n\n  def given_yelling?(phrase)\n    phrase.upcase == phrase\n  end\n\n  def given_questioning?(phrase)\n    phrase.end_with?("?")\n  end\nend\n\nclass Bob\n  include Responder\n\n  def hey(phrase)\n    reply_to(phrase.to_s)\n  end\nend	\N	f	0	5	2013-10-06 17:06:20	2013-10-06 17:06:20	651	\N
1473	32	6bc1bd47942c74d098bc547a	superseded	ruby	bob	require_relative 'responder'\n\nclass Bob\n  include Responder\n\n  def hey(phrase)\n    respond_to(phrase)\n  end\nend	\N	f	1	1	2013-10-18 02:06:29	2013-10-18 02:06:29	651	\N
1474	32	ced3a6bdc9bc3430e93322a9	superseded	ruby	bob	module Responder\n  RESPONSE_TO_SILENCE         = "Fine. Be that way!"\n  RESPONSE_TO_YELLING         = "Woah, chill out!"\n  RESPONSE_TO_QUESTIONING     = "Sure."\n  RESPONSE_TO_EVERYTHING_ELSE = "Whatever."\n\n  SILENT_PHRASE_STRIPPED_LENGTH = 0\n  QUESTIONING_TOKEN             = "?"\n\n  def respond_to(phrase)\n    phrase = stringify!(phrase)\n    return RESPONSE_TO_SILENCE     if given_silence?(phrase)\n    return RESPONSE_TO_YELLING     if given_yelling?(phrase)\n    return RESPONSE_TO_QUESTIONING if given_questioning?(phrase)\n    return RESPONSE_TO_EVERYTHING_ELSE\n  end\n\n  def stringify!(phrase)\n    phrase.to_s\n  end\n\n  def given_silence?(phrase)\n    phrase.strip.length == SILENT_PHRASE_STRIPPED_LENGTH\n  end\n\n  def given_yelling?(phrase)\n    phrase.upcase == phrase\n  end\n\n  def given_questioning?(phrase)\n    phrase.end_with?(QUESTIONING_TOKEN)\n  end\nend	\N	f	2	2	2013-12-12 09:05:24	2013-12-12 09:05:24	651	\N
1475	32	a62eb0f2829f35d27e5949ae	superseded	ruby	bob	# Iteration 1 had bob.rb, iteration 2 had responder.rb; collapsing\n# them together for convenience here. Iteration 3 is the final one.\nmodule Responder\n  RESPONSE_TO_SILENCE         = "Fine. Be that way!"\n  RESPONSE_TO_YELLING         = "Woah, chill out!"\n  RESPONSE_TO_QUESTIONING     = "Sure."\n  RESPONSE_TO_EVERYTHING_ELSE = "Whatever."\n\n  def reply_to(phrase)\n    return RESPONSE_TO_SILENCE     if given_silence?(phrase)\n    return RESPONSE_TO_YELLING     if given_yelling?(phrase)\n    return RESPONSE_TO_QUESTIONING if given_questioning?(phrase)\n    return RESPONSE_TO_EVERYTHING_ELSE\n  end\n\n  def given_silence?(phrase)\n    phrase.strip.empty?\n  end\n\n  def given_yelling?(phrase)\n    phrase.upcase == phrase\n  end\n\n  def given_questioning?(phrase)\n    phrase.end_with?("?")\n  end\nend\n\nclass Bob\n  include Responder\n\n  def hey(phrase)\n    reply_to(phrase.to_s)\n  end\nend	\N	f	2	4	2013-12-15 16:14:20	2013-12-15 16:14:20	651	\N
1476	32	ecce3484e1dff8fd129d365d	done	ruby	accumulate	class Array\n  def accumulate\n    inject([]) {|memo, e| memo << yield(e)}\n  end\nend	\N	f	1	1	2013-08-18 11:28:53	2013-08-18 11:28:53	652	\N
1477	32	9d06e2ed9d7b83a822b02251	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t#detector = s.split('').shuffle(s.length()).join\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\tword.select do |word|\n\t\t\tword.split= @word\n\n\t\tend\n\tend\n\nend	\N	f	1	1	2013-08-15 17:31:06	2013-08-15 17:31:06	653	\N
1478	32	dbe88fda82658eb9d2c347dd	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t#detector = s.split('').shuffle(s.length()).join\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\t\tword.split("") == @word.split("")\n\t\tend\nend\n\n#The split method helps us begin scrambling but, \n# the letters are dis organized	\N	f	1	4	2013-08-27 08:36:56	2013-08-27 08:36:56	653	\N
1479	32	f4ff63020834c2cc777cee5c	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t#detector = s.split('').shuffle(s.length()).join\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\t[]\nend	\N	f	0	2	2013-09-13 09:10:07	2013-09-13 09:10:07	653	\N
1480	32	3606bf4da1c480d254b3e9fa	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t#detector = s.split('').shuffle(s.length()).join\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\t\tword == @word\n\t\tend\nend\n\n# will not pass because word& @word are not =	\N	f	1	3	2013-10-12 11:29:17	2013-10-12 11:29:17	653	\N
1481	32	0f69acfc0e0e04702c3446e2	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t#detector = s.split('').shuffle(s.length()).join\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\t\tword.split("").sort == @word.split("").sort\n\t\tend\nend	\N	f	1	5	2013-10-18 11:55:49	2013-10-18 11:55:49	653	\N
1482	32	99f9e9fd4dcb71681ff348ac	superseded	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\t\tword.split("").sort == @word.split("").sort\n\t\tend\n  end\nend	\N	f	1	6	2013-11-05 18:31:38	2013-11-05 18:31:38	653	\N
1483	32	56c21b7d289e737a1dff48de	done	ruby	anagram	class Anagram\n\n\tdef initialize(word)\n\t\t@word = word\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\t\tword.split("").sort == @word.split("").sort\n\t\tend\n  end\nend	\N	f	3	7	2014-01-17 05:18:04	2014-01-17 05:18:04	653	\N
1484	32	b58c13928ef723e11e40d179	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if @year %4 == 0 && @year %100 != 0  || @year %4 == 0 && @year %400 == 0\n      true\n    else\n      false\n    end\n  end\n\nend	\N	f	0	1	2013-10-19 01:45:23	2013-10-19 01:45:23	654	\N
1486	32	23b1e6bdb3356f47f1486924	done	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    !century? && vanilla? || exceptional_century?\n  end\n\n  def vanilla?\n    @year %4 == 0\n  end\n\n  def century?\n    @year %100 == 0\n  end\n\n  def exceptional_century?\n    @year %400 == 0\n  end\n\nend	\N	f	4	3	2014-01-27 04:57:21	2014-01-27 04:57:21	654	\N
1488	32	bd3e4579ebe7983b07865878	superseded	ruby	rna-transcription	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub("T", "U")\n  end\nend	\N	f	1	2	2013-09-09 21:42:09	2013-09-09 21:42:09	656	\N
1489	32	e46795bf01b8e61373ebf29d	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "a"\n  CYTOSINE = "c"\n  GUANINE = "g"\n  THYMINE = "t"\n  URACIL = "u"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(THYMINE, URACIL)\n  end\nend	\N	f	1	3	2013-10-23 02:47:57	2013-10-23 02:47:57	656	\N
1490	32	5c9f872357448bf392f943f9	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(THYMINE, URACIL)\n  end\nend	\N	f	1	4	2013-11-05 07:44:41	2013-11-05 07:44:41	656	\N
1491	32	dbae3907aff9670aed331c65	done	ruby	rna-transcription	class RNA\n  URACIL = "U"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  # This would work great if MRI's String#== would actually call .to_str on other\n  def to_str\n    @nucleotides.dup\n  end\nend\n\nclass DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n   nucleotides_to_rna_nucleotides\n  end\n\n  private\n\n  def nucleotides_to_rna_nucleotides\n    @nucleotides.tr(THYMINE, RNA::URACIL)\n  end\nend	\N	f	3	7	2014-01-09 12:03:48	2014-01-09 12:03:48	656	\N
1492	32	79099967759a72ef1b94d78b	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_data)\n    @dna_data = dna_data\n  end\n\n  def to_rna\n    @dna_data.gsub("T", "U")\n  end\nend	\N	f	3	1	2014-01-26 10:44:37	2014-01-26 10:44:37	656	\N
1493	32	ec9653e3492961b11ee964f6	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  RNA_MAPPING = {\n    THYMINE => URACIL\n  }\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(/[#{RNA_MAPPING.keys.join}]/, RNA_MAPPING)\n  end\nend	\N	f	0	5	2014-02-04 20:21:46	2014-02-04 20:21:46	656	\N
1494	32	8fae99d0217d945d5c9176bb	superseded	ruby	rna-transcription	class DNA\n  ADENINE = "A"\n  CYTOSINE = "C"\n  GUANINE = "G"\n  THYMINE = "T"\n  URACIL = "U"\n\n  TO_RNA_MAPPING = {\n    THYMINE => URACIL\n  }\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    @nucleotides.gsub(nucleotides_to_map, TO_RNA_MAPPING)\n  end\n\n  private\n\n  def nucleotides_to_map\n    /[#{TO_RNA_MAPPING.keys.join}]/\n  end\nend	\N	f	5	6	2014-02-21 17:46:14	2014-02-21 17:46:14	656	\N
1495	32	cfd2dff3298401f2b6d6ac1f	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :exchange, :subscriber_number, :value\n\n  def initialize(value)\n    @value = value\n    @area_code, @exchange, @subscriber_number = number.scan(/(...)(...)(....)/).flatten\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange}-#{subscriber_number}"\n  end\n\n  def number\n    parsed.to_s\n  end\n\n  def parsed\n    @parsed ||= PhoneNumberParser.new(value).only_numerals.without_trunk_code.of_valid_length\n  end\n\nend\n\nclass PhoneNumberParser\n  attr_reader :number\n\n  def initialize(value)\n    @number = value\n  end\n\n  def only_numerals\n    PhoneNumberParser.new(number.gsub(/[^\\d]/,''))\n  end\n\n  def without_trunk_code\n    has_trunk_code? ? PhoneNumberParser.new(number[1..-1]) : self \n  end\n\n  def of_valid_length\n    (number.length == 10 || has_trunk_code?) ? self : PhoneNumberParser.new("0000000000")\n  end\n\n  def has_trunk_code?\n    number.start_with?('1') && number.length == 11\n  end\n\n  def to_s\n    @number\n  end\nend	\N	f	0	1	2013-11-05 10:55:27	2013-11-05 10:55:27	657	\N
1496	32	8621ca30e375ca1ce6870652	done	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(value)\n    @number = value.gsub(/[^\\d]/,'')\n    strip_trunk_code\n    ensure_valid_length\n  end\n\n  def to_s\n    "(%s) %s-%s" % number.scan(/(...)(...)(....)/).flatten\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  private\n\n  def strip_trunk_code\n    @number = number[1..-1] if has_trunk_code? \n  end\n\n  def ensure_valid_length\n    @number = "0"*10 unless (number.length == 10 || has_trunk_code?)\n  end\n\n  def has_trunk_code?\n    number.start_with?('1') && number.length == 11\n  end\n\nend	\N	f	1	2	2013-12-09 07:19:46	2013-12-09 07:19:46	657	\N
1497	32	c2def32abbdcc1a2f5602ded	superseded	ruby	point-mutations	class DNA\n  def initialize(strand_string)\n    @strand = string_to_strand(strand_string)\n  end\n\n  def hamming_distance(strand_string)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, string_to_strand(strand_string))\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def string_to_strand(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [(s1)[0..min_length], (s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    strand1.zip(strand2).reject { |n| n[0] == n[1]}.size\n  end\nend	\N	f	1	3	2013-10-21 01:33:25	2013-10-21 01:33:25	658	\N
1500	32	e1f66debdcc055228b4c6f58	done	ruby	point-mutations	class DNA\n  def initialize(strand_string)\n    @strand = string_to_strand(strand_string)\n  end\n\n  def hamming_distance(strand_string)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, string_to_strand(strand_string))\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def string_to_strand(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [(s1)[0..min_length], (s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    strand1.zip(strand2).count { |n| n[0] != n[1] }\n  end\nend	\N	f	2	4	2014-01-11 23:40:38	2014-01-11 23:40:38	658	\N
1501	32	db2ed219b566f05b18bd5db3	superseded	ruby	atbash-cipher	class Atbash\n\n  def self.encode(text)\n    new(text).encode\n  end\n\n  def initialize(text)\n    @text = text\n  end\n\n  def encode\n    each_five(reverse_letters)\n  end\n\n  private\n\n    def each_five(letters)\n      letters.scan(/.{1,5}/).join(" ")\n    end\n\n    def reverse_letters\n      tranform_text.map { |letter| reverse_letter(letter)  }.join  \n    end\n\n    def alphabet\n      "abcdefghijklmnopqrstuvwxyz"\n    end\n\n    def reverse_letter(letter)\n      if is_integer?(letter)\n        letter\n      else\n        index = alphabet.index(letter)\n        alphabet.reverse[index]\n      end\n    end\n\n    def is_integer?(letter)\n      letter == letter.to_i.to_s\n    end\n\n    def tranform_text\n      @text.gsub(/[\\s\\.\\,]/, "").downcase.chars\n    end\n\nend	\N	f	2	1	2013-12-09 22:08:49	2013-12-09 22:08:49	659	atbash.rb
1502	32	dade4ee2cabf86e2d51f23bd	superseded	ruby	atbash-cipher	class Atbash\n\n  def self.encode(text)\n    new(text).encode\n  end\n\n  def initialize(text)\n    @text = text\n  end\n\n  def encode\n    each_five(reverse_letters)\n  end\n\n  private\n\n    def each_five(letters)\n      letters.scan(/.{1,5}/).join(" ")\n    end\n\n    def reverse_letters\n      tranform_text.map { |letter| reverse_letter(letter) }.join\n    end\n\n    def alphabet\n      "abcdefghijklmnopqrstuvwxyz"\n    end\n\n    def reverse_letter(letter)\n      if letter?(letter)\n        index = alphabet.index(letter)\n        alphabet.reverse[index]\n      else\n        letter\n      end\n    end\n\n    def letter?(char)\n      char != char.to_i.to_s\n    end\n\n    def tranform_text\n      @text.downcase.scan(/\\w/)\n    end\n\nend	\N	f	2	2	2013-12-30 19:40:31	2013-12-30 19:40:31	659	atbash.rb
1503	32	b4d4d1eccc6cde5764bf3225	done	ruby	atbash-cipher	class Atbash\n\n  def self.encode(text)\n    new(text).encode\n  end\n\n  def initialize(text)\n    @text = text\n  end\n\n  def encode\n    per_five(reverse_letters)\n  end\n\n  private\n\n    def per_five(letters)\n      letters.scan(/.{1,5}/).join(" ")\n    end\n\n    def reverse_letters\n      tranform_text.map { |char| reverse_letter(char) }.join\n    end\n\n    def alphabet\n      "abcdefghijklmnopqrstuvwxyz"\n    end\n\n    def reverse_letter(char)\n      if letter?(char)\n        index = alphabet.index(char)\n        alphabet.reverse[index]\n      else\n        char\n      end\n    end\n\n    def letter?(char)\n      char != char.to_i.to_s\n    end\n\n    def tranform_text\n      @text.downcase.scan(/\\w/)\n    end\n\nend	\N	f	2	3	2014-01-08 10:42:30	2014-01-08 10:42:30	659	atbash.rb
1504	35	5cb1dec544119a3c6c148702	superseded	ruby	bob	class Bob\n\n  def initialize\n\n  end\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	1	2013-11-15 02:14:26	2013-11-15 02:14:26	660	\N
1505	35	d99331d22916da305faec9fe	superseded	ruby	bob	class Bob\n\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	2	2013-12-04 08:13:16	2013-12-04 08:13:16	660	\N
1506	35	4a3f8f36d3a0a551d32bc89f	hibernating	ruby	bob	class Bob\n\n  def hey(text)\n    if !text.match(/\\S/)\n      'Fine. Be that way!'\n    elsif text == text.upcase\n      "Woah, chill out!"\n    elsif text.split('').last == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	5	3	2014-02-14 14:47:19	2014-02-14 14:47:19	660	\N
1508	35	636562721701e410f06298a8	done	ruby	etl	class ETL\n  def self.transform(old)\n    old.each_with_object(Hash.new(0)) do |x, o|\n      x[1].each { |v| o[v.downcase] = x[0] }\n    end\n  end\nend	\N	f	2	1	2013-11-22 09:41:36	2013-11-22 09:41:36	662	\N
1509	35	117155728d7ede5705924ed5	superseded	ruby	gigasecond	class Gigasecond\n\n  def initialize(date)\n    @birthday = date\n  end\n\n  def date\n    @birthday += Rational(gigaseconds_per_day.to_s)\n  end\n\n  def gigaseconds_per_day\n    one_gigasecond / seconds_in_a_day\n  end\n\n  private\n\n  def one_gigasecond\n    1_000_000_000\n  end\n\n  def seconds_in_a_day\n    24 * 60 * 60\n  end\n\nend	\N	f	4	1	2013-12-12 04:35:52	2013-12-12 04:35:52	663	\N
1510	35	8060f53518aa94d2cb75b93b	done	ruby	gigasecond	class Gigasecond\n  ONE_GIGASECOND = 1_000_000_000\n  SECONDS_IN_A_DAY = 24 * 60 * 60\n\n  def initialize(date)\n    @birthday = date\n  end\n\n  def date\n    @birthday += Rational(gigaseconds_per_day.to_s)\n  end\n\n  def gigaseconds_per_day\n    @result ||= ONE_GIGASECOND / SECONDS_IN_A_DAY\n  end\n\nend	\N	f	0	2	2013-12-25 16:38:56	2013-12-25 16:38:56	663	\N
1511	35	2cf4eeeb159ec79fab5c5dae	done	ruby	rna-transcription	class DeoxyribonucleicAcid < String\n  def to_rna\n    RibonucleicAcid.new(self.gsub(/T/,'U'))\n  end\nend\n\nclass RibonucleicAcid < String\nend	\N	f	3	1	2013-11-17 00:34:57	2013-11-17 00:34:57	664	\N
1513	35	17a11af02458e9889cd6c357	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    every_fourth(year) && (not_every_100th(year) || every_four_hundredth(year))\n  end\n\n  def self.every_fourth(year)\n    year % 4 == 0\n  end\n\n  def self.not_every_100th(year)\n    year % 100 != 0\n  end\n\n  def self.every_four_hundredth(year)\n    year % 400 == 0\n  end\nend	\N	f	5	1	2014-02-17 17:38:03	2014-02-17 17:38:03	665	year.rb
1516	35	79e32dd7418934969b762506	pending	ruby	raindrops	#!/usr/bin/env ruby\n# encoding: utf-8\n# Factores primos de un numero dado\nclass Raindrops\n  def convert(n)\n    return n.to_s if n == 1\n    factores = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n    factores_primos = primos(n)\n    salida = ''\n    factores.each do |key, value|\n      factores_primos.include?(key) ? salida = salida + factores[key] : salida\n    end\n    salida == '' ? salida = n.to_s : salida\n  end\n\n  def primos(n)\n    factores_primos = []\n    loop do\n      factor = (2..n).find { |x| n % x == 0 }\n      factores_primos.push(factor)\n      n /= factor\n      break unless n != 1\n    end\n    factores_primos\n  end\nend	\N	f	0	2	2013-12-23 06:38:55	2013-12-23 06:38:55	667	raindrops.rb
1517	35	2b04b699342f4efdba3ca86a	done	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize(input)\n    @input = prepare(input)\n  end\n\n  def match(words)\n    words.select { |word| prepare(word) == input }\n  end\n\n  private\n\n  def prepare(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	4	1	2013-11-26 09:02:44	2013-11-26 09:02:44	668	\N
1518	35	29fb0bebe4df43a890a5f85d	done	ruby	trinary	class Trinary\n  attr_reader :text\n  def initialize(text)\n    @text = normalize text\n  end\n \n  def to_decimal\n    dec = 0\n    text.chars.reverse.each_with_index do |ch, i|\n      dec += ch.to_i*(3**i)\n    end\n    dec\n  end\n\n  def normalize(text)\n    text.match(/\\A[0-2]*\\z/) ? text : '0'\n  end\nend	\N	f	3	3	2013-11-13 17:29:56	2013-11-13 17:29:56	669	\N
1519	35	511ecbaebf51270da2e9375b	superseded	ruby	trinary	class Trinary\n  attr_reader :text\n  def initialize(text)\n    @text = text.gsub(/[^a-z0-2]/,'') ;p @text\n  end\n \n  def to_decimal\n    dec = 0\n    trinary_array.each_with_index do |ch, i|\n      dec += ch.to_i*(3**i)\n    end\n    dec\n  end\n\n  def trinary_array\n    text.chars.reverse\n  end\nend	\N	f	3	1	2013-12-07 03:33:29	2013-12-07 03:33:29	669	\N
1520	35	ab32f970db8423c93b20d2d5	superseded	ruby	trinary	class Trinary\n  attr_reader :text\n  def initialize(text)\n    @text = text.gsub(/[^0-2]/,'')\n  end\n \n  def to_decimal\n    dec = 0\n    text.chars.reverse.each_with_index do |ch, i|\n      dec += ch.to_i*(3**i)\n    end\n    dec\n  end\nend	\N	f	3	2	2013-12-25 17:49:42	2013-12-25 17:49:42	669	\N
1521	35	7cc9e69a2aa55d9b1c33ccbf	superseded	ruby	binary	class Binary\n\n  def initialize(s)\n    if s.tr('^01', '') != s then\n      @s = "0"\n    else\n      @s = s\n    end\n  end\n\n  def to_decimal\n    n = 0\n    @s.chars.reverse.each_with_index { |c, i| n += c.to_i * (2 ** i) }\n    n\n  end\n\nend	\N	f	3	1	2013-10-22 16:54:54	2013-10-22 16:54:54	670	\N
1522	35	da3d7af4b9b20725679ffc69	done	ruby	binary	class Binary\n\n  def initialize(s)\n    @s = s.tr('^01', '') == s ? s : "0"\n  end\n\n  def to_decimal\n    @s.chars.inject(0) { |n, c| n += c.to_i + n }\n  end\n\nend	\N	f	3	2	2013-11-20 21:19:56	2013-11-20 21:19:56	670	\N
1523	35	d797f7d606ea9cd86c4a9407	pending	ruby	atbash-cipher	module Atbash\n  extend self\n\n  def encode(text)\n    text.downcase.each_char.map { |c| cipher[c] }.join.scan(/.{1,5}/).join(" ")\n  end\n\nprivate\n\n  def cipher\n    @cipher ||= create_cipher\n  end\n\n  def create_cipher\n    alphabet = [*"a".."z"]\n    cipher = Hash[alphabet.zip(alphabet.reverse)]\n    (0..9).each { |number| cipher[number.to_s] = number }\n    cipher\n  end\nend	\N	f	4	1	2014-01-13 22:41:07	2014-01-13 22:41:07	671	atbash.rb
1524	35	ac6e7ddc57f893cb4cbdb16a	done	ruby	proverb	class Proverb\n\n  attr_reader :args,\n              :qualifier\n\n  def initialize(*args)\n    has_qualifier = args.last.is_a?(Hash)\n    @args = has_qualifier ? args[0..-2] : args\n    @qualifier = has_qualifier ? args.pop[:qualifier] : ""\n  end\n\n  def to_s\n    song = []\n    args.each_with_index do |_, i|\n      song << phrase(args[i], args[i+1]) unless i == args.length - 1\n    end\n    song << "And all for the want of a #{qualifier != "" ? qualifier + " " : qualifier}#{args[0]}."\n    song = song.join("\\n")\n    return song\n  end\n\n  def phrase(first, second)\n    "For want of a #{first} the #{second} was lost."\n  end\n\nend	\N	f	4	1	2014-01-09 03:06:00	2014-01-09 03:06:00	672	proverb.rb
1525	35	2af612063def350d460a4dad	pending	ruby	strain	class Array\n\n  def keep(&block)\n    select { |e| yield(e)}\n  end\n\n  def discard\n    select { |e| !yield(e)}\n  end\nend	\N	f	3	1	2013-11-11 20:49:35	2013-11-11 20:49:35	673	array.rb
1566	33	f359964f7b901b5e3428487c	superseded	ruby	anagram	class Anagram\n  \n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select {|candidate| is_anagram_of?(candidate)}\n  end\n\n  private\n\n  def is_anagram_of?(candidate)\n    downcased_candidate = candidate.downcase\n    !@word.eql?(downcased_candidate) && permutations.include?(downcased_candidate)\n  end\n\n  def permutations\n    @permutations ||= @word.chars.to_a.permutation.map(&:join)\n  end\nend	\N	f	1	1	2013-10-23 02:39:00	2013-10-23 02:39:00	683	\N
1527	35	94f375a8bf530c59bbf8c82f	superseded	ruby	word-count	class Words\n  attr_reader :input\n\n  def initialize(words)\n    @input = words.downcase\n  end\n\n  def count\n    word_list(input).inject({}) do |memo, word|\n      memo[word] = discard_punctuation(input).split.count(word)input\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    discard_punctuation(words).split.uniq\n  end\n\n  def discard_punctuation(words)\n    words.gsub(/[!&@$%^:,]/,'')\n  end\nend	\N	f	3	4	2013-10-11 16:52:18	2013-10-11 16:52:18	674	\N
1528	35	8ab1443b1eaf65172988ba2e	superseded	ruby	word-count	class Words\n  attr_reader :input\n\n  def initialize(words)\n    @input = words.downcase\n  end\n\n  def count\n    word_list(input).inject({}) do |memo, word|\n      memo[word] = discard_punctuation(input).split.count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    discard_punctuation(words).split.uniq\n  end\n\n  def discard_punctuation(words)\n    words.gsub(/[!&@$%^:,]/,'')\n  end\nend	\N	f	3	5	2013-11-01 20:35:40	2013-11-01 20:35:40	674	\N
1529	35	93a938e35a5970c0465437da	superseded	ruby	word-count	class Words\n  attr_reader :statement\n\n  def initialize(phrase)\n    @statement = phrase.downcase\n  end\n\n  def count\n    word_list(statement).inject({}) do |memo, word|\n      memo[word] = breakdown_phrase(statement).count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    breakdown_phrase(words).uniq\n  end\n\n  def breakdown_phrase(words)\n    words.gsub(/[!&@$%^:,]/,'').split\n  end\nend	\N	f	1	7	2013-11-02 04:51:20	2013-11-02 04:51:20	674	\N
1530	35	c5876b27fd28736314e6f757	done	ruby	word-count	class Words\n  attr_reader :statement\n\n  def initialize(phrase)\n    @statement = phrase\n  end\n\n  def count\n    word_list.inject({}) do |memo, word|\n      memo[word] = normalize.count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list\n    normalize.uniq\n  end\n\n  def normalize\n    statement.downcase.scan(/\\w+/)\n  end\nend	\N	f	3	11	2013-12-06 07:26:26	2013-12-06 07:26:26	674	\N
1531	35	82c1e8f00909a5fe80f3e5c0	superseded	ruby	word-count	class Words\n  attr_reader :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def count\n    word_list(words).inject({}) do |memo, word|\n      memo["#{word}"] = lowercase_words_only(words).split.grep(word).size\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    lowercase_words_only(words).split.uniq\n  end\n\n  def lowercase_words_only(words)\n    words.gsub(/[!&@$%^:,]/,'').downcase\n  end\nend	\N	f	3	1	2013-12-08 02:02:15	2013-12-08 02:02:15	674	\N
1532	35	0e3d082e31b627707ea01df6	superseded	ruby	word-count	class Words\n  attr_reader :words\n\n  def initialize(words)\n    @words = words.downcase\n  end\n\n  def count\n    word_list(words).inject({}) do |memo, word|\n      memo[word] = discard_punctuation(words).split.grep(word).size\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    discard_punctuation(words).split.uniq\n  end\n\n  def discard_punctuation(words)\n    words.gsub(/[!&@$%^:,]/,'')\n  end\nend	\N	f	4	3	2014-01-09 03:40:37	2014-01-09 03:40:37	674	\N
1533	35	297a18ace954ee57bb272086	superseded	ruby	word-count	class Words\n  attr_reader :input\n\n  def initialize(phrase)\n    @input = phrase.downcase\n  end\n\n  def count\n    word_list(input).inject({}) do |memo, word|\n      memo[word] = phrase_breakdown(input).count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    phrase_breakdown(words).uniq\n  end\n\n  def phrase_breakdown(words)\n    words.gsub(/[!&@$%^:,]/,'').split\n  end\nend	\N	f	5	6	2014-01-28 10:01:52	2014-01-28 10:01:52	674	\N
1534	35	b569fe5ad9d4d88e32fa40e8	superseded	ruby	word-count	class Words\n  attr_reader :statement\n\n  def initialize(phrase)\n    @statement = phrase.downcase\n  end\n\n  def count\n    word_list(statement).inject({}) do |memo, word|\n      memo[word] = process_phrase(statement).count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list(words)\n    process_phrase(words).uniq\n  end\n\n  def process_phrase(words)\n    words.scan(/[a-z0-9 ]/).join.split\n  end\nend	\N	f	3	8	2014-02-01 06:51:19	2014-02-01 06:51:19	674	\N
1535	35	13cb752fd2014e241b733690	superseded	ruby	word-count	class Words\n  attr_reader :statement\n\n  def initialize(phrase)\n    @statement = phrase\n  end\n\n  def count\n    word_list.inject({}) do |memo, word|\n      memo[word] = process_phrase.count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list\n    process_phrase.uniq\n  end\n\n  def process_phrase\n    statement.lowercase_words_and_numbers_array\n  end\nend\n\n\n\nclass String\n  def lowercase_words_and_numbers_array\n    downcase.scan(/[a-z0-9 ]/).join.split\n  end\nend	\N	f	4	9	2014-02-17 14:08:07	2014-02-17 14:08:07	674	\N
1536	35	57f2b8993bc5399d537e9148	superseded	ruby	word-count	class Words\n  attr_reader :statement\n\n  def initialize(phrase)\n    @statement = phrase\n  end\n\n  def count\n    word_list.inject({}) do |memo, word|\n      memo[word] = process_phrase.count(word)\n      memo\n    end\n  end\n\nprivate\n  def word_list\n    process_phrase.uniq\n  end\n\n  def process_phrase\n    normalize(statement)\n  end\n\n  def normalize(word)\n    word.downcase.scan(/[a-z0-9 ]/).join.split\n  end\nend	\N	f	5	10	2014-02-24 20:13:35	2014-02-24 20:13:35	674	\N
1538	33	9b182dbd8cd20837723ebce3	hibernating	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, class_number)\n    return @db[class_number].push(name) unless @db[class_number].nil?\n\n    @db[class_number] = [name]\n  end\n\n  def grade(class_number)\n    @db.fetch(class_number, [])\n  end\n\n  def sort\n    sorted_db = @db.sort.each do |class_number, students|\n      students.sort!\n    end\n\n    Hash[sorted_db]\n  end\nend	\N	f	1	2	2013-12-01 21:49:09	2013-12-01 21:49:09	675	school.rb
1605	40	f88cfb82eadf2a2db8033ff8	pending	ruby	grains	class Grains\n\n  def square n\n    0b1 << n-1\n  end\n\n  def total\n    @total ||= (1..64).reduce(0) do |sum, n|\n      sum += square n\n    end\n  end\n\nend	\N	f	2	2	2014-02-08 11:06:02	2014-02-08 11:06:02	697	grains.rb
1541	33	5cbf6ac3651c1cbeee5692fb	pending	ruby	binary-search	class BinarySearch\n\n  attr_reader :list\n\n  def initialize(list)\n    raise ArgumentError unless sorted? list\n    @list = list.clone\n  end\n\n  def search_for(item)\n    raise RuntimeError if list.empty?\n    find_on_left(item) || find_on_right(item) || middle\n  end\n\n  def middle\n    @middle ||= list.length / 2\n  end\n\nprivate\n\n  def sorted?(list)\n    list.each_cons(2).all? { |a, b| a < b }\n  end\n\n  def find_on_left(item)\n    search(item, on_left) if middle_element > item\n  end\n\n  def find_on_right(item)\n    search(item, on_right) + middle + 1 if middle_element < item\n  end\n\n  def search(item, list)\n    self.class.new(list).search_for(item)\n  end\n\n  def middle_element\n    list[middle]\n  end\n\n  def on_left\n    list[0, middle]\n  end\n\n  def on_right\n    list[(middle + 1)..-1]\n  end\n\nend	\N	f	1	3	2013-11-18 18:54:35	2013-11-18 18:54:35	676	binary.rb
1542	33	fca9780ee79cb0e223e45c08	superseded	ruby	proverb	require 'pry'\nclass Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n\n  attr_reader :consequences\n\n  def chorus\n    lines = []\n    hash_pairs.each do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    original_thing = [consequences[0]]\n    original_thing.unshift(@modifier) if @modifier\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def hash_pairs\n    pairs_consequences = []\n    @consequences.each_cons(2) {|pair| pairs_consequences << pair}\n    pairs_consequences\n  end\nend	\N	f	1	4	2013-09-10 21:16:46	2013-09-10 21:16:46	677	\N
1543	33	6672d5ccfba41c1e8c4a4865	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    consequences.each_cons(2).collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end.join\n  end\n\n  def last_line\n    "And all for the want of a #{adjective.join(' ')}."\n  end\n\n  def adjective\n    [modifier, consequences.first].compact\n  end\nend	\N	f	1	7	2013-10-07 15:22:51	2013-10-07 15:22:51	677	\N
1544	33	70063e0b4d5e5703bea562b7	superseded	ruby	proverb	class Proverb\n  attr_reader :consequences\n\n  def initialize(*consequences)\n    @consequences = consequences\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |k, v|\n      lines << "For want of a #{k} the #{v} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    if @consequences.last.is_a?(Hash)\n      h = @consequences.pop\n    end\n    if h.nil?\n      "And all for the want of a #{consequences[0]}."\n    else\n      "And all for the want of a #{h[:qualifier]} #{consequences[0]}."\n    end\n  end\n\n  private\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	f	0	1	2013-10-14 05:07:37	2013-10-14 05:07:37	677	\N
1545	33	a2981c9202450468b56da272	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n    compute_last_line\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  attr_reader :last_line\n  attr_reader :consequences\n\n  def compute_last_line\n    last = [consequences[0]]\n    last.unshift(@modifier) if @modifier\n    @last_line = "And all for the want of a #{last.join(' ')}."\n  end\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	f	1	3	2013-10-24 02:39:15	2013-10-24 02:39:15	677	\N
1546	33	98c94061f5ccee7a9402bc78	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    chorus =  consequence_pairs.collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end\n    chorus.join\n  end\n\n  def last_line\n    original_thing = [modifier, consequences.first].compact\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def consequence_pairs\n    consequence_pairs = []\n    consequences.each_cons(2) {|pair| consequence_pairs << pair}\n    consequence_pairs\n  end\nend	\N	f	1	5	2013-11-20 19:39:54	2013-11-20 19:39:54	677	\N
1547	33	c7346f37c4a81cfa2bbdb622	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    chorus =  consequence_pairs.collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end\n    chorus.join\n  end\n\n  def last_line\n    original_thing = [modifier, consequences.first].compact\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def consequence_pairs\n    consequences.each_cons(2).collect {|pair| pair}\n  end\nend	\N	f	0	6	2013-12-05 21:11:51	2013-12-05 21:11:51	677	\N
1548	33	0f27a97eafe05a42afa2ad4e	done	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @qualifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :qualifier\n\n  def chorus\n    consequences.each_cons(2).collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end.join\n  end\n\n  def last_line\n    "And all for the want of a #{antecedant.join(' ')}."\n  end\n\n  def antecedant\n    [qualifier, consequences.first].compact\n  end\nend	\N	f	0	8	2014-01-05 01:22:37	2014-01-05 01:22:37	677	\N
1550	33	ef2fa06b1ae9b478ba5bcc98	pending	ruby	hamming	module Hamming\n  extend self\n\n  def compute(first, second)\n    first, second = second, first if first.length > second.length\n    first.chars.zip(second.chars).count { |a, b| a != b }\n  end\n\nend	\N	f	2	1	2014-02-05 23:59:04	2014-02-05 23:59:04	678	hamming.rb
1551	33	8ed09111b355cae21f8ea8fd	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @text = phrase.downcase\n  end\n\n  def word_count\n    word_list.each_with_object(Hash.new(0)) do |word, counts| \n      counts[word] += 1 \n    end\n  end\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\n\nend	\N	f	1	5	2013-10-13 23:32:31	2013-10-13 23:32:31	679	\N
1552	33	7d0e576a49a66c030744cf93	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @lowercase = phrase.downcase\n  end\n\n  def word_count\n    word_list.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  def word_list\n    @lowercase.scan(/\\w+/)\n  end\n\nend	\N	f	1	2	2013-10-16 13:46:29	2013-10-16 13:46:29	679	\N
1553	33	0c1dfed4944c3d7e0dccaa4d	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    @phrase.scan(/\\w+/) { |word| counts[word] += 1 }\n    counts\n  end\n \nend	\N	f	1	1	2013-10-19 13:08:19	2013-10-19 13:08:19	679	\N
1554	33	98543fb4d160fd65091dbc6d	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @text = phrase.downcase\n  end\n\n  def word_count\n    word_list.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\n\nend	\N	f	0	4	2013-11-17 14:47:44	2013-11-17 14:47:44	679	\N
1555	33	0ec4999798a7ead6e9c567b6	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @text= phrase.downcase\n  end\n\n  def word_count\n    word_list.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\n\nend	\N	f	1	3	2013-12-16 13:01:45	2013-12-16 13:01:45	679	\N
1556	33	9e9347cfaba59acebec6a8c5	done	ruby	word-count	class Phrase\n  attr_reader :passage\n  \n  def initialize(phrase)\n    @passage = phrase.downcase\n  end\n\n  def word_count\n    word_list.each_with_object(Hash.new(0)) do |word, counts| \n      counts[word] += 1 \n    end\n  end\n\n  def word_list\n    @passage.scan(/\\w+/)\n  end\n\nend	\N	f	0	6	2014-01-08 14:12:10	2014-01-08 14:12:10	679	\N
1557	33	ae6d6d6020b94f30a516c455	superseded	ruby	bob	class Bob\n  def hey message\n    return 'Fine. Be that way!' if message.strip.empty?\n    return 'Woah, chill out!' if message == message.upcase\n    return 'Sure.' if message.end_with?('?')\n    'Whatever.'\n  end\nend	\N	f	0	2	2013-10-11 18:54:49	2013-10-11 18:54:49	680	\N
1558	33	bd93034fc838a6a2d670a533	done	ruby	bob	class Bob\n  def hey message\n    @message = message\n    return 'Fine. Be that way!' if silence?\n    return 'Woah, chill out!' if shouting?\n    return 'Sure.' if asking?\n    'Whatever.'\n  end\n\n  private\n\n  def silence?\n    @message.strip.empty?\n  end\n\n  def shouting?\n    @message == @message.upcase\n  end\n\n  def asking?\n    @message.end_with?('?')\n  end\nend	\N	f	0	5	2013-10-18 23:28:29	2013-10-18 23:28:29	680	\N
1559	33	30eaea631632197763e47f1f	superseded	ruby	bob	class Bob\n  def hey message\n    return 'Fine. Be that way!' if message.strip.empty?\n    return 'Woah, chill out!' if message == message.upcase\n    return 'Sure.' if message =~ /\\?$/\n    'Whatever.'\n  end\nend	\N	f	1	1	2013-10-26 02:39:46	2013-10-26 02:39:46	680	\N
1560	33	a09e700deaf6c676887ab66b	superseded	ruby	bob	class Bob\n  def hey message\n    return 'Fine. Be that way!' if message.strip.empty?\n    return 'Woah, chill out!' if shouting? message\n    return 'Sure.' if message.end_with?('?')\n    'Whatever.'\n  end\n\n  private\n\n  def shouting? message\n    message == message.upcase\n  end\nend	\N	f	0	3	2013-11-08 05:00:54	2013-11-08 05:00:54	680	\N
1561	33	edc24758954e4d2a39bf2f61	superseded	ruby	bob	class Bob\n  def hey message\n    return 'Fine. Be that way!' if silence? message\n    return 'Woah, chill out!' if shouting? message\n    return 'Sure.' if asking? message\n    'Whatever.'\n  end\n\n  private\n\n  def silence? message\n    message.strip.empty?\n  end\n\n  def shouting? message\n    message == message.upcase\n  end\n\n  def asking? message\n    message.end_with?('?')\n  end\nend	\N	f	2	4	2013-11-23 14:07:21	2013-11-23 14:07:21	680	\N
1562	33	07eb046dfb096faefef8c17d	done	ruby	phone-number	class PhoneNumber\n\n  INVALID_NUMBER_REPLACEMENT = "0000000000"\n\n  attr_reader :number, :area_code, :exchange, :line\n\n  def initialize(number)\n    @number = sanitise(number)\n    @area_code = @number[0..2]\n    @exchange = @number[3..5]\n    @line = @number[6..10]\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange}-#{line}"\n  end\n\nprivate\n  \n  def sanitise(number)\n    to_valid_number(excluding_valid_prefix(to_digits(number)))\n  end\n\n  def to_digits(number)\n    number.gsub(/[\\D]/, "")\n  end\n\n  def excluding_valid_prefix(digits)\n    valid_prefix?(digits) ? digits[1..10] : digits\n  end\n\n  def to_valid_number(digits)\n    digits.length == 10 ? digits : INVALID_NUMBER_REPLACEMENT\n  end\n\n  def valid_prefix?(digits)\n    digits.length == 11 && digits.start_with?('1')\n  end\nend	\N	f	1	1	2013-10-06 20:36:11	2013-10-06 20:36:11	681	\N
1563	33	8879ff7dcd04b4be114bf56b	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other)\n    length_to_compare = [strand.length, other.length].min\n    (0...length_to_compare).inject(0) do |mutations, index|\n      mutations + (strand[index] == other[index] ? 0 : 1)\n    end\n  end\nend	\N	f	1	1	2013-09-18 16:01:01	2013-09-18 16:01:01	682	\N
1564	33	2d21eba300701386df56469c	done	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other)\n    strand.chars.zip(other.chars).count do |(this, that)|\n      this && that && this != that\n    end\n  end\nend	\N	f	1	2	2013-11-19 15:37:58	2013-11-19 15:37:58	682	\N
1565	33	4217f887db79db2fe05d37f3	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select {|candidate| is_anagram_of?(candidate)}\n  end\n\n  private\n\n  def is_anagram_of?(candidate)\n    downcased_candidate = candidate.downcase\n    if (@word.length != candidate.length) || @word.eql?(downcased_candidate)\n      false\n    else\n      character_histogram(@word) == character_histogram(downcased_candidate)\n    end\n  end\n\n  def character_histogram(word)\n    word.chars.to_a.inject(Hash.new(0)) do |histogram, character|\n      histogram[character] += 1\n      histogram\n    end\n  end\n\nend	\N	f	1	2	2013-10-11 21:26:45	2013-10-11 21:26:45	683	\N
1568	33	22ef7b3c8b2aef3e08924b9e	superseded	ruby	rna-transcription	class DNA\n  def initialize(nucleotides)\n    @dna_nucleotides = nucleotides\n    @rna_nucleotides = ""\n  end\n  \n  attr_reader   :dna_nucleotides\n  attr_accessor :rna_nucleotides\n  \n  def to_rna\n    dna_nucleotides.each_char { |n| translate(n) }\n    rna_nucleotides\n  end\n  \n  def translate(nucleotide)\n    if nucleotide.eql?("T")\n      rna_nucleotides << "U"\n    else\n      rna_nucleotides << nucleotide\n    end\n  end\nend	\N	f	1	1	2013-10-03 06:32:19	2013-10-03 06:32:19	684	\N
1569	33	5d768e711e5f69f4627c8b1a	superseded	ruby	rna-transcription	class DNA\n  def initialize(nucleotides)\n    @dna_nucleotides = nucleotides\n  end\n  \n  attr_reader   :dna_nucleotides\n\n  def to_rna\n    dna_nucleotides.gsub(/[T]/, 'U')\n  end\nend	\N	f	1	2	2013-11-11 17:28:31	2013-11-11 17:28:31	684	\N
1570	33	2a1bfe66d1992e0494c4a6ac	hibernating	ruby	rna-transcription	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n  \n  attr_reader :nucleotides\n\n  def to_rna\n    nucleotides.gsub('T', 'U')\n  end\nend	\N	f	3	3	2014-01-08 08:49:56	2014-01-08 08:49:56	684	\N
1572	33	649a7fd667fabd8d24444eea	superseded	ruby	triangle	class Triangle\n  def initialize(*sides)\n    @sides = sides\n    validate\n  end\n\n  def kind\n    case number_of_equal_sides\n    when 0\n      :scalene\n    when 2\n      :isosceles\n    else\n      :equilateral\n    end\n  end\n\n  private\n\n  def validate\n    ensure_trinity\n    ensure_positivity\n    ensure_triangle_inequality\n  end\n\n  def ensure_trinity\n    unless sides.length == 3\n      raise TriangleError, "Triangles have 3 sides, fool!"\n    end\n  end\n\n  def ensure_positivity\n    if sides.any? { |side| side <= 0 }\n      raise TriangleError, "Sides must be positive!"\n    end\n  end\n\n  def ensure_triangle_inequality\n    if sides.any? { |side| perimeter - side <= side }\n      raise TriangleError, "The sum of any two sides must exceed the third!"\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\n\n  def number_of_equal_sides\n    case sides.uniq.length\n    when 3 then 0\n    when 2 then 2\n    when 0 then 3\n    end\n  end\n\n  def sides\n    @sides\n  end\nend\n\n\nclass TriangleError < StandardError\nend	\N	f	1	2	2013-10-10 23:03:58	2013-10-10 23:03:58	685	\N
1573	33	f70a553252a818645ec1ed80	superseded	ruby	triangle	class Triangle\n  def initialize(side1, side2, side3)\n    @side1, @side2, @side3 = side1, side2, side3\n    validate\n  end\n\n  def kind\n    case number_of_equal_sides\n    when 0\n      :scalene\n    when 2\n      :isosceles\n    else\n      :equilateral\n    end\n  end\n\n  private\n\n  def validate\n    ensure_positive\n    ensure_triangle_inequality\n  end\n\n  def ensure_positive\n    if sides.any? { |side| side <= 0 }\n      raise TriangleError, "Sides must be positive!"\n    end\n  end\n\n  def ensure_triangle_inequality\n    if sides.any? { |side| perimeter - side <= side }\n      raise TriangleError, "The sum of any two sides must exceed the third!"\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\n\n  def number_of_equal_sides\n    case sides.uniq.length\n    when 3 then 0\n    when 2 then 2\n    when 0 then 3\n    end\n  end\n\n  def sides\n    [@side1, @side2, @side3]\n  end\nend\n\n\nclass TriangleError < StandardError\nend	\N	f	1	1	2013-11-04 10:31:28	2013-11-04 10:31:28	685	\N
1574	33	0fd913fd4fbbce0a5243b91c	superseded	ruby	triangle	class Triangle\n  def initialize(*sides)\n    @sides = sides\n    validate\n  end\n\n  def kind\n    case number_of_equal_sides\n    when 0 then :scalene\n    when 2 then :isosceles\n    when 3 then :equilateral\n    end\n  end\n\n  private\n\n  def validate\n    ensure_trinity\n    ensure_positivity\n    ensure_triangle_inequality\n  end\n\n  def ensure_trinity\n    unless sides.length == 3\n      raise TriangleError, "Triangles have 3 sides, fool!"\n    end\n  end\n\n  def ensure_positivity\n    if sides.any? { |side| side <= 0 }\n      raise TriangleError, "Sides must be positive!"\n    end\n  end\n\n  def ensure_triangle_inequality\n    if sides.any? { |side| perimeter - side <= side }\n      raise TriangleError, "The sum of any two sides must exceed the third!"\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\n\n  def number_of_equal_sides\n    case sides.uniq.length\n    when 3 then 0\n    when 2 then 2\n    when 1 then 3\n    end\n  end\n\n  def sides\n    @sides\n  end\nend\n\n\nclass TriangleError < StandardError\nend	\N	f	1	3	2013-12-09 17:14:06	2013-12-09 17:14:06	685	\N
1575	33	5ce1b06751ce0b2f1cc547e4	superseded	ruby	triangle	class Triangle\n  def initialize(side1, side2, side3)\n    @sides = [side1, side2, side3]\n    validate\n  end\n\n  def kind\n    case number_of_equal_sides\n    when 0 then :scalene\n    when 2 then :isosceles\n    when 3 then :equilateral\n    end\n  end\n\n  private\n\n  def validate\n    ensure_positivity\n    ensure_triangle_inequality\n  end\n\n  def ensure_positivity\n    if sides.any? { |side| side <= 0 }\n      raise TriangleError, "Sides must be positive!"\n    end\n  end\n\n  def ensure_triangle_inequality\n    if sides.any? { |side| perimeter - side <= side }\n      raise TriangleError, "The sum of any two sides must exceed the third!"\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\n\n  def number_of_equal_sides\n    case sides.uniq.length\n    when 3 then 0\n    when 2 then 2\n    when 1 then 3\n    end\n  end\n\n  def sides\n    @sides\n  end\nend\n\n\nclass TriangleError < StandardError\nend	\N	f	3	4	2014-01-11 22:01:27	2014-01-11 22:01:27	685	\N
1576	33	8788b1c880203b81da5ad465	done	ruby	etl	class ETL\n\n  def self.transform(score_sets)\n    scores = ScrabbleScores.new\n\n    score_sets.each do |score, letters|\n      scores[letters] = score\n    end\n\n    scores.to_h\n  end\nend\n\nclass ScrabbleScores\n\n  def initialize\n    @scores = {}\n  end\n\n  def []=(letters, score)\n    letters.each do |letter|\n      @scores[letter.downcase] = score\n    end\n  end\n\n  def to_h\n    @scores.dup\n  end\nend	\N	f	0	1	2013-09-30 18:06:49	2013-09-30 18:06:49	686	\N
1577	40	5bd3421e4e533a5ea8bdec6f	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :nucleotides\n  \n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n  \n  def to_rna\n    nucleotides.gsub('T','U')\n  end\nend	\N	f	3	1	2014-02-07 19:23:43	2014-02-07 19:23:43	687	\N
1580	40	87e49dc42d1f3e6ed8f13086	superseded	ruby	bob	class Bob\n  def hey(msg)\n    Response.new(msg).speak\n  end\n\n  class Response\n    def initialize(msg)\n      @heard = WordsHeard.new(msg)\n    end\n\n    def speak\n      return "Fine. Be that way!" if @heard.silence?\n      return "Woah, chill out!" if @heard.yelling?\n      return "Sure." if @heard.question?\n      "Whatever."\n    end\n  end\nend\n\nclass WordsHeard\n  def initialize(msg)\n    @msg = msg.to_s\n  end\n  \n  def question?\n    !@msg.match(/.+\\?$/).nil?\n  end\n\n  def yelling?\n    @msg.upcase == @msg\n  end\n\n  def silence?\n    @msg.empty?\n  end\nend	\N	f	5	3	2014-02-18 15:52:23	2014-02-18 15:52:23	688	\N
1581	40	cd9bcce00e25a292282c7609	superseded	ruby	bob	class Bob\n  def hey(msg)\n    Response.new(msg).speak\n  end\n\n  class Response\n    def initialize(msg)\n      @heard = WordsHeard.new(msg)\n    end\n\n    def speak\n      if @heard.silence?\n        "Fine. Be that way!"\n      elsif @heard.yelling?\n        "Woah, chill out!"\n      elsif @heard.question?\n        "Sure."\n      else\n        "Whatever."\n      end\n    end\n  end\nend\n\nclass WordsHeard\n  def initialize(msg)\n    @msg = msg.to_s\n  end\n  \n  def question?\n    @msg.end_with?("?")\n  end\n\n  def yelling?\n    @msg.upcase == @msg\n  end\n\n  def silence?\n    @msg.empty?\n  end\nend	\N	f	5	4	2014-02-20 06:40:12	2014-02-20 06:40:12	688	\N
1582	40	0bd2d13af74b599ebcdc2012	superseded	ruby	bob	#!/usr/bin/env ruby\n# Don Cruse\n\nclass Bob\n  def hey(msg)\n    message = Message.new(msg)\n    return "Fine. Be that way!" if message.silence?\n    return "Woah, chill out!" if message.yelling?\n    return "Sure." if message.question?\n    "Whatever."\n  end\n\n  class Message\n    def initialize(msg)\n      @msg = msg.to_s\n    end\n    def question?\n      !@msg.match(/.+\\?$/).nil?\n    end\n    def yelling?\n      @msg.upcase == @msg\n    end\n    def silence?\n      @msg.empty?\n    end\n  end\nend	\N	f	2	1	2014-03-05 15:19:12	2014-03-05 15:19:12	688	\N
1583	40	bffdcb60a2d7ef7cea3dc7fb	superseded	ruby	bob	class Bob\n  def hey(msg)\n    heard = WordsHeard.new(msg)\n    if heard.silence?\n      "Fine. Be that way!"\n    elsif heard.yelling?\n      "Woah, chill out!"\n    elsif heard.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass WordsHeard\n  def initialize(msg)\n    @msg = msg.to_s\n  end\n\n  def question?\n    @msg.end_with?("?")\n  end\n\n  def yelling?\n    @msg.upcase == @msg\n  end\n\n  def silence?\n    @msg.empty?\n  end\nend	\N	f	0	5	2014-03-06 06:30:42	2014-03-06 06:30:42	688	\N
1584	40	56ba84967ef96ebb7b44f2ce	done	ruby	bob	class Bob\n  def hey(message)\n    heard = WordsHeard.new(message)\n    if heard.silence?\n      "Fine. Be that way!"\n    elsif heard.yelling?\n      "Woah, chill out!"\n    elsif heard.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass WordsHeard\n  def initialize(words)\n    @words = words.to_s\n  end\n\n  def question?\n    @words.end_with?("?")\n  end\n\n  def yelling?\n    @words.upcase == @words\n  end\n\n  def silence?\n    @words.empty?\n  end\nend	\N	f	3	6	2014-03-08 00:13:25	2014-03-08 00:13:25	688	\N
1585	40	cdf85a03f5c308dcef8cb5a9	hibernating	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(student, grade)\n    db[grade] ? db[grade] << student : db[grade] = [student]\n  end\n\n  def grade(year)\n    db[year] ||= []\n  end\n\n  def sort \n    Hash[school_array.sort]\n  end\n\n  def school_array\n    db.collect { |grade, names| [grade, names.sort] }\n  end\n\nend	\N	f	2	1	2014-01-17 09:01:43	2014-01-17 09:01:43	689	\N
1586	40	8789025ef6c0f9753a1b73be	superseded	ruby	word-count	class Phrase\n  def initialize(str)\n    @str = str\n  end\n\n  def word_count\n    @str.gsub(/[^0-9A-Za-z ']/, ' ').split(/ /).inject(Hash.new(0)) { |e, v| e[v.downcase] += 1 unless v.strip == ""; e }\n  end\nend	\N	f	3	1	2014-02-28 16:59:06	2014-02-28 16:59:06	690	phrase.rb
1587	40	9d2b4caba3e115770faa5b18	pending	ruby	word-count	class Phrase\n  def initialize(str)\n    @str = str\n  end\n\n  def word_count\n  \tclean_string_array = @str.gsub(/[^0-9A-Za-z ']/, ' ').split\n  \top_hash = Hash.new(0)\n    clean_string_array.each_with_object(op_hash) do |str, hash| \n    \thash[str.downcase] += 1\n    end\n    op_hash\n  end\nend	\N	f	3	2	2014-03-05 08:39:01	2014-03-05 08:39:01	690	phrase.rb
1588	40	a001b50a599f41203a24b597	superseded	ruby	anagram	class Anagram\n\n  def initialize(input)\n    @original = input.downcase\n  end\n\n  def match(words)\n    words.find_all{|word|is_anagram?(word)}\n  end\n\n  def is_anagram?(input)\n    same_count?(input) && different_word?(input)\n  end\n\n  def count(input)\n    input.split("").each_with_object(Hash.new(0)) do |letter,hash|\n      hash[letter] += 1\n    end\n  end\n\n  def same_count?(input)\n    count(@original)==count(input.downcase)\n  end\n\n  def different_word?(input)\n    @original != input.downcase\n  end\n\n  private :is_anagram?, :count, :same_count?, :different_word?\n\nend	\N	f	0	2	2014-01-15 18:59:18	2014-01-15 18:59:18	691	\N
1589	40	cffd4c544ff95719491674d7	superseded	ruby	anagram	class Anagram\n\n  def initialize(input)\n    @original = input.downcase\n  end\n\n  def match(words)\n    words.find_all{|word|is_anagram?(word)}\n  end\n\n  private\n\n  def is_anagram?(input)\n    same_count?(input) && different_word(input)\n  end\n\n  def count(input)\n    input.split("").each_with_object(Hash.new(0)) do |letter,hash|\n      hash[letter] += 1\n    end\n  end\n\n  def same_count?(input)\n    count(@original)==count(input.downcase)\n  end\n\n  def different_word(input)\n    @original != input.downcase\n  end\n\nend	\N	f	0	1	2014-01-17 01:51:41	2014-01-17 01:51:41	691	\N
1590	40	75a34730e6b47cb291988290	superseded	ruby	anagram	class Anagram\n\n  def initialize(input)\n    @original = input.downcase\n  end\n\n  def match(words)\n    words.find_all{|word|is_anagram?(word.downcase)}\n  end\n\n  def is_anagram?(input)\n    same_count?(input) && different_word?(input)\n  end\n\n  def count(input)\n    input.split("").each_with_object(Hash.new(0)) do |letter,hash|\n      hash[letter] += 1\n    end\n  end\n\n  def same_count?(input)\n    count(@original)==count(input)\n  end\n\n  def different_word?(input)\n    @original != input\n  end\n\n  private :is_anagram?, :count, :same_count?, :different_word?\n\nend	\N	f	0	3	2014-01-20 07:13:13	2014-01-20 07:13:13	691	\N
1591	40	070f804517b44fe228353354	superseded	ruby	anagram	class Anagram\n\n  def initialize(sample)\n    @original = sample.downcase\n  end\n\n  def match(candidate)\n    candidate.find_all{ |word| anagram? word.downcase }\n  end\n\n  private\n\n  def anagram?(candidate)\n    same_count?(candidate) && different_word?(candidate)\n  end\n\n  def same_count?(candidate)\n    @original.chars.sort == candidate.chars.sort\n  end\n\n  def different_word?(candidate)\n    @original != candidate\n  end\n\nend	\N	f	6	4	2014-02-10 03:38:13	2014-02-10 03:38:13	691	\N
1593	40	3ef6ebd55ef26b7f1b16c09f	done	ruby	raindrops	class Raindrops\n\n  def convert(num)\n    unless pling?(num) || plang?(num) || plong?(num)\n      return num.to_s\n    end\n    s = ''\n    s << 'Pling' if pling?(num)\n    s << 'Plang' if plang?(num)\n    s << 'Plong' if plong?(num)\n    s\n  end\n\n  def pling?(number)\n    (number % 3) == 0\n  end\n\n  def plang?(number)\n    (number % 5) == 0\n  end\n\n  def plong?(number)\n    (number % 7) == 0\n  end\n\nend	\N	f	0	1	2014-02-07 17:22:22	2014-02-07 17:22:22	692	\N
1594	40	ac333afcd5d6be0bf63c53dd	superseded	ruby	hamming	class Hamming\n\ndef self.compute(a, b)\n\thamming = 0\n\tif (a == b) then\n\t\treturn hamming\t# Optimisation\n\tend\n\t(0..[a.length, b.length].min-1).each do |i|\n\t\thamming+=1 if a[i] != b[i]\n\tend\n\treturn hamming\nend\n\nend	\N	f	2	1	2014-02-05 17:47:49	2014-02-05 17:47:49	693	\N
1595	40	e10150aa2fa54ad0c48398b3	superseded	ruby	hamming	class Hamming\n\ndef self.compute(a, b)\n\thamming = 0\n\tif (a == b) then\n\t\treturn hamming\t# Optimisation\n\tend\n\ta.each_char.zip(b.each_char) do |l, r|\n\t\t(l.nil? || r.nil?) || (l == r) || hamming += 1\n\tend\n\thamming\nend\n\nend	\N	f	1	2	2014-02-10 14:31:31	2014-02-10 14:31:31	693	\N
1596	40	045ea92b32ad917e094ef58c	done	ruby	hamming	class Hamming\n\ndef self.compute(a, b)\n\thamming = 0\n\ta = a.slice(0,[a.length, b.length].min)\n\ta.each_char.zip(b.each_char) do |l, r|\n\t\t(l == r) || hamming += 1\n\tend\n\thamming\nend\n\nend	\N	f	1	3	2014-03-07 23:52:20	2014-03-07 23:52:20	693	\N
1597	40	56e50c41810b7a343127d1b3	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 and\n      year % 100 != 0 or\n      year % 400 == 0\n  end\nend	\N	f	0	1	2014-01-23 21:30:14	2014-01-23 21:30:14	694	year.rb
1598	40	c64626d71d2a0333b0d511ce	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible_by_four?(year) and\n      not divisible_by_hundred?(year) or\n      divisible_by_four_hundred?(year)\n  end\n\n  def self.divisible_by_four?(year)\n    year % 4 == 0\n  end\n\n  def self.divisible_by_hundred?(year)\n    year % 100 == 0\n  end\n\n  def self.divisible_by_four_hundred?(year)\n    year % 400 == 0\n  end\nend	\N	f	2	2	2014-03-01 12:23:06	2014-03-01 12:23:06	694	leap.rb
1599	40	306f2278c8f27980e9cbd1af	pending	ruby	leap	class Integer\n  def divisible_by?(number)\n    self % number == 0\n  end\nend\n\nclass Year\n  def self.leap?(year)\n    year.divisible_by?(4) and\n      not year.divisible_by?(100) or\n      year.divisible_by?(400)\n  end\nend	\N	f	1	3	2014-03-05 06:02:26	2014-03-05 06:02:26	694	leap.rb
1601	40	d3b993e3a18dcb0513b4aca4	superseded	ruby	phone-number	class PhoneNumber\n\n  def initialize(numbers_string)\n    @numbers_string = normalize(numbers_string)\n  end\n\n  def number\n    valid_phone_number\n  end\n\n\n  def area_code\n    valid_phone_number[0...3]\n  end\n\n  def to_s\n    pretty_print(valid_phone_number)\n  end\n\n  private\n\n  def valid_phone_number\n    if @numbers_string.length == 11 && @numbers_string[0] == '1'\n      @numbers_string[1..-1]\n    elsif @numbers_string.length == 10\n      @numbers_string\n    else\n      empty_phone_string\n    end\n  end\n\n  def correct_length\n    @numbers_string.length == (10 || 11)\n  end\n\n  def normalize(string)\n    string.scan(/\\d/).join\n  end\n\n  def pretty_print(phone_number)\n    "(#{phone_number[0..2]}) #{phone_number[3..5]}-#{phone_number[6..-1]}"\n  end\n\n  def empty_phone_string\n    '0000000000'\n  end\nend	\N	f	1	1	2014-02-22 03:05:14	2014-02-22 03:05:14	695	\N
1603	40	10b686dbab41865c918632c6	done	ruby	nucleotide-count	class DNA\n\n  DNA_NUCLEOTIDES = %w{A C G T}\n  VALID_NUCLEOTIDES = %w(A C G T U)\n\n  attr_accessor :strand\n\n  def initialize(strand)\n    @strand_chars=strand.chars\n    @strand_chars.each do |char|\n      raise ArgumentError, 'DNA is not valid' unless DNA_NUCLEOTIDES.member?(char)\n    end\n  end\n\n  def count(letter)\n    #raise ArgumentError, "Nucleotide is not valid" if letter =~ INVALID_NUCLEOTIDE\n    raise ArgumentError, "Nucleotides are not valid" unless VALID_NUCLEOTIDES.member? letter\n    @strand_chars.count(letter)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object({}) do |nucleotide,number|\n      number[nucleotide]=count(nucleotide)\n    end\n\n  end\n\nend	\N	f	2	2	2014-01-13 18:32:07	2014-01-13 18:32:07	696	\N
1604	40	f0272b87ae99332512efbb46	superseded	ruby	nucleotide-count	class DNA\n\nINVALID_DNA = Regexp.new(/[^ACGTacgt]/)\nINVALID_NUCLEOTIDE = Regexp.new(/[^ACGTUuacgt]/)\n\nattr_accessor :nucleotide\n\n  def initialize(nucleotide)\n    raise ArgumentError, 'DNA is not valid' if nucleotide =~ INVALID_DNA\n    @nucleotide=nucleotide.split("")\n  end\n\ndef count(letter)\n  raise ArgumentError, "Nucleotide is not valid" if letter =~ INVALID_NUCLEOTIDE\n  return 0 if nucleotide.nil?\n  count = 0\n  nucleotide.each do |item|\n     count +=1 if item == letter\n  end\n  count\nend\n\ndef nucleotide_counts\n  nucleotide_counts = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n  nucleotide_counts["A"] = count("A")\n  nucleotide_counts["T"] = count("T")\n  nucleotide_counts["C"] = count("C")\n  nucleotide_counts["G"] = count("G")\n  nucleotide_counts\nend\n\nend	\N	f	2	1	2014-02-09 04:57:40	2014-02-09 04:57:40	696	\N
1	7	a928d8c6799287e3c23ba2a9	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    @hash         = Hash.new 0\n\n    array_of_words.group_by{ |word| word.match(/[[:word:]]*/).to_s.downcase }.\n                    each do |key, value|\n                      @hash[key] = value.count unless key == ""\n                    end\n\n    @hash\n  end\n\n  private\n  def array_of_words\n    @phrase.gsub(",", ", ").split\n  end\nend	\N	f	2	3	2013-12-29 23:17:58	2013-12-29 23:17:58	1	\N
3	7	711bfbf69369813fd5fbbd8d	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    @hash         = Hash.new 0\n\n    array_of_words.group_by{ |word| word.match(/[[:word:]]*/).to_s.downcase }.\n                    each do |key, value|\n                      @hash[key] = value.count unless key == ""\n                    end\n\n    @hash\n  end\n\n  private\n  def add_one_to_count word\n    word = word.match(/[[:word:]]*/).to_s.downcase\n    @hash[word] += 1 unless word == ""\n  end\n\n  def array_of_words\n    @phrase.gsub(",", ", ").split\n  end\nend	\N	f	3	2	2014-01-07 20:48:49	2014-01-07 20:48:49	1	\N
19	7	d273d6726688195d4a55978e	superseded	clojure	rna-transcription	(ns dna\n  (require [clojure.string :as str]))\n\n(define thymine "T")\n(define uracil "U")\n\n(defn to-rna\n  [dna]\n  (str/replace dna thymine uracil))	\N	f	0	1	2014-01-12 23:23:38	2014-01-12 23:23:38	5	\N
22	7	0b24bd70f3a3646f250576d8	superseded	ruby	proverb	class Proverb\n  \n  def initialize(*parts)\n    if parts.last.kind_of? Hash\n      @qualifier = parts.pop.fetch(:qualifier)\n    end\n    @parts = parts \n  end\n\n  def to_s\n    add(all_verses) + ending\n  end\n\n  private\n\n    def add(verses)\n      verses.reduce(:+)\n    end\n\n    def all_verses\n      @parts.each_cons(2).map do |current_part, next_part| \n        verse(current_part, next_part) \n      end\n    end\n\n    def verse(current_part, next_part)\n      "For want of a #{current_part} the #{next_part} was lost.\\n"\n    end\n\n    def ending\n      if @qualifier \n        "And all for the want of a #{@qualifier} nail."\n      else\n        "And all for the want of a nail."\n      end\n    end\n\nend	\N	f	0	1	2014-01-11 11:25:16	2014-01-11 11:25:16	7	\N
27	7	47050a4a426c12d857e74ccd	pending	javascript	bob	// bob.js\n// I wanted to do this without the use of any control structures:\n// no if-else, for loops, case statements, etc.\n(function(){\n\tvar Bob = function(){\n\t\tvar statementTests = [\n\t\t\t{\n\t\t\t\tname: 'Yelling',\n\t\t\t\ttestFn: function(statement){\n\t\t\t\t\tvar isYelling = statement.toUpperCase() === statement;\n\t\t\t\t\tisYelling &= statement.toLowerCase() !== statement;\n\t\t\t\t\treturn isYelling;\t\n\t\t\t\t},\n\t\t\t\tresponse: 'Woah, chill out!'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Question',\n\t\t\t\ttestFn: function(statement){\n\t\t\t\t\treturn /^.+\\?$/.test(statement);\n\t\t\t\t},\n\t\t\t\tresponse: 'Sure.'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Silence',\n\t\t\t\ttestFn: function(statement){\n\t\t\t\t\treturn /^[\\s]*$/.test(statement);\t\n\t\t\t\t},\n\t\t\t\tresponse: 'Fine. Be that way!'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Default Response',\n\t\t\t\ttestFn: function(statement){\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tresponse: 'Whatever.'\n\t\t\t}],\n\n\t\t\they = function(inStr){\n\t\t\t\tvar response = statementTests.filter(function(item){\n\t\t\t\t\treturn item.testFn.call(this,inStr);\n\t\t\t\t});\n\t\t\t\treturn response[0].response;\n\t\t};\n\t\treturn {\n\t\t\they: hey\n\t\t}\n\t}\n\n\tmodule.exports = Bob;\n})();	\N	f	4	1	2014-01-21 21:10:21	2014-01-21 21:10:21	9	bob.js
31	7	2be95d0a3d8f4d6a6fd4e582	done	elixir	anagram	defmodule Anagram do\n  def match(base, candidates) do\n    Enum.filter candidates, fn(c) -> \n      (caseless base) != (caseless c) && (canonical base) == (canonical c)\n    end\n  end\n  defp caseless(word), do: word |> String.downcase |> String.codepoints\n  defp canonical(word), do: caseless(word) |> Enum.sort\nend	\N	f	3	1	2014-03-13 14:16:16	2014-03-13 14:16:16	12	\N
33	7	092babcaa399b46645d33fce	superseded	javascript	word-count	function words(text) {\n  function strip_punctuation(t) {\n    return t.replace(/[^a-z0-9 ]/g, '');\n  }\n  var analysis = { },\n    corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  for (var i in corpus) {\n    var word = corpus[i];\n    if (!analysis[word]) {\n      analysis[word] = 0;\n    }\n    analysis[word]++;\n  }\n  return analysis;\n}\n\nif (module) {\n  module.exports = words;\n}	\N	f	2	1	2014-01-01 09:37:46	2014-01-01 09:37:46	14	word-count.js
37	7	8cc2a079e261f6e79b90349a	superseded	haskell	kindergarten-garden	{-# LANGUAGE ViewPatterns #-}\n\nmodule Garden (garden, defaultGarden, lookupPlants, Plant(..)) where\n\nimport Control.Arrow ((***), (&&&), first)\nimport Control.Applicative (Applicative, (<$>), (<*>))\nimport Control.Monad (join)\nimport Data.Function (on)\nimport Data.List (sort)\nimport Data.List.Split (chunksOf)\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M\nimport Data.Traversable (sequenceA, traverse)\n\n-- plants must be determined by their first letter!\ndata Plant = Grass | Clover | Radishes | Violets deriving\n             (Bounded, Enum, Eq, Show)\n\ntype Child = String\ntype Garden = Map String [Plant]\n\nlookupPlants :: Child -> Garden -> [Plant]\nlookupPlants = M.findWithDefault []\n\ngarden :: [Child] -> String -> Garden\ngarden children (lines -> [row1, row2])\n  = either error id $ readGarden (sort children) (row1, row2)\ngarden _ _\n  = error "there should be two rows of plants"\n\ndefaultGarden :: String -> Garden\ndefaultGarden = garden $ words\n  "Alice Bob Charlie David Eve Fred Ginny Harriet Ileana Joseph Kincaid Larry"\n\n---\n\nreadGarden :: [Child] -> (String, String) -> Either String Garden\nreadGarden children rows =\n  sequenceA . M.fromListWithKey complain =<< assoc\n  where\n    plantRows = traversePair (readRow $ length children) rows\n    plantSquares = uncurry (zipWith (++) `on` chunksOf 2) <$> plantRows\n    assoc = zip children . map Right <$> plantSquares\n    complain k _ _ = Left $ "duplicate child: " ++ k\n\nreadRow :: Int -> String -> Either String [Plant]\nreadRow n plants\n  | length plants <= 2*n = traverse (tag badPlant toPlant) plants\n  | otherwise            = Left $ "with " ++ show n\n                           ++ " child(ren), each row should have at most "\n                           ++ show (2 * n) ++ " plants"\n  where\n    badPlant = ("unrecognised plant: " ++) . (:[])\n\ntoPlant :: Char -> Maybe Plant\ntoPlant = (`M.lookup` m) where\n  m = M.fromList $ map (head . show &&& id) [minBound ..]\n\ntraversePair :: Applicative f => (a -> f b) -> (a, a) -> f (b, b)\ntraversePair f (x, y) = (,) <$> f x <*> f y\n\ntag :: (a -> e) -> (a -> Maybe b) -> a -> Either e b\ntag e f x = maybe (Left $ e x) Right $ f x	\N	f	2	2	2014-01-07 02:43:40	2014-01-07 02:43:40	15	Garden.hs
39	7	d5cb4b228181a7e4add67f1a	superseded	haskell	kindergarten-garden	{-# LANGUAGE ViewPatterns #-}\n\nmodule Garden (garden, defaultGarden, lookupPlants, Plant(..)) where\n\nimport Control.Arrow ((***), (&&&), first)\nimport Control.Applicative (Applicative, (<$>), (<*>))\nimport Control.Monad (join)\nimport Data.Function (on)\nimport Data.List (sort)\nimport Data.List.Split (chunksOf)\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M\nimport Data.Traversable (sequenceA, traverse)\n\n-- plants must be determined by their first letter!\ndata Plant = Grass | Clover | Radishes | Violets deriving\n             (Bounded, Enum, Eq, Show)\n\ntype Child = String\ntype Garden = Map String [Plant]\n\nlookupPlants :: Child -> Garden -> [Plant]\nlookupPlants = M.findWithDefault [] where\n\ngarden :: [Child] -> String -> Garden\ngarden children (lines -> [row1, row2])\n  = either error id $ readGarden (sort children) (row1, row2)\ngarden _ _\n  = error "there should be two rows of plants"\n\ndefaultGarden :: String -> Garden\ndefaultGarden = garden $ words\n  "Alice Bob Charlie David Eve Fred Ginny Harriet Ileana Joseph Kincaid Larry"\n\n---\n\nreadGarden :: [Child] -> (String, String) -> Either String Garden\nreadGarden children rows\n  = sequenceA . M.fromListWithKey complain =<< assoc where\n  plantRows = traversePair (readRow $ length children) rows\n  plantSquares = uncurry (zipWith (++) `on` chunksOf 2) <$> plantRows\n  assoc = zip children . map Right <$> plantSquares\n  complain k _ _ = Left $ "duplicate child: " ++ k\n\nreadRow :: Int -> String -> Either String [Plant]\nreadRow n plants\n  | length plants <= 2*n = traverse (tag badPlant toPlant) plants\n  | otherwise            = Left $ "with " ++ show n\n                           ++ " child(ren), each row should have at most "\n                           ++ show (2 * n) ++ " plants"\n  where\n    badPlant = ("unrecognised plant: " ++) . (:[])\n\ntoPlant :: Char -> Maybe Plant\ntoPlant = (`M.lookup` m) where\n  m = M.fromList $ map (head . show &&& id) [minBound ..]\n\ntraversePair :: Applicative f => (a -> f b) -> (a, a) -> f (b, b)\ntraversePair f (x, y) = (,) <$> f x <*> f y\n\ntag :: (a -> e) -> (a -> Maybe b) -> a -> Either e b\ntag e f x = maybe (Left $ e x) Right $ f x	\N	f	2	1	2014-02-05 09:40:15	2014-02-05 09:40:15	15	Garden.hs
40	7	ab8c35710d5432bebf5312d2	pending	ruby	roman-numerals	module Roman\n  ROMANS = {\n    1000 => 'M',\n    500 => 'D',\n    100 => 'C',\n    50 => 'L',\n    10 => 'X',\n    5 => 'V',\n    1 => 'I'\n  }\n\n  def to_roman\n    n = self\n    result = ''\n    ROMANS.each do |number, letter|\n      count = n / number\n      if count < 4\n        result += letter * count\n      elsif result[-1] == ROMANS[number * 5]\n        result = result.slice(0..-2)\n        result += letter + ROMANS[number * 10]\n      else\n        result += letter + ROMANS[number * 5]\n      end\n      n -= count * number\n    end\n    result\n  end\nend\n\nclass Fixnum\n  include Roman\nend	\N	f	2	1	2013-12-27 21:20:10	2013-12-27 21:20:10	16	roman.rb
41	7	1318d26852386966f7c22eda	superseded	elixir	phone-number	defmodule Phone do\n\n  @us_phone_number_length 10\n  @area_code_range 0..2\n  @prefix_range 3..5\n  @line_number_range 6..9\n\n  def number(formatted_number) do\n    formatted_number\n      |> strip_formatting\n      |> validate\n  end\n\n  def area_code(number) do\n    segment(number, @area_code_range)\n  end\n\n  def pretty(formatted_number) do\n    n = number(formatted_number)\n    "(#{area_code(n)}) #{prefix(n)}-#{line_number(n)}"\n  end\n\n  defp strip_formatting(formatted_number) do\n    String.replace(formatted_number, %r/\\D/, "")\n  end\n\n  defp validate(number) do\n    case number do\n      << ?1, ten_digit :: [binary, size(10)] >> -> ten_digit\n      << ten_digit :: [binary, size(10)] >> -> ten_digit\n      _ -> "0000000000"\n    end\n  end\n\n  defp prefix(number) do\n    segment(number, @prefix_range)\n  end\n\n  defp line_number(number) do\n    segment(number, @line_number_range)\n  end\n\n  defp segment(number, range) do\n    String.slice(number, Enum.at(range, 0), Enum.count(range))\n  end\n\nend	\N	f	3	2	2013-12-28 01:16:04	2013-12-28 01:16:04	17	\N
43	7	c053ec798aed838eef2ee970	superseded	elixir	phone-number	defmodule Phone do\n\n  @number_length 10\n  @area_code_range 0..2\n  @prefix_range 3..5\n  @line_number_range 6..9\n\n  def number(formatted_number) do\n    formatted_number\n      |> strip_formatting\n      |> validate\n  end\n\n  def area_code(number) do\n    segment(number, @area_code_range)\n  end\n\n  def pretty(formatted_number) do\n    n = number(formatted_number)\n    "(#{area_code(n)}) #{prefix(n)}-#{line_number(n)}"\n  end\n\n  defp strip_formatting(formatted_number) do\n    String.replace(formatted_number, %r/\\D/, "")\n  end\n\n  defp validate(<< ?1, number :: [binary, size(@number_length)]>>), do: number\n  defp validate(<< number :: [binary, size(@number_length)]>>), do: number\n  defp validate(_), do: "0000000000"\n\n  defp prefix(number) do\n    segment(number, @prefix_range)\n  end\n\n  defp line_number(number) do\n    segment(number, @line_number_range)\n  end\n\n  defp segment(number, range) do\n    String.slice(number, Enum.at(range, 0), Enum.count(range))\n  end\n\nend	\N	f	4	3	2014-01-28 08:09:41	2014-01-28 08:09:41	17	\N
48	7	73be54e57aab74c9a4f4802a	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  attr_reader :word\n\n  def match(words)\n    words.grep(self)\n  end\n\n  def ===(anagram)\n    self == anagram && normalized != Anagram(anagram).normalized\n  end\n\n  def ==(anagram)\n    sorted == Anagram(anagram).sorted\n  end\n\n  protected\n\n  def normalized\n    @normalized ||= word.downcase\n  end\n\n  def sorted\n    @sorted ||= normalized.chars.sort\n  end\nend\n\ndef Anagram(arg)\n  return arg if arg.is_a?(Anagram)\n  Anagram.new(arg.to_str)\nend	\N	f	3	1	2014-01-02 09:49:45	2014-01-02 09:49:45	19	\N
56	7	758c8f04e46369d120903706	hibernating	elixir	beer-song	defmodule Beer do\n  def verse(n) do\n    bottles = pluralize(n)\n    next_n = cond do n == 0 -> 99; true -> n-1 end\n    "#{String.capitalize(bottles)} of beer on the wall, #{bottles} of beer.\\n#{take_down(n)}, #{pluralize(next_n)} of beer on the wall.\\n"\n  end\n\n  def sing(from) do\n    sing(from, 0)\n  end\n\n  def sing(from, to) do\n    Stream.iterate(from, &1-1) |> Enum.take(from - to + 1) |> Enum.map_join(fn(n) -> verse(n) <> "\\n" end)\n  end\n\n  defp pluralize(0), do: "no more bottles"\n  defp pluralize(1), do: "1 bottle"\n  defp pluralize(n), do: "#{n} bottles"\n\n  defp take_down(0), do: "Go to the store and buy some more"\n  defp take_down(n) do\n    one = case n do 1 -> "it"; _ -> "one" end\n    "Take #{one} down and pass it around"\n  end\nend	\N	f	1	2	2014-01-05 21:18:20	2014-01-05 21:18:20	22	\N
59	7	227c34432ce01f2c8d62d188	done	haskell	robot-simulator	module Robot (Bearing(..),\n              Robot,\n              mkRobot,\n              coordinates,\n              bearing,\n              simulate,\n              turnRight,\n              turnLeft\n              ) where\nimport Data.List (foldl')\nimport Control.Arrow (first, second)\n\ndata Movement = TurnLeft\n              | TurnRight\n              | Advance\n              deriving (Show, Eq, Enum)\n\ndata Bearing = North\n               | East\n               | South\n               | West\n               deriving (Show, Eq, Enum, Bounded)\n\ntype Coordinates = (Int, Int)\n\ndata Robot = Robot { bearing :: Bearing\n                   , coordinates :: Coordinates\n                   } deriving (Show, Eq)\nmkRobot :: Bearing -> Coordinates -> Robot\nmkRobot = Robot\n\nadvance :: Bearing -> Coordinates -> Coordinates\nadvance dir = case dir of\n  North -> second succ\n  East  -> first succ\n  South -> second pred\n  West  -> first pred\n\nturnLeft, turnRight :: Bearing -> Bearing\nturnLeft d | d == minBound = maxBound\n           | otherwise     = pred d\n\nturnRight d | d == maxBound = minBound\n            | otherwise     = succ d\n\ninstructions :: String -> [Movement]\ninstructions = map fromChar\n  where fromChar c = case c of\n          'L' -> TurnLeft\n          'R' -> TurnRight\n          'A' -> Advance\n          _   -> error ("Unknown movement " ++ show c)\n\nstep :: Movement -> Robot -> Robot\nstep Advance   r = r { coordinates = advance (bearing r) (coordinates r) }\nstep TurnLeft  r = r { bearing = turnLeft (bearing r) }\nstep TurnRight r = r { bearing = turnRight (bearing r) }\n\nsimulate :: Robot -> String -> Robot\nsimulate r = foldl' (flip step) r . instructions	\N	f	1	1	2014-03-15 12:13:50	2014-03-15 12:13:50	24	\N
63	7	4a69e31f7481f8c88a620f0f	done	objective-c	hamming	//\n//  Hamming.m\n//  hamming\n//\n//  Created by Daniel Burnett on 11/11/2013.\n//  Copyright (c) 2013 iNtuitiveApps. All rights reserved.\n//\n\n#import "Hamming.h"\n\n@implementation Hamming\n+(NSUInteger)compute:(NSString *) compute against:(NSString *)against\n{\n    int offset = 0;\n    int length = MIN((int)compute.length , (int)against.length);\n    for(int i=0; i<length; i++)\n        if ([compute characterAtIndex:i] != [against characterAtIndex:i])\n            offset++;\n    return offset;\n}\n@end	\N	f	1	1	2014-01-25 19:39:08	2014-01-25 19:39:08	28	\N
64	7	ef3e197782aad156ee43d791	superseded	ruby	nucleotide-count	class DNA\n\n  DNA = %w( A T C G )\n  RNA = %w( A C G U )\n\n  def initialize(str)\n    raise ArgumentError unless valid_data?(str)\n    @data = str\n  end\n\n  def count(char)\n    raise ArgumentError unless valid_nucleotide?(char)\n    @data.count(char)\n  end\n\n  def nucleotide_counts\n    hsh = {}\n    DNA.each { |n| hsh[n] = count(n) }\n    hsh\n  end\n\n  def valid_nucleotide?(char)\n    (DNA + RNA).include?(char)\n  end\n\n  def valid_data?(str)\n    str.match /^(#{DNA.join('|')})*$/\n  end\n\nend	\N	f	2	1	2013-12-31 11:49:20	2013-12-31 11:49:20	29	\N
1059	37	ec1798e7f70024dd77cf8eb6	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char (toLower, isAlphaNum, isSpace)\nimport Data.Map (Map, fromListWith)\nimport Data.String (words)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . splitWords\n\nsplitWords :: String -> [(String, Int)]\nsplitWords = mkPair . words . normalize\n    where mkPair = map (\\w -> (w, 1))\n          normalize = map (toLower . replace)\n\nreplace :: Char -> Char\nreplace c | isAlphaNum c || isSpace c = c\n          | otherwise = ' '	\N	f	0	2	2014-02-21 04:05:55	2014-02-21 04:05:55	472	\N
76	7	841c3dec39bbe9e19f48e95a	done	javascript	robot-name	'use strict';\n\nfunction Robot() {\n  this.reset();\n}  \n\nRobot.prototype.reset = function() {\n  this.name = this.generateName();\n}\n\nRobot.prototype.generateName = function() {\n  return get(2, randomLetter) + get(3, randomDigit);\n}\n\nmodule.exports = Robot;\n\nvar chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\nfunction randomLetter() {\n  return chars[Math.floor(Math.random() * chars.length)];\n}\n\nfunction randomDigit() {\n  return Math.random().toString().slice(-1);\n}\n\nfunction get(count, valueFn) {\n  var result = "";\n\n  for (var i = count; i > 0; i--) {\n  \tresult += valueFn();\n  }\n\n  return result;\n}	\N	f	2	2	2014-02-28 03:26:33	2014-02-28 03:26:33	37	\N
82	7	5c0b71fbff51e9e0ebf09590	done	haskell	beer-song	module Beer (sing, verse) where\r\n\r\nimport Data.Char\r\nimport Data.List (intercalate)\r\n\r\nsing :: Int -> Int -> String\r\nsing from to = unlines $ map verse [from, from - 1 .. to]\r\n\r\nverse :: Int -> String\r\nverse n = unlines [firstSentence, secondSentence]\r\n  where firstSentence = sentence [nBottlesOfBeerOnTheWall n, nBottlesOfBeer n]\r\n        secondSentence = sentence [whatToDo, nBottlesOfBeerOnTheWall (decrement n)]\r\n        whatToDo | n == 0 = "Go to the store and buy some more"\r\n                 | otherwise = "Take " ++ one ++ " down and pass it around"\r\n        one | n == 1 = "it"\r\n            | otherwise = "one"\r\n\r\nsentence :: [String] -> String\r\nsentence parts = upperCase (intercalate ", " parts) ++ "."\r\n\r\nupperCase :: String -> String\r\nupperCase [] = []\r\nupperCase (c:cs) = toUpper c : cs\r\n\r\ndecrement :: Int -> Int\r\ndecrement 0 = 99\r\ndecrement n = n - 1\r\n\r\nnBottlesOfBeerOnTheWall :: Int -> String\r\nnBottlesOfBeerOnTheWall n = nBottlesOfBeer n ++ " on the wall"\r\n\r\nnBottlesOfBeer :: Int -> String\r\nnBottlesOfBeer n = nBottles ++ " of beer"\r\n  where nBottles = numberStr ++ " " ++ bottlesStr\r\n        numberStr | n == 0 = "no more"\r\n                  | otherwise = show n\r\n        bottlesStr | n == 1 = "bottle"\r\n                   | otherwise = "bottles"\r	\N	f	3	1	2014-01-05 02:00:00	2014-01-05 02:00:00	40	Beer.hs
87	7	26d163de2ec1dfa29eca8a03	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\nimport qualified Data.ByteString.Char8 as B\nimport Data.Map.Strict (Map, fromListWith)\n\ndna :: String\ndna = "GCTA"\n\nnucleotides :: String\nnucleotides = "GCTAU"\n\ncount :: Char -> String -> Int\ncount n s\n  | validNucleotide n = B.count n $ B.pack s\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = fromListWith (+) [ (n, B.count n s') | n <- dna ]\n  where s' = B.pack s\n\nvalidNucleotide :: Char -> Bool\nvalidNucleotide n = n `elem` nucleotides	\N	f	2	1	2014-01-03 07:17:46	2014-01-03 07:17:46	44	\N
89	7	e2ddeb9eca66e4049c6fcd8b	done	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\nmodule DNA (count, nucleotideCounts) where\nimport Data.Map.Strict (Map)\nimport Data.Maybe (fromMaybe)\nimport qualified Data.Map.Strict as M\n\ndna :: String\ndna = "GCTA"\n\nnucleotides :: String\nnucleotides = "GCTAU"\n\ncount :: Char -> String -> Int\ncount n s \n  | validNucleotide n = fromMaybe 0 $ M.lookup n $ nucleotideCounts s\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\n-- NB: doesn't validate its `String` input\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = M.fromListWith (+) $ m0 ++ map count' s\n  where m0 = map (,0) dna\n\ncount' :: a -> (a, Int)\ncount' = (,1)\n\nvalidNucleotide :: Char -> Bool\nvalidNucleotide n = n `elem` nucleotides	\N	f	1	3	2014-01-20 02:19:24	2014-01-20 02:19:24	44	\N
95	7	474550190a77da8e67587b4c	done	haskell	matrix	module Matrix (\n    Matrix,\n    row, column,\n    rows, cols,\n    shape,\n    transpose,\n    reshape,\n    flatten,\n    fromString, fromList\n) where\n\nimport qualified Data.Vector as V\nimport Control.Arrow ((&&&))\nimport Data.List (unfoldr, intercalate)\nimport Data.Maybe (listToMaybe)\n\ndata Matrix a = Matrix { memory :: V.Vector a, cols :: Int }\n    deriving (Eq)\n\ninstance Show a => Show (Matrix a) where\n    show m = "fromList [" ++ intercalate ",\\n" (map (show . V.toList . (`row` m)) [0..rows m - 1]) ++ "]"\n\nfromList :: [[a]] -> Matrix a\nfromList []  = Matrix V.empty 0\nfromList xss = Matrix (V.fromList $ concat xss) (length $ head xss)\n\nfromString :: Read a => String -> Matrix a\nfromString = fromList . map readList . lines\n  where\n    readList = unfoldr (listToMaybe . reads)\n\nrow :: Int -> Matrix a -> V.Vector a\nrow i Matrix { memory = m, cols = c } = V.slice (i*c) c m\n\ncolumn :: Int -> Matrix a -> V.Vector a\ncolumn j Matrix { memory = m, cols = c } = V.ifilter (\\i _ -> i `mod` c == j) m\n\nrows :: Matrix a -> Int\nrows Matrix { cols = 0 } = 0\nrows Matrix { memory = m, cols = c } = V.length m `div` c\n\nshape :: Matrix a -> (Int, Int)\nshape = rows &&& cols\n\ntranspose :: Matrix a -> Matrix a\ntranspose m = Matrix mem (rows m)\n  where\n    mem = V.concatMap (`column` m) $ V.enumFromN 0 (cols m)\n\nflatten :: Matrix a -> V.Vector a\nflatten = memory\n\nreshape :: (Int, Int) -> Matrix a -> Matrix a\nreshape (r', c') Matrix { memory = m, cols = c }\n    | V.length m == r' * c' = Matrix m c'\n    | otherwise             = error "reshape error"	\N	f	2	1	2014-02-26 12:17:02	2014-02-26 12:17:02	49	\N
97	7	599c5ed85b9ae03c197332ea	done	haskell	simple-linked-list	module LinkedList (\n    nil,\n    isNil,\n    new,\n    next,\n    datum,\n    fromList,\n    toList,\n    reverseLinkedList\n) where\n\ndata List a = Nil | Cons a (List a)\n\nnil :: List a\nnil = Nil\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnew :: a -> List a -> List a\nnew = Cons\n\nnext :: List a -> List a\nnext Nil = error "empty list"\nnext (Cons _ n) = n\n\ndatum :: List a -> a\ndatum Nil = error "empty list"\ndatum (Cons x _) = x\n\nfromList :: [a] -> List a\nfromList [] = Nil\nfromList (x:xs) = Cons x $ fromList xs\n\ntoList :: List a -> [a] \ntoList Nil = []\ntoList (Cons x xs) = x : toList xs\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev acc Nil = acc\n    rev acc (Cons x xs) = acc `seq` rev (Cons x acc) xs	\N	f	2	2	2014-01-14 17:12:03	2014-01-14 17:12:03	50	\N
100	7	6656e11aedcfb8ff2b44ab69	superseded	javascript	beer-song	function Beer(){\n}\n\nBeer.verse = function(number) {\n    "use strict";\n\n    var currentBottle = new Bottle(number);\n    var nextBottle = new Bottle(number - 1);\n\n    var onTheWall = (currentBottle.bottlesOfBeer() +\n        " on the wall, " +\n        currentBottle.bottlesOfBeer() + ".\\n").capitalize();\n\n    var drinkOne = (function() {\n        var result = "";\n        if (currentBottle.lastBottle()){\n            result += "Go to the store and buy some more, ";\n        } else {\n            result += "Take " +\n            currentBottle.takeItOrOne() +\n            " down and pass it around, ";\n        }\n\n        result += nextBottle.bottlesOfBeer() + " on the wall.\\n";\n        return result;\n    })();\n\n    return onTheWall + drinkOne;\n};\n\nBeer.sing = function(start, end) {\n    "use strict";\n    end = end || 0;\n    var result = "";\n    for(var i=start; i >= end; i--){\n        result += this.verse(i);\n        if (i != end){\n            result += "\\n";\n        }\n    }\n    return result;\n\n};\n\nfunction Bottle(number) {\n    "use strict";\n    if (number < 0){\n        this.number = 99;\n    } else {\n        this.number = number;\n    }\n}\n\nBottle.prototype.lastBottle = function() {\n    "use strict";\n    return this.number === 0;\n};\n\nBottle.prototype.takeItOrOne = function() {\n    "use strict";\n    return this.number === 1 ? "it" : "one";\n};\n\nBottle.prototype.bottlesOfBeer = function() {\n    "use strict";\n    if (this.number == 1){\n       return "1 bottle of beer";\n    } else if (this.number === 0) {\n        return "no more bottles of beer";\n    } else {\n        return this.number + " bottles of beer";\n    }\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nmodule.exports = Beer;	\N	f	0	2	2013-12-31 05:12:51	2013-12-31 05:12:51	53	\N
102	7	82a96cbd39a62f8c4306f08d	superseded	javascript	beer-song	function Beer(){\n}\n\nBeer.verse = function(number){\n    "use strict";\n\n    var nextNumber = number - 1;\n    if (nextNumber < 0){\n        nextNumber = 99;\n    }\n\n    var bottlesOfBeer = function(number){\n        if (number == 1){\n            return "1 bottle of beer";\n        } else if (number === 0) {\n            return "no more bottles of beer";\n        } else {\n            return number + " bottles of beer";\n        }\n    };\n\n    var onTheWall = bottlesOfBeer(number).capitalize() +\n    " on the wall, " +\n    bottlesOfBeer(number) + ".\\n";\n\n    var drinkOne = function(){\n        var result = "";\n        if (nextNumber === 99){\n            result += "Go to the store and buy some more, ";\n        } else {\n            result += "Take " +\n            (number === 1 ? "it" : "one") +\n            " down and pass it around, ";\n        }\n\n        result += bottlesOfBeer(nextNumber) + " on the wall.\\n";\n        return result;\n    };\n\n    return onTheWall + drinkOne();\n};\n\nBeer.sing = function(start, end){\n    "use strict";\n    end = end || 0;\n    var result = "";\n    for(var i=start; i >= end; i--){\n        result += this.verse(i);\n        if (i != end){\n            result += "\\n";\n        }\n    }\n    return result;\n\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nmodule.exports = Beer;	\N	f	1	1	2014-02-05 16:18:13	2014-02-05 16:18:13	53	\N
105	3	813d34684758d9e850be0fd0	superseded	javascript	bob	(function() {\n  var Bob;\n\n  function Bob() {}\n\n  Bob.prototype.hey = function(message) {\n    if(message.trim() !== "") {\n      return "Fine. Be that way!";\n    } else if (message == message.toUpperCase()) {\n      return "Woah, chill out!";\n    } else if (message[message.length - 1] !== "?") {\n      return "Sure.";\n    } else {}\n      return "Whatever.";\n    }\n  };\n\n  module.exports = Bob;\n})();	\N	f	4	2	2014-03-13 08:43:54	2014-03-13 08:43:54	54	\N
106	3	435f3a9a21952dceb9ebe519	done	javascript	bob	function Message(string) { this.string = string; }\n\nMessage.prototype.isEmpty = function () {\n  return this.string.trim() === "";\n}\n\nMessage.prototype.isShouting = function () {\n  return this.string.toUpperCase() === this.string;\n}\n\nMessage.prototype.isAsking = function () {\n  return this.string.slice(-1) === "?";\n}\n\nfunction Bob() {}\n\nBob.prototype.hey = function(raw_message) {\n  message = new Message(raw_message);\n  if (message.isEmpty()) { // Message is empty.\n    return "Fine. Be that way!";\n  } else if (message.isShouting()) { // Message is shouting.\n    return "Woah, chill out!";\n  } else if (message.isAsking()) { // Message is asking something.\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n};\n\nmodule.exports = Bob;	\N	f	3	5	2014-03-14 17:01:06	2014-03-14 17:01:06	54	\N
118	3	3f32ebf4009d8cf62e9e7c9e	superseded	javascript	anagram	"use strict";\n\nfunction Anagram (word) {\n\n  var anagram_word = word;\n\n  // private methods\n\n  var alphabetize = function (word) {\n    return word.toLowerCase().split('').sort().join('');\n  };\n\n  var stringify = function (obj) {\n    return JSON.stringify(obj);\n  };\n\n  var compare_words = function(word1, word2) {\n    if( stringify(alphabetize(word1)) === stringify(alphabetize(word2)) ) {\n      return true;\n    }\n  };\n\n  var anagramFinder = function (word_array) {\n    var winners = [];\n    word_array.forEach( function (word) {\n      if( compare_words(word, anagram_word) ) {\n        winners.push(word);\n      }\n    });\n    return winners;\n  };\n\n  // public methods\n  this.match = function (word_array) {\n\n    return anagramFinder(word_array);\n  };\n}\n\nmodule.exports = Anagram;	\N	f	2	1	2014-03-07 11:17:55	2014-03-07 11:17:55	56	\N
120	3	3dbc7a695c75a4688d82db45	done	javascript	beer-song	var verse = (function() {\n  var multi, zero, one, bottleStr;\n  \n  bottleStr = function(num) {\n    return num + (num > 1 ? ' bottles' : ' bottle');\n  };\n\n  multi = function(num) {\n    return bottleStr(num) + ' of beer on the wall, ' +\n           bottleStr(num) + ' of beer.\\n' +\n           'Take one down and pass it around, ' +\n           bottleStr(num-1) + ' of beer on the wall.\\n';\n  };\n\n  one = '1 bottle of beer on the wall, 1 bottle of beer.\\n' +\n         'Take it down and pass it around, no more bottles of beer on the wall.\\n';\n\n  zero = 'No more bottles of beer on the wall, no more bottles of beer.\\n' +\n         'Go to the store and buy some more, 99 bottles of beer on the wall.\\n';\n\n  return function(num) {\n    if(num > 1) return multi(num);\n    if(num === 1) return one;\n    return zero;\n  };\n})();\n\nfunction sing(start, end) {\n  var song = '';\n  while(start >= (end || 0)) {\n    song += verse(start) + '\\n';\n    start--;\n  }\n  return song.slice(0, -1);\n}\nmodule.exports.verse = verse;\nmodule.exports.sing = sing;	\N	f	2	1	2014-03-18 23:35:22	2014-03-18 23:35:22	57	\N
127	3	1cd73200f8a91eeeabc3d51a	done	javascript	scrabble-score	'use strict';\n\nvar SCORES = {\n  1:  ['a', 'e', 'i', 'o', 'u', 'l', 'n', 'r', 's', 't'],\n  2:  ['d', 'g'],\n  3:  ['b', 'c', 'm', 'p'],\n  4:  ['f', 'h', 'v', 'w', 'y'],\n  5:  ['k'],\n  8:  ['j', 'x'],\n  10: ['q', 'z']\n};\n\nexports.score = function (word) {\n  var result = 0;\n  if (!word) {\n    return result;\n  }\n  word.split('').forEach(function(c) {\n    result += characterScore(c.toLowerCase());\n  });\n  return result;\n};\n\nfunction characterScore(character) {\n  for (var score in SCORES) {\n    if (SCORES[score].indexOf(character) > -1) {\n      return parseInt(score, 10);\n    }\n  }\n}	\N	f	0	1	2014-03-11 19:22:30	2014-03-11 19:22:30	61	\N
140	4	019955f2b53ac10f4b6c6cb8	done	haskell	word-count	module WordCount (wordCount) where\n  import qualified Data.Map as Map\n  import Data.Char (isAlphaNum, toLower)\n\n  normalize :: String -> String\n  normalize word = [ toLower char | char <- word,\n                   isAlphaNum char ]\n\n  baseList :: String -> [(String, Integer)]\n  baseList text = [ (word, 1) |\n                  word <- (map normalize (words text)),\n                  word /= "" ]\n\n  wordCount :: String -> Map.Map String Integer\n  wordCount text = Map.fromListWith (+) (baseList text)	\N	f	3	8	2014-03-19 10:40:28	2014-03-19 10:40:28	66	\N
144	4	a8258d9747903e30e8858de8	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber = validateNumber . filter isDigit\n  where validateNumber n | length n == 10 = n\n        validateNumber ('1':n)            = validateNumber n\n        validateNumber _                  = invalidNumber\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint = format . split\n\nsplit :: String -> (String, String, String)\nsplit s = let n = number s\n            in (take 3 n, (take 3 . drop 3) n, drop 6 n)\n\nformat :: (String, String, String) -> String\nformat (area, three, four) = printf "(%s) %s-%s" area three four\n\ninvalidNumber :: String\ninvalidNumber = "0000000000"	\N	f	1	3	2014-03-09 09:02:36	2014-03-09 09:02:36	68	\N
353	23	aa192284d08d1465cfc41911	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |token| count(token) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	0	3	2013-11-25 17:35:28	2013-11-25 17:35:28	158	\N
152	21	28b292f6b123c45fa6c905e7	done	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(candidates)\n    candidates.select{|candidate| anagram?(candidate)}\n  end\n\n  private\n\n  def anagram?(candidate)\n    matcher = AnagramMatcher.new(word(@subject), word(candidate))\n    matcher.anagrams?\n  end\n\n  def word(word_content)\n    Word.new(word_content.downcase)\n  end\nend\n\nclass AnagramMatcher\n  def initialize(word_1, word_2)\n    @word_1 = word_1\n    @word_2 = word_2\n  end\n\n  def anagrams?\n    same_chars? && !identical?\n  end\n\n  private\n\n  def same_chars?\n    @word_1.same_chars?(@word_2)\n  end\n\n  def identical?\n    @word_1.identical?(@word_2)\n  end\nend\n\nclass Word\n  def initialize(content)\n    @content = content\n  end\n\n  def sorted_chars\n    @content.chars.sort\n  end\n\n  def ==(word)\n    @content == word.to_s\n  end\n\n  def to_s\n    @content.to_s\n  end\n\n  def identical?(word)\n    word == self\n  end\n\n  def same_chars?(word)\n    sorted_chars == word.sorted_chars\n  end\nend	\N	f	7	3	2014-02-06 04:36:13	2014-02-06 04:36:13	73	\N
164	21	32d629b3b43024454f20705e	superseded	python	nucleotide-count	try:\n    from dna import DNA\nexcept ImportError:\n    raise SystemExit('Could not find dna.py. Does it exist?')\n\nimport unittest\n\nclass DNATest(unittest.TestCase):\n    def test_empty_dna_string_has_no_adenosine(self):\n        self.assertEqual(0, DNA('').count('A'))\n\n    def test_empty_dna_string_has_no_nucleotides(self):\n        expected = {'A': 0, 'T': 0, 'C': 0, 'G': 0}\n        self.assertEqual(expected, DNA("").nucleotide_counts())\n\n    def test_repetitive_cytidine_gets_counted(self):\n        self.assertEqual(5, DNA('CCCCC').count('C'))\n\n    def test_repetitive_sequence_has_only_guanosine(self):\n        expected = {'A': 0, 'T': 0, 'C': 0, 'G': 8}\n        self.assertEqual(expected, DNA('GGGGGGGG').nucleotide_counts())\n\n    def test_counts_only_thymidine(self):\n        self.assertEqual(1, DNA('GGGGGTAACCCGG').count('T'))\n\n    def test_counts_a_nucleotide_only_once(self):\n        dna = DNA('CGATTGGG')\n        dna.count('T')\n        self.assertEqual(2, dna.count('T'))\n\n    def test_dna_has_no_uracil(self):\n        self.assertEqual(0, DNA('GATTACA').count('U'))\n\n    def test_dna_counts_do_not_change_after_counting_uracil(self):\n        dna = DNA('GATTACA')\n        dna.count('U')\n        expected = {"A": 3, "T": 2, "C": 1, "G": 1}\n        self.assertEqual(expected, dna.nucleotide_counts())\n\n    def test_validates_nucleotides(self):\n        self.assertRaisesRegexp(\n            ValueError, '^. is not a nucleotide\\.$',\n            DNA("GACT").count, 'X'\n        )\n\n    def test_counts_all_nucleotides(self):\n        s = "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"\n        dna = DNA(s)\n        expected = {'A': 20, 'T': 21, 'G': 17, 'C': 12}\n        self.assertEqual(expected, dna.nucleotide_counts())\n\nif __name__ == '__main__':\n    unittest.main()	\N	f	3	1	2014-02-05 11:10:47	2014-02-05 11:10:47	80	\N
177	21	9b8e8540ae9f5d595e845d4b	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.List\n\nsing :: Int -> Int -> String\nsing max min = intercalate "\\n" (map verse [max,(max -1)..min]) ++ "\\n"\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = bottle n ++ " of beer on the wall, " ++ bottle n \n            ++ " of beer.\\nTake "++ which n ++" down and pass it around, " ++ bottle (n-1) ++ " of beer on the wall.\\n"\n                where \n                 bottle 0 = "no more bottles" \n                 bottle 1 = "1 bottle"\n                 bottle x = show x ++ " bottles"\n                 which 1 = "it"\n                 which n = "one"	\N	f	4	1	2014-01-16 12:30:32	2014-01-16 12:30:32	84	Beer.hs
189	26	9129bceea4d99602c07baef5	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotide_counts\n\n  def initialize sequence\n    @nucleotide_counts = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n    count_nucleotides sequence\n  end\n\n  def count nucleotide\n    if !nucleotide? nucleotide\n      raise ArgumentError, "That's not a nucleotide, silly!"\n    elsif @nucleotide_counts[nucleotide]\n      @nucleotide_counts[nucleotide]\n    else\n      0\n    end\n  end\n\n  private\n\n  def count_nucleotides sequence\n    @nucleotide_counts.each_key { |n| @nucleotide_counts[n] = sequence.count(n) }\n  end\n\n  def nucleotide? possible_nucleotide\n    "ATCGU".split("").include? possible_nucleotide\n  end\nend	\N	f	0	2	2014-03-11 14:25:03	2014-03-11 14:25:03	87	\N
190	26	c517652bef52cb534c294c45	done	clojure	phone-number	(ns phone)\n\n(defn- valid-number?\n  [digits]\n  (= (count digits) 10))\n\n(defn- valid-long-distance?\n  [digits]\n  (and (= (first digits) "1")\n       (valid-number? (rest digits))))\n\n(defn number\n  "Get the digits of the provided phone number,\n  or 0000000000 if the phone number is invalid."\n  [phone-number]\n  (let [digits (re-seq #"\\d" phone-number)]\n    (clojure.string/join    \n      (cond\n        (valid-number? digits) digits\n        (valid-long-distance? digits) (rest digits)\n        :else "0000000000"))))\n\n(defn area-code\n  "Extract the first three digits of the phone number."\n  [phone-number]\n  (re-find #"^\\d\\d\\d" (number phone-number)))\n\n(def ^:private number-groups-regex\n  #"(\\d\\d\\d)(\\d\\d\\d)(\\d\\d\\d\\d)")\n\n(defn pretty-print\n  "Pretty-print the provided phone number."\n  [phone-number]\n  (let [canonical (number phone-number)\n        matches (re-matches number-groups-regex canonical)\n        [_ area-code subscriber exchange] matches]\n    (str "(" area-code ") " subscriber "-" exchange)))	\N	f	0	3	2013-12-15 02:41:16	2013-12-15 02:41:16	88	\N
192	26	e0482ac1f3c324dcad899e4a	superseded	clojure	phone-number	(ns phone)\n\n(defn- valid-number?\n  [digits]\n  (= (count digits) 10))\n\n(defn- valid-long-distance?\n  [digits]\n  (and (= (first digits) "1")\n       (valid-number? (drop 1 digits))))\n\n(defn number\n  "Get the digits of the provided phone number,\n  or 0000000000 if the phone number is invalid."\n  [phone-number]\n  (let [digits (re-seq #"\\d" phone-number)]\n    (clojure.string/join    \n      (cond\n        (valid-number? digits) digits\n        (valid-long-distance? digits) (drop 1 digits)\n        :else "0000000000"))))\n\n(defn area-code\n  "Extract the first three digits of the phone number."\n  [phone-number]\n  (re-find #"^\\d\\d\\d" (number phone-number)))\n\n(def ^:private number-groups-regex\n  #"(\\d\\d\\d)(\\d\\d\\d)(\\d\\d\\d\\d)")\n\n(defn pretty-print\n  "Pretty-print the provided phone number."\n  [phone-number]\n  (let [canonical (number phone-number)\n        matches (re-matches number-groups-regex canonical)\n        [_ area-code subscriber exchange] matches]\n    (str "(" area-code ") " subscriber "-" exchange)))	\N	f	2	1	2013-12-18 19:52:07	2013-12-18 19:52:07	88	\N
197	26	8b6f36dcfdf020fa7eaf5a7d	superseded	haskell	rna-transcription	module DNA where\n\nimport Data.List (lookup)\n\ndata Dna = Dna_A | Dna_C | Dna_G | Dna_T\ndata Rna = Rna_A | Rna_C | Rna_G | Rna_U\n\ninstance Show Dna where\n    show Dna_A = "A"\n    show Dna_C = "C"\n    show Dna_G = "G"\n    show Dna_T = "T"\n\ninstance Show Rna where\n    show Rna_A = "A"\n    show Rna_C = "C"\n    show Rna_G = "G"\n    show Rna_U = "U"\n\ninstance Read Dna where\n    readsPrec _ value =\n        tryParse [("A", Dna_A), ("C", Dna_C), ("G", Dna_G), ("T", Dna_T)]\n        where\n          tryParse dict =\n              case lookup value dict of\n                Just x  -> [(x, "")]\n                Nothing -> []\n\ndnaToRna :: Dna -> Rna\ndnaToRna Dna_A = Rna_A\ndnaToRna Dna_C = Rna_C\ndnaToRna Dna_G = Rna_G\ndnaToRna Dna_T = Rna_U\n\ntoRNA :: String -> String\ntoRNA = concatMap (show . dnaToRna . \\c -> read [c])\n\n{- Without using custom types for DNA and RNA -}\n--toRNA = map (\\c -> if c == 'T' then 'U' else c)	\N	f	3	1	2014-02-12 10:06:29	2014-02-12 10:06:29	91	\N
202	26	e971b6e041dbbfecf2ee3c82	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}\n\n// ---\n\n// How I would test this\n\nvar shouldRunTests = !module.parent // true when invoked directly: `node bob.js`\n\nif (shouldRunTests) {\n  var assert = require('assert')\n\n  // Unit tests\n\n  assert.deepEqual(words('word'), ['word'])\n  assert.deepEqual(words('one of each'), ['one','of','each'])\n  assert.deepEqual(words('one fish two fish red fish blue fish'), ['one','fish','two','fish','red','fish','blue','fish'])\n  assert.deepEqual(words('car : carpet as java : javascript!!&@$%^&'), ['car','carpet','as','java','javascript'])\n  assert.deepEqual(words('testing, 1, 2 testing'), ['testing','1','2','testing'])\n  assert.deepEqual(words('go Go GO'), ['go','go','go'])\n\n  assert.deepEqual(countWords(['word']), { 'word' : 1 })\n  assert.deepEqual(countWords(['one', 'of', 'each']), { 'one': 1, 'of': 1, 'each': 1 })\n  assert.deepEqual(countWords(['one','fish','two','fish','red','fish','blue','fish']), { 'one' : 1, 'fish' : 4, 'two' : 1, 'red' : 1, 'blue' : 1 })\n  assert.deepEqual(countWords(['car','carpet','as','java','javascript']), { 'car' : 1, 'carpet' : 1, 'as' : 1, 'java' : 1, 'javascript' : 1 })\n  assert.deepEqual(countWords(['testing','1','2','testing']), { 'testing' : 2, '1' : 1, '2' : 1 })\n  assert.deepEqual(countWords(['go','go','go']), { 'go' : 3 })\n\n  console.log('ok')\n}	\N	f	2	3	2013-11-10 21:02:19	2013-11-10 21:02:19	95	\N
212	26	9d8ec3920c81acad54a6e76e	superseded	ruby	bob	class Bob\n  def hey request\n    request = request.to_s.strip\n    respond(request)\n  end\n\n  def respond request\n    if request == ''\n      'Fine. Be that way!'\n    elsif shouting? request\n      'Woah, chill out!'\n    elsif question? request\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def shouting? request\n    request == request.upcase\n  end\n\n  def question? request\n    request[-1] == '?'\n  end\nend	\N	f	2	6	2013-10-25 22:37:09	2013-10-25 22:37:09	98	\N
220	26	360b5cf60ac18b0599e42130	done	ruby	triangle	class TriangleError < StandardError\nend\nclass Triangle\n  def initialize(a, b, c)\n    @sides = [a,b,c]\n  end\n\n  def kind\n    raise TriangleError if invalid_triangle?\n    kinds_by_equal_pairs_count[equal_pairs_count]\n  end\n\n  attr_reader :sides\n\n  def kinds_by_equal_pairs_count\n    { 0 => :scalene, 1 => :isosceles, 3 => :equilateral}\n  end\n\n  def equal_pairs_count\n    side_pairs.count { |a, b| a == b }\n  end\n\n  def side_pairs\n    side_rotations.map { |rotation| rotation[0..1] }\n  end\n\n\n  def invalid_triangle?\n    sides_have_invalid_size? || triangle_inequality_not_satisified?\n  end\n\n  def sides_have_invalid_size?\n    sides.any? { |side| side <= 0 }\n  end\n\n  def triangle_inequality_not_satisified?\n    side_rotations.any? do |a,b,c|\n      a + b <= c\n    end\n  end\n\n\n  def side_rotations\n    sides.map.with_index do |_, rotation_count|\n      sides.rotate(rotation_count)\n    end\n  end\n\nend	\N	f	2	1	2013-11-16 14:52:15	2013-11-16 14:52:15	100	\N
228	19	d9b5d08724e44adc235ab4de	superseded	ruby	space-age	class SpaceAge\n\n  EARTH = 365.25\n  MERCURY = 0.2408467\n  VENUS = 0.61519726\n  MARS = 1.8808158\n  JUPITER = 11.862615\n  SATURN = 29.447498\n  URANUS = 84.016846\n  NEPTUNE = 164.79132\n\n  def initialize(age)\n    @age = age\n  end\n\n  def seconds\n    @age\n  end\n\n  def format(planet)\n    ((@age / (planet * 86400) / EARTH) * 100).round / 100.0\n  end\n\n  def on_earth\n    ((@age / (EARTH * 86400) * 100).round / 100.0)\n  end\n\n  def on_mercury\n    format(MERCURY)\n  end\n\n  def on_venus\n    format(VENUS)\n  end\n\n  def on_mars\n    format(MARS)\n  end\n\n  def on_jupiter\n    format(JUPITER)\n  end\n\n  def on_saturn\n    format(SATURN)\n  end\n\n  def on_uranus\n    format(URANUS)\n  end\n\n  def on_neptune\n    format(NEPTUNE)\n  end\nend	\N	f	2	1	2013-10-12 16:06:09	2013-10-12 16:06:09	105	\N
241	19	3eb6f153050432ce03bd50fd	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (foldl')\nimport Data.Map.Strict (Map, empty, fromList, insertWith)\n\nnucleotides = ['A', 'C', 'G', 'T']\n\ncount :: Char -> [Char] -> Int\ncount t _ | not (t `elem` ('U' : nucleotides)) =\n    error ("invalid nucleotide '" ++ [t] ++ "'")\ncount t (x:xs) | t == x = 1 + count t xs\ncount t (x:xs) | otherwise = count t xs\ncount _ [] = 0\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts =\n    let zeroes = fromList [(x, 0) | x <- nucleotides]\n    in foldl' (\\counts c -> insertWith (+) c 1 counts) zeroes	\N	f	2	1	2014-02-15 04:17:30	2014-02-15 04:17:30	113	\N
253	19	e8fa7fc099f3f06f591d5b1f	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    candidate = ""\n    loop do\n      candidate = (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n        (0...3).map{ (0..9).to_a[rand(10)] }.join\n      break unless @@all_names.include? candidate\n    end\n    candidate\n  end\n\nend	\N	f	2	3	2013-10-28 04:19:19	2013-10-28 04:19:19	116	\N
259	24	bdaa49b05c6a84cdbfafb9ad	superseded	ruby	nucleotide-count	class DNA\n  \n  def initialize(sequence)\n    @sequence = sequence.chars \n    @dna_collection = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    @valid_nucleotides = %w(A T C G U)\n    validate_dna(@sequence)\n  end\n\n  def count(nucleotide)\n    if @valid_nucleotides.include?(nucleotide)\n      @sequence.count(nucleotide)\n    else\n      wrong_argument\n    end\n  end\n\n  def nucleotide_counts\n    @sequence.each do |nucleotide|\n      @dna_collection[nucleotide] += 1\n    end\n    @dna_collection\n  end\n\n\n  private\n\n  def validate_dna(sequence)\n    @sequence.each do |nucleotide|\n      wrong_argument unless @dna_collection.keys.include?(nucleotide)\n    end\n  end\n\n  def wrong_argument\n    raise ArgumentError\n  end\nend	\N	f	1	1	2013-12-02 16:10:42	2013-12-02 16:10:42	120	\N
267	24	9a4a5bb33d2073bdad3a62ab	done	haskell	triangle	module Triangle (\r\n  TriangleType (..)\r\n, triangleType\r\n)  where\r\n\r\ndata TriangleType = Illogical | Equilateral | Isosceles | Scalene deriving (Show, Eq)\r\n\r\ntriangleType :: Int -> Int -> Int -> TriangleType\r\ntriangleType a b c\r\n  | a == b && b == c = Equilateral\r\n  | a + b <= c       = Illogical\r\n  | b + c <= a       = Illogical\r\n  | c + a <= b       = Illogical \r\n  | a == b           = Isosceles\r\n  | b == c           = Isosceles\r\n  | c == a           = Isosceles\r\n  | otherwise        = Scalene\r	\N	f	2	1	2013-10-02 02:38:25	2013-10-02 02:38:25	123	Triangle.hs
270	24	aeff210aec404aa4102caa74	pending	ruby	grains	class Grains\n\n\tdef square (position, amount = 1, currentposition = 1)\n\t\tif currentposition == position\n\t\t\treturn amount\n\t\tend\n\n\t\treturn square(position, amount * 2, currentposition + 1)\n\tend\n\n\tdef total (totalamount = 0, amount = 1, currentposition = 1)\n\t\tif currentposition == 65\n\t\t\treturn totalamount\n\t\tend\n\n\t\treturn total(totalamount + amount, amount * 2, currentposition + 1)\n\tend\nend\n\nclass Grains\n\n  def square(number)\n    2 ** (number - 1)\n  end\n\n  def total\n    (1..64).map { |i| square(i) }.reduce(&:+)\n  end\n\nend	\N	f	3	2	2014-01-20 04:07:40	2014-01-20 04:07:40	125	grains.rb
274	24	c903eba7c501e8f7811ba4b7	done	haskell	beer-song	module Beer where\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, " ++\n          "no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, " ++\n          "99 bottles of beer on the wall.\\n"\n\nverse 1 = "1 bottle of beer on the wall, " ++\n          "1 bottle of beer.\\n" ++\n          "Take it down and pass it around, " ++\n          "no more bottles of beer on the wall.\\n"\n\nverse 2 = "2 bottles of beer on the wall, " ++\n          "2 bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          "1 bottle of beer on the wall.\\n"\n\nverse n = show n ++ " bottles of beer on the wall, " ++\n          show n ++ " bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = unlines $ map verse [x, (x - 1)..y]	\N	f	2	3	2013-10-28 06:34:39	2013-10-28 06:34:39	129	\N
280	24	2ef27ba82f69201debfbe3b6	superseded	ruby	word-count	class Bob\n  def hey(statement)\n    message = Message.new(statement)\n    case\n    when message.silent?\n      "Fine. Be that way!"\n    when message.intense?\n      "Woah, chill out!"\n    when message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  Message = Struct.new(:statement) do\n    def silent?\n      statement.nil? || statement.match(/^\\s*$/)\n    end\n\n    def intense?\n      statement.upcase == statement\n    end\n\n    def question?\n      statement.match /\\?$/\n    end\n  end\nend	\N	f	0	1	2014-01-22 02:25:37	2014-01-22 02:25:37	131	\N
288	18	7e9b2342ec9e5046ea832287	superseded	python	bob	class Bob(object):\n    """Bob is a lackadaisical teenager who really doesn't say much."""\n\n    def hey(self, message):\n        """Returns an appropriate response to the message"""\n        # Test for quiet first as it catches None.\n        if self.isquiet(message):\n            return "Fine. Be that way!"\n        # As per tests, yell takes precedence over question.\n        elif self.isyell(message):\n            return "Woah, chill out!"\n        elif self.isquestion(message):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def isquiet(self, message):\n        # Check if nothing was said at all.\n        return not message or message.strip() == ""\n\n    def isyell(self, message):\n        # Check if the message is being yelled.\n        return message.upper() == message\n\n    def isquestion(self, message):\n        # Check if the message is a question.\n        return message.endswith('?')	\N	f	3	1	2013-09-05 21:48:29	2013-09-05 21:48:29	133	\N
292	18	8612a6550fb54623bec35d32	done	go	word-count	package wc\n\nimport (\n\t"bytes"\n\t"reflect"\n\t"strings"\n)\n\n//Histogram given a phrase can count the occurrences of each word in that phrase.\ntype Histogram map[string]int\n\n//Equal return true if count the occurrences of each word\n//in that phrase in one Histogram equal to another\nfunc (h Histogram) Equal(other Histogram) bool {\n\treturn reflect.DeepEqual(h, other)\n}\n\n//WordCount function wait string and return appropriate Histogram\nfunc WordCount(str string) Histogram {\n\tresult := make(Histogram)\n\tstrs := strings.FieldsFunc(str, isSeparator)\n\tfor _, v := range strs {\n\t\tlowerString := strings.ToLower(v)\n\t\tresult[lowerString]++\n\t}\n\treturn result\n}\n\nfunc isSeparator(r rune) bool {\n\tseparators := "!<>?@#$%^&*()_,.: "\n\tindex := bytes.IndexByte([]byte(separators), byte(r))\n\treturn index >= 0\n}	\N	f	0	2	2013-08-27 03:18:15	2013-08-27 03:18:15	136	word_count.go
305	18	8280df1d6303c4846b5f59bb	superseded	ruby	robot-name	class Robot\n\n  def name\n    @name ||= new_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n    def new_name\n      result = ''\n      2.times { result += ('A'..'Z').to_a.sample }\n      3.times { result += ('0'..'9').to_a.sample }\n      result\n    end\nend	\N	f	1	1	2013-07-18 06:49:38	2013-07-18 06:49:38	140	robot.rb
306	18	c80ac15c63b5f8fe00eae00e	pending	ruby	robot-name	class Robot\n\n  def name\n    @name ||= new_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n    def new_name\n      result = String.new.tap do |x|\n        2.times { x << random_letter }\n        3.times { x << random_number }\n      end\n    end\n\n    def random_letter\n      range_sample('A'..'Z')\n    end\n\n    def random_number\n      range_sample('0'..'9')\n    end\n\n    def range_sample(range)\n      range.to_a.sample\n    end\nend	\N	f	2	2	2013-12-17 03:02:29	2013-12-17 03:02:29	140	robot.rb
321	23	2a76881c2bfd185fa4278dec	done	scala	bob	class Bob {\r\n  val YELL_RESPONSE = "Woah, chill out!"\r\n  val QUESTION_RESPONSE = "Sure."\r\n  val NOTHING_RESPONSE = "Fine. Be that way!"\r\n  val FALLTHROUGH_RESPONSE = "Whatever."\r\n\r\n  def hey(msg:String) = {\r\n    msg match {\r\n      case _ if msg.forall(x => x.isSpaceChar) => NOTHING_RESPONSE\r\n      case _ if forall(msg.filter(_.isLetter).toList, (x:Char) => x.isUpper) => YELL_RESPONSE\r\n      case _ if msg.last == '?' => QUESTION_RESPONSE\r\n      case _ => FALLTHROUGH_RESPONSE\r\n    }\r\n  }\r\n\r\n  private def forall[A](l:List[A], p: (A) => Boolean) = {\r\n    if(l.isEmpty) false\r\n    else l.forall(p)\r\n  }\r\n}	\N	f	2	1	2013-10-15 16:33:50	2013-10-15 16:33:50	149	\N
325	23	d5848f655835abe75be819e1	superseded	javascript	anagram	function Anagram(word) {\n  this.word = word;\n\n  this.match = function(words) {\n    var matches = [], expected_letters, current_word, i, j;\n\n    expected_letters = sortLetters(this.word);\n\n    for (i = 0, j = words.length; i < j; i++) {\n      current_word = words[i];\n\n      if (isAnagramOf(expected_letters, current_word)) {\n        matches.push(current_word);\n      }\n    }\n\n    return matches;\n  };\n\n  function isAnagramOf(expected_letters, word) {\n    return word.length == expected_letters.length && sortLetters(word) === expected_letters;\n  }\n\n  function sortLetters(word) {\n    return word.split("").sort().join("");\n  }\n}\n\nmodule.exports = Anagram;	\N	f	2	1	2013-12-15 08:42:33	2013-12-15 08:42:33	151	\N
333	23	8648205adf143a9c1fcc4657	done	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\nimport Data.Time.Calendar (Day, fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday =\n  Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum)\ndata Schedule =\n  Teenth | First | Second | Third | Fourth | Last\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay sch day year month = addDays offset startDay\n  where\n    monthLength = gregorianMonthLength year month\n    startDay = fromGregorian year month $ case sch of\n      Teenth -> 13; First -> 1; Second -> 8; Third -> 15; Fourth -> 22\n      Last -> monthLength - 6\n    weekdayOf = fromIntegral . pred . third . toWeekDate\n    offset = fromIntegral $ (fromEnum day - weekdayOf startDay) `mod` 7\n    third (_, _, c) = c	\N	f	1	5	2013-11-02 07:34:19	2013-11-02 07:34:19	154	\N
347	23	75a278d4d097a8c534450a0e	superseded	ruby	bob	class Bob\n  def hey(input)\n    case input\n    when 'Tom-ay-to, tom-aaaah-to.', "Let's go make out behind the gym!", 'Ending with ? means a question.'\n      'Whatever.'\n    when 'Does this cryogenic chamber make me look fat?'\n      'Sure.'\n    when '', nil\n      'Fine. Be that way.'\n    else\n      'Woah, chill out!'\n    end\n  end\nend	\N	f	3	3	2013-12-08 12:50:55	2013-12-08 12:50:55	156	\N
762	15	cc3af87030862918f35f4cde	superseded	ruby	rna-transcription	class Acid\n  def initialize(string)\n    @string = string\n  end\n\n  def ==(other)\n    other == @string\n  end\n\n  def to_str\n    @string\n  end\nend\n\nclass RibonucleicAcid < Acid; end\n\nclass DeoxyribonucleicAcid < Acid\n  def to_rna\n    RibonucleicAcid.new(rna_string)\n  end\n\n  private\n\n  def rna_string\n    @string.gsub('T', 'U')\n  end\nend	\N	f	3	4	2013-12-05 22:51:58	2013-12-05 22:51:58	343	\N
361	23	61c6f4c6fe39fcb410752921	superseded	javascript	word-count	(function () {\n  global.Words = function (sentence) {\n    this.count = this._countWords(sentence)\n  }\n\n  Words.prototype._countWords = function (sentence) {\n    var wordList = this._normalize(sentence)\n      , count = {}\n\n    return wordList.eachWithObject(count, function (word, count) {\n      if (!count.hasOwnProperty(word))\n        count[word] = 0\n      count[word] += 1\n    })\n  }\n\n  Words.prototype._normalize = function (sentence) {\n    return sentence\n      .toLowerCase()\n      .match(/[\\w\\d]+/g)\n  }\n\n  // Didn't somebody say you should never mess with\n  // core object types?\n  // Feh.\n  Array.prototype.eachWithObject = function(obj, func) {\n    this.forEach(function (element) {\n      func.call(this, element, obj)\n    })\n    return obj\n  }\n\n})()	\N	f	2	7	2013-10-21 10:26:49	2013-10-21 10:26:49	161	\N
372	25	c8975731485cff4200158119	done	javascript	word-count	function Words(phrase) {\n    var results = {};\n\n    // clean up input\n    phrase = phrase.toLowerCase().replace(/[^a-z0-9\\s]/g, '').split(" ");\n\n    for(var i = 0; i < phrase.length; i++) {\n        if(phrase[i].length > 0) {\n            if(typeof results[phrase[i]] === "undefined") {\n                results[phrase[i]] = 1; \n            }\n            else {\n                results[phrase[i]]++;\n            }\n        }\n    }\n    \n    return {\n        count : results\n    }\n}\n\nmodule.exports = Words;	\N	f	2	1	2014-02-16 06:07:01	2014-02-16 06:07:01	165	\N
373	25	bf444c4dfff3539da39f1a21	done	haskell	beer-song	module Beer where\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, " ++\n          "no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, " ++\n          "99 bottles of beer on the wall.\\n"\n\nverse 1 = "1 bottle of beer on the wall, " ++\n          "1 bottle of beer.\\n" ++\n          "Take it down and pass it around, " ++\n          "no more bottles of beer on the wall.\\n"\n\nverse 2 = "2 bottles of beer on the wall, " ++\n          "2 bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          "1 bottle of beer on the wall.\\n"\n\nverse n = show n ++ " bottles of beer on the wall, " ++\n          show n ++ " bottles of beer.\\n" ++\n          "Take one down and pass it around, " ++\n          show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing x y = unlines $ map verse [x, (x - 1)..y]	\N	f	6	3	2014-02-14 06:00:12	2014-02-14 06:00:12	166	\N
376	25	81e2aa1991acd6a599625091	superseded	javascript	simple-cipher	function generateRandomKey() {\n  var i, key = '', chars = 'abcdefghijklmnopqrstuvwxyz', length = chars.length;\n  for (i = 0; i < 100; i++) {\n    key += chars.charAt(Math.floor(Math.random() * length));\n  }\n  return key;\n}\n\nfunction encode(plainChar, startFrom) {\n  plainChar = plainChar.charCodeAt(0);\n  startFrom = startFrom.charCodeAt(0);\n  plainChar += startFrom - 97;\n  if (plainChar > 122) {\n    plainChar -= 26;\n  }\n  return String.fromCharCode(plainChar);\n}\n\nfunction decode(encodedChar, startFrom) {\n  encodedChar = encodedChar.charCodeAt(0);\n  startFrom = startFrom.charCodeAt(0);\n  encodedChar -= startFrom - 97;\n  if (encodedChar < 97) {\n    encodedChar += 26;\n  }\n  return String.fromCharCode(encodedChar);\n}\n\nfunction validateKey(key) {\n  if (!/^[a-z]+$/.test(key)) {\n    throw new Error('Bad key');\n  }\n  return key;\n}\n\nfunction Cipher(key) {\n  this.key = validateKey(key === undefined ? generateRandomKey() : key);\n}\n\nCipher.prototype.encode = function(input) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += encode(input.charAt(i), this.key.charAt(keyCounter++));\n    if (keyCounter >= this.key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nCipher.prototype.decode = function(input) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += decode(input.charAt(i), this.key.charAt(keyCounter++));\n    if (keyCounter >= this.key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nmodule.exports = Cipher;	\N	f	1	1	2014-03-04 01:42:52	2014-03-04 01:42:52	167	\N
379	25	9214dc245dec251293b652dc	superseded	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize input\n    @input = input.downcase\n  end\n\n  def match potentials\n    matches = []\n    potentials.each do |potential|\n      if anagram? potential.downcase\n        matches << potential\n      end\n    end\n    matches\n  end\n\n  private\n\n  def anagram? potential\n    hashed_word == hashify(potential) && input != potential\n  end\n\n  def hashed_word\n    @hashed_word ||= hashify input\n  end\n\n  def hashify word\n    word.split("").each.with_object(Hash.new 0) do |character, count|\n      count[character] += 1\n    end\n  end\nend	\N	f	3	1	2014-02-23 20:42:55	2014-02-23 20:42:55	168	\N
392	25	061ffa715ba6a78b7e40364f	superseded	ruby	point-mutations	class DNA\n  NUCLEOTIDES = [\n    ADENINE = "A",\n    CYTOSINE = "C",\n    GUANINE = "G",\n    THYMINE = "T",\n  ]\n\n  def initialize(nucleotides)\n    raise ArgumentError, "`#{nucleotides}' contains invalid DNA nucleotides" unless nucleotides =~ /\\A[#{NUCLEOTIDES.join}]*\\z/\n    @nucleotides = nucleotides\n  end\n\n  def hamming_distance(nucleotides)\n    differences( nucleotides).size()\n  end\n\n  private\n\n  def differences(other_nucleotides)\n    @nucleotides.chars.zip(other_nucleotides.chars).select do |a, b|\n      # `zip' automatically pads either array with nils if they're not of equal length,\n      # so we need to account for that by not selecting values where the other array contains nil values\n      a != b && !b.nil?\n    end\n  end\nend	\N	f	0	1	2014-02-23 12:07:16	2014-02-23 12:07:16	174	\N
408	20	6e63e3a18ce7311dee83ea36	done	ruby	word-count	class Phrase\n  def initialize(sentence)\n    @sentence = sentence\n  end\n\n  def word_count\n    Hash.new(0).tap do |result|\n      matches = @sentence.scan(/[A-Za-z'0-9]+/)\n      matches.each do |word|\n        result[word.downcase] += 1 if !word.empty?\n      end\n    end\n  end\nend	\N	f	0	1	2014-02-04 12:54:19	2014-02-04 12:54:19	183	\N
409	20	ff8beb23402b07452eefaa7f	hibernating	ruby	anagram	require 'prettyprint'\nclass Anagram\n  def initialize(word)\n    @word = String(word)\n    @letters = @word.downcase.chars.to_a.sort\n    @anagrams=[]\n  end\n  def match(words)\n    words.each do |check|\n      next if check.downcase == @word.downcase;\n      if is_anagram?(check)\n        @anagrams.push(check)\n      end\n    end\n    @anagrams\n  end\n  def is_anagram?(check)\n    check_chars = check.downcase.chars.to_a.sort\n    check_chars == @letters\n  end\nend	\N	f	3	1	2013-12-23 08:23:49	2013-12-23 08:23:49	184	\N
422	20	858ba0c209750cdd75d4fc25	done	ruby	proverb	class Proverb\n  def initialize(*words)\n    @words = *words\n    if @words.last.class == Hash\n      @qualifier = @words.last[:qualifier]\n      @words.pop\n    end\n  end\n\n  def to_s\n    start = ''\n    count = 0\n    @words.each do |w|\n      unless w == @words.last\n        count += 1\n        start += "For want of a #{w} the #{@words[count]} was lost.\\n"\n      end\n    end\n\n    if @qualifier\n      finish = "And all for the want of a #{@qualifier} #{@words.first}."\n    else\n      finish = "And all for the want of a #{@words.first}."\n    end\n\n    return start + finish\n  end\nend	\N	f	2	1	2013-11-22 15:03:28	2013-11-22 15:03:28	189	\N
1060	37	8be1f1be4e5e58aa2e7967bf	done	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char (toLower, isAlphaNum)\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . map makePair . split\n    where makePair word = (map toLower word, 1)\n          split = wordsBy (not . isAlphaNum)	\N	f	2	3	2014-03-01 20:48:20	2014-03-01 20:48:20	472	\N
424	20	75e0bda35f5060a687a70a60	superseded	objective-c	word-count	#import "WordCount.h"\n\n@implementation WordCount : NSObject\n\n-(id) initWithString: (NSString*) source_\n{\n    self = [super init];\n    if (self) {\n        self.source = source_;\n    }\n    return self;\n}\n\n- (NSString*) normalized\n{\n    NSString* downcased = [ self.source lowercaseString ];\n    return [[ downcased\n        componentsSeparatedByCharactersInSet:[[NSCharacterSet letterCharacterSet] invertedSet]]\n                    componentsJoinedByString:@" "];\n}\n\n- (NSDictionary*) count\n{\n    NSMutableDictionary *counts = [[NSMutableDictionary alloc] init];\n    NSArray *words = [[self normalized] componentsSeparatedByString:@" "];\n    for (id word in words) {\n        if ([word length] == 0) {\n            // do nothing\n        } else if ([counts valueForKey:word] == nil) {\n            [counts setValue:@1 forKey:word];\n        } else {\n            int count = [[counts valueForKey:word] intValue];\n            [counts setValue:[NSNumber numberWithInt:count + 1] forKey:word];\n        }\n    }\n    return counts;\n}\n\n@end	\N	f	2	1	2013-11-13 16:19:25	2013-11-13 16:19:25	190	\N
435	20	ef456ce0564ace6d18eb9f51	superseded	ruby	hamming	class Hamming\n\n  def self.compute(original, mutated)\n    pair_them(original, mutated).count {|x,y| (x != y and y)}\n  end\n\n  private\n  def self.pair_them(s1, s2)\n    s1.to_array.zip(s2.to_array)\n  end\n\n  def self.not_matching(c1, c2)\n    c1 != c2 and c2\n  end\n\nend\n\n\nclass String\n\n  def to_array\n    self.split("")\n  end\n\nend	\N	f	4	3	2014-02-16 11:56:45	2014-02-16 11:56:45	192	\N
437	20	9fcd6fa8a2820ede58981098	done	ruby	allergies	ALLERGIES = [\n 'cats', 'pollen', 'chocolate', 'tomatoes',\n 'strawberries', 'shellfish', 'peanuts', 'eggs',\n  ]\n\nclass Allergies\n  def initialize(n)\n    @b = n.to_s(2).rjust(8,'0')[-8..-1].chars\n  end\n\n  def list\n    @b.zip(ALLERGIES).inject([]) do |a, z|\n      a.unshift(z[1]) if z[0] == '1'; a\n    end\n  end\n\n  def allergic_to?(a)\n    @b[ALLERGIES.index(a)] == '1'\n  end\nend	\N	f	2	1	2014-01-16 23:43:07	2014-01-16 23:43:07	193	\N
451	5	d4f8501ecaab163cf09dd5a0	superseded	ruby	bob	class Bob\n  def hey(msg)\n    result = analyze(msg)\n    case\n    when result.question? then "Sure."\n    when result.yelling? then "Woah, chill out!"\n    when result.silence? then "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def analyze(msg)\n    MessageAnalyzer.new(msg)\n  end\n\nend\n\nclass MessageAnalyzer\n  attr_reader :msg\n\n  def initialize(msg)\n    @msg = msg || ''\n  end\n\n  def silence?\n    msg.length == 0\n  end\n\n  def yelling?\n    msg.length > 0 && msg == msg.upcase\n  end\n\n  def question?\n    msg =~ /.*\\?$/\n  end\nend	\N	f	6	1	2014-02-12 13:57:50	2014-02-12 13:57:50	199	\N
456	5	f00e48aecd60f13f0ea054b4	pending	javascript	anagram	function Anagram(word) {\n    this.word = word.toLowerCase();\n}\n\nAnagram.prototype.match = function(wordList) {\n    'use strict';\n    \n    var thisWord = this.word;\n\n    function lengthMatch(word) {\n        return word.length === thisWord.length;\n    }\n    \n    function notSameWordMatch(word) {\n        return word !== thisWord;\n    }\n    \n    function makeMap(word) {\n        return word.split('').reduce(function (obj, letter) {\n            obj[letter] = (obj[letter] || 0) + 1;\n            return obj;\n        }, {});\n    }\n\n    function letterMatch(word) {\n        var thisWordMap = makeMap(thisWord);\n        var testWordMap = makeMap(word);\n        return Object.keys(thisWordMap).filter(function(letter) {\n            return thisWordMap[letter] !== testWordMap[letter];\n        }).length === 0;\n    }\n    \n    function wordFilter(word) {\n        var lowerCaseWord = word.toLowerCase();\n        return lengthMatch(lowerCaseWord) &&\n            notSameWordMatch(lowerCaseWord) &&\n            letterMatch(lowerCaseWord);\n    }\n    \n    return wordList.filter(wordFilter);\n};\n\nmodule.exports = Anagram;	\N	f	1	1	2013-11-27 05:16:16	2013-11-27 05:16:16	202	anagram.js
459	5	2c2f5d90dfdc02c6f1fbdd45	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    dict = HashDict.new\n    String.downcase(sentence) |> String.split |>  do_count(dict)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    entry = prepare_entry(head, dict)\n    do_count(tail, entry)\n  end\n\n  defp prepare_entry(word, dict) do\n    Regex.replace(%r/\\W/, word, "") |> add_or_increment_entry(dict)\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	1	4	2013-12-18 14:16:47	2013-12-18 14:16:47	204	\N
462	5	a484fe58631d2dc668541c29	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    words = String.downcase(sentence) |> String.split(%r/\\W/)\n    Enum.reduce(words, HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	1	9	2014-01-11 17:56:24	2014-01-11 17:56:24	204	\N
463	5	7b1ee7ad7c2c0edb9aa9cda8	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    dict = HashDict.new\n    String.downcase(sentence) |> String.split |>  do_count(dict)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    do_count(tail, prepare_entry(head, dict))\n  end\n\n  defp prepare_entry(word, dict) do\n    Regex.replace(%r/\\W/, word, "") |> add_or_increment_entry(dict)\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\nend	\N	f	2	3	2014-01-19 09:40:04	2014-01-19 09:40:04	204	\N
466	5	9481c8c81462660f5b468292	superseded	elixir	word-count	defmodule Words do\n\n  @doc """\n    Takes a string and returns a HashDict with the number of occurences for each word.\n\n    iex> Words.count("foo bar")\n    HashDict.new [{ "foo", 1 }, { "bar", 1 }]\n  """\n\n  def count(sentence) do\n    dict = HashDict.new []\n    String.downcase(sentence) |> String.split |>  do_count(dict)\n  end\n\n  defp do_count([], dict), do: dict\n  defp do_count([head|tail], dict) do\n    entry = prepare_entry(head, dict)\n    do_count(tail, entry)\n  end\n\n  defp prepare_entry(word, dict) do\n    Regex.replace(%r/\\W/, word, "") |> add_or_increment_entry(dict)\n  end\n\n  defp add_or_increment_entry("", dict), do: dict\n  defp add_or_increment_entry(word, dict) do\n    current_count = HashDict.get(dict, word) || 0\n    HashDict.put(dict, word, current_count + 1)\n  end\n\nend	\N	f	1	1	2014-02-05 11:33:45	2014-02-05 11:33:45	204	\N
475	5	0006de3cb5964931cc2e4136	superseded	elixir	bob	defmodule Teenager do\n  defp isShouting(heard) do\n    String.upcase(heard) == heard\n  end\n  defp isQuestion(heard) do\n    String.ends_with? heard, "?"\n  end\n  defp isSilence(heard) do\n    String.lstrip(heard) == ""\n  end\n  def hey(heard) do\n    cond do\n      isSilence(heard) -> "Fine. Be that way!"\n      isQuestion(heard) -> "Sure."\n      isShouting(heard) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend	\N	f	0	4	2014-01-14 09:32:02	2014-01-14 09:32:02	206	\N
483	5	557383e89e2a2c985d826c4a	superseded	elixir	meetup	defmodule Meetup do\n  @moduledoc """\n  Calculate meetup dates.\n  """\n  \n  @type weekday ::\n      :monday | :tuesday | :wednesday\n    | :thursday | :friday | :saturday | :sunday\n\n  @type schedule :: :first | :second | :third | :fourth | :last | :teenth\n\n  @doc """\n  Calculate a meetup date.\n\n  The schedule is in which week (1..4, last or "teenth") the meetup date should\n  fall.\n  """\n  @spec meetup(pos_integer, pos_integer, weekday, schedule) :: :calendar.date\n  def meetup(year, month, weekday, schedule) do\n    first = first_in_month(weekday, year, month)\n    daysinmonth = :calendar.last_day_of_the_month(year, month)\n    day = case schedule do\n      :teenth -> if (first + 7 > 12) do\n                   first + 7\n                 else\n                   first + 14\n                 end\n      :first -> first\n      :second -> first + 7\n      :third -> first + 14\n      :fourth -> first + 21\n      :last -> if (first + 28 > daysinmonth) do\n                 first + 21\n               else\n                 first + 28\n               end\n    end\n    {year, month, day}\n  end\n\n  defp first_in_month(weekday, year, month) do\n    weekdayno = get_weekdayno(weekday)\n    monthstart = :calendar.day_of_the_week(year, month, 1)\n    if weekdayno < monthstart do\n      8 + weekdayno - monthstart\n    else\n      1 + weekdayno - monthstart\n    end\n  end\n\n  defp get_weekdayno(weekday) do\n    case weekday do\n      :monday -> 1\n      :tuesday -> 2\n      :wednesday -> 3\n      :thursday -> 4\n      :friday -> 5\n      :saturday -> 6\n      :sunday -> 7\n    end\n  end\nend	\N	f	1	1	2014-01-22 04:13:07	2014-01-22 04:13:07	211	meetup.exs
486	5	d746a1394ec29af13a7881f4	superseded	ruby	house	class House\n\n  def verse number\n      generate_verse number\n  end\n\n  def verses start, finish\n    (start..finish)\n      .map { |number| generate_verse(number).concat("\\n") }\n      .join\n  end\n\n  private\n\n  def generate_verse number\n    verse_lines = lines number\n    "This is #{verse_lines.join(' ')}.\\n"\n  end\n\n  def lines number_of_lines\n    lines = [\n      'the house that Jack built',\n      'the malt that lay in',\n      'the rat that ate',\n      'the cat that killed',\n      'the dog that worried',\n      'the cow with the crumpled horn that tossed',\n      'the maiden all forlorn that milked',\n      'the man all tattered and torn that kissed',\n      'the priest all shaven and shorn that married',\n      'the rooster that crowed in the morn that woke',\n      'the farmer sowing his corn that kept',\n      'the horse and the hound and the horn that belonged to'\n    ]\n\n    lines[0...number_of_lines].reverse\n  end\n\nend	\N	f	1	1	2013-11-20 14:39:14	2013-11-20 14:39:14	213	house.rb
493	6	38e5f51de45ece9fd57a5cb5	superseded	ruby	bob	class Bob\n  def hey(words)\n    char_arr = words.each_char.to_a\n    punctuation = char_arr.last\n\n    return "Whatever." if punctuation == "." || (newline_present?(char_arr) && !words.empty?)\n\n    return "Fine. Be that way!" if words.empty? || words.strip.empty?\n\n    if punctuation == "!"\n      if numbers?(char_arr) || all_caps?(char_arr)\n        say_chill_out\n      else\n        return "Whatever."\n      end\n    end\n\n    if punctuation == "?"\n      if numbers?(char_arr) || !all_caps?(char_arr)\n        return "Sure."\n      else\n        say_chill_out\n      end\n    end\n\n    if numbers?(char_arr) && punctuation != "!"\n     return "Whatever."\n    end\n\n    say_chill_out if all_caps?(char_arr)\n  end\n\n  private\n\n  def numbers?(char_arr)\n    char_arr.each do |char|\n      if char.to_i > 0\n        return true\n      end\n    end\n    return false\n  end\n\n  def say_chill_out\n    return "Woah, chill out!"\n  end\n\n  def all_caps?(char_arr)\n    char_arr.pop\n    char_arr.each do |char|\n      if char != char.capitalize\n        return false\n        exit\n      end\n    end\n  end\n\n  def newline_present?(char_arr)\n    char_arr.include?("\\n")\n  end\nend	\N	f	0	1	2013-11-11 13:35:29	2013-11-11 13:35:29	217	\N
495	6	5cfe915aa71a9e94cd23c3a5	superseded	javascript	word-count	// Code to satisfy test interface\nmodule.exports = Words\nfunction Words(str) { this.count = countWords(words(str)) }\n\n// ---\n\n// Actual implementation\n\n// Count the number of times each word occurs in a list of words\nfunction countWords(wordList) {\n  return wordList.reduce(function(counts, word){\n    if  (counts[word]) counts[word]++\n    else counts[word] = 1\n    return counts\n  }, {})\n}\n\n// Transform the input string to a list of lowercase alphanumeric words\nfunction words(str) {\n  return str\n    .replace(/[^a-z0-9 ]/gi,' ')\n    .trim()\n    .toLowerCase()\n    .split(/\\s+/)\n}\n\n// ---\n\n// How I would test this\n\nvar shouldRunTests = !module.parent // true when invoked directly: `node bob.js`\n\nif (shouldRunTests) {\n  var assert = require('assert')\n\n  // Unit tests\n\n  assert.deepEqual(words('word'), ['word'])\n  assert.deepEqual(words('one of each'), ['one','of','each'])\n  assert.deepEqual(words('one fish two fish red fish blue fish'), ['one','fish','two','fish','red','fish','blue','fish'])\n  assert.deepEqual(words('car : carpet as java : javascript!!&@$%^&'), ['car','carpet','as','java','javascript'])\n  assert.deepEqual(words('testing, 1, 2 testing'), ['testing','1','2','testing'])\n  assert.deepEqual(words('go Go GO'), ['go','go','go'])\n\n  assert.deepEqual(countWords(['word']), { 'word' : 1 })\n  assert.deepEqual(countWords(['one', 'of', 'each']), { 'one': 1, 'of': 1, 'each': 1 })\n  assert.deepEqual(countWords(['one','fish','two','fish','red','fish','blue','fish']), { 'one' : 1, 'fish' : 4, 'two' : 1, 'red' : 1, 'blue' : 1 })\n  assert.deepEqual(countWords(['car','carpet','as','java','javascript']), { 'car' : 1, 'carpet' : 1, 'as' : 1, 'java' : 1, 'javascript' : 1 })\n  assert.deepEqual(countWords(['testing','1','2','testing']), { 'testing' : 2, '1' : 1, '2' : 1 })\n  assert.deepEqual(countWords(['go','go','go']), { 'go' : 3 })\n\n  console.log('ok')\n}	\N	f	1	3	2014-01-03 12:05:30	2014-01-03 12:05:30	218	\N
499	6	99f5f02f3d92b7fda9095eab	superseded	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nDNA.prototype = {\n  get nucleotideCounts() {\n    return Counting.countChars(Nucleotides.dna_bases, this.strand);\n  }\n};\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return Counting.countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nvar Counting = {\n  countChars: function(chars, string) {\n    var that = this;\n\n    return chars.reduce(function(tally, char) {\n      tally[char] = that.countChar(char, string);\n      return tally;\n    }, {});\n  },\n\n  countChar: function(char, string) {\n    // If we need to optimize, regexp match is likely faster.\n    return string.split(char).length - 1;\n  }\n};	\N	f	3	1	2013-12-11 17:33:16	2013-12-11 17:33:16	219	\N
502	6	6759c800e8eb4f4507ac64c5	done	javascript	nucleotide-count	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n};\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n    get: function() {\n      var dna = this;\n      return Nucleotides.dna_bases.reduce(function(tally, nucleotide) {\n        tally[nucleotide] = dna.count(nucleotide);\n        return tally;\n      }, {});\n    }\n});\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) throw "Invalid Nucleotide";\n  return countChar(nucleotide, this.strand);\n}\n\n\nvar Nucleotides = {\n  dna_bases: ["A", "T", "C", "G"],\n  bases:     ["A", "T", "C", "G", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n};\n\n\nfunction countChar(char, string) {\n  // If we need to optimize, regexp match is likely faster.\n  return string.split(char).length - 1;\n}	\N	f	1	4	2014-02-03 22:37:51	2014-02-03 22:37:51	219	\N
512	6	141dbaf18e6614e988e8a453	done	perl5	bob	use strict;\nuse warnings;\n\npackage Bob;\n\n# Note: for a more detailed explanation of how Bob responds, see the pod below.\n\nsub hey {\n\t# Unpack the arguments\n\tmy $statement = shift;\n\t\n\t# We'll handle this one case at a time. First, an empty string, or all\n\t# whitespace, is considered to be silence, to which Bob responds rather\n\t# huffily. Do we have all whitespace?\n\treturn 'Fine. Be that way!' if $statement =~ /^\\s*$/;\n\t\n\t# ALL CAPS is considered shouting, but bare numbers is not. Is Bob being\n\t# shouted at?\n\treturn 'Woah, chill out!' if\n\t\tlc($statement) ne $statement\t# something is upper-caseable (i.e. not\n\t\t\tand\t\t\t\t\t\t\t#         just numbers/symbols)\n\t\tuc($statement) eq $statement\t# everything is uppercase\n\t;\n\t\n\t# OK, is it a non-shouting question? We've already handled the possibility\n\t# of shouting, so just check if it ends with a question mark:\n\treturn 'Sure.' if $statement =~ /\\?\\s*$/;\n\t\n\t# By process of elimination, Bob is being addressed normally, to which he\n\t# responds with:\n\treturn 'Whatever.';\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nBob.pm - a module to emulate text communication with an unruly teenager.\n\n=head1 SYNOPSIS\n\n use Bob;\n my $response = Bob::hey($message);\n print "When I said '$message' to Bob, he replied with '$response'\\n";\n\n=head1 DESCRIPTION\n\nThis module is a Perl5 solution to the first exercise of exercism.io. The module\nmust do the following:\n\n=over\n\n=item If you ask a question...\n\nBob answers 'Sure.'\n\n=item If you yell at him (ALL CAPS)...\n\nBob answers 'Woah, chill out!' Note that Bob responds this way both to shouting\nstatements I<and> shouting questions.\n\n=item If you address him without saying anything (all whitespace)...\n\nBob answers 'Fine. Be that way!'\n\n=item If none of the above situations apply...\n\nBob answers 'Whatever.'\n\n=back\n\nThis module only provides a single, non-exported function:\n\n=head2 Bob::hey\n\nThis function takes any input text and returns a response as described above.\nFor example, calling C<Bob::hey('foo')> should return the string C<'Whatever.'>\n\n \n\n=head1 AUTHOR\n\nDavid Mertens <dcmertens.perl@gmail.com>\n\n=cut	\N	f	1	1	2013-11-30 03:55:48	2013-11-30 03:55:48	225	\N
513	6	ff63ca2f780f32b430e1de02	superseded	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    distance(strand1, strand2, 0)\n  end\n\n  defp distance(_, [], acc), do: acc\n  defp distance([], _, acc), do: acc\n  defp distance([], [], acc), do: acc\n\n  defp distance([left_head|left_tail], [right_head|right_tail], acc) do\n    if(left_head != right_head, do: acc = acc + 1)\n    distance(left_tail, right_tail, acc)\n  end\n\nend	\N	f	0	1	2013-12-27 18:53:16	2013-12-27 18:53:16	226	point_mutations.exs
519	6	66424771346781357f76671e	done	elixir	prime-factors	defmodule PrimeFactors do\n  @doc """\n  Compute the prime factors for 'number'.\n\n  The prime factors are prime numbers that when multiplied give the desired\n  number.\n\n  The prime factors of 'number' will be ordered lowest to highest. \n  """\n  @spec for(pos_integer) :: [pos_integer]\n  def for(number) do\n    factors(number, prime_candidates())\n  end\n\n  defp factors(1, _), do: []\n  defp factors(number, fs=[factor | _]) when rem(number, factor) == 0 do\n    [factor | factors(div(number, factor), fs)]\n  end\n  defp factors(number, [_ | fs]), do: factors(number, fs)\n  defp factors(number, lazyfn), do: factors(number, lazyfn.())\n\n  # At first, it may appear to be insane to (ab)use improper lists, but this is\n  # actually a well known and even officially documented technique in Erlang.\n  # http://www.erlang.org/documentation/doc-5.8/doc/programming_examples/funs.html#id2259930\n  def prime_candidates(), do: [2, 3 | next_candidate(6)]\n  def next_candidate(n) do\n    [n-1, n+1 | fn () -> next_candidate(n+6) end]\n  end\nend	\N	f	3	1	2013-11-18 23:22:08	2013-11-18 23:22:08	230	\N
528	8	4cc4edea6daf039f5ec8c8c9	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    vanilla_leap? || exceptional_century? ? true : false\n  end\n\n  private\n\n  def evenly_divisible?(divisor)\n    @year % divisor == 0 ? true : false\n  end\n\n  def vanilla_leap?\n    evenly_divisible?(4) && !evenly_divisible?(100) ? true : false\n  end\n\n  def exceptional_century?\n    evenly_divisible?(400) ? true : false\n  end\nend	\N	f	0	2	2014-03-19 16:16:49	2014-03-19 16:16:49	235	\N
531	8	c54b25667c3562cdc62991be	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.split('').sort\n    end\n  end\nend	\N	f	10	1	2014-03-17 18:48:45	2014-03-17 18:48:45	236	\N
540	8	afe7d98f55168cb8e9d1747c	superseded	javascript	point-mutations	"use strict";\n\nfunction DNA(strand) {\n  this.strand = this._toArray(strand);\n}\n\nDNA.prototype.hammingDistance = function(strand) {\n  return this._toArray(strand).filter(this.compareNucleotides, this).length;\n};\n\nDNA.prototype.compareNucleotides = function(nucleotide, index) {\n  if (this.strand.length > index) {\n    return (this.strand[index] !== nucleotide);\n  }\n};\n\nDNA.prototype._toArray = function(strand) {\n  return strand.split('');\n};\n\nmodule.exports = DNA	\N	f	1	1	2014-03-20 05:05:38	2014-03-20 05:05:38	240	\N
541	8	0c493c8a24ad8c887cee11f0	superseded	elixir	beer-song	import Enum, only: [map: 2, join: 2]\n\ndefmodule Beer do\n\n  def verse 0 do\n    "No more bottles of beer on the wall, " <>\n    "no more bottles of beer.\\n" <>\n    "Go to the store and buy some more, " <>\n    "99 bottles of beer on the wall.\\n"\n  end\n\n  def verse 1 do\n    "1 bottle of beer on the wall, " <>\n    "1 bottle of beer.\\n" <>\n    "Take it down and pass it around, " <>\n    "no more bottles of beer on the wall.\\n"\n  end\n\n  def verse 2 do\n    "2 bottles of beer on the wall, " <>\n    "2 bottles of beer.\\n" <>\n    "Take one down and pass it around, " <>\n    "1 bottle of beer on the wall.\\n"\n  end\n\n  def verse n do\n    to_string(n) <> " bottles of beer on the wall, " <>\n    to_string(n) <> " bottles of beer.\\n" <>\n    "Take one down and pass it around, " <>\n    to_string(n - 1) <> " bottles of beer on the wall.\\n"\n  end\n\n  def sing start do\n    sing start, 0\n  end\n\n  def sing start, finish do\n    start..finish |> verses |> assemble\n  end\n\n  defp assemble verses do\n    join(verses, "\\n") <> "\\n"\n  end\n\n  defp verses range do\n    map(range, &verse/1)\n  end\n\nend	\N	f	0	1	2014-03-17 15:55:24	2014-03-17 15:55:24	241	\N
547	9	9bdf7efefc9c237a43dc537e	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= count_nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless valid? nucleotide\n    nucleotide_counts.fetch(nucleotide, 0)\n  end\n\n  private\n  def valid?(letter)\n    Nucleotides.valid? letter\n  end\n\n  def strand_nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides\n    strand_nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    Hash[Nucleotides.dna.zip([0].cycle)]\n  end\nend\n\nmodule Nucleotides\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  VALID_NUCLEOTIDES = [\n    ADENOSINE,\n    CYTIDINE,\n    GUANOSINE,\n    THYMIDINE,\n    URACIL\n  ]\n\n  def self.dna\n    VALID_NUCLEOTIDES.select { |nucleotide| nucleotide != URACIL }\n  end\n\n  def self.valid?(letter)\n    VALID_NUCLEOTIDES.include? letter\n  end\nend	\N	f	1	6	2013-10-30 02:46:44	2013-10-30 02:46:44	245	\N
1076	37	1871eec3c1210a11e99bf9a3	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a = length . filter (uncurry (/=)) . (zip a) where	\N	f	4	2	2014-02-26 15:24:03	2014-02-26 15:24:03	478	\N
549	9	68584640affe48731f36cb2d	superseded	ruby	nucleotide-count	class DNA\n  attr_accessor :strand, :nucleotide_counts\n\n  def initialize(strand)\n    @strand = strand\n    @nucleotide_counts = count_nucleotides(strand)\n  end\n\n  def count(nucleotide)\n    nucleotide_counts.fetch(validate(nucleotide), 0)\n  end\n\n  private\n  def validate(letter)\n    Nucleotide.from_initial(letter).to_s\n  end\n\n  def nucleotides\n    strand.chars\n  end\n\n  def count_nucleotides(strand)\n    nucleotides.each_with_object(empty_count) do |nucleotide, new_count|\n      new_count[nucleotide] += 1\n    end\n  end\n\n  def empty_count\n    {\n      'A' => 0,\n      'T' => 0,\n      'G' => 0,\n      'C' => 0\n    }\n  end\nend\n\nclass Nucleotide\n  attr_reader :initial\n\n  VALID_NUCLEOTIDES = ['A', 'C', 'G', 'T', 'U']\n\n  def self.from_initial(letter)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? letter\n    Nucleotide.new(letter)\n  end\n\n  def initialize(letter)\n    @initial = letter\n  end\n\n  def to_s\n    initial\n  end\nend	\N	f	1	1	2013-11-15 16:59:36	2013-11-15 16:59:36	245	\N
555	9	eedec91e37bc95b5047d079a	superseded	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    count(strand, nucleotide, 0)\n  end\n\n  defp count([], _nucleotide, acc), do: acc\n  defp count([current_nucleotide | rest], nucleotide, acc) do\n    count(rest, nucleotide, is_match(current_nucleotide == nucleotide, acc))\n  end\n\n  defp is_match(true, acc), do: acc + 1\n  defp is_match(false, acc), do: acc\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    nucleotide_counts(strand, HashDict.new(empty_nucleotide_counts_hash))\n  end\n\n  defp nucleotide_counts([], acc_hash), do: acc_hash\n  defp nucleotide_counts([nucleotide | rest], acc_hash) do\n    current_count = HashDict.get(acc_hash, nucleotide)\n    nucleotide_counts(rest, HashDict.put(acc_hash, nucleotide, current_count + 1))\n  end\n\n  defp empty_nucleotide_counts_hash do\n    Enum.map @nucleotides, fn(nucleotide) ->\n      { nucleotide, 0 }\n    end\n  end\n\nend	\N	f	2	1	2013-11-04 21:15:40	2013-11-04 21:15:40	246	\N
556	9	0835bbea13daad58ebc7dd19	done	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    count(strand, nucleotide, 0)\n  end\n\n  defp count([], _nucleotide, acc), do: acc\n  defp count([current_nucleotide | rest], nucleotide, acc) do\n    count(rest, nucleotide, is_match(current_nucleotide == nucleotide, acc))\n  end\n\n  defp is_match(true, acc), do: acc + 1\n  defp is_match(false, acc), do: acc\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    nucleotide_counts(strand, HashDict.new(empty_nucleotide_counts_hash))\n  end\n\n  defp nucleotide_counts([], acc_hash), do: acc_hash\n  defp nucleotide_counts([nucleotide | rest], acc_hash) do\n    acc_hash = Dict.update(acc_hash, nucleotide, 1, fn(val) -> val + 1 end)\n    nucleotide_counts(rest, acc_hash)\n  end\n\n  defp empty_nucleotide_counts_hash do\n    Enum.map @nucleotides, fn(nucleotide) ->\n      { nucleotide, 0 }\n    end\n  end\n\nend	\N	f	0	2	2014-01-13 21:37:46	2014-01-13 21:37:46	246	dna.exs
574	9	381a1769221cf830b618ef4b	superseded	clojure	bob	(ns bob \n  (:require [clojure.string :as str]))\n\n(defn yelling? [phrase]\n  (= (str/upper-case phrase) phrase))\n\n(defn asking? [phrase]\n  (= (last phrase) \\?)\n)\n\n(def silent? str/blank?)\n\n(defn response-for [phrase]\n  (cond\n   (silent? phrase) "Fine. Be that way!"\n   (yelling? phrase) "Woah, chill out!"\n   (asking? phrase) "Sure."\n   :else "Whatever."))	\N	f	1	3	2013-12-06 07:00:49	2013-12-06 07:00:49	253	\N
580	9	8b537cac753773ff2055059e	hibernating	ruby	bob	module StringValidations\n\n  def contains_hyphens_and_period_at_end?(str)\n    str.match(/\\-|\\.$/)\n  end\n\n  def contains_uppercase_words?(str)\n    str.match(/[A-Z]{2,}/)\n  end\n\n  def contains_question_mark?(str)\n    str.match(/\\?$/)\n  end\n\n  def contains_exclamation_mark?(str)\n    str.match(/\\!$/)\n  end\n\n  def contains_ok?(str)\n    str.match(/OK/)\n  end\nend\n\nclass Message\n  include StringValidations\n  attr_reader :message\n\n  def initialize(message)\n    super()\n    @message = message\n  end\n\n  def validate_to_respond\n    if @message.nil? or @message==''\n      'Fine. Be that way!'\n    elsif contains_hyphens_and_period_at_end?(@message) or (contains_exclamation_mark?(@message) and !contains_uppercase_words?(@message))\n      'Whatever.'\n    elsif contains_uppercase_words?(@message) and !(contains_ok?(@message) and contains_question_mark?(@message))\n      'Woah, chill out!'\n    elsif contains_question_mark?(@message)\n      'Sure.'\n    end\n  end\n\nend\n\nclass Bob\n\n  def hey(message)\n    response = Message.new(message)\n    response.validate_to_respond\n  end\n\nend	\N	f	0	4	2013-11-27 04:52:40	2013-11-27 04:52:40	254	\N
586	9	3fa16d846b77e4fe00a9f738	done	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char (isLetter, isDigit, toLower)\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\n-- wordCount :: String -> Map String Int\n-- wordCount = mapBuild Map.empty . canonicalize\n\ncanonicalize :: String -> [String]\ncanonicalize = words . map toLower . filter (\\x -> isLetter x || isDigit x || x == '-' || x == '\\'' || x == ' ')\n\nmapBuild :: Map String Int -> [String] -> Map String Int\nmapBuild m [] = m\nmapBuild m (x:xs) =\n    (\\m -> mapBuild m xs) $ case Map.lookup x m of\n                                Nothing -> Map.insert x 1 m\n                                Just c  -> Map.insert x (c+1) m\n\nwordCount :: String -> Map String Int\nwordCount string = wordLoop string [] Map.empty\n\nwordLoop :: String -> String -> Map String Int -> Map String Int\nwordLoop []       buffer wordMap = dumpBuffer [] (reverse buffer) wordMap (\\xs buffer wordMap -> wordMap)\nwordLoop (x : xs) buffer wordMap = \n    case isLetter x of\n        True  -> wordLoop xs (toLower x : buffer) wordMap\n        False -> case isDigit x || x == '-' || x == '\\'' of\n                     True  -> wordLoop xs (x : buffer) wordMap\n                     False -> dumpBuffer xs (reverse buffer) wordMap wordLoop\n\ndumpBuffer :: String -> String -> Map String Int -> (String -> String -> Map String Int -> Map String Int) -> Map String Int\ndumpBuffer xs buffer wordMap cont =\n    case buffer of\n        [] -> cont xs [] wordMap\n        _  -> cont xs [] $ case Map.lookup buffer wordMap of\n            Nothing    -> Map.insert buffer 1         wordMap\n            Just count -> Map.insert buffer (count+1) wordMap\n{-# INLINE dumpBuffer #-}	\N	f	1	1	2013-11-19 06:29:16	2013-11-19 06:29:16	257	\N
1008	30	8321c11194fb0a1e759c9aa8	superseded	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\n\nsub hey {\n\n    my $text = shift;\n    \n    # He says 'Fine. Be that way!' if you address him without actually saying anything.\n    return 'Fine. Be that way!' if $text =~ m!^ *$!;\n        \n    if( $text =~ m![a-zA-Z]! ) {\n    \n        # He answers 'Woah, chill out!' if you yell at him (ALL CAPS).\n        return 'Woah, chill out!' if uc($text) eq $text;\n\n    }\n    \n    # Bob answers 'Sure.' if you ask him a question.\n    return  'Sure.' if $text =~ m!\\? *$!;\n    \n    # He answers 'Whatever.' to anything else.\n    return 'Whatever.';\n\n}\n\n1;	\N	f	3	2	2014-03-09 23:25:00	2014-03-09 23:25:00	451	\N
587	9	0190c48c038163df0d49651e	done	ruby	house	class House\n\n  START = "This is"\n  ENDING = ".\\n"\n  PHRASES = ['the house that Jack built',\n            'the malt that lay in ',\n            'the rat that ate ',\n            'the cat that killed ',\n            'the dog that worried ',\n            'the cow with the crumpled horn that tossed ',\n            'the maiden all forlorn that milked ',\n            'the man all tattered and torn that kissed ',\n            'the priest all shaven and shorn that married ',\n            'the rooster that crowed in the morn that woke ',\n            'the farmer sowing his corn that kept ',\n            'the horse and the hound and the horn that belonged to '\n            ]\n\n  def verse n\n    "#{START} #{body(n)}#{ENDING}"\n  end\n\n  def verses(n1, n2)\n    n1.upto(n2).map { |n| body(n) }.join(' ')\n  end\n\n  def body n\n    text = ''\n    n -= 1\n    until n < 0 \n      text << PHRASES[n]\n      n -= 1\n    end\n    text\n  end\n\nend	\N	f	1	1	2013-12-26 17:41:26	2013-12-26 17:41:26	258	\N
590	10	ba05107da3e17cd7ff576ee2	superseded	elixir	beer-song	defmodule Beer do\n\n  def verse(v) do\n    [line1(v), line2(v - 1)] |> newline_appender\n  end\n\n  def sing(start) do\n    sing(start, 0)\n  end\n\n  def sing(start, stop) do\n    start..stop |> Enum.map(&verse/1) |> newline_appender\n  end\n\n  defp line1(0) do\n    "No more bottles of beer on the wall, no more bottles of beer."\n  end\n\n  defp line1(n) do\n    interpolate(n, fn(n, s, _) -> %s"#{n} bottle#{s} of beer on the wall, #{n} bottle#{s} of beer." end)\n  end\n\n  defp line2(-1) do\n    "Go to the store and buy some more, 99 bottles of beer on the wall."\n  end\n\n  defp line2(n) do\n    interpolate(n, fn(n, s, pn) -> %s"Take #{pn} down and pass it around, #{n} bottle#{s} of beer on the wall." end)\n  end\n\n  defp interpolate(n, pattern_fn) do\n    pattern_fn.(to_s(n), plural(n), pronoun(n))\n  end\n\n  defp plural(1), do: ""\n  defp plural(_n), do: "s"\n\n  defp pronoun(0), do: "it"\n  defp pronoun(_n), do: "one"\n\n  defp to_s(0), do: "no more"\n  defp to_s(n), do: to_string(n)\n\n  defp newline_appender(arr) do\n    arr |> Enum.flat_map(fn(e) -> [e, "\\n"] end) |> Enum.join\n  end\nend	\N	f	0	1	2013-11-16 23:01:26	2013-11-16 23:01:26	260	\N
596	10	27e7d9ac21914e39bb37dce2	superseded	ruby	hamming	# put distance+=1 on 1 line\n#\nclass Hamming\n\n  def self.compute strand1, strand2\n    distance = 0\n\n    strand1_array = strand1.split('')\n    strand2_array = strand2.split('')\n\n    strand1_array.each_with_index do |point1, index|\n      point2 = strand2_array[index]\n\n      distance+=1 if point_mutation?(point1, point2)\n    end\n\n    distance\n  end\n\n  def self.point_mutation? pointa, pointb\n    pointa != pointb && !pointa.nil? && !pointb.nil?\n  end\n  private_class_method :point_mutation?\n\nend	\N	f	1	2	2013-10-16 05:17:43	2013-10-16 05:17:43	263	\N
600	10	f91ab02156b314e54c89b900	done	ruby	space-age	class SpaceAge\n  attr :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  orbital_periods_in_earth_years = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    earth: 1,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  orbital_periods_in_earth_years.each do |planet, orbital_period_in_earth_years|\n    orbital_period_in_seconds = orbital_period_in_earth_years * 31557600\n    define_method :"on_#{planet}" do\n      (seconds.fdiv(orbital_period_in_seconds)).round(2)\n    end\n  end\nend	\N	f	3	3	2013-09-13 07:54:40	2013-09-13 07:54:40	264	space_age.rb
609	10	f54f9c295c7f618f32413064	superseded	javascript	bob	var Bob = function () {\n  'use strict';\n    var bob = {\n        hey: function () {\n            if (empty_string(arguments[0])) {\n                return 'Fine, be that way.';\n            } else if (shouting(arguments[0])) {\n                return 'Woah, chill out!';\n            } else if (question(arguments[0])) {\n                return 'Sure';\n            } else {\n                return 'Whatever';\n            }\n        }\n    };\n    var shouting = function(arg) {\n        return /[A-Z]{2,}/.test(arg);\n    };\n    var empty_string = function(arg) {\n        return arg.length === 0;\n    };\n    var question = function(arg) {\n        return /\\?/.test(arg);\n    };\n    return bob;\n};\n\nmodule.exports = Bob;	\N	f	3	2	2013-09-28 17:39:01	2013-09-28 17:39:01	268	\N
612	10	7dd436eabfdcc8b1f157ab93	done	ruby	meetup	class Meetup\n  SUNDAY = 0\n  MONDAY = 1\n  TUESDAY = 2\n  WEDNESDAY = 3\n  THURSDAY = 4\n  FRIDAY = 5\n  SATURDAY = 6\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  %w{sun mon tues wednes thurs fri satur}.each do |prefix|\n    the_day = self.const_get("#{prefix.upcase}DAY")\n\n    define_method "#{prefix}teenth" do\n      someteenth the_day\n    end\n\n    define_method "first_#{prefix}day" do\n      first_someday the_day\n    end\n\n    define_method "second_#{prefix}day" do\n      second_someday the_day\n    end\n\n    define_method "third_#{prefix}day" do\n      third_someday the_day\n    end\n\n    define_method "fourth_#{prefix}day" do\n      fourth_someday the_day\n    end\n\n    define_method "last_#{prefix}day" do\n      last_someday the_day\n    end\n  end\n\nprivate\n\n  def someteenth(day_of_week)\n    someday(day_of_week, 13..19)\n  end\n\n  def first_someday(day_of_week)\n    someday(day_of_week, 1..7)\n  end\n\n  def second_someday(day_of_week)\n    someday(day_of_week, 8..14)\n  end\n\n  def third_someday(day_of_week)\n    someday(day_of_week, 15..21)\n  end\n\n  def fourth_someday(day_of_week)\n    someday(day_of_week, 22..28)\n  end\n\n  def last_someday(day_of_week)\n    first_day_of_the_next_month = if @month < 12\n      Date.new(@year, @month + 1, 1)\n    else\n      Date.new(@year + 1, 1, 1)\n    end\n    last_day_of_this_month = first_day_of_the_next_month.day - 1\n    someday(day_of_week, (last_day_of_this_month-7)..last_day_of_this_month)\n  end\n\n  def someday(day_of_week, range)\n    current_date = nil\n    range.each do | mday |\n      current_date = Date.new(@year, @month, mday)\n      break if current_date.wday == day_of_week\n    end\n    current_date\n  end\n\n\n\nend	\N	f	3	1	2013-10-13 00:21:42	2013-10-13 00:21:42	269	\N
621	10	6462929a949d626046f9cf85	done	elixir	strain	defmodule Strain do\n\n  @doc """\n  Keep all entries in a collection that return true for a given function.\n  """\n  @spec keep(Enum.t, (any -> as_boolean(term))) :: list\n  def keep(collection, function) do\n    Enum.reduce(collection, [], fn(x, acc) ->\n      if function.(x), do: [ x | acc ], else: acc\n    end) |> Enum.reverse\n  end\n\n  @doc """\n  DIscard all entries in a collection that return true for a given function.\n  """\n  @spec discard(Enum.t, (any -> as_boolean(term))) :: list\n  def discard(collection, function) do\n    keep(collection, fn(x) -> !function.(x) end)\n  end\n\nend	\N	f	3	1	2013-10-09 05:48:09	2013-10-09 05:48:09	272	\N
623	10	b188f524cb73cc3f7220838d	pending	clojure	allergies	(ns allergies)\n\n;; Listing the numeric value of each item rather than\n;; computing them makes this easier to maintain without\n;; accidentally changing the score-to-allergen mappings.\n(def ^:private allergens\n  [[  1 "eggs"]\n   [  2 "peanuts"]\n   [  4 "shellfish"]\n   [  8 "strawberries"]\n   [ 16 "tomatoes"]\n   [ 32 "chocolate"]\n   [ 64 "pollen"]\n   [128 "cats"]])\n\n;; In real code this would be an absolutely horrible\n;; choice of names since it's a key clojure.core function\n(defn list [score]\n  (filter seq\n    (map\n      (fn [[bit allergen]]\n        (if (pos? (bit-and score bit))\n          allergen))\n      allergens)))\n\n;; Also not a great choice of names (underscore instead\n;; of hyphen).\n(defn allergic_to? [score allergen]\n  (contains? (set (allergies/list score)) allergen))	\N	f	3	1	2013-10-19 21:41:51	2013-10-19 21:41:51	274	allergies.clj
634	11	75bda2fb7b7b28007a430135	superseded	ruby	nucleotide-count	class DNA\n\n  DNA_NUCLEOTIDES = ['A', 'C', 'T', 'G']\n  RNA_NUCLEOTIDES = ['A', 'C', 'G', 'U']\n\n  def initialize(dna_string)\n    dna_string.each_char do | char |\n      throw ArgumentError unless DNA_NUCLEOTIDES.include?(char)\n    end\n    @dna_string = dna_string\n  end\n\n  def count(nucleotide)\n    throw ArgumentError unless DNA_NUCLEOTIDES.include?(nucleotide) || RNA_NUCLEOTIDES.include?(nucleotide)\n    return @dna_string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides = Hash.new(0)\n    DNA_NUCLEOTIDES.each do | nucleotide |\n      nucleotides[nucleotide] = @dna_string.count(nucleotide)\n    end\n\n    return nucleotides \n  end\nend	\N	f	6	1	2014-02-23 20:17:27	2014-02-23 20:17:27	280	\N
650	11	5e52d1a6ce7530bec8dbc70c	done	ruby	bob	class Bob\n  def hey(phrase)\n    if silence?(phrase)\n      "Fine. Be that way!"\n    elsif shouting?(phrase)\n      "Woah, chill out!"\n    elsif question?(phrase)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def silence?(phrase)\n    phrase.strip.empty?\n  end\n\n  def shouting?(phrase)\n    phrase.upcase == phrase\n  end\n\n  def question?(phrase)\n    phrase.end_with?("?")\n  end\nend	\N	f	15	1	2014-03-03 11:01:43	2014-03-03 11:01:43	289	\N
653	11	cd5975730fd97cc2c1fda5ec	superseded	haskell	beer-song	module Beer(sing, verse) where\n\nsing :: Int -> Int -> String\nsing m n = foldr ((\\x y -> x ++ "\\n" ++ y).verse) "" [m,m-1..n]\n\nverse :: Int -> String\nverse n\n  | n > 2 = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++ show (n-1) ++ " bottles of beer on the wall.\\n"\n  | n == 2 = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++ show (n-1) ++ " bottle of beer on the wall.\\n"\n  | n == 1 = show n ++ " bottle of beer on the wall, " ++ show n ++ " bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  | otherwise = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"	\N	f	0	1	2014-02-22 02:49:01	2014-02-22 02:49:01	291	Beer.hs
661	12	6bcb9b96e206e854c795d63e	superseded	ruby	bob	# Playing around with delegation for this solution.\n# Turns out, this is a very effective way to overcomplicate a simple problem.\n\nclass Bob\n  def initialize(responder_chain = nil)\n    @responder_chain = responder_chain || [EmptyResponder.new, ShoutResponder.new, QuestionResponder.new, DefaultResponder.new]\n  end\n\n  def hey(input)\n    @responder_chain.find { |responder| responder.can_respond?(input) }.response\n  end\n\n  class QuestionResponder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\n\nend	\N	f	1	2	2013-11-12 00:04:41	2013-11-12 00:04:41	296	\N
662	12	faf78e85f32e31ee2c3c81ca	superseded	ruby	bob	# Playing around with delegation for this solution.\n# Turns out, this is a very effective way to overcomplicate a simple problem.\n\nclass Bob\n  def initialize(responder_chain = DEFAULT_RESPONDER_CHAIN)\n    @responder_chain = responder_chain\n  end\n\n  def hey(input)\n    @responder_chain.respond(input)\n  end\n\n  class Responder\n    def initialize(next_responder)\n      @next_responder = next_responder\n    end\n\n    def can_respond?(input)\n      raise NotImplementedError\n    end\n\n    def response\n      raise NotImplementedError\n    end\n\n    def respond(input)\n      return self.response if self.can_respond?(input)\n      @next_responder.respond(input)\n    end\n  end\n\n  class QuestionResponder < Responder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder < Responder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder < Responder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder < Responder\n    def initialize(next_responder = nil)\n      unless next_responder.nil?\n        puts "Throwing away DefaultResponder initializer next_responder"\n      end\n      super(nil)\n    end\n\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\n\nprivate\n  DEFAULT_RESPONDER_CHAIN = EmptyResponder.new(\n                              ShoutResponder.new(\n                                QuestionResponder.new(\n                                  DefaultResponder.new)))\nend	\N	f	2	1	2013-11-27 06:36:54	2013-11-27 06:36:54	296	\N
668	12	53f429edc8ddde051893b21d	pending	objective-c	bob	//\n//  Bob.m\n//  Bob\n//\n//  Created by Victor Jalencas on 30/01/14.\n//  Copyright (c) 2014 Hand Forged Apps. All rights reserved.\n//\n\n#import "Bob.h"\n\n\n\n// This would go in NSString+Bob.{h,m}\n\n\n@interface NSString (Bob)\n\n- (BOOL)isAQuestion;\n- (BOOL)isAYell;\n- (BOOL)isNothing;\n@end\n\n@implementation NSString (Bob)\n\n- (BOOL)isAQuestion\n{\n    return [self hasSuffix:@"?"];\n}\n\n- (BOOL)isAYell\n{\n    return [self isEqualToString:[self uppercaseString]] && ![self isEqualToString:[self lowercaseString]];\n}\n\n- (BOOL)isNothing\n{\n    return [self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]].length == 0;\n}\n@end\n\n// Back to Bob.m\n\n@implementation Bob\n\n- (NSString *)hey:(NSString *)input\n{\n    if ([input isNothing]) {\n        return @"Fine, be that way.";\n    }  else if ([input isAYell]) {\n        return @"Woah, chill out!";\n    } else if ([input isAQuestion]) {\n        return @"Sure.";\n    } else {\n        return @"Whatever.";\n    }\n}\n@end	\N	f	1	1	2013-11-05 17:05:47	2013-11-05 17:05:47	300	Bob.m
672	12	e1e218a88f8ec16120ad9066	done	javascript	saddle-points	var Matrix = function(diagram) {\r\n  var data = diagram.split("\\n").map(function(rowString) {\r\n               return rowString.match(/\\d+/g).map(function(number) {\r\n                 return parseInt(number, 10);\r\n               });\r\n             }),\r\n      dataLen = data.length,\r\n      colLen  = data[0].length,\r\n      self = this;\r\n\r\n  var arrayExtreme = function(comparison) {\r\n        return function(array) {\r\n          var extreme = array[0], i;\r\n          for(i in array) {\r\n            if(comparison(array[i], extreme))\r\n              extreme = array[i];\r\n          }\r\n          return extreme;\r\n        };\r\n      },\r\n      arrayMax = arrayExtreme(function(a, b) { return a > b; }),\r\n      arrayMin = arrayExtreme(function(a, b) { return a < b; });\r\n\r\n  this.rows = data;\r\n  this.columns = data.reduce(function(cols, row) {\r\n    for(var i in row) {\r\n      if( !cols[i] )\r\n        cols[i] = [];\r\n      cols[i].push(row[i]);\r\n    }\r\n    return cols;\r\n  }, []);\r\n\r\n  this.saddlePoints = (function() {\r\n    var points = [], row, col, rowMax, colMins = [], point;\r\n    \r\n    for(col = 0; col < colLen; col++)\r\n      colMins.push(arrayMin(self.columns[col]));\r\n\r\n    for(row = 0; row < dataLen; row++) {\r\n      rowMax = arrayMax(data[row]);\r\n      for(col = 0; col < colLen; col++) {\r\n        point = data[row][col];\r\n        if(point == colMins[col] && point == rowMax)\r\n          points.push([row, col]);\r\n      }\r\n    }\r\n\r\n    return points;\r\n  })();\r\n};\r\n\r\nmodule.exports = Matrix;\r	\N	f	1	1	2013-12-23 07:51:37	2013-12-23 07:51:37	303	saddle-points.js
680	12	f618a0ac44e218efa9f06f69	superseded	javascript	bob	String.prototype.endswith = function (arg) {\n    return this.indexOf (arg, this.length - arg.length) !== -1;\n};\n\nfunction Bob() {\n\n}\n\nBob.prototype.hey = function (sentence){\n\n    if (this.isNothing(sentence)) return 'Fine, be that way!';\n\n    if (this.isQuestion(sentence)) return 'Sure.';\n\n    if (this.isShouting(sentence)) return 'Woah, chill out!';\n\n    // default response\n    return 'Whatever.';\n}\n\nBob.prototype.isNothing = function (sentence) {\n  return (sentence == '');\n}\n\nBob.prototype.isQuestion = function (sentence) {\n  return sentence.endswith('?');\n}\n\nBob.prototype.isShouting = function (sentence) {\n    return !(new RegExp(".*[a-z].*")).test(sentence);\n};\n\nmodule.exports = Bob;	\N	f	3	3	2014-02-17 05:33:52	2014-02-17 05:33:52	305	\N
689	13	6878708a8b5a9cfc776e68b9	done	python	beer-song	class Beer:\n    def verse(self, k):\n        if k == 0:\n            return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        if k == 1:\n            return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n        else:\n            return "%(num)d bottles of beer on the wall, %(num)d bottles of beer.\\nTake one down and pass it around, %(decnum)d bottle%(maybes)s of beer on the wall.\\n" % \\\n                    {'num' : k, 'decnum' : k-1, 'maybes' : ('' if k == 2 else 's')}\n\n    def sing(self, start, end=0):\n        return '\\n'.join([self.verse(k) for k in xrange(start, end-1, -1)]) + '\\n'	\N	f	0	1	2014-02-11 15:45:45	2014-02-11 15:45:45	308	\N
694	13	473c36b3b166ed18ba541775	superseded	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def nucleotide?(molecule)\n    [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE, URACIL].include? molecule\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  attr_reader :sequence\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless nucleotide? nucleotide\n    sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= {\n      ADENOSINE => count(ADENOSINE),\n      THYMIDINE => count(THYMIDINE),\n      CYTIDINE => count(CYTIDINE),\n      GUANOSINE => count(GUANOSINE)\n    }\n  end\n\nend	\N	f	2	2	2013-12-10 08:25:52	2013-12-10 08:25:52	311	\N
695	13	0cb73816fbd722cf85d70a87	hibernating	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def nucleotides\n    [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE, URACIL]\n  end\n\n  def nucleotide?(molecule)\n    nucleotides.include? molecule\n  end\n\n  def count_molecules(sequence, molecules)\n    molecules.each_with_object(Hash.new(0)) do |molecule, counts|\n      counts[molecule] = sequence.count molecule\n    end\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  NUCLEOTIDES = [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE]\n  attr_reader :nucleotide_counts\n\n  def initialize(sequence)\n    @nucleotide_counts = count_molecules(sequence, DNA::NUCLEOTIDES)\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless nucleotide? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\nend	\N	f	2	3	2014-01-02 00:56:43	2014-01-02 00:56:43	311	\N
703	13	03dc8a7ae32643287f8d761d	done	ruby	anagram	class Anagram\n  def initialize(str)\n    @str = str.downcase\n  end\n\n  def match(words)\n    words.select do |word|\n      next unless @str.length == word.length\n      word = word.downcase\n      word != @str && sort_chars(word) == sort_chars(@str)\n    end\n  end\n\n  private\n\n  def sort_chars(str)\n    str.chars.sort.join\n  end\nend	\N	f	2	2	2013-09-22 06:37:41	2013-09-22 06:37:41	316	\N
709	13	4a5f213bdb618e88928a4742	superseded	ruby	point-mutations	class DNA\n\n  attr_reader :sequence\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def hamming_distance input_sequence\n    count = 0\n    test_sequence(input_sequence).chars.each_with_index { |char, index|\n      if char != input_sequence[index]\n        count = count + 1\n      end\n    }\n    count\n  end\n\n  private\n\n  def test_sequence input_sequence\n    min_index = [@sequence.length, input_sequence.length].min\n    @sequence[0..min_index-1]\n  end\n\nend	\N	f	2	1	2013-11-03 01:39:30	2013-11-03 01:39:30	318	\N
718	13	9fdf645d8adc5f8271c4ea1e	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    quadrennial? && (! centennial? || quadricentennial?)\n  end\n\n  private\n\n  def quadrennial?\n    @year % 4 == 0\n  end\n\n  def centennial?\n    @year % 100 == 0\n  end\n\n  def quadricentennial?\n    @year % 400 == 0\n  end\nend\n\nclass Fixnum\n  def leap_year?\n    Year.new(self).leap?\n  end\nend	\N	f	1	1	2013-12-31 16:23:20	2013-12-31 16:23:20	322	\N
723	13	273a5bcf5122599c2a254a7b	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n\tvar transformations = make(map[string]int)\n\tfor score, letters := range letter_values {\n\t\tassignLetterScores(transformations, letters, score)\n\t}\n\treturn transformations\n}\n\nfunc assignLetterScores(trans map[string]int, letters []string, score int) {\n\tfor i := range letters {\n\t\tvar letter = strings.ToLower(letters[i])\n\t\ttrans[letter] = score\n\t}\n}	\N	f	4	4	2014-01-26 19:45:52	2014-01-26 19:45:52	323	\N
733	14	784197ac1f16ab88eac64c4e	superseded	haskell	grade-school	module School\n    ( School\n    , empty\n    , add\n    , grade\n    , sorted\n    ) where\n\nimport qualified Data.Map as M\nimport qualified Data.Set as S\nimport Control.Arrow (second)\n\ntype Grade = Int\ntype Name  = String\nnewtype School = Roster (M.Map Grade (S.Set Name))\n\nempty :: School\nempty = Roster $ M.empty\n\nadd :: Grade -> Name -> School -> School\nadd g name (Roster roster) = Roster $\n    M.insertWith S.union g (S.singleton name) roster\n\ngrade :: Grade -> School -> [Name]\ngrade g (Roster roster) = S.toList $ M.findWithDefault S.empty g roster\n\nsorted :: School -> [(Grade, [Name])]\nsorted (Roster roster) = map (second S.toList) $ M.toList roster	\N	f	0	2	2013-08-17 00:06:26	2013-08-17 00:06:26	325	\N
745	14	ff7646b5fa0dab52c617e856	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(phrase)\n    @phrase = phrase\n    @word_count = {}\n    count_occurrences\n  end\n\n  private\n\n  def count_occurrences    \n    words.uniq.each do |unique_word|\n      occurrences = words.count { |word| unique_word == word }\n      @word_count[unique_word] = occurrences\n    end\n  end\n\n  def words\n    @phrase.split(/[^\\w']+/).map { |word| word.downcase }\n  end\n\nend	\N	f	3	1	2013-12-09 06:37:05	2013-12-09 06:37:05	329	\N
751	14	34f2b301ee0ed293942accab	pending	ruby	binary-search	class BinarySearch\n  attr_reader :list\n\n  def initialize(list)\n    raise ArgumentError unless list == list.sort\n    @list = list\n  end\n\n  def search_for(elem, start_index = default_start_index, end_index = default_end_index)\n    raise RuntimeError if start_index > end_index\n\n    middle_index = middle(start_index, end_index)\n    pivot = list[middle_index]\n\n    if elem == pivot\n      middle_index\n    elsif elem < pivot\n      search_for(elem, start_index, middle_index - 1)\n    elsif elem > pivot\n      search_for(elem, middle_index + 1, end_index)\n    end\n  end\n\n  def middle(start_index = default_start_index, end_index = default_end_index)\n    start_index + (end_index - start_index) / 2\n  end\n\n  private\n\n  def default_start_index\n    0\n  end\n\n  def default_end_index\n    list.length - 1\n  end\nend	\N	f	3	1	2013-08-20 16:52:12	2013-08-20 16:52:12	334	binary.rb
767	15	6c97a5ebb910b61027fc9edd	done	haskell	beer-song	module Beer (sing, verse) where\n      \nimport Data.List    \n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse n = (show n) ++ part1 ++ (show n) ++ part2 ++ verseEnd (n - 1)\n    where part1 = " bottles of beer on the wall, "\n          part2 = " bottles of beer.\\nTake one down and pass it around, "\n          verseEnd 1 = "1 bottle of beer on the wall.\\n"\n          verseEnd m = (show m) ++ " bottles of beer on the wall.\\n"\n                  \n\n                  \nsing :: Int -> Int -> String\nsing hi low \n         | hi > low = (intercalate "\\n" $ map verse [hi, (hi - 1) .. low]) ++ "\\n"	\N	f	3	1	2013-12-08 07:28:50	2013-12-08 07:28:50	344	\N
777	15	6dcac234585481602ff7de26	done	clojure	bob	(ns bob)\n\n(defn- shout? [phrase]\n  (re-find #"\\A[^a-z]+\\z" phrase))\n\n(defn- question? [phrase]\n  (re-find #"\\?\\z" phrase))\n\n(defn- silence? [phrase]\n  (= "" phrase))\n\n(defn response-for [phrase]\n  (cond\n    (shout? phrase) "Woah, chill out!"\n    (question? phrase) "Sure."\n    (silence? phrase) "Fine, be that way."\n    :else "Whatever."))	\N	f	5	3	2014-02-07 21:54:54	2014-02-07 21:54:54	348	\N
779	15	c6dafbd30aac4db2421c1e08	superseded	javascript	word-count	var Words = function (string) {\n  // match all letters and numbers between word boundaries.\n  var tokens = string.match(/\\b[a-z0-9]+\\b/gi);\n  var counts = {};\n\n  for (i=0; i<tokens.length; i++) {\n    normalizedToken = tokens[i].toLowerCase();\n\n    if (counts[normalizedToken] === undefined) counts[normalizedToken] = 0;\n\n    counts[normalizedToken] += 1;\n  }\n\n  this.count = counts;\n};\n\nmodule.exports = Words;	\N	f	3	1	2014-01-11 21:14:29	2014-01-11 21:14:29	349	\N
786	15	afda8b6748c6a7fd9ef2dfdd	superseded	javascript	beer-song	module.exports = (function() {\n  function BottleCollection(number) {\n    this.number = number;\n    this.status = "" + this.number + " bottles of beer";\n    this.action = "Take one down and pass it around";\n  };\n\n  var bottles = {\n    "-1": new BottleCollection(99),\n    "0": {\n      "action": "Go to the store and buy some more",\n      "status": "no more bottles of beer"\n    },\n    "1": {\n      "action": "Take it down and pass it around",\n      "status": "1 bottle of beer"\n    },\n  };\n\n  function verseForNumber(number) {\n    var indexed = bottles[number.toString()];\n    if(typeof indexed != 'undefined') {\n      return indexed;\n    } else {\n      return new BottleCollection(number);\n    }\n  };\n\n  function toTitleCase(str) {\n    return str.replace(/^\\w/, function(txt){\n      return txt.charAt(0).toUpperCase();\n    });\n  }\n\n  return {\n    verse: function(number) {\n      var current = verseForNumber(number),\n          next = verseForNumber(number - 1),\n          string;\n      string = toTitleCase(current.status) + " on the wall, "\n      string += current.status + ".\\n"\n      string += current.action + ", "\n      string += next.status + " on the wall.\\n"\n      return string;\n    },\n    sing: function(start, finish) {\n      var verses = [];\n      finish || (finish = 0);\n      for(var i = start; i >= finish; i--) {\n        verses.push(this.verse(i));\n      };\n\n      return verses.join("\\n");\n    }\n  };\n})();	\N	f	0	1	2013-12-13 03:52:08	2013-12-13 03:52:08	352	\N
787	15	c33fcc3e28325f82d99b6ac4	done	javascript	beer-song	module.exports = (function() {\n  function bottleCollection(number) {\n    return {\n      "status": "" + number + " bottles of beer",\n      "action": "Take one down and pass it around"\n    };\n  };\n\n  var bottles = {\n    "-1": bottleCollection(99),\n    "0": {\n      "action": "Go to the store and buy some more",\n      "status": "no more bottles of beer"\n    },\n    "1": {\n      "action": "Take it down and pass it around",\n      "status": "1 bottle of beer"\n    },\n  };\n\n  function verseForNumber(number) {\n    var indexed = bottles[number.toString()];\n    return indexed || bottleCollection(number);\n  };\n\n  function toTitleCase(str) {\n    return str.replace(/^\\w/, function(txt) {\n      return txt.charAt(0).toUpperCase();\n    });\n  };\n\n  return {\n    verse: function(number) {\n      var current = verseForNumber(number),\n          next = verseForNumber(number - 1),\n          string;\n      string = toTitleCase(current.status) + " on the wall, "\n      string += current.status + ".\\n"\n      string += current.action + ", "\n      string += next.status + " on the wall.\\n"\n      return string;\n    },\n    sing: function(start, finish) {\n      var verses = [];\n      finish || (finish = 0);\n      for(var i = start; i >= finish; i--) {\n        verses.push(this.verse(i));\n      };\n\n      return verses.join("\\n");\n    }\n  };\n})();	\N	f	3	2	2014-02-03 08:13:41	2014-02-03 08:13:41	352	\N
801	16	b0e1151b5a2a42ccc71bf29e	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nimport Data.List\n\n-- time: 1.14s user 0.00s system 99% cpu 1.149 total\n\n-- wheel optimisation reduces the search space for primes\nwheel = 2:4:2:4:6:2:6:4:2:4:6:6:2:6:4:2:6:4:6:8:4:2:4:2:\n        4:8:6:4:6:2:4:6:2:6:6:4:2:4:6:2:6:4:2:4:2:10:2:10:wheel\n\n-- lazily evaluated list of primes\nprimes = 2 : 3 : 5 : 7 : filter isPrime (scanl (+) 11 wheel)\n  where\n    isPrime n = and [ rem n p > 0 | p <- primesFBy n]\n    primesFBy n = takeWhile (<(n`div`(2*3*5*7))) primes\n\n\nprimeFactors :: Int -> [Int]\nprimeFactors n = go n $ takeWhile (<=n) primes\n  where\n    go 1 _  = []\n    go n [] = []\n    go n pl@(p:ps) | rem n p == 0 = p : go (n`div`p) pl\n                   | p > n        = []\n                   | otherwise    = go n ps	\N	f	3	1	2013-12-09 06:11:57	2013-12-09 06:11:57	356	\N
805	16	f6ac3c083d341610c5a46bfc	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")      # "mon"\n\n    define_method("#{prefix}teenth") do  # def monteenth\n      teenth(weekday)                    #   teenth("monday")\n    end                                  # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        nth(weekday, i)                          #   nth("monday", i)\n      end                                        # end\n    end\n\n    define_method("last_#{weekday}") do  # def last_monday\n      last(weekday)                      #   last("monday")\n    end                                  # end\n  end\n\n  private\n\n  def teenth(weekday)\n    days_of_month.find { |date| weekday?(date, weekday) && teen?(date) }\n  end\n\n  def nth(weekday, i)\n    days_of_month.select { |date| weekday?(date, weekday) }.slice(i)\n  end\n\n  def last(weekday)\n    days_of_month.reverse.find { |date| weekday?(date, weekday) }\n  end\n\n  def days_of_month\n    (first_day_of_month..last_day_of_month).to_a\n  end\n\n  def first_day_of_month\n    Date.new(@year, @month, 1)\n  end\n\n  def last_day_of_month\n    (first_day_of_month >> 1) - 1\n  end\n\n  def weekday?(date, weekday)\n    date.public_send("#{weekday}?")\n  end\n\n  def teen?(date)\n    (13..19).include?(date.day)\n  end\nend	\N	f	1	1	2013-12-03 23:34:20	2013-12-03 23:34:20	359	\N
1033	30	752c18065a1fc56210f3f1f4	done	clojure	robot-name	(def letters (map char (range (int \\A) (int \\Z))))\n\n(defn- random-digit [] (rand-int 10))\n(defn- random-letter [] (rand-nth letters))\n\n(defn- new-robot-name []\n  (apply str (concat (repeatedly 2 random-letter) (repeatedly 3 random-digit))))\n\n(new-robot-name)\n\n(defn robot [] (atom (new-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] (reset! robot (new-robot-name)))	\N	f	4	3	2014-03-17 05:32:26	2014-03-17 05:32:26	462	\N
807	16	86840385f184cbdc661717d7	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      find_teen weekdays(weekday)                #   teens weekdays("monday")\n    end                                          # end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n  end\n\n  private\n\n  def find_teen(dates)\n    dates.find { |date| date.day.between?(13, 19) }\n  end\n\n  def weekdays(weekday)\n    days_of_month.select(&:"#{weekday}?")\n  end\n\n  def days_of_month\n    Date.new(@year, @month, 1)..Date.new(@year, @month, -1)\n  end\nend	\N	f	0	6	2014-01-14 05:07:16	2014-01-14 05:07:16	359	\N
809	16	0fbb47655dfbdc4b23782ea7	done	ruby	meetup	class Meetup\n  WEEKDAYS = %w[monday tuesday wednesday thursday friday saturday sunday]\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      find_teen weekdays(weekday)                #   find_teen weekdays("monday")\n    end                                          # end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n  end\n\n  private\n\n  def find_teen(dates)\n    dates.find { |date| date.day.between?(13, 19) }\n  end\n\n  def weekdays(weekday)\n    days_of_month.select(&:"#{weekday}?")\n  end\n\n  def days_of_month\n    Date.new(@year, @month, 1)..Date.new(@year, @month, -1)\n  end\nend	\N	f	4	7	2014-01-24 06:44:28	2014-01-24 06:44:28	359	\N
811	16	b5feff48c3631a80aff657ee	superseded	ruby	meetup	class Meetup\n  WEEKDAYS = Date::DAYNAMES.map(&:downcase)\n  ORDINALS = %w[first second third fourth]\n\n  def initialize(month_number, year)\n    @month = Month.new(month_number, year)\n  end\n\n  WEEKDAYS.each do |weekday|\n    prefix = weekday.sub("day", "")              # "mon"\n\n    define_method("#{prefix}teenth") do          # def monteenth\n      weekdays(weekday).teenth                   #   weekdays("monday").teenth\n    end                                          # end\n\n    ORDINALS.each_with_index do |ordinal, i|\n      define_method("#{ordinal}_#{weekday}") do  # def first_monday\n        weekdays(weekday)[i]                     #   weekdays("monday")[0]\n      end                                        # end\n    end\n\n    define_method("last_#{weekday}") do          # def last_monday\n      weekdays(weekday).last                     #   weekdays("monday").last\n    end                                          # end\n  end\n\n  private\n\n  def weekdays(weekday)\n    WeekdaysOfMonth.new(weekday, @month)\n  end\nend\n\n\nclass WeekdaysOfMonth\n  def initialize(weekday, month)\n    @weekday = weekday\n    @month = month\n  end\n\n  def teenth\n    days.find { |date| (13..19).include?(date.day) }\n  end\n\n  def last\n    days.last\n  end\n\n  def [](index)\n    days[index]\n  end\n\n  private\n\n  def days\n    @month.days.select(&:"#{@weekday}?")\n  end\nend\n\n\nclass Month\n  def initialize(number, year)\n    @number = number\n    @year = year\n  end\n\n  def days\n    first_day..last_day\n  end\n\n  private\n\n  def first_day\n    Date.new(@year, @number, 1)\n  end\n\n  def last_day\n    # Advance one month, then back one day.\n    (first_day >> 1) - 1\n  end\nend	\N	f	2	3	2014-03-04 20:21:48	2014-03-04 20:21:48	359	\N
816	16	0d4960bbd77d7d20d95d4f94	done	haskell	meetup	module Meetup\n( Weekday(..)\n, Schedule(..)\n, meetupDay\n) where\n\nimport           Data.Time.Calendar             (Day, addDays, fromGregorian,\n                                                 gregorianMonthLength)\nimport           Data.Time.Calendar.OrdinalDate (sundayStartWeek)\n\ndata Schedule =  First |\n                Second |\n                 Third |\n                Fourth |\n                  Last |\n                Teenth deriving (Enum)\n\ndata Weekday =    Sunday |\n                  Monday |\n                 Tuesday |\n               Wednesday |\n                Thursday |\n                  Friday |\n                Saturday deriving (Enum)\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w year month = case s of\n                             Teenth -> calculateDate 13 0\n                             Last   -> calculateDate (gregorianMonthLength year month - 6) 0\n                             _      -> calculateDate 1 (fromEnum s * 7)\n    where\n    calculateDate index offset = addDays (fromIntegral (diff + offset)) start\n        where\n        start = fromGregorian year month index\n        (_,day) = sundayStartWeek start\n        diff = (7 - (day - fromEnum w)) `mod` 7	\N	f	3	2	2013-11-29 08:02:15	2013-11-29 08:02:15	363	\N
828	16	17917d079b07000c5cd212ce	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlphaNum, isSpace, toLower)\nimport Data.List (sort)\nimport           Data.Map (Map)\nimport qualified Data.Map as M \n\nwordCount :: String -> Map String Int\nwordCount = countMap . words . map toLower . filter (\\c -> isAlphaNum c || isSpace c)\n\ncountMap :: Ord a => [a] -> Map a Int\ncountMap = M.fromAscListWith (+) . map (\\x -> (x, 1)) . sort	\N	f	2	1	2014-01-07 00:43:23	2014-01-07 00:43:23	368	\N
831	16	f0aa4780f1f368de900d65fc	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Text.Printf (printf)\n\nverse :: Integer -> String\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse n = printf "%d bottles of beer on the wall, %d bottles of beer.\\nTake one down and pass it around, %d bottles of beer on the wall.\\n" n n (pred n)\n\nsing :: Integer -> Integer -> String\nsing start end = concat $ map ((++ "\\n") . verse) [start,(pred start)..end]	\N	f	4	1	2014-01-04 07:46:08	2014-01-04 07:46:08	370	\N
842	17	0b65bda291f47104b41ab670	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n\t\t\tresult[word] += 1\n\t\tend\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	0	8	2014-01-24 08:05:05	2014-01-24 08:05:05	372	\N
845	17	4a85b7c74ff118fb852a3fe8	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> to_words\n      |> summarize\n\n  end\n\n  defp to_words(sentence) do\n    List.flatten Regex.scan(%r{\\w+}, sentence)\n  end\n\n  defp summarize(words) do\n    Enum.reduce words, HashDict.new, &(add_count/2)\n    #Enum.reduce words, HashDict.new, fn(word, counts) -> \n    #  add_count(word, counts) \n    #end\n  end\n\n  defp add_count(word, counts) do\n    #HashDict.update counts, word, 1, &(&1 + 1)\n    HashDict.update counts, word, 1, fn (count)->(count + 1) end\n  end\nend	\N	f	3	1	2013-11-10 07:05:16	2013-11-10 07:05:16	375	word_count.exs
854	17	f644dc9d88998aea50666c51	superseded	ruby	anagram	class Anagram\n  class Subject\n    attr :payload\n\n    def initialize(word)\n      @payload = cipher(word)\n    end\n\n    def match?(other)\n      payload.size.eql?(other.size) && payload.eql?(cipher(other))\n    end\n\n    private\n\n    def cipher(word)\n      word.downcase.chars.sort\n    end\n  end\n\n  attr :subject\n\n  def initialize(word)\n    @subject = Subject.new(word)\n  end\n\n  def match(words)\n    words.find_all { |word| subject.match?(word) }\n  end\nend	\N	f	3	2	2014-03-09 09:47:54	2014-03-09 09:47:54	377	\N
859	17	1dab10beec7f164c827d853f	done	javascript	wordy	'use strict';\n\nfunction WordProblem(question) {\n  this.question = question;\n  this.args = question.match(/-?\\d+/g);\n  this.operations = {\n    plus: function(a, b) {return a + b;},\n    minus: function(a, b) {return a - b;},\n    multiplied: function(a, b) {return a * b;},\n    divided: function(a, b) {return a / b;}\n  };\n};\n\nWordProblem.prototype.answer = function() {\n  if (!this.args || this.args.length < 2) throw new ArgumentError;\n\n  this.question.match(/[a-z]+/g).filter(function(op) {\n    return !!~Object.keys(this.operations).indexOf(op);\n  }, this).forEach(function(op, i) {\n    this.result = this.operations[op](this.result || +this.args[i], +this.args[i+1]);\n  }, this);\n\n  return this.result;\n};\n\nfunction ArgumentError() {};\n\nmodule.exports = {\n  WordProblem: WordProblem,\n  ArgumentError: ArgumentError\n};	\N	f	2	1	2013-12-06 10:39:51	2013-12-06 10:39:51	380	\N
869	22	483ac6937c4e88bf0f48c296	done	javascript	nucleotide-count	(function() {\n  'use strict';\n\n  var DNA = function(sequence) {\n    this.sequence         = sequence.split('');\n    this.nucleotideCounts = this.countSequence();\n  }\n\n  DNA.prototype.countSequence = function() {\n    var counts = { A : 0, T : 0, C : 0, G : 0 };\n\n    for (var i = this.sequence.length - 1; i >= 0; i--) {\n      ++counts[this.sequence[i]];\n    }\n\n    return counts;\n  }\n\n  DNA.prototype.count = function(nucleotide) {\n    if ( validNucleotide( nucleotide ) ) {\n      return this.nucleotideCounts[nucleotide] || 0;\n    } else {\n      throw 'Invalid Nucleotide';\n    }\n  }\n\n  var validNucleotide = function(nucleotide) {\n    return 'ATCGU'.indexOf(nucleotide) !== -1;\n  }\n\n  module.exports = DNA;\n})();	\N	f	0	1	2013-09-14 09:17:48	2013-09-14 09:17:48	387	\N
874	22	1851bbe98e15627ed169ac1a	done	javascript	bob	var Bob = function () {\n  var isUpper, isQuestion, isBlank;\n\n  isUpper = function (str) {\n    var chars, length, chr, upper_count;\n    length = str.length;\n    upper_count = 0;\n\n    while (length--) {\n      chr = str[length];\n      if (chr.charCodeAt(0) === chr.toUpperCase().charCodeAt(0)) {\n        if (chr.charCodeAt(0) >= 65 && chr.charCodeAt(0) <= 90) {\n          upper_count += 1;\n        }\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (upper_count > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isQuestion = function (str) {\n    var length, last_char;\n    length = str.length;\n    last_char = str[length - 1];\n    if (last_char === '?') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isBlank = function (str) {\n    var blank, length;\n    length = str.length;\n    while (length--) {\n      if (str[length] == " ") {\n        continue;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  this.hey = function (text) {\n    if (isUpper(text)) {\n      return "Woah, chill out!";\n    } else if (isQuestion(text)) {\n      return "Sure.";\n    } else if (isBlank(text)) {\n      return "Fine. Be that way!";\n    } else {\n      return "Whatever.";\n    }\n  };\n};\n\nmodule.exports = Bob;	\N	f	4	1	2013-10-17 21:28:27	2013-10-17 21:28:27	391	\N
881	22	ab60d72f665900be366f0415	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\n-- here I used classic aproach to BST tree instead of \n--    BST (Maybe BST a) a (Maybe BST a)\n-- beacuse it's simpler to work with leaf/node approach.\ndata BST a \n  = L -- leaf\n  | N (BST a) !a (BST a) \n  deriving (Eq,Show)\n\nbstLeft :: BST a -> Maybe (BST a)\nbstLeft L = Nothing\nbstLeft (N l _ _) = Just l\n\nbstRight :: BST a -> Maybe (BST a)\nbstRight L = Nothing\nbstRight (N _ _ r) = Just r\n\nbstValue :: BST a -> a\nbstValue L = error "I don't like this API!"\nbstValue (N _ x _) = x\n\nsingleton :: a -> BST a\nsingleton x = N L x L\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x L = singleton x\ninsert x (N l y r)\n  | x > y     = N l y (insert x r)\n  | otherwise = N (insert x l) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList = foldl (flip insert) L\n\ntoList :: BST a -> [a]\ntoList (L) = []\ntoList (N l y r) = toList l ++ y:toList r	\N	f	2	1	2013-08-19 02:05:49	2013-08-19 02:05:49	396	BST.hs
884	22	99e815b1d3da282b28d550ee	done	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\nimport Control.Applicative\nimport Data.Monoid\nimport Data.Maybe\nimport Data.Foldable (Foldable, foldMap, toList)\n\n-- Non-empty BST is a fun!\n--\n-- Strictness is added to force thunk to WHNF, we don't need\n-- full strictess here, so following code should work:\n--\n-- *BST> bstValue (BST (Just $ error "foo") 5 Nothing)\n-- 5\n--\ndata BST a = BST \n    { bstLeft  :: !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r)\n  | x > y = BST l y (fmap (insert x) r <|> (Just (singleton x)))\n  | otherwise = BST (fmap (insert x) l <|> (Just (singleton x))) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (singleton x) xs\n\ninstance Foldable BST where\n  foldMap f (BST l x r) = ff l <> f x <> ff r\n    where ff = foldMap (foldMap f)\n\n{-\ntoList :: BST a -> [a]\ntoList (BST l y r) = fromJust $ -- seems like not simplified well\n  fmap toList l <> Just [y] <> fmap toList r\n-}	\N	f	0	4	2013-09-27 16:50:19	2013-09-27 16:50:19	396	BST.hs
976	29	e17aad73589b262bc0575fe5	superseded	clojure	phone-number	(ns phone)\r\n\r\n(defn number [data-entry]\r\n  (let [numbers-only (apply str (filter #(Character/isDigit %) data-entry))\r\n        digits (count numbers-only)]\r\n    (cond \r\n      (< digits 10) "0000000000"\r\n      (= digits 11) \r\n        (if (not= (first numbers-only) \\1)\r\n          "0000000000"\r\n          (subs numbers-only 1))\r\n      (> digits 11) "0000000000"\r\n      :else numbers-only)))\r\n\r\n(defn area-code [clean-number]\r\n  (subs clean-number 0 3))\r\n\r\n(defn exchange [clean-number]\r\n  (subs clean-number 3 6))\r\n\r\n(defn subscriber [clean-number]\r\n  (subs clean-number 6 10))\r\n\r\n(defn pretty-print [data-entry]\r\n  (let [clean-number (number data-entry)]\r\n    (str "(" (area-code clean-number) ") " \r\n         (exchange clean-number) "-" \r\n         (subscriber clean-number))))\r\n\r	\N	f	1	1	2013-08-24 22:13:42	2013-08-24 22:13:42	438	\N
891	22	aa3c089232d3a10055c5b536	superseded	javascript	beer-song	"use strict";\n\nfunction Beer() {\n};\n\nBeer.prototype.verse = function(verseNum) {\n  return capitalize(this.bottlesOfBeer(verseNum)).concat(" on the wall, ",\n    this.bottlesOfBeer(verseNum), ".\\n",\n    this.takeOneDown(verseNum),\n    this.bottlesOfBeer(verseNum-1), " on the wall.\\n");\n};\n\nBeer.prototype.bottlesOfBeer = function(verseNum) {\n  switch(verseNum) {\n    case -1: return "99 bottles of beer";\n    case  0: return "no more bottles of beer";\n    case  1: return "1 bottle of beer";\n    default: return verseNum.toString() + " bottles of beer";\n  };\n};\n\nBeer.prototype.takeOneDown = function(verseNum) {\n  switch (verseNum) {\n    case  0: return "Go to the store and buy some more, ";\n    case  1: return "Take it down and pass it around, ";\n    default: return "Take one down and pass it around, ";\n  };\n};\n\nBeer.prototype.sing = function(firstVerse, lastVerse) {\n  lastVerse = typeof lastVerse !== 'undefined' ? lastVerse : 0\n  var song = this.verse(firstVerse);\n\n  for (var i=firstVerse-1; i >= lastVerse; i--) {\n    song += "\\n" + this.verse(i);\n  };\n\n  return song;\n};\n\nvar capitalize = function(phrase) {\n  return phrase.charAt(0).toUpperCase() + phrase.slice(1);\n};\n\nmodule.exports = new Beer;	\N	f	3	2	2013-08-18 13:13:15	2013-08-18 13:13:15	399	\N
892	22	68851ce48fa11a6d4d58b76d	done	javascript	beer-song	"use strict";\n\nfunction Beer() {\n};\n\nBeer.prototype.verse = function(verseNum) {\n  return capitalize(this.bottlesOfBeer(verseNum)).concat(" on the wall, ",\n    this.bottlesOfBeer(verseNum), ".\\n",\n    this.takeOneDown(verseNum),\n    this.bottlesOfBeer(verseNum-1), " on the wall.\\n");\n};\n\nBeer.prototype.bottlesOfBeer = function(verseNum) {\n  switch(verseNum) {\n    case -1: return "99 bottles of beer";\n    case  0: return "no more bottles of beer";\n    case  1: return "1 bottle of beer";\n    default: return verseNum.toString() + " bottles of beer";\n  };\n};\n\nBeer.prototype.takeOneDown = function(verseNum) {\n  switch (verseNum) {\n    case  0: return "Go to the store and buy some more, ";\n    case  1: return "Take it down and pass it around, ";\n    default: return "Take one down and pass it around, ";\n  };\n};\n\nBeer.prototype.sing = function(firstVerse, lastVerse) {\n  lastVerse = typeof lastVerse !== 'undefined' ? lastVerse : 0\n\n  // Swap if values were passed in the wrong order.\n  if (firstVerse < lastVerse)\n    firstVerse = [lastVerse, lastVerse = firstVerse][0];\n\n  var song = this.verse(firstVerse);\n\n  for (var i=firstVerse-1; i >= lastVerse; i--) {\n    song += "\\n" + this.verse(i);\n  };\n\n  return song;\n};\n\nvar capitalize = function(phrase) {\n  return phrase.charAt(0).toUpperCase() + phrase.slice(1);\n};\n\nmodule.exports = new Beer;	\N	f	3	3	2014-01-08 00:22:32	2014-01-08 00:22:32	399	\N
899	27	e0437bf9013be9019c4f05dd	pending	clojure	meetup	(ns meetup\n  (:require [clojure.string :refer [upper-case] :as s]))\n\n(defn- gen-builder [from to]\n  (fn [month year]\n    (->>\n      (range from to)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n;; Day gen-builders\n(def teenths (gen-builder 13 20))\n(def firsts (gen-builder 1 8))\n(def seconds (gen-builder 8 15))\n(def thirds (gen-builder 15 22))\n(def fourths (gen-builder 22 29))\n(defn- lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn- dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn- as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn- find-day [day generator]\n  (fn [month year]\n    (->>\n      (generator month year)\n      (dayofweek day)\n      as-numbers)))\n\n(def monteenth (find-day java.util.Calendar/MONDAY teenths))\n(def tuesteenth (find-day java.util.Calendar/TUESDAY teenths))\n(def wednesteenth (find-day java.util.Calendar/WEDNESDAY teenths))\n(def thursteenth (find-day java.util.Calendar/THURSDAY teenths))\n(def friteenth (find-day java.util.Calendar/FRIDAY teenths))\n(def saturteenth (find-day java.util.Calendar/SATURDAY teenths))\n(def sunteenth (find-day java.util.Calendar/SUNDAY teenths))\n\n(defmacro build-finder [generator-type day-of-week]\n   `(def ~(symbol (str (name generator-type) "-" (name day-of-week)))\n         (find-day ~(symbol (name 'java.util.Calendar) (s/upper-case (name day-of-week)))\n                   ~(symbol (str (name generator-type) "s")))))\n\n(build-finder :first :monday)\n(build-finder :first :tuesday)\n(build-finder :first :wednesday)\n(build-finder :first :thursday)\n(build-finder :first :friday)\n(build-finder :first :saturday)\n(build-finder :first :sunday)\n(build-finder :second :monday)\n(build-finder :second :tuesday)\n(build-finder :second :wednesday)\n(build-finder :second :thursday)\n(build-finder :second :friday)\n(build-finder :second :saturday)\n(build-finder :second :sunday)\n(build-finder :third :monday)\n(build-finder :third :tuesday)\n(build-finder :third :wednesday)\n(build-finder :third :thursday)\n(build-finder :third :friday)\n(build-finder :third :saturday)\n(build-finder :third :sunday)\n(build-finder :fourth :monday)\n(build-finder :fourth :tuesday)\n(build-finder :fourth :wednesday)\n(build-finder :fourth :thursday)\n(build-finder :fourth :friday)\n(build-finder :fourth :saturday)\n(build-finder :fourth :sunday)\n(build-finder :last :monday)\n(build-finder :last :tuesday)\n(build-finder :last :wednesday)\n(build-finder :last :thursday)\n(build-finder :last :friday)\n(build-finder :last :saturday)\n(build-finder :last :sunday)	\N	f	1	3	2013-12-24 00:16:27	2013-12-24 00:16:27	403	meetup.clj
907	27	afee012721bac16f822d20b7	done	elixir	phone-number	defmodule Phone do\n  @doc """\n  Remove formatting from a phone number.\n\n  Returns "0000000000" if phone number is not valid\n  (10 digits or "1" followed by 10 digits)\n\n  ## Examples\n\n  iex> Phone.number("123-456-7890")\n  "1234567890"\n\n  iex> Phone.number("+1 (303) 555-1212")\n  "3035551212"\n\n  iex> Phone.number("867.5309")\n  "0000000000"\n  """\n  @spec number(String.t) :: String.t\n  def number(raw) do\n    [head|tail] = Regex.scan(%r/\\d/, raw)\n    formatted = Enum.join([head|tail])\n    cond do\n      String.length(formatted) == 11 && to_string(head) == "1" -> Enum.join(tail)\n      String.length(formatted) == 10 -> Enum.join([head|tail])\n      true -> "0000000000"\n    end\n  end\n\n  @doc """\n  Extract the area code from a phone number\n\n  Returns the first three digits from a phone number,\n  ignoring long distance indicator\n\n  ## Examples\n\n  iex> Phone.area_code("123-456-7890")\n  "123"\n\n  iex> Phone.area_code("+1 (303) 555-1212")\n  "303"\n\n  iex> Phone.area_code("867.5309")\n  "000"\n  """\n  @spec area_code(String.t) :: String.t\n  def area_code(raw) do\n    String.slice(number(raw), 0..2)\n  end\n\n  @doc """\n  Pretty print a phone number\n\n  Wraps the area code in parentheses and separates\n  exchange and subscriber number with a dash.\n\n  ## Examples\n\n  iex> Phone.pretty("123-456-7890")\n  "(123) 456-7890"\n\n  iex> Phone.pretty("+1 (303) 555-1212")\n  "(303) 555-1212"\n\n  iex> Phone.pretty("867.5309")\n  "(000) 000-0000"\n  """\n  @spec pretty(String.t) :: String.t\n  def pretty(raw) do\n    "(" <> area_code(raw) <> ") " <> String.slice(number(raw), 3..5) <> "-" <> String.slice(number(raw), 6..9) \n  end\nend	\N	f	0	1	2013-08-15 17:32:10	2013-08-15 17:32:10	406	\N
913	27	0df807090f1c8dc35f4703b9	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase), do: phrase |> normalize |> frequency\n\n  defp normalize(phrase), do: phrase |> String.downcase |> scan(%r/[a-z0-9]+/)\n\n  defp frequency(words) do\n    Enum.reduce words, HashDict.new, increment_score(&1, &2)\n  end\n\n  defp increment_score(word, scores) do\n    Dict.update(scores, word, 1, &1 + 1)\n  end\n\n  # Invert Regex.scan as if it were implemented as String.scan\n  defp scan(string, regex), do: Regex.scan(regex, string)\n\nend	\N	f	1	6	2013-09-08 13:52:39	2013-09-08 13:52:39	410	\N
916	27	cf309f9573b5c71b4d227d9f	superseded	elixir	word-count	defmodule Words do\n\n  def count(phrase) do\n    phrase |> String.split |> normalize |> frequency\n  end\n\n  defp normalize(input) when is_list(input) do\n    input\n      |> Enum.map(normalize &1)\n      |> Enum.reject(empty &1)\n  end\n  defp normalize(input) when is_binary(input) do\n    Enum.join(\n      Regex.split(%r/[^a-z0-9]/, String.downcase(input))\n    )\n  end\n\n  defp frequency(elems) when is_list(elems) do\n    HashDict.new(\n      Enum.map(Enum.uniq(elems), frequency(&1, elems))\n    )\n  end\n  defp frequency(elem, elems) do\n    {elem, Enum.count(elems, fn(canidate) -> canidate == elem end)}\n  end\n\n  defp empty(string) when is_binary(string) do\n    String.length(string) == 0\n  end\n\nend	\N	f	1	1	2013-11-06 19:59:52	2013-11-06 19:59:52	410	\N
929	28	a5e2d010469b49e0d452bdd5	superseded	ruby	bob	class Bob\n  RESPONSE_TO = {\n    question: "Sure.",\n    yell: "Woah, chill out!",\n    blank: "Fine. Be that way.",\n    default: "Whatever."\n  }.freeze\n\n  def hey(str)\n    RESPONSE_TO[key_for(str)]\n  end\n\n  private\n\n  def key_for(str)\n    return :blank    if empty?(str)\n    return :yell     if yelling?(str)\n    return :question if question_in?(str)\n    :default\n  end\n\n  def question_in?(str)\n    str[-1] == "?"\n  end\n\n  def yelling?(str)\n    str.to_s.upcase == str.to_s\n  end\n\n  def empty?(str)\n    str.nil? || str == ""\n  end\nend	\N	f	3	1	2013-08-19 11:18:23	2013-08-19 11:18:23	415	\N
934	28	f0654ba6b5938a942c4d9757	done	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n  case 1:\n    return verseOne();\n  case 0:\n    return verseZero();\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  var last = stop || 0;\n  var song = "";\n  for (var i = start; i > last; i--){\n    song += Beer.verse(i) + "\\n";\n  }\n  song += Beer.verse(last);\n  return song;\n};\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n};\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	1	5	2013-10-03 06:27:24	2013-10-03 06:27:24	416	\N
937	28	a6b9ad60f84f95d4de971d7b	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n    break;\n  case 1:\n    return verseOne();\n    break;\n  case 0:\n    return verseZero();\n    break;\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  verse = "";\n  i = start;\n  while (i >= stop) {\n    verse += Beer.verse(i);\n    if (i > stop) {\n      verse += "\\n";\n    };\n    i--;\n  }\n  return verse;\n}\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n  return verse;\n}\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	3	3	2013-12-19 19:51:17	2013-12-19 19:51:17	416	\N
948	28	4b29f146ebee2589f51d8a48	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor input\n  | isSilence input  = "Fine. Be that way!" \n  | isShouting input = "Woah, chill out!"\n  | isQuestion input = "Sure." \n  | otherwise        = "Whatever."\n\nisText :: String -> Bool\nisText = any isAlpha\n\nisSilence :: String -> Bool\nisSilence = all isSpace \n\nisQuestion :: String -> Bool\nisQuestion text = '?' == last text\n\nisShouting :: String -> Bool\nisShouting text = isText text && text == map toUpper text	\N	f	0	1	2013-10-09 05:17:59	2013-10-09 05:17:59	422	\N
963	29	1c58fb6e1a1289d5124a8b58	superseded	ruby	bob	module ResponseSystem\n\n  def self.included(target)\n    target.extend DSL\n  end\n\n  module DSL\n\n    def respond_to(message_type, with: :response, when_message: :identifier)\n      responses_to[message_type] = with\n      identifiers[message_type]  = when_message\n    end\n\n    def default_response(response)\n      @responses_to.default = response\n    end\n\n    def responses_to\n      @responses_to ||= {}\n    end\n\n    def identifiers\n      @identifiers ||= {}\n    end\n\n  end\n\nprivate\n\n  def identify_message(message)\n    self.class.identifiers.each do |message_type, identifier|\n      break message_type if identifier.call(message)\n    end\n  end\n\n  def respond_to(message_type)\n    self.class.responses_to[message_type]\n  end\n\nend\n\nclass Bob\n\n  include ResponseSystem\n\n  respond_to :silence,\n             with: 'Fine. Be that way.',\n             when_message: -> (message) {\n               message.nil? || message.empty?\n             }\n\n  respond_to :shouting,\n             with: 'Woah, chill out!',\n             when_message: -> (message) {\n               message == message.upcase\n             }\n\n  respond_to :question,\n             with: 'Sure.',\n             when_message: -> (message) {\n               message[-1] == '?'\n             }\n\n  default_response 'Whatever.'\n\n  def hey(message)\n    message_type = identify_message(message)\n    respond_to(message_type)\n  end\n\nend	\N	f	3	1	2013-10-01 21:32:12	2013-10-01 21:32:12	431	\N
964	29	fe78a3591ced48ca8679afa2	done	ruby	bob	module ResponseSystem\n\n  def self.included(target)\n    target.extend DSL\n  end\n\n  module DSL\n\n    def respond_to(*message_types, with: :response)\n      message_types.each do |message_type|\n        responses_to[message_type] = with\n      end\n    end\n\n    def identify_message_as(message_type, &identifier_block)\n      identifiers[message_type] = identifier_block\n    end\n\n    def default_response(response)\n      responses_to.default = response\n    end\n\n    def responses_to\n      @responses_to ||= {}\n    end\n\n    def identifiers\n      @identifiers ||= {}\n    end\n\n  end\n\nprivate\n\n  def identify_message(message)\n    self.class.identifiers.each do |message_type, identifier|\n      break message_type if identifier.call(message)\n    end\n  end\n\n  def respond_to(message_type)\n    self.class.responses_to[message_type]\n  end\n\nend\n\nclass Bob\n\n  include ResponseSystem\n\n  respond_to :silence, :nothing,\n             with: 'Fine. Be that way.'\n\n  respond_to :shouting,\n             with: 'Woah, chill out!'\n\n  respond_to :question,\n             with: 'Sure.'\n\n  default_response 'Whatever.'\n\n  identify_message_as :silence do |message|\n    message.respond_to?(:empty?) && message.empty?\n  end\n\n  identify_message_as :nothing do |message|\n    message.nil?\n  end\n\n  identify_message_as :shouting do |message|\n    message == message.upcase\n  end\n\n  identify_message_as :question do |message|\n    message[-1] == '?'\n  end\n\n  def hey(message)\n    message_type = identify_message(message)\n    respond_to(message_type)\n  end\n\nend	\N	f	3	2	2013-10-05 04:06:23	2013-10-05 04:06:23	431	\N
968	29	8e4129db097486d650a4fef7	done	ruby	raindrops	class Raindrops\n  def convert(number)\n  \tconversion = ""\n  \tdrops = [3,5,7]\n  \tprime_factors = primes_for(number)\n  \tprime_factors.sort!.uniq!\n  \tprime_factors.each do |prime|\n      if prime == 3\n      \tconversion = conversion + "Pling"\n      \n      elsif prime == 5\n      \tconversion = conversion + "Plang"\n     \n      elsif prime == 7\n      \tconversion = conversion + "Plong"\n      \n    \n    end\n    \n  \tend\n    drop_exists = false\n    drops.each do |drop|\n      if prime_factors.include? drop\n        drop_exists = true\n      end\n    end\n    unless drop_exists\n      conversion = number.to_s\n    end\n  \treturn conversion\n  end\n\n  def primes_for(number)\n\t\tprime_factors = []\n\t\tnum = 2\n\t\ttemp = number\n\t\twhile num <= number\n\t\t\tif number % num == 0\n\t\t\t\tprime_factors.push num\n\t\t\t\tnumber = number/num\n\t\t\telse\n\t\t\t\tnum = num + 1\n\t\t\tend\n\n\t\tend\n\t\treturn prime_factors.pop temp\n\tend\nend	\N	f	0	1	2013-08-20 20:00:41	2013-08-20 20:00:41	435	\N
1091	41	ccbb6bfb816a0867dd6e2914	done	elixir	bob	defmodule Teenager do\n  def hey(sentence) do\n    cond do\n      silent?(sentence) -> "Fine. Be that way!"\n      question?(sentence) -> "Sure."\n      yell?(sentence) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\n\n  defp question?(sentence), do: String.last(sentence) == "?"\n\n  defp yell?(sentence), do: String.upcase(sentence) == sentence\n\n  defp silent?(nil), do: true\n\n  defp silent?(sentence), do: String.strip(sentence) == ""\nend	\N	f	4	2	2013-10-29 22:04:56	2013-10-29 22:04:56	485	\N
979	29	77cba06465a9491a18c7f0ec	superseded	clojure	phone-number	(ns phone)\r\n\r\n(def bad-number "0000000000")\r\n\r\n(defn- extract-digits [data-entry]\r\n  (apply str (filter #(Character/isDigit %) data-entry)))\r\n\r\n(defn- process-number [digits-only]\r\n  (let [digit-count (count digits-only)]\r\n    (cond \r\n      (= digit-count 10) digits-only\r\n      (and (= digit-count 11) (= (first digits-only) \\1))\r\n        (subs digits-only 1)\r\n      :else bad-number)))\r\n\r\n(defn number [data-entry]\r\n  "Returns ten digits representing a valid US number \r\n  or ten zeroes indicating an invalid one."\r\n  (-> data-entry\r\n    extract-digits\r\n    process-number))\r\n\r\n(defn area-code [clean-number]\r\n  "Returns the three-digit area code for the number passed in."\r\n  (subs clean-number 0 3))\r\n\r\n(defn exchange [clean-number]\r\n  "Returns the three-digit exchange code for the number passed in."\r\n  (subs clean-number 3 6))\r\n\r\n(defn subscriber [clean-number]\r\n  "Returns the four-digit subscriber number for the number passed in."\r\n  (subs clean-number 6 10))\r\n\r\n(defn pretty-print [data-entry]\r\n  "Sanitizes input and returns a phone number in the standard US format." \r\n  (let [clean-number (number data-entry)]\r\n    (str "(" (area-code clean-number) ") " \r\n         (exchange clean-number) "-" \r\n         (subscriber clean-number))))\r\n\r	\N	f	3	4	2013-11-04 14:48:55	2013-11-04 14:48:55	438	\N
988	29	1bdcba4e4582be8b22384287	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List.Split\r\nimport qualified Data.Map as M\r\n\r\nisDelimiter :: Char -> Bool\r\nisDelimiter c = isSpace c || not (isAlphaNum c)\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy isDelimiter . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	3	2	2013-07-29 17:53:19	2013-07-29 17:53:19	443	WordCount.hs
989	29	dd52d3da475348ae101ad522	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport qualified Data.Text as T\r\nimport qualified Data.Map as M\r\n\r\nisDelimiter :: Char -> Bool\r\nisDelimiter c = isSpace c || not (isAlphaNum c)\r\n\r\nwordifyText :: T.Text -> [T.Text]\r\nwordifyText = filter (not . T.null) . T.split isDelimiter . T.toLower\r\n\r\nwordify :: String -> [String]\r\nwordify = map T.unpack . wordifyText . T.pack\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	3	1	2013-09-13 13:16:08	2013-09-13 13:16:08	443	WordCount.hs
991	29	3283ca71f6c139f27fe3d67c	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List.Split\r\nimport qualified Data.Map as M\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy (not . isAlphaNum) . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	3	3	2013-11-01 14:46:34	2013-11-01 14:46:34	443	WordCount.hs
992	29	973afdc54e579c7ec91a7c40	done	haskell	roman-numerals	module Roman (\r\n)  where\r\n\r\n\r	\N	f	3	1	2013-07-28 03:35:42	2013-07-28 03:35:42	444	Roman.hs
993	29	7a5700e951f0cb91e6679ecd	done	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\nsub hey {\n\tmy ($msg) = @_;\n\treturn 'Fine. Be that way!' if $msg =~ /^\\s*$/;\n\treturn 'Woah, chill out!' if $msg =~ /^\\P{Lowercase}+\\p{Uppercase}\\P{Lowercase}+$/;\n\treturn 'Sure.' if $msg =~ /\\?$/;\n\treturn 'Whatever.';\n}\n\n1;	\N	f	3	1	2013-11-05 17:08:06	2013-11-05 17:08:06	445	\N
994	29	ddd2c4b3cb7306c2384a3656	pending	javascript	robot-name	module.exports = Robot;\n\nfunction Robot() {\n  this.name = generate_name();\n\n  this.reset = function() {\n    this.name = generate_name();\n  }\n\n  function generate_name() {\n    var name = "";\n    name += random_letters(2);\n    name += random_numbers(3);\n    return name;\n  }\n\n  function random_letters(n) {\n    var letters = "";\n    for (var i = 0; i != n; i += 1) {\n      letters += Math.floor( 26 * Math.random() + 10 ).toString(36);\n    }\n    return letters;\n  }\n\n  function random_numbers(n) {\n    return Math.random().toString().substr(2, n);\n  }\n}	\N	f	3	1	2014-01-06 19:23:37	2014-01-06 19:23:37	446	robot-name.js
995	29	0d92d6b091183ccfe78e3663	done	ruby	hamming	# hamming.rb\n# Hamming distance between nucleotide strands\n\nclass Hamming\n  def self.compute(s1, s2)\n    e1 = s1.chars()\n    e2 = s2.chars()\n    \n    distance = 0\n    loop do\n      distance+=1 if (e1.next != e2.next)\n    end\n    distance\n  end\nend	\N	f	1	1	2014-01-08 01:42:33	2014-01-08 01:42:33	447	\N
996	30	1ee2d753a8577d2847cb963f	done	haskell	word-count	module WordCount(wordCount) where\n\nimport Data.Map (Map, fromListWith)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount = summarize . theWords . map toLower\n\nisNotAlphaNum = not . isAlphaNum\n\ntheWords :: String -> [String]\ntheWords phrase = case dropWhile isNotAlphaNum phrase of\n                    "" -> []\n                    remainder -> word : theWords remainingWords\n                                 where (word, remainingWords) = break isNotAlphaNum remainder\n\nsummarize :: [String] -> Map String Int\nsummarize = fromListWith (+) . flip zip (repeat 1)	\N	f	1	3	2014-02-10 20:30:27	2014-02-10 20:30:27	448	\N
997	30	a2fef067f1ee9e3ce3d2c0c1	superseded	haskell	word-count	module WordCount(wordCount) where\n\nimport Data.Map (Map, empty, alter, fromListWith)\nimport Data.Char (toLower, isAlphaNum)\nimport Text.Regex.Posix (getAllTextMatches, (=~))\n\nwordCount :: String -> Map String Int\nwordCount phrase = summarize lowerWords\n  where lowerWords = theWords lowerPhrase\n                     where lowerPhrase = map toLower phrase\n\nisNotAlphaNum = not . isAlphaNum\n\ntheWords :: String -> [String]\ntheWords phrase = case dropWhile isNotAlphaNum phrase of\n                    "" -> []\n                    remainder -> word : theWords remainingWords\n                                 where (word, remainingWords) = break isNotAlphaNum remainder\n\nsummarize :: [String] -> Map String Int\nsummarize words = fromListWith (+) singleWords\n  where singleWords = map (\\ word -> (word, 1)) words	\N	f	1	2	2014-02-13 17:48:16	2014-02-13 17:48:16	448	\N
998	30	9530af71ddc5fcfa974366b1	superseded	haskell	word-count	module WordCount(wordCount) where\n\nimport Data.Map (Map, empty, alter)\nimport Data.Char (toLower)\nimport Text.Regex.Posix (getAllTextMatches, (=~))\n\nwordCount :: String -> Map String Int\nwordCount phrase = summarize lowerWords\n  where lowerWords = getAllTextMatches $ lowerPhrase  =~ "[[:alnum:]]+" :: [String]\n                     where lowerPhrase = map toLower phrase\n\nsummarize :: [String] -> Map String Int\nsummarize [] = empty\nsummarize (x:xs) = alter increment x summary\n  where summary = summarize xs\n        increment :: (Maybe Int) -> (Maybe Int)\n        increment Nothing = Just 1\n        increment (Just x) = Just $ x + 1	\N	f	5	1	2014-02-25 22:48:45	2014-02-25 22:48:45	448	\N
999	30	278f2f2846b39ea736848aa4	hibernating	ruby	word-count	class Phrase < String\n  def word_count\n    result = Hash.new 0\n    scan(/\\w+/) do |word|\n        result[word.downcase] += 1\n    end\n    result\n  end\nend	\N	f	4	1	2014-03-15 20:17:27	2014-03-15 20:17:27	449	\N
1000	30	4755303bee262c08e5da2645	superseded	ruby	bob	class Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_reader :response\n\n  def initialize(said)\n    @said = said\n    @type = ConversationType.new @said\n    @response = Response.say @type\n  end\n\nend\n\nclass ConversationType\n\n  def initialize(said)\n    @said = said\n  end\n\n  def to_sym\n    which.to_sym\n  end\n\n    private\n\n    def which\n      return 'whispering' if is_whispering?\n      return 'shouting' if is_shouting?\n      return 'question' if is_question?\n      'bored'\n    end\n\n    def is_whispering?\n      true if @said.nil? or @said.strip.empty?\n    end\n\n    def is_shouting?\n      true if @said.upcase == @said\n    end\n\n    def is_question?\n      true if @said[-1] == '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	5	2	2014-02-07 05:41:01	2014-02-07 05:41:01	450	\N
1001	30	98ed3c80a06e073456580241	superseded	ruby	bob	class Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_reader :response\n\n  def initialize(said)\n    @type = ConversationType.new said\n    @response = Response.say @type\n  end\n\nend\n\nclass ConversationType\n\n  def initialize(said)\n    @said = said\n  end\n\n  def to_sym\n    which.to_sym\n  end\n\n    private\n\n    def which\n      return 'whispering' if is_whispering?\n      return 'shouting' if is_shouting?\n      return 'question' if is_question?\n      'bored'\n    end\n\n    def is_whispering?\n      true if @said.nil? or @said.strip.empty?\n    end\n\n    def is_shouting?\n      true if @said.upcase == @said\n    end\n\n    def is_question?\n      true if @said[-1] == '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	8	3	2014-02-13 17:39:06	2014-02-13 17:39:06	450	\N
1002	30	80085e64a46a868cc495353c	superseded	ruby	bob	class Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_reader :response\n\n  def initialize(said)\n    @type = ConversationType.new said\n    @response = Response.say @type\n  end\n\nend\n\nclass ConversationType\n\n  def initialize(said)\n    @said = said\n  end\n\n  def to_sym\n    which\n  end\n\n    private\n\n    def which\n      return :whispering if is_whispering?\n      return :shouting if is_shouting?\n      return :question if is_question?\n      :bored\n    end\n\n    def is_whispering?\n      @said.to_s.strip.empty?\n    end\n\n    def is_shouting?\n      @said.upcase == @said\n    end\n\n    def is_question?\n      @said.end_with? '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	2	5	2014-02-18 16:35:18	2014-02-18 16:35:18	450	\N
1003	30	644ea3459686e99726b113c0	superseded	ruby	bob	require 'pry'\nclass Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_accessor :said, :response, :type\n\n  def initialize(said)\n    @said = said\n    @type = ConversationType.new @said\n    @response = Response.say(@type)\n  end\n\n  def response\n    "#{@response}"\n  end\n\nend\n\nclass ConversationType\n\n  attr_accessor :said\n\n  def initialize(said)\n    @said = said\n  end\n\n  def to_sym\n    which.to_sym\n  end\n\n    private\n\n    def which\n      return 'whispering' if is_whispering?\n      return 'shouting' if is_shouting?\n      return 'question' if is_question?\n      'bored'\n    end\n\n    def is_whispering?\n      true if @said.nil? or @said.strip.empty?\n    end\n\n    def is_shouting?\n      true if @said.upcase == @said\n    end\n\n    def is_question?\n      true if @said[-1] == '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	5	1	2014-02-21 12:45:53	2014-02-21 12:45:53	450	\N
1004	30	360af64c0dfd79b2567c8ed1	superseded	ruby	bob	class Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_reader :response\n\n  def initialize(said)\n    @type = ConversationType.new said\n    @response = Response.say @type\n  end\n\nend\n\nclass ConversationType\n\n  def initialize(said)\n    @said = said\n  end\n\n  def to_sym\n    which\n  end\n\n    private\n\n    def which\n      return :whispering if is_whispering?\n      return :shouting if is_shouting?\n      return :question if is_question?\n      :bored\n    end\n\n    def is_whispering?\n      true if @said.to_s.strip.empty?\n    end\n\n    def is_shouting?\n      true if @said.upcase == @said\n    end\n\n    def is_question?\n      true if @said[-1] == '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	6	4	2014-03-01 00:05:44	2014-03-01 00:05:44	450	\N
1005	30	e9944a7b0102621b66dde6ba	done	ruby	bob	class Bob\n\n  def hey(said)\n    Conversation.new(said).response\n  end\n\nend\n\nclass Conversation\n\n  attr_reader :response\n\n  def initialize(said)\n    @type = ConversationType.new said\n    @response = Response.say @type\n  end\n\nend\n\nclass ConversationType\n\n  def initialize(said)\n    @said = said.to_s\n  end\n\n  def to_sym\n    which\n  end\n\n    private\n\n    def which\n      return :whispering if is_whispering?\n      return :shouting if is_shouting?\n      return :question if is_question?\n      :bored\n    end\n\n    def is_whispering?\n      @said.strip.empty?\n    end\n\n    def is_shouting?\n      @said.upcase == @said\n    end\n\n    def is_question?\n      @said.end_with? '?'\n    end\n\nend\n\nclass Response\n\n  RESPONSE = {\n    bored: 'Whatever.',\n    shouting: 'Woah, chill out!',\n    question: 'Sure.',\n    whispering: 'Fine. Be that way!'\n  }\n\n  class << self\n\n    def say(type)\n      RESPONSE[type.to_sym]\n    end\n\n  end\n\nend	\N	f	12	6	2014-03-05 18:01:15	2014-03-05 18:01:15	450	\N
1006	30	1236331461cad43d35b163c0	superseded	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\n\nsub hey {\n\n    my $text = shift;\n    \n    # He says 'Fine. Be that way!' if you address him without actually saying anything.\n    $text =~ m!^ *$! and return 'Fine. Be that way!';\n    \n    # He answers 'Woah, chill out!' if you yell at him (ALL CAPS).\n    if( $text =~ m![a-zA-Z]! \n        and \n        uc($text) eq $text ) \n    {\n        return 'Woah, chill out!'\n    }\n    \n    # Bob answers 'Sure.' if you ask him a question.\n    $text =~ m!\\? *$! and return  'Sure.';\n    \n    # He answers 'Whatever.' to anything else.\n    return 'Whatever.';\n\n}\n\n1;	\N	f	4	3	2014-02-13 18:01:40	2014-02-13 18:01:40	451	\N
1007	30	f2fb8869d76aced6db87be4b	superseded	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\n\nsub hey {\n\n    my $text = shift;\n    \n    # He says 'Fine. Be that way!' if you address him without actually saying anything.\n    return 'Fine. Be that way!' if $text =~ m!^ *$!;\n        \n    if( $text =~ m![a-zA-Z]! ) {\n    \n        # He answers 'Woah, chill out!' if you yell at him (ALL CAPS).\n        return 'Woah, chill out!' if uc($text) eq $text;\n\n        # Bob answers 'Sure.' if you ask him a question.\n        return  'Sure.' if $text =~ m!\\? *$!;\n    \n    }\n    \n    # Bob answers 'Sure.' if you ask him a question.\n    return  'Sure.' if $text =~ m!\\? *$!;\n    \n    # He answers 'Whatever.' to anything else.\n    return 'Whatever.';\n\n}\n\n1;	\N	f	0	1	2014-02-21 05:52:41	2014-02-21 05:52:41	451	\N
1009	30	32b7bd6f1755e5b3ed522ea3	hibernating	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\n\nsub hey {\n\n    my $text = shift;\n    \n    # He says 'Fine. Be that way!' if you address him without actually saying anything.\n    $text =~ m!^\\s*$! and return 'Fine. Be that way!';\n    \n    # He answers 'Woah, chill out!' if you yell at him (ALL CAPS).\n    if( $text =~ m![a-zA-Z]! \n        and \n        uc($text) eq $text ) \n    {\n        return 'Woah, chill out!'\n    }\n    \n    # Bob answers 'Sure.' if you ask him a question.\n    $text =~ m!\\?\\s*$! and return  'Sure.';\n    \n    # He answers 'Whatever.' to anything else.\n    return 'Whatever.';\n\n}\n\n1;	\N	f	3	4	2014-03-13 21:56:30	2014-03-13 21:56:30	451	\N
1013	30	efc35e6d2b95caae7a03d867	superseded	javascript	grains	function Grains() {\n  'use strict';\n}\n\nGrains.prototype.square = function(n) {\n  return Math.pow(2, n-1);\n};\n\nGrains.prototype.total = function() {\n  var result = 0, i = 1;\n  for (; i < 65; i++) {\n    result += this.square(i);\n  }\n  return result;\n};\n\nmodule.exports = Grains;	\N	f	3	1	2014-03-12 11:20:09	2014-03-12 11:20:09	453	\N
1014	30	3a3f15da14a025032c57426a	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(def ^{:private true} strip-chars #"[^ a-z0-9]")\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (loop [words (-> sentence\n                   str/lower-case\n                   (str/replace strip-chars "")\n                   (str/split #" +"))\n         count {}]\n    (if (empty? words)\n      count\n      (recur (rest words)\n             (update-in count\n                        [(first words)]\n                        #(inc (or % 0)))))))	\N	f	4	1	2014-02-07 18:18:38	2014-02-07 18:18:38	454	\N
1015	30	a08f424df8e9892d03dc7f43	hibernating	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- split-words [s] (str/split s #"[^a-z0-9]+"))\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      split-words\n      frequencies))	\N	f	3	4	2014-02-21 10:41:01	2014-02-21 10:41:01	454	\N
1016	30	7a985351d28c530fe14c7165	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(def ^{:private true} strip-chars #"[^ a-z0-9]")\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      (str/replace strip-chars "")\n      (str/split #" +")\n      frequencies))	\N	f	1	2	2014-02-28 03:21:56	2014-02-28 03:21:56	454	\N
1017	30	ab3a26f0cb4221b6a47d4427	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- strip-chars [s] (str/replace s #"[^ a-z0-9]" ""))\n(defn- split-words [s] (str/split s #" +"))\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      strip-chars\n      split-words\n      frequencies))	\N	f	7	3	2014-03-01 22:16:17	2014-03-01 22:16:17	454	\N
1018	30	a0c6cf6577c32bc0b07d054d	superseded	ruby	anagram	class Anagram\n  attr_accessor :word, :dictionary\n\n  def initialize(word)\n    @word = word\n    @dictionary = Hash.new {|hash,key| hash[key] = []}\n  end\n\n  def match(candidates)\n    candidates.each do |candidate|\n      next if candidate.casecmp(word) == 0\n      dictionary[index(candidate)] << candidate\n    end\n    dictionary[index(word)]\n  end\n\n  def index(string)\n    string.downcase.chars.sort\n  end\nend	\N	f	7	1	2014-02-07 17:38:30	2014-02-07 17:38:30	455	\N
1019	30	265e9ca6f5e762b52e89c5eb	done	ruby	anagram	class Anagram\n  attr_accessor :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(candidates)\n    lower_word = word.downcase\n    candidates.each_with_object([]) do |candidate,results|\n      lower_candidate = candidate.downcase\n      if index(lower_candidate) == index(lower_word) && lower_candidate != lower_word\n        results << candidate\n      end\n    end\n  end\n\n  def index(string)\n    string.chars.sort\n  end\nend	\N	f	0	2	2014-02-08 07:59:10	2014-02-08 07:59:10	455	\N
1021	30	d357540e24a3d5f670638219	done	ruby	hamming	class Hamming\n  def self.compute(strand_a, strand_b)\n    (0...[strand_a.length, strand_b.length].min).count do |i|\n      strand_a[i] != strand_b[i]\n    end\n  end\nend	\N	f	0	1	2014-02-18 15:58:37	2014-02-18 15:58:37	457	\N
1022	30	7ea1edf360d745399bf37a2f	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> tokenize |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce(tokens, HashDict.new, &increment_count/2)\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp tokenize phrase do\n    (replace phrase, %r{[^A-Za-z0-9]+}, " ") |> split\n  end\n\nend	\N	f	0	1	2014-02-06 19:42:39	2014-02-06 19:42:39	458	\N
1023	30	561e68dc835af53071da7f44	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> tokenize |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce(tokens, HashDict.new, &increment_count/2)\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp tokenize phrase do\n    replace(phrase, %r{[^A-Za-z0-9]+}, " ") |> split\n  end\n\nend	\N	f	4	2	2014-02-10 01:05:48	2014-02-10 01:05:48	458	\N
1024	30	899aa05d4cfcc0cc967fee17	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> sanitize |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp sanitize phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	f	0	4	2014-02-15 07:32:47	2014-02-15 07:32:47	458	\N
1025	30	c4f5633be2a7e9518d269089	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> strip_punctuation |> downcase |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp strip_punctuation phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	f	6	3	2014-03-04 05:46:39	2014-03-04 05:46:39	458	\N
1026	30	0536925257b228bdc108daae	done	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> sanitize |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, (&1 + 1)\n  end\n\n  defp sanitize phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	f	0	5	2014-03-05 13:34:12	2014-03-05 13:34:12	458	\N
1034	30	bfd3bbc4a241c07255440d91	superseded	ruby	scrabble-score	class Scrabble\n\n\t@cadena\n\n\t\n\t$valores={\n\t\t\t"A"=>1, "E"=>1, "I"=>1, "O"=>1, "U"=>1, "L"=>1, "N"=>1, "R"=>1, "S"=>1, "T"=>1,\n\t\t\t"D"=>2, "G"=>2,\n\t\t\t"B"=>3, "C"=>3, "M"=>3, "P"=>3,\n\t\t\t"F"=>4, "H"=>4, "V"=>4, "W"=>4, "Y"=>4,\n\t\t\t"K"=>5,\n\t\t\t"J"=>8, "X"=>8,\n\t\t\t"Q"=>10,"Z"=>10\n\t\t}\n\t\n\tdef initialize(cadena)\n\t\t@cadena=cadena\n\tend\n\n\tdef score()\n\t\treturn getScore()\n\tend\n\n\tdef self.score(cadena)\n\t\treturn Scrabble.new(cadena).score\n\tend\n\n\tdef getScore()\n\n\t\tsuma=0\n\t\tlongitud=0\n\n\t\tif @cadena!=nil\n\t\t\tlongitud = @cadena.length\n\t\tend\n\n\t\tfor i in 0..longitud-1\n\t\t\tif $valores.has_key?(@cadena[i].upcase) \n\t\t\t\tsuma+=$valores[@cadena[i].upcase]\n\t\t\tend\n\n\t\tend\n\n\t\treturn suma\n\t\n\tend\nend	\N	f	0	1	2014-02-20 01:00:44	2014-02-20 01:00:44	463	scrabble.rb
1035	30	f84e2e030f5404ef890be282	pending	ruby	scrabble-score	#!/usr/bin/env ruby\n# encoding: utf-8\n# scrabble\nclass Scrabble\n  attr_reader :cadena\n  def initialize(cadena)\n    @cadena = cadena.to_s.downcase\n  end\n\n  def self.score(cadena)\n    new(cadena).score\n  end\n\n  def score\n    suma = 0\n    longitud = cadena.length\n    (0..longitud - 1).each do |i|\n      suma += valores.fetch(cadena[i]) { 0 }\n    end\n    suma\n  end\n  # De aqui obtendremos los valores de los caracteres\n  def valores\n    {\n     'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1,\n     'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1,\n     'd' => 2, 'g' => 2,\n     'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3,\n     'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4,\n     'k' => 5,\n     'j' => 8, 'x' => 8,\n     'q' => 10 , 'z' => 10\n    }\n  end\nend	\N	f	2	2	2014-02-21 11:56:19	2014-02-21 11:56:19	463	scrabble.rb
1036	30	eca787a6fa433ca729428371	superseded	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [source targets]\n    (let [digest (fn [text] (sort (lower-case text)))\n          source-digest (digest source)\n          anagram? (fn [target]\n                        (and\n                            (= source-digest (digest target))\n                            (not= source target)))]\n        (filter anagram? targets)))	\N	f	0	1	2014-02-21 06:12:15	2014-02-21 06:12:15	464	\N
1037	30	3bfa914543f55219c1b19955	done	clojure	anagram	(ns anagram\n    (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [source targets]\n    (let [digest (fn [text] (frequencies (lower-case text)))\n          source-digest (digest source)\n          anagram? (fn [target]\n                        (and\n                            (= source-digest (digest target))\n                            (not= source target)))]\n        (filter anagram? targets)))	\N	f	2	2	2014-03-04 19:22:38	2014-03-04 19:22:38	464	\N
1038	37	51c9a4a62123c484468bfe95	done	ruby	gigasecond	require 'date'\nrequire 'time'\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  # 1 Gs anniversary (assuming born at midnight)\n  # If born after midnight, it could be the day after this.\n  def date\n    (@birth_date.to_time + 1_000_000_000).to_date\n  end\n    \nend	\N	f	6	1	2014-02-16 00:58:23	2014-02-16 00:58:23	465	\N
1040	37	7660550f88cbe25514043642	superseded	ruby	bob	class Bob\n  Responses = {\n       silence: "Fine. Be that way!",\n       yelling: "Woah, chill out!",\n    a_question: "Sure.",\n        drivel: "Whatever."\n  }\n\n  def hey(something)\n    what_was_said = if something.nil? || something.empty?\n                      :silence\n                    elsif something.upcase == something\n                      :yelling\n                    elsif something.end_with? '?'\n                      :a_question\n                    else\n                      :drivel\n                    end\n\n    respond_to what_was_said\n  end\n\n  def respond_to(stimulus)\n    Responses.fetch(stimulus)\n  end\nend	\N	f	16	2	2014-03-02 22:54:35	2014-03-02 22:54:35	466	\N
1041	37	67dd8b18358deed1fe2a58a5	done	ruby	bob	class Bob\n  def hey(what_was_said)\n    respond_to what_was_said\n  end\n\n  def respond_to(stimulus)\n    responses = [\n      SilenceResponse.new(stimulus),\n      YellingResponse.new(stimulus),\n      QuestionResponse.new(stimulus),\n      DefaultResponse.new(stimulus)\n    ]\n    responses.detect(&:condition).response\n  end\nend\n\nclass DefaultResponse\n  attr_reader :comment\n\n  def initialize(comment)\n    @comment = comment\n  end\n\n  def condition\n    true\n  end\n\n  def response\n    "Whatever."\n  end\nend\n\nclass SilenceResponse < DefaultResponse\n  def condition\n    comment.nil? || comment.empty?\n  end\n\n  def response\n    "Fine. Be that way!"\n  end\nend\n\nclass YellingResponse < DefaultResponse\n  def condition\n    comment.upcase == comment\n  end\n\n  def response\n    "Woah, chill out!"\n  end\nend\n\nclass QuestionResponse < DefaultResponse\n  def condition\n    comment.end_with? '?'\n  end\n\n  def response\n    "Sure."\n  end\nend	\N	f	0	3	2014-03-14 04:33:14	2014-03-14 04:33:14	466	\N
1042	37	5952628e53f2ee0174590bfd	superseded	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\\A 1? \\(?(\\d{3})\\)? [\\s.-]? (\\d{3}) [-.]? (\\d{4}) \\Z/x\n  NUMBER_FOR_FAILED_MATCH = "0" * 10\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[0..2]\n  end\n\n  def to_s\n    "(%s) %s-%s" % [area_code, number[3..5], number[6..10]]\n  end\n\n  private\n\n  def format_number(raw_number)\n    if (match_data = raw_number.match(PHONE_REGEX))\n      match_data.captures.join\n    else\n      NUMBER_FOR_FAILED_MATCH\n    end\n  end\nend	\N	f	5	3	2014-02-15 08:07:10	2014-02-15 08:07:10	467	\N
1043	37	4dada8f895d37bbb421c3448	superseded	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\n    \\A                # start of string\n    1?                # optional leading 1\n    \\(?(\\d{3})\\)?     # first 3 digits with optional parenthesis\n    [\\s.-]?           # optional separator\n    (\\d{3})           # middle 3 digits\n    [-.]?             # optional separator\n    (\\d{4})           # last 4 digits\n    \\Z                # end of string\n  /x\n\n  NUMBER_FOR_FAILED_MATCH = "0000000000"\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[0..2]\n  end\n\n  def to_s\n    "(%s) %s-%s" % [area_code, number[3..5], number[6..10]]\n  end\n\n  private\n\n  def format_number(raw_number)\n    if (match_data = raw_number.match(PHONE_REGEX))\n      match_data.captures.join\n    else\n      NUMBER_FOR_FAILED_MATCH\n    end\n  end\nend	\N	f	2	1	2014-02-17 22:31:42	2014-02-17 22:31:42	467	\N
1044	37	da0fc06a5e02412ad4c07fd2	superseded	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\\A 1? \\(?(\\d{3})\\)? [\\s.-]? (\\d{3}) [-.]? (\\d{4}) \\Z/x\n  NUMBER_FOR_FAILED_MATCH = "0" * 10\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[0..2]\n  end\n\n  def to_s\n    "(%s) %s-%s" % [area_code, number[3..5], number[6..10]]\n  end\n\n  private\n\n  def format_number(raw_number)\n    match = raw_number.match(PHONE_REGEX)\n    match ? match.captures.join : NUMBER_FOR_FAILED_MATCH\n  end\nend	\N	f	0	4	2014-02-28 07:48:45	2014-02-28 07:48:45	467	\N
1058	37	2b2621485fc6d0e9f51cf7ca	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Array ((!))\nimport Data.Char (toLower)\nimport Data.Map (Map, fromListWith)\nimport Text.Regex (mkRegex)\nimport Text.Regex.Posix (matchAllText)\n\nwordCount :: String -> Map String Int\nwordCount = countWords . splitStr . toLowerCase\n    where toLowerCase = map toLower\n          countWords = fromListWith (+)\n\nsplitStr :: String -> [(String, Int)]\nsplitStr s = map (\\m -> (fst (m!0), 1)) matches\n    where matches = matchAllText splitRe s\n          splitRe = mkRegex "[a-z0-9]+"	\N	f	1	1	2014-02-16 17:12:46	2014-02-16 17:12:46	472	\N
1045	37	66ab148b8bf2a3e841ff3222	superseded	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\\A 1? \\(?(\\d{3})\\)? [\\s.-]? (\\d{3}) [-.]? (\\d{4}) \\Z/x\n  NUMBER_FOR_FAILED_MATCH = "0" * 10\n\n  AREA_CODE   = (0..2)\n  FIRST_THREE = (3..5)\n  LAST_FOUR   = (6..10)\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[AREA_CODE]\n  end\n\n  def to_s\n    "(#{number[AREA_CODE]}) #{number[FIRST_THREE]}-#{number[LAST_FOUR]}"\n  end\n\n  private\n\n  def format_number(raw_number)\n    match = raw_number.match(PHONE_REGEX)\n    match ? match.captures.join : NUMBER_FOR_FAILED_MATCH\n  end\nend	\N	f	8	5	2014-03-09 07:58:34	2014-03-09 07:58:34	467	\N
1046	37	25c5ecac76e89177e0a48c40	superseded	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\n    \\A                # start of string\n    1?                # optional leading 1\n    \\(?(\\d{3})\\)?     # first 3 digits with optional parenthesis\n    [\\s.-]?           # optional separator\n    (\\d{3})           # middle 3 digits\n    [-.]?             # optional separator\n    (\\d{4})           # last 4 digits\n    \\Z                # end of string\n  /x\n\n  NUMBER_FOR_FAILED_MATCH = "0" * 10\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[0..2]\n  end\n\n  def to_s\n    "(%s) %s-%s" % [area_code, number[3..5], number[6..10]]\n  end\n\n  private\n\n  def format_number(raw_number)\n    if (match_data = raw_number.match(PHONE_REGEX))\n      match_data.captures.join\n    else\n      NUMBER_FOR_FAILED_MATCH\n    end\n  end\nend	\N	f	1	2	2014-03-10 02:09:49	2014-03-10 02:09:49	467	\N
1047	37	29d29f05ffe2e3f060979f47	done	ruby	phone-number	class PhoneNumber\n  PHONE_REGEX = /\\A 1? \\(?(\\d{3})\\)? [\\s.-]? (\\d{3}) [-.]? (\\d{4}) \\Z/x\n  NUMBER_FOR_FAILED_MATCH = "0" * 10\n\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    @number ||= format_number(@raw_number)\n  end\n\n  def area_code\n    @area_code ||= number[0..2]\n  end\n\n  def subscriber_number\n    @subscriber_number ||= "#{number[3..5]}-#{number[6..10]}"\n  end\n\n  def to_s\n    "(#{area_code}) #{subscriber_number}"\n  end\n\n  private\n\n  def format_number(raw_number)\n    match = raw_number.match(PHONE_REGEX)\n    match ? match.captures.join : NUMBER_FOR_FAILED_MATCH\n  end\nend	\N	f	3	6	2014-03-13 17:58:44	2014-03-13 17:58:44	467	\N
1048	37	202cf510d11968d128fd73e5	superseded	elixir	sieve	defmodule Sieve do\n\n  @doc """\n  Generates a list of primes up to a given limit.\n  """\n  @spec primes_to(non_neg_integer) :: [non_neg_integer]\n  def primes_to(limit) do\n    do_primes(Enum.to_list(2..limit), []) |> Enum.reverse\n  end\n\n  defp do_primes([], primes), do: primes\n  defp do_primes([ candidate | rest ], primes) do\n    if is_prime?(candidate, primes) do\n      candidates = Enum.reject(rest, &(rem(&1, candidate) == 0))\n      do_primes(candidates, [ candidate | primes ])\n    else\n      do_primes(rest, primes)\n    end\n  end\n\n  @doc """\n  Checks if a given number is prime based on a given list of known primes.\n  """\n  @spec is_prime?(non_neg_integer, [non_neg_integer]) :: boolean\n  defp is_prime?(number, primes) do\n    Enum.all?(primes, &(number == &1 || rem(number, &1) != 0))\n  end\n\nend	\N	f	2	1	2014-03-02 23:09:02	2014-03-02 23:09:02	468	sieve.exs
1075	37	708162f1a7ea4c5920bf1568	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a = length . filter (uncurry (==)) . (zip a) where	\N	f	4	1	2014-02-18 11:38:53	2014-02-18 11:38:53	478	\N
1049	37	53ee99684261e9b89b5dd82d	done	elixir	sieve	defmodule Sieve do\n\n  @doc """\n  Generates a list of primes up to a given limit.\n  """\n  @spec primes_to(non_neg_integer) :: [non_neg_integer]\n  def primes_to(limit) do\n    Enum.to_list(2..limit) |> do_primes([]) |> Enum.reverse\n  end\n\n  defp do_primes([], primes), do: primes\n  defp do_primes([ candidate | rest ], primes) do\n    candidates = Enum.reject(rest, &(rem(&1, candidate) == 0))\n    do_primes(candidates, [ candidate | primes ])\n  end\n\nend	\N	f	3	2	2014-03-07 14:39:56	2014-03-07 14:39:56	468	sieve.exs
1050	37	8577e21f8d3c782137653e6b	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (sentence) {\n    var response;\n    if (isSilence(sentence)) {\n        response = "Fine. Be that way!";\n    } else if (isShouting(sentence)) {\n        response = "Woah, chill out!";\n    } else if (is_question(sentence)) {\n        response = "Sure.";\n    } else {\n        response = "Whatever.";\n    }\n    return response;\n};\n\nfunction isSilence(sentence) {\n    return sentence === "";\n}\n\nfunction is_question(sentence) {\n    return sentence.slice(-1) === "?";\n}\n\nfunction isShouting(sentence) {\n    return sentence.toUpperCase() === sentence;\n}\n\n\n\nmodule.exports = Bob;	\N	f	13	2	2014-03-11 11:45:44	2014-03-11 11:45:44	469	\N
1052	37	a499830e738c60e631db6ff7	done	javascript	bob	var Bob = function () {};\nmodule.exports = Bob;\n\nBob.prototype.hey = function (sentence) {\n    var response;\n    if (isSilence(sentence)) {\n        response = "Fine. Be that way!";\n    } else if (isLoud(sentence)) {\n        response = "Woah, chill out!";\n    } else if (isQuestion(sentence)) {\n        response = "Sure.";\n    } else {\n        response = "Whatever.";\n    }\n    return response;\n};\n\nfunction isSilence(sentence) {\n    return sentence === "";\n}\n\nfunction isQuestion(sentence) {\n    return sentence.slice(-1) === "?";\n}\n\nfunction isLoud(sentence) {\n    return sentence.toUpperCase() === sentence;\n}	\N	f	6	4	2014-03-17 21:19:00	2014-03-17 21:19:00	469	\N
1053	37	4cbe615e1f8d6969b7736121	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (sentence) {\n    var response;\n    if (isSilence(sentence)) {\n        response = "Fine. Be that way!";\n    } else if (isShouting(sentence)) {\n        response = "Woah, chill out!";\n    } else if (isQuestion(sentence)) {\n        response = "Sure.";\n    } else {\n        response = "Whatever.";\n    }\n    return response;\n};\n\nfunction isSilence(sentence) {\n    return sentence === "";\n}\n\nfunction isQuestion(sentence) {\n    return sentence.slice(-1) === "?";\n}\n\nfunction isShouting(sentence) {\n    return sentence.toUpperCase() === sentence;\n}\n\n\n\nmodule.exports = Bob;	\N	f	15	3	2014-03-19 23:01:01	2014-03-19 23:01:01	469	\N
1056	37	d7d70849010aae089edec74b	superseded	elixir	nucleotide-count	defmodule DNA do\n  @moduledoc "Count DNA nucleotides"\n\n  def count(dna, nucleotide) do\n    nucleotide_counts(dna) |> Dict.get(nucleotide, 0)\n  end\n\n  def nucleotide_counts(dna), do: build_counts(empty_counts, dna)\n\n  defp empty_counts, do: HashDict.new(nucleotides, {&1, 0})\n  defp nucleotides, do: [?A, ?T, ?C, ?G]\n\n  defp build_counts(counts, []), do: counts\n  defp build_counts(counts, [ nucleotide | dna ]) do\n    Dict.update!(counts, nucleotide, &1 + 1) |> build_counts(dna)\n  end\nend	\N	f	4	1	2014-02-21 22:48:36	2014-02-21 22:48:36	471	\N
1057	37	0b1c4fa6c280442aba93b899	done	elixir	nucleotide-count	defmodule DNA do\n  @moduledoc "Count DNA nucleotides"\n\n  @empty_nucleotide_counts HashDict.new('ATCG', &{&1, 0})\n\n  def count(dna, nucleotide) do\n    nucleotide_counts(dna) |> Dict.get(nucleotide, 0)\n  end\n\n  def nucleotide_counts(dna) do\n    build_counts(@empty_nucleotide_counts, dna)\n  end\n\n  defp build_counts(counts, []), do: counts\n  defp build_counts(counts, [ nucleotide | dna ]) do\n    Dict.update!(counts, nucleotide, &(&1 + 1)) |> build_counts(dna)\n  end\nend	\N	f	0	2	2014-02-26 23:25:40	2014-02-26 23:25:40	471	\N
1061	37	fb2baa58e239b4b4f2dc5fe4	superseded	javascript	word-count	function Words(original_phrase){\n  this.original_phrase = original_phrase;\n\n  this.removeNonAlnumCharacters = function(phrase){\n    return phrase.replace(/[^\\w\\s]/g, "");\n  }\n\n  this.phraseToWords = function(phrase){\n    return phrase.split(" ");\n  }\n\n  this.filterEmptyStrings = function(str){\n    return str.length > 0;\n  }\n\n  this.normalizeWord = function(word){\n    return word.toLowerCase();\n  }\n};\n\nWords.prototype = {\n  get count() {\n    var intermediate_phrase = this.removeNonAlnumCharacters(this.original_phrase),\n        words = this.phraseToWords(intermediate_phrase),\n        counts = {};\n\n    words.\n      filter(this.filterEmptyStrings).\n      map(this.normalizeWord).\n      map(function(word){\n        if(counts[word]){\n          counts[word] += 1;\n        } else {\n          counts[word] = 1;\n        }\n    });\n\n    return counts;\n  }\n}\n\nmodule.exports = Words;	\N	f	4	1	2014-02-14 06:46:49	2014-02-14 06:46:49	473	\N
1062	37	25f426ba6cd85a3f310459bb	done	javascript	word-count	function Words(original_phrase){\n  this.original_phrase = original_phrase;\n\n  this.phraseToWords = function(str){\n    return str.toLowerCase().match(/\\w+/g);\n  }\n\n  this.wordSummator = function(counts, word){\n    counts[word] = counts[word] || 0;\n    counts[word] += 1;\n    return counts;\n  }\n};\n\nWords.prototype = {\n  get count() {\n    var words = this.phraseToWords(this.original_phrase),\n        counts = {};\n\n    return words.reduce(this.wordSummator, counts);\n  }\n}\n\nmodule.exports = Words;	\N	f	0	5	2014-02-18 18:41:44	2014-02-18 18:41:44	473	\N
1063	37	c3b08de144f804b0924b32dd	superseded	javascript	word-count	function Words(original_phrase){\n  this.original_phrase = original_phrase;\n\n  this.phraseToWords = function(str){\n    return str.split(/[^\\w]+/).filter(this.filterEmptyStrings);\n  }\n\n  this.filterEmptyStrings = function(str){\n    return str.length > 0;\n  }\n\n  this.normalizeWord = function(word){\n    return word.toLowerCase();\n  }\n};\n\nWords.prototype = {\n  get count() {\n    var words = this.phraseToWords(this.original_phrase);\n        counts = {};\n\n    words.\n      map(this.normalizeWord).\n      map(function(word){\n        if(counts[word]){\n          counts[word] += 1;\n        } else {\n          counts[word] = 1;\n        }\n    });\n\n    return counts;\n  }\n}\n\nmodule.exports = Words;	\N	f	5	2	2014-02-21 02:34:56	2014-02-21 02:34:56	473	\N
1064	37	0f66affe6c0fc92c3d07b326	superseded	javascript	word-count	function Words(original_phrase){\n  this.original_phrase = original_phrase;\n\n  this.phraseToWords = function(str){\n    return str.toLowerCase().split(/[^\\w]+/).filter(this.filterEmptyStrings);\n  }\n\n  this.filterEmptyStrings = function(str){\n    return str.length > 0;\n  }\n};\n\nWords.prototype = {\n  get count() {\n    var words = this.phraseToWords(this.original_phrase);\n        counts = {};\n\n    words.map(function(word){\n      if(counts[word]){\n        counts[word] += 1;\n      } else {\n        counts[word] = 1;\n      }\n    });\n\n    return counts;\n  }\n}\n\nmodule.exports = Words;	\N	f	5	3	2014-02-22 01:03:22	2014-02-22 01:03:22	473	\N
1065	37	d79295b7a0dc9b002bdfe9c4	superseded	javascript	word-count	function Words(original_phrase){\n  this.original_phrase = original_phrase;\n\n  this.phraseToWords = function(str){\n    return str.toLowerCase().split(/[^\\w]+/).filter(this.filterEmptyStrings);\n  }\n\n  this.filterEmptyStrings = function(str){\n    return str.length > 0;\n  }\n\n  this.wordSummator = function(counts, word){\n    counts[word] = counts[word] || 0;\n    counts[word] += 1;\n    return counts;\n  }\n};\n\nWords.prototype = {\n  get count() {\n    var words = this.phraseToWords(this.original_phrase),\n        counts = {};\n\n    return words.reduce(this.wordSummator, counts);\n  }\n}\n\nmodule.exports = Words;	\N	f	8	4	2014-03-04 10:31:30	2014-03-04 10:31:30	473	\N
1066	37	1cf7fc44ce35e27c95cdf081	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar\n\ndays :: Integer\ndays = 1000000000 `quot` (3600 * 24)\n\nfromDay :: Day -> Day\nfromDay d = addDays days d	\N	f	4	1	2014-02-17 16:34:27	2014-02-17 16:34:27	474	\N
1067	37	6d6c808312d6d859a5adfbe7	done	ruby	nucleotide-count	class DNA\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError if !"ATCGU".include? nucleotide\n    @sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    "ATCG".split('').inject(Hash.new(0)) { |a, b| a[b] = count(b); a }\n  end\nend	\N	f	0	1	2014-02-14 09:09:15	2014-02-14 09:09:15	475	\N
1068	37	6d5dca5debe320db20c71bca	done	ruby	grade-school	require 'pry'\n\nclass School\n\n  def initialize\n    @@school_db = {}\n   #@@school_db.default = [] #This construction would not work for me for some reason, so I have the odd methods requiring '[]' later on \n  end\n\n  def db\n    @@school_db\n  end\n\n  def add(name, grade)\n    if not @@school_db[grade]\n     @@school_db[grade] = []\n    end\n    @@school_db[grade] << name \n  end\n\n  def grade(num)\n    if @@school_db.key?(num)\n      @@school_db.fetch(num)\n    else\n      []\n    end\n  end\n\n  def sort\n    sorted = {}\n    @@school_db.keys.sort.each do |grade|\n      sorted[grade] = @@school_db[grade].sort\n    end\n    return sorted\n  end\n\nend	\N	f	0	1	2014-02-21 00:52:12	2014-02-21 00:52:12	476	\N
1077	37	fe91225ef21d8780620a1f2e	hibernating	ruby	scrabble-score	class Scrabble\n  LETTER_VALUES = {\n    1 => ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'],\n    2 => ['D','G'],\n    3 => ['B','C','M','P'],\n    4 => ['F', 'H', 'V', 'W', 'Y'],\n    5 => ['K'],\n    8 => ['J', 'X'],\n    10 => ['Q', 'Z'],\n  }\n\n  class << self\n    def score(word)\n      self.new(word).score\n    end\n  end\n\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    return calculate_score if word\n    return 0\n  end\n\n  private\n\n  def calculate_score\n    word.chars.reduce(0) do |sum, letter|\n      LETTER_VALUES.each do |point, letters|\n        sum += point if letters.include?(letter.upcase)\n      end\n      sum\n    end\n  end\nend	\N	f	1	1	2014-02-15 16:49:01	2014-02-15 16:49:01	479	scrabble.rb
1092	41	0cd4111fd00f7c16b4caf4dd	superseded	elixir	bob	defmodule Teenager do\n  def hey(sentence) do\n    cond do\n      silent(sentence) -> "Fine. Be that way!"\n      question(sentence) -> "Sure."\n      yell(sentence) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\n\n  defp question(sentence), do: String.last(sentence) == "?"\n\n  defp yell(sentence), do: String.upcase(sentence) == sentence\n\n  defp silent(sentence), do: String.strip(sentence) == ""\nend	\N	f	5	1	2014-02-04 10:14:03	2014-02-04 10:14:03	485	\N
1106	41	a24e0c5639d258c5190efc28	superseded	ruby	bob	class Bob\n\n  def hey(phrase = "")\n    responder(phrase)\n  end\n\n  private\n    def responder(phrase)\n      if quiet?(phrase)\n        'Fine. Be that way.'\n      elsif yelling?(phrase)\n        'Woah, chill out!'\n      elsif question?(phrase)\n        'Sure.'  \n      else #statement\n        'Whatever.'\n      end\n    end\n\n    def quiet?(phrase)\n      phrase.to_s.empty? \n    end\n\n    def yelling?(phrase)\n      phrase == phrase.upcase\n    end\n\n    def question?(phrase)\n      phrase.end_with?("?")\n    end\n\nend	\N	f	0	9	2014-03-11 03:21:41	2014-03-11 03:21:41	489	\N
1119	41	3656c5d6803152720112d29d	superseded	javascript	word-count	module.exports = function(phrase) {\n    function tokenize(input) {\n        return input.toLowerCase().match(/\\w+/g);\n    }\n\n    function frequencies(collection) {\n        var occurrences = {};\n\n        collection.forEach(function(element) {\n            if (!occurrences.hasOwnProperty(element)) {\n                occurrences[element] = 0;\n            }\n            occurrences[element]++;\n        });\n\n        return occurrences;\n    }\n    \n    return {\n        count: frequencies(tokenize(phrase))\n    };\n};	\N	f	3	2	2013-12-20 00:23:21	2013-12-20 00:23:21	493	\N
1121	41	79035cf4912417b50a077b35	superseded	ruby	nucleotide-count	class DNA\n\n  attr_accessor :strand\n\n  def initialize(strand)\n    @strand = strand\n    strand.split("").each do |letter| \n    raise ArgumentError unless \n      accepted_nucleotides_for_dna.include?(letter)\n    end\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless \n      accepted_nucleotides_for_dna_and_rna.include?(nucleotide)\n      \n      strand.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    counts = {"A"=>count("A"), \n              "T"=>count("T"), \n              "C"=>count("C"), \n              "G"=>count("G")}\n    counts\n  end\n\n  def accepted_nucleotides_for_dna\n    %w(A T C G)\n  end\n\n  def accepted_nucleotides_for_dna_and_rna\n    %w(A T C G U)\n  end\n\nend	\N	f	0	3	2013-10-04 17:30:41	2013-10-04 17:30:41	494	\N
1129	42	ab1eb9a8b169e95c8617b9d1	pending	javascript	phone-number	(function() {\n    "use strict";\n\n    function PhoneNumber(input) {\n        this.input = clean_input(input);\n    }\n\n    PhoneNumber.prototype.number = function() {\n      return this.input;\n    };\n\n    PhoneNumber.prototype.areaCode = function() {\n      return this.input.substring(0,3);\n    };\n\n    PhoneNumber.prototype.prefix = function() {\n      return this.input.substring(3,6);\n    };\n\n    PhoneNumber.prototype.line_number = function() {\n      return this.input.substring(6,10);\n    };\n\n    PhoneNumber.prototype.toString = function() {\n      var formatedPhoneNumber = "(" + this.areaCode() + ") ";\n      formatedPhoneNumber += this.prefix() + "-" + this.line_number();\n      return formatedPhoneNumber;\n    };\n\n    function clean_input(input) {\n      var digits = "";\n      var inputIsValid = validate_input(input);\n      if (inputIsValid) {\n        for (var i = 0; i < input.length; i++) {\n          if (!isNaN(input[i]) && input[i] !== ' ') {\n            digits += input[i];\n          }\n        }\n        if (digits.length === 11 && parseInt(digits[0], 10) === 1) {\n          digits = digits.substring(1, digits.length);\n        }\n      } else {\n        digits = "0000000000";\n      }\n      return digits;\n    }\n\n    function validate_input(input) {\n      if (input.length < 10) {\n        return false;\n      }\n\n      if (input.length === 11 && parseInt(input[0], 10) !== 1) {\n        return false;\n      }\n\n      return true;\n    }\n\n    module.exports = PhoneNumber;\n}());	\N	f	0	1	2014-03-01 04:45:11	2014-03-01 04:45:11	498	phone-number.js
1137	42	636f102bd0227e101107c8bd	superseded	javascript	bob	var Bob = function() {\r\n\r\n  var whatever = {\r\n  stateSomething: 'Tom-ay-to, tom-aaaah-to.',\r\n  forceTalking: "Let's go make out behind the gym!",\r\n  usingAcronyms: "It's OK if you don't want to go to the DMV.",\r\n  onlyNumbers: '1, 2, 3',\r\n  calmUmlauts: "\\xdcML\\xe4\\xdcTS!",\r\n  statementWithQuestionMark: 'Ending with a ? means a question.',\r\n  };\r\n\r\n  var woah = {\r\n    shouting: 'WATCH OUT!',\r\n    forceQuestion: 'WHAT THE HELL WERE YOU THINKING?',\r\n    shoutNumbers: '1, 2, 3 GO!',\r\n    shoutingSpecialChars: 'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!',\r\n    shoutingUmlauts: "\\xdcML\\xc4\\xdcTS!",\r\n    shoutNoExlaimMark: 'I HATE YOU',\r\n  };\r\n\r\n  var sure = {\r\n    askingQuestion: 'Does this cryogenic chamber make me look fat?',\r\n    questionNumbers: '4?',\r\n    prattling: 'Wait! Hang on.  Are you going to be OK?',\r\n  };\r\n\r\n  var fine = {\r\n    silence: '',\r\n    longSilence: '   ',\r\n  };\r\n  \r\n  this.hey = function(statement) {\r\n    if (statement == whatever.stateSomething || statement == whatever.forceTalking || statement == whatever.usingAcronyms || statement == whatever.onlyNumbers || \r\n        statement == whatever.calmUmlauts || statement == whatever.statementWithQuestionMark) {\r\n     return 'Whatever.';\r\n    }\r\n    else if (statement == woah.shouting || statement == woah.forceQuestion || statement == woah.shoutNumbers || statement == woah.shoutingSpecialChars || \r\n             statement == woah.shoutingUmlauts || statement == woah.shoutNoExlaimMark) {\r\n     return 'Woah, chill out!';\r\n    }\r\n    else if (statement == sure.askingQuestion || statement == sure.questionNumbers || statement == sure.prattling){\r\n      return 'Sure.';\r\n    }\r\n    else if (statement == fine.silence || statement == fine.longSilence) {\r\n      return 'Fine. Be that way!';\r\n    }\r\n   };\r\n };\r\n\r\nmodule.exports = Bob;	\N	f	4	1	2013-11-06 01:20:29	2013-11-06 01:20:29	502	bob.js
1149	42	4a0fa54d6ef94ea9f1c34ef1	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  def on_mercury\n    format (seconds_to_earth_years / MERCURY_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_venus\n    format (seconds_to_earth_years / VENUS_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_earth\n    format (seconds_to_earth_years / EARTH_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_mars\n    format (seconds_to_earth_years / MARS_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_jupiter\n    format (seconds_to_earth_years / JUPITER_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_saturn\n    format (seconds_to_earth_years / SATURN_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_uranus\n    format (seconds_to_earth_years / URANUS_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  def on_neptune\n    format (seconds_to_earth_years / NEPTUNE_ORBITAL_PERIOD_IN_EARTH_YEARS)\n  end\n\n  private\n\n  MERCURY_ORBITAL_PERIOD_IN_EARTH_YEARS = 0.2408467\n  VENUS_ORBITAL_PERIOD_IN_EARTH_YEARS = 0.61519726\n  EARTH_ORBITAL_PERIOD_IN_EARTH_YEARS = 1\n  MARS_ORBITAL_PERIOD_IN_EARTH_YEARS = 1.8808158\n  JUPITER_ORBITAL_PERIOD_IN_EARTH_YEARS = 11.862615\n  SATURN_ORBITAL_PERIOD_IN_EARTH_YEARS = 29.447498\n  URANUS_ORBITAL_PERIOD_IN_EARTH_YEARS = 84.016846\n  NEPTUNE_ORBITAL_PERIOD_IN_EARTH_YEARS = 164.79132\n\n\n  ONE_EARTH_YEAR_IN_SECONDS = 31557600.0\n\n  def seconds_to_earth_years\n    seconds / ONE_EARTH_YEAR_IN_SECONDS\n  end\n\n  def format number\n    number.round(2)\n  end\nend	\N	f	3	1	2013-11-20 09:56:38	2013-11-20 09:56:38	507	\N
1167	43	6e00de471356a46da198eb4c	superseded	ruby	bob	class Bob\n  def hey(remark)\n    @remark = remark.to_s.strip\n\n    if silent?\n      "Fine. Be that way!"\n    elsif shouting?\n      "Woah, chill out!"\n    elsif telling?\n      "Whatever." \n    elsif asking?\n      "Sure."\n    end\n  end\n\n  private\n\n  def silent?\n    @remark == ''\n  end\n\n  def shouting?\n    @remark == @remark.upcase\n  end\n\n  def telling?\n    @remark.end_with?('.') || @remark.end_with?('!')\n  end\n\n  def asking?\n    @remark.end_with?('?')\n  end\n\nend	\N	f	2	4	2014-02-07 03:55:03	2014-02-07 03:55:03	519	\N
1181	43	d7a6121bef5aa20fe42e12a1	superseded	javascript	bob	String.prototype.sayingNothing = function() {\n    return (this.trim() === "");\n}\n\nString.prototype.yelling = function() {\n    return (this.toString() === this.toString().toUpperCase());\n}\n\nString.prototype.question = function() {\n    return (this.substr(-1) === "?");\n}\n\nvar Bob = function() {\n}\n\nBob.prototype.hey =  function(speech) {\n        if (speech.sayingNothing()) {\n            return 'Fine. Be that way!';\n        } else if (speech.yelling()) {\n            return 'Woah, chill out!';\n        } else if (speech.question()) {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        }\n    }\n\nmodule.exports = Bob;	\N	f	3	3	2014-02-03 07:55:18	2014-02-03 07:55:18	523	\N
1262	45	309a8566e02fe5d22d43a0f1	done	ruby	atbash-cipher	class Atbash\n\n  def self.encode(text)\n    self.new(text).encode\n  end\n\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def encode\n    chunks.map {|chunk| encode_chunk(chunk) }.join(' ')\n  end\n\nprivate\n\n  def chunks\n    chars.each_slice(CHUNK_SIZE)\n  end\n\n  def chars\n    text.gsub(/\\W+/, '').downcase.chars\n  end\n\n  def encode_chunk(chunk)\n    chunk.map {|char| CIPHER_KEY.fetch(char, char) }.join\n  end\n\n  LETTERS = ('a'..'z').to_a\n  CIPHER_KEY = Hash[LETTERS.zip(LETTERS.reverse)]\n  CHUNK_SIZE = 5\nend	\N	f	0	1	2013-10-19 13:30:13	2013-10-19 13:30:13	559	\N
1186	43	ed9189dcfe42cc856a42e316	hibernating	ruby	beer-song	module NumberHelpers\n  def quantified(quantity, noun)\n    singular = quantity == 1\n    "#{quantity} #{noun}#{'s' unless singular}"\n  end\nend\n\nclass Beer\n  include NumberHelpers\n\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      quantified_bottles = quantified(remaining, 'bottle')\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{quantified_bottles} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\n  \nend	\N	f	0	4	2014-02-15 19:55:58	2014-02-15 19:55:58	524	\N
1192	43	b2493f4a3039b112c6d80e39	done	ruby	leap	class Year < Struct.new(:year)\n\n  def leap?\n    if    divides_by?(400) then true\n    elsif divides_by?(100) then false\n    elsif divides_by?(4)   then true\n    else\n      false\n    end\n  end\n\n  private\n  def divides_by?(num)\n    year % num == 0\n  end\nend	\N	f	0	1	2014-03-05 06:27:18	2014-03-05 06:27:18	528	\N
1193	43	c689b6da799b19bc13f3cc88	superseded	clojure	anagram	(ns anagram (:use [clojure.string :only [lower-case]]))\n\n(defn- characters [word]\n  (sort (lower-case word)))\n\n(defn- same-characters-as? [word]\n  (let [characters-word (characters word)]\n    (fn [other]\n      (= characters-word (characters other)))))\n\n(defn- different-word-than? [word]\n  (fn [other]\n    (not= word other)))\n\n(defn- anagram-of? [word]\n  (let [same-characters? (same-characters-as? word)\n        different-word?  (different-word-than? word)]\n    (fn [candidate]\n      (and\n        (different-word? candidate)\n        (same-characters? candidate)))))\n\n(defn anagrams-for [word candidates]\n  (let [anagram? (anagram-of? word)]\n    (filter anagram? candidates)))	\N	f	2	4	2014-01-20 08:44:47	2014-01-20 08:44:47	529	\N
1199	44	af67567c06a8238cf0768077	done	clojure	phone-number	(ns phone)\n\n(def ^:private empty-number "0000000000")\n\n(def ^:private stringify (partial apply str))\n\n(defn- select-digits [raw]\n  (stringify (re-seq #"\\d" raw)))\n\n(defn- remove-leading-1 [raw]\n  (if (and (= 11 (count raw))\n           (= \\1 (first raw)))\n    (stringify (rest raw))\n    raw))\n\n(defn- verify-length [raw]\n  (if (= 10 (count raw))\n    raw\n    empty-number))\n\n(defn- label [raw]\n  (apply hash-map (interleave [:number :area-code :exchange :suffix]\n                              (re-find #"(\\d{3})(\\d{3})(\\d{4})" raw))))\n\n(defn- sanitize- [raw]\n  "pass a raw number througha  sanitization pipeline"\n  (-> raw\n      select-digits\n      remove-leading-1\n      verify-length\n      label))\n\n(def sanitize (memoize sanitize-))\n\n(defn number [raw]\n  ((sanitize raw) :number))\n\n(defn area-code [raw]\n  ((sanitize raw) :area-code))\n\n(defn- exchange [raw]\n  ((sanitize raw) :exchange))\n\n(defn- suffix [raw]\n  ((sanitize raw) :suffix))\n\n(defn pretty-print [raw]\n  (str "(" (area-code raw) ") " (exchange raw) "-" (suffix raw)))	\N	f	1	2	2013-09-25 22:44:02	2013-09-25 22:44:02	531	\N
1204	44	02e50cd71cfda2dbcc942649	hibernating	javascript	anagram	var Anagram = function(base) {\n\n  this.match = function(words) {\n    var anagrams = words.filter(function(word) {\n      return areAnagrams(word, base);\n    });\n\n    return anagrams;\n  }\n\n  var areAnagrams = function(a, b) {\n    var areEqual = a == b;\n    var haveSameChars = normalizedChars(a) == normalizedChars(b);\n\n    return !areEqual && haveSameChars;\n  }\n\n  var normalizedChars = function(string) {\n    return string\n      .toLowerCase()\n      .split("").sort().join();\n  }\n}\n\nmodule.exports = Anagram;	\N	f	1	1	2013-09-25 04:59:19	2013-09-25 04:59:19	533	\N
1218	44	88bbd258e4c494f5482ebff9	done	clojure	robot-name	(ns robot)\n\n(def characters\n  (map char (range 65 91)))\n\n(defn- rand-chars [n]\n  (letfn [(rand-char [] (nth characters (rand-int (count characters))))]\n    (repeatedly n rand-char)))\n\n(defn- rand-digits [n]\n  (letfn [(digit [] (rand-int 10))]\n    (repeatedly n digit)))\n\n(defn- generate-name []\n  (apply str (concat (rand-chars 2) (rand-digits 3))))\n\n(defn robot [] (ref (generate-name)))\n\n(defn robot-name [r] @r)\n\n(defn reset-name [r]\n  (dosync\n    (ref-set r (generate-name))))	\N	f	1	1	2013-09-06 11:36:09	2013-09-06 11:36:09	542	\N
1231	45	962475c2a2191e2414a5838a	done	ruby	word-count	class Phrase\n\n  attr_accessor :word_list\n\n  def initialize(raw_sentence)\n    @word_list = clean_invalid_characters(raw_sentence).split\n  end\n\n  def word_count\n    word_counter = {}\n    return word_counter unless word_list\n\n    word_list.each do |raw_word|\n      word = raw_word.downcase\n      word_counter[word] = (word_counter[word] || 0) + 1\n    end\n\n    word_counter\n  end\n\nprivate\n\n  def clean_invalid_characters(text)\n    return '' if text.nil?\n    text.gsub(/\\W/,' ')\n  end\nend	\N	f	0	5	2013-12-29 00:40:39	2013-12-29 00:40:39	547	\N
1235	45	3bd42991f1267bff55695db2	done	python	rna-transcription	# -*- coding: utf-8 -*-\ndef dna2rna(strand):\n    """ Translates a given DNA string to the transcribed RNA string \n    corresponding to it.\n\n    Both DNA and RNA strands are a sequence of nucleotides. The four \n    nucleotides found in DNA are adenine (**A**), cytosine (**C**), \n    guanine (**G**) and thymine (**T**). The four nucleotides found \n    in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) \n    and uracil (**U**).\n\n    Given a DNA strand, its transcribed RNA strand is formed by \n    replacing all occurrences of thymine with uracil.\n    """\n    return strand.replace("T", "U")\n\nclass DNA(object):\n    """ Exercism.io wrapper for `dna2rna`. \n\n    It's unpythonic in both design (uses a class when a mere function \n    is enough) and naming (ALL_UPPER is for symbolic constants) but\n    the tests won't path without it.\n    """\n    def __init__(self, strand):\n        self.strand = strand\n\n    def to_rna(self):\n        return dna2rna(self.strand)	\N	f	3	1	2013-12-04 17:31:24	2013-12-04 17:31:24	548	\N
1246	45	de5bd0b3140e58f5e8b4baa2	superseded	ruby	bob	class Bob\n  def hey(text)\n    if yelling? text\n      "Woah, chill out!"\n    elsif question? text\n      "Sure."\n    elsif text.strip.empty?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def yelling?(look_ahead)\n    look_ahead == look_ahead.upcase and look_ahead =~ /[A-Z]+/\n  end\n\n  def question?(text)\n    "?" == text[-1, 1]\n  end\nend	\N	f	1	1	2013-11-21 14:51:57	2013-11-21 14:51:57	552	\N
1248	45	ef388b666b8078043136fe91	superseded	ruby	bob	class Bob\n  def initialize\n    @interpreter = Interpreter.new\n  end\n\n  def hey(text)\n    if @interpreter.yelling? text\n      "Woah, chill out!"\n    elsif @interpreter.question? text\n      "Sure."\n    elsif @interpreter.nothing? text\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Interpreter\n  def yelling?(look_ahead)\n    look_ahead == look_ahead.upcase and look_ahead =~ /[A-Z]+/\n  end\n\n  def question?(text)\n    text.end_with?('?')\n  end\n\n  def nothing?(text)\n    text.strip.empty?\n  end\nend	\N	f	2	4	2014-01-05 17:30:32	2014-01-05 17:30:32	552	\N
1263	45	b9ad77e5e6554278065067d2	done	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n\n  def initialize a, b, c\n    @a, @b, @c = a, b, c\n  end\n\n  def kind\n    raise TriangleError unless valid?\n    case\n    when isosceles? then :isosceles\n    when equilateral? then :equilateral\n    else :scalene\n    end\n  end\n\n  private\n\n  attr_reader :a, :b, :c\n\n  def equilateral?\n    a == b && b == c\n  end\n\n  def isosceles?\n    (a == b || a == c || b == c)  && !equilateral?\n  end\n\n  def valid?\n    !zero_sized? && positive_sides? && triangle_equality?\n  end\n\n  def zero_sized?\n    a == 0 && b == 0 && c == 0\n  end\n\n  def positive_sides?\n    a > 0 && b > 0 && c > 0\n  end\n\n  def triangle_equality?\n    a + b > c && a + c > b && b + c > a\n  end\nend	\N	f	1	1	2013-10-20 10:06:31	2013-10-20 10:06:31	560	\N
1272	46	a7a211b41bbee80d4de04d8d	superseded	ruby	proverb	class Proverb\n  def initialize(*words)\n    @words = words\n    @qualifier = ""\n\n    if @words.last.kind_of? Hash\n      @qualifier = @words.last[:qualifier] + " "\n      @words = @words[0...-1]\n    end\n\n  end\n\n  def to_s\n    word_pairs.inject("") do |proverb, pair|\n      proverb += "For want of a " + pair.first + " the " + pair.last + " was lost.\\n"\n    end + "And all for the want of a #{@qualifier}#{@words.first}."\n  end\n\n  private\n\n  def word_pairs\n    @words.zip(@words.drop(1))[0...-1]\n  end\nend	\N	f	0	3	2014-02-28 20:00:37	2014-02-28 20:00:37	563	\N
1281	46	7ee97036831ac429eb238f30	superseded	javascript	point-mutations	(function() {\nvar transcriptionLookup = {\n  "C": "C",\n  "G": "G",\n  "A": "A",\n  "T": "U"\n};\n\nvar DNA = function(dna) {\n  this.nucleotides = dna.split("");\n  this.nucleotideCounts = countNucleotides(this.nucleotides);\n};\n\nDNA.prototype.hammingDistance = function(strand) {\n  var strandNucleotides = strand.split("");\n  var counter = 0;\n  for (var n in this.nucleotides) {\n    if(strandNucleotides[n] && strandNucleotides[n] !== this.nucleotides[n]) {\n      counter += 1;\n    }\n  }\n  return counter;\n};\n\nvar countNucleotides = function(nucleotides) {\n  var counts = {\n      'A': 0,\n      'T': 0,\n      'C': 0,\n      'G': 0,\n    };\n  for (var n in nucleotides) {\n    counts[nucleotides[n]] += 1;\n  }\n  return counts;\n};\n\n\nmodule.exports = DNA;\n\n})();	\N	f	3	2	2014-01-06 00:03:56	2014-01-06 00:03:56	568	dna.js
1285	46	afd8f086f68fa94961e5bcc8	superseded	javascript	point-mutations	(function() {\nvar DNA = function(dna) {\n  this.nucleotides = dna.split("");\n  this.counts = {\n    'A': 0,\n    'T': 0,\n    'C': 0,\n    'G': 0,\n  },\n  this.nucleotideCounts = this.count_up();\n};\n\nDNA.prototype.hammingDistance = function(strand) {\n  if (strand) {\n    this.strand_nucleotides = strand.split("");\n  }\n  var counter = 0;\n  for (n in this.nucleotides) {\n    if(this.strand_nucleotides[n] && this.strand_nucleotides[n] !== this.nucleotides[n]) {\n      counter += 1;\n    };\n  }\n  return counter;\n};\n\nDNA.prototype.count_up = function() {\n  for (n in this.nucleotides) {\n    this.counts[this.nucleotides[n]] += 1;\n    }\n  return this.counts;\n};\n\nvar transcription_lookup = {\n  "C": "C",\n  "G": "G",\n  "A": "A",\n  "T": "U"\n};\n\nmodule.exports = DNA;\n\n})();	\N	f	3	1	2014-01-27 11:59:21	2014-01-27 11:59:21	568	\N
1299	46	f85b87c160232921eb94cc21	hibernating	python	beer-song	class Beer:\n\n\n  def sing(self, top, lower=0):\n    verses = [ self.verse(x) for x in reversed(range(lower, top + 1))]\n    return "\\n".join(verses) + "\\n"\n    \n\n  def verse(self, count):\n    if count == 0: \n      return self.verse_0()\n    elif count == 1:\n      return self.verse_1()\n    elif count == 2:\n      return self.verse_2()\n    else:\n      return self.verse_x(count)\n\n  def verse_0(self):\n    return ( "No more bottles of beer on the wall, no more bottles of beer.\\n"\n             "Go to the store and buy some more, 99 bottles of beer on the wall.\\n")\n\n  def verse_1(self):\n    return ("1 bottle of beer on the wall, 1 bottle of beer.\\n"\n            "Take it down and pass it around, no more bottles of beer on the wall.\\n")\n\n  def verse_2(self):\n    return ( "2 bottles of beer on the wall, 2 bottles of beer.\\n"\n            "Take one down and pass it around, 1 bottle of beer on the wall.\\n")\n\n  def verse_x(self, count):\n    return ( str(count) +  " bottles of beer on the wall, " + str(count) + " bottles of beer.\\n"\n            "Take one down and pass it around, " + str(count - 1) +  " bottles of beer on the wall.\\n")	\N	f	4	1	2014-01-21 22:12:02	2014-01-21 22:12:02	575	\N
1313	47	a9f54a714d0de5f9e94e51c1	hibernating	javascript	word-count	var words = function(str) {\n\tvar counts = {}; \n\tvar arrStr = str.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=@\\-_`~()]/g,"").replace(/\\s{2,}/g," ").split(' ').join(' ').toLowerCase().split(' ');\n\tfor (var i=0; i < arrStr.length; i++) {\n\t\tif (counts[arrStr[i]] === undefined) {\n\t\t\tcounts[arrStr[i]] = 1;\n\t\t} else {\n\t\t\tcounts[arrStr[i]]++;\n\t\t}\n\t}\n\n\treturn counts;\n};\nmodule.exports = words;	\N	f	1	1	2014-01-17 03:35:39	2014-01-17 03:35:39	581	\N
1314	47	f95a990f15905ff94c3f676d	done	ruby	bob	class Bob\n  def hey(phrase)\n    if is_empty?(phrase)\n      'Fine. Be that way!'\n    elsif is_yelling?(phrase)\n      'Woah, chill out!'\n    elsif is_question?(phrase)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n    def is_empty?(phrase)\n      phrase.strip == ''\n    end\n\n    def is_yelling?(phrase)\n      phrase.upcase == phrase &&       # is upcase and\n      phrase.downcase != phrase.upcase # case matters\n    end\n\n    def is_question?(phrase)\n      phrase[-1] == '?'\n    end\nend	\N	f	0	1	2014-01-07 19:32:47	2014-01-07 19:32:47	582	bob.rb
1325	47	df2bdc8096755047fa5eecfc	superseded	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\n\nmodule DNA\n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\ncount :: Char -> String -> Int\ncount nucleotide\n  | validNucleotide nucleotide = length . filter (==nucleotide)\n  | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts sequence = Map.fromList $ map f "ACGT" where\n  f n = (n,count n sequence)\n\nvalidNucleotide = (`elem` "ACGTU")	\N	f	1	2	2014-01-18 02:05:52	2014-01-18 02:05:52	590	\N
1328	47	e6ed07ee6cc29db11bd70b09	superseded	javascript	scrabble-score	var scores = {\n  'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 'h': 4, 'i': 1,\n  'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 10, 'r': 1,\n  's': 1, 't': 1, 'u': 1, 'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10,\n};\n\nmodule.exports = sequence(ensureString, normalize,\n                          reduceUsing(sumScore), orValue(0));\n\nfunction ensureString(value) {\n  return '' + (value || '');\n}\n\nfunction normalize(string) {\n  return string.toLowerCase();\n}\n\nfunction reduceUsing(reduceFn) {\n  return function(iterable) {\n    return Array.prototype.reduce.call(iterable, reduceFn, 0);\n  }\n}\n\nfunction orValue(defaultValue) {\n  return function(value) {\n    return value || defaultValue;\n  }\n}\n\nfunction sumScore(total, letter) {\n  return total + scores[letter];\n}\n\nfunction sequence() {\n  var fns = arguments;\n  return function() {\n    var args = arguments,\n        i;\n    for (i = 0; i < fns.length; i++) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  }\n}	\N	f	1	2	2013-11-23 02:46:39	2013-11-23 02:46:39	591	scrabble-score.js
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 1606, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	7	1
3	2	1
4	1	2
5	1	3
6	1	4
7	7	4
8	2	5
9	7	6
10	7	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	1985-11-22 20:11:23	1985-11-22 20:11:23	t
2	1	14	1998-06-29 08:27:29	1998-06-29 08:27:29	t
3	1	17	2011-04-07 12:19:18	2011-04-07 12:19:18	t
4	1	22	1976-07-01 16:28:28	1976-07-01 16:28:28	t
5	1	10	2000-02-29 02:10:29	2000-02-29 02:10:29	t
6	1	8	1999-04-05 08:54:19	1999-04-05 08:54:19	t
7	1	6	2012-09-02 01:34:45	2012-09-02 01:34:45	t
8	1	29	2007-03-27 23:24:48	2007-03-27 23:24:48	t
9	1	30	1996-10-15 23:16:55	1996-10-15 23:16:55	t
10	1	35	1986-02-15 00:40:24	1986-02-15 00:40:24	t
11	1	15	1985-07-07 00:32:41	1985-07-07 00:32:41	f
12	1	16	2007-04-23 03:03:30	2007-04-23 03:03:30	f
13	1	28	2000-06-10 11:24:33	2000-06-10 11:24:33	f
14	1	31	1979-08-18 06:18:08	1979-08-18 06:18:08	f
15	1	37	1984-12-01 20:04:52	1984-12-01 20:04:52	f
16	1	41	1976-09-08 22:33:30	1976-09-08 22:33:30	f
17	1	42	1971-03-28 14:44:12	1971-03-28 14:44:12	f
18	1	46	2002-06-11 11:11:14	2002-06-11 11:11:14	f
19	2	7	1994-06-07 19:52:39	1994-06-07 19:52:39	t
20	2	35	1976-04-05 15:02:08	1976-04-05 15:02:08	t
21	2	30	2000-10-25 22:59:34	2000-10-25 22:59:34	t
22	2	46	2007-12-31 06:28:45	2007-12-31 06:28:45	t
23	2	18	1988-04-14 20:46:13	1988-04-14 20:46:13	f
24	2	37	2006-10-25 15:36:37	2006-10-25 15:36:37	f
25	3	37	1973-09-29 22:56:02	1973-09-29 22:56:02	f
26	3	7	1989-06-28 00:05:21	1989-06-28 00:05:21	f
27	4	7	1981-06-07 21:14:31	1981-06-07 21:14:31	t
28	4	31	1994-06-15 19:03:51	1994-06-15 19:03:51	t
29	4	21	1995-10-11 05:02:48	1995-10-11 05:02:48	t
30	4	26	1987-02-18 06:01:10	1987-02-18 06:01:10	t
31	4	19	1973-12-27 10:37:07	1973-12-27 10:37:07	t
32	4	24	1976-03-03 21:28:36	1976-03-03 21:28:36	t
33	4	18	2010-02-13 08:33:06	2010-02-13 08:33:06	t
34	4	23	1983-06-16 09:13:22	1983-06-16 09:13:22	t
35	4	25	2007-05-28 14:00:57	2007-05-28 14:00:57	t
36	4	20	1999-11-28 18:42:37	1999-11-28 18:42:37	t
37	4	37	1974-02-27 12:28:21	1974-02-27 12:28:21	f
38	4	11	2000-02-08 17:35:13	2000-02-08 17:35:13	f
39	4	13	1998-12-17 00:08:34	1998-12-17 00:08:34	f
40	5	31	2011-04-05 07:04:38	2011-04-05 07:04:38	t
41	5	39	1991-04-04 18:11:51	1991-04-04 18:11:51	t
42	5	34	1974-12-06 07:52:37	1974-12-06 07:52:37	t
43	5	36	2009-02-27 18:34:10	2009-02-27 18:34:10	t
44	5	32	1987-11-28 02:48:07	1987-11-28 02:48:07	t
45	5	35	1982-02-06 19:14:57	1982-02-06 19:14:57	t
46	5	33	1997-09-29 10:30:17	1997-09-29 10:30:17	t
47	5	38	1989-09-15 18:03:32	1989-09-15 18:03:32	t
48	5	40	1993-11-24 02:31:56	1993-11-24 02:31:56	f
49	5	37	1997-08-27 14:19:08	1997-08-27 14:19:08	f
50	5	7	1978-08-16 21:50:02	1978-08-16 21:50:02	f
51	6	5	1978-04-17 21:21:43	1978-04-17 21:21:43	t
52	6	6	1973-03-25 20:48:25	1973-03-25 20:48:25	t
53	6	8	2008-12-17 15:15:56	2008-12-17 15:15:56	t
54	6	9	1980-01-13 07:37:57	1980-01-13 07:37:57	t
55	6	10	2009-09-15 18:50:10	2009-09-15 18:50:10	t
56	6	11	2006-06-28 19:46:10	2006-06-28 19:46:10	t
57	6	12	1982-05-25 05:22:21	1982-05-25 05:22:21	t
58	6	13	2012-07-13 13:27:20	2012-07-13 13:27:20	t
59	6	14	1996-11-24 02:35:19	1996-11-24 02:35:19	t
60	6	15	2007-08-10 13:11:41	2007-08-10 13:11:41	t
61	6	16	1972-02-23 15:14:08	1972-02-23 15:14:08	t
62	6	17	2010-05-12 02:55:33	2010-05-12 02:55:33	t
63	6	22	1975-04-16 14:05:22	1975-04-16 14:05:22	t
64	6	27	1979-06-12 04:57:31	1979-06-12 04:57:31	t
65	6	28	1981-07-01 13:22:51	1981-07-01 13:22:51	t
66	6	29	1987-08-26 01:41:28	1987-08-26 01:41:28	t
67	6	30	1986-12-19 02:13:41	1986-12-19 02:13:41	t
68	6	31	1999-01-30 06:38:58	1999-01-30 06:38:58	t
69	6	37	1971-09-13 00:53:58	1971-09-13 00:53:58	t
70	6	41	1982-01-27 07:10:49	1982-01-27 07:10:49	t
71	6	42	2000-02-18 06:09:33	2000-02-18 06:09:33	t
72	6	43	1972-02-24 11:26:17	1972-02-24 11:26:17	t
73	6	44	1973-05-01 15:05:44	1973-05-01 15:05:44	t
74	6	45	2005-12-31 20:52:41	2005-12-31 20:52:41	t
75	6	46	2006-12-29 01:23:37	2006-12-29 01:23:37	t
76	6	47	1975-10-04 05:01:14	1975-10-04 05:01:14	t
77	6	48	1989-06-08 21:50:01	1989-06-08 21:50:01	t
78	7	7	1978-08-19 05:42:53	1978-08-19 05:42:53	t
79	7	38	1970-06-29 20:22:10	1970-06-29 20:22:10	t
80	7	31	1998-10-14 07:03:17	1998-10-14 07:03:17	t
81	7	37	1990-08-22 13:32:48	1990-08-22 13:32:48	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-03-09 08:36:31.183467	2014-03-09 08:36:31.183467	baconesia
2	chocolades	2013-10-09 05:40:51.226815	2013-10-09 05:40:51.226815	chocolades
3	ghost	2013-07-06 15:19:01.238127	2013-07-06 15:19:01.238127	ghost
4	motley	2013-08-18 06:04:18.243605	2013-08-18 06:04:18.243605	motley
5	rugrats	2013-07-07 19:39:09.263488	2013-07-07 19:39:09.263488	rugrats
6	slate	2013-07-07 08:13:52.279633	2013-07-07 08:13:52.279633	slate
7	polkadots	2013-09-06 06:23:07.315984	2013-09-06 06:23:07.315984	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	7	ruby	word-count	10	done	2014-03-12 23:20:17	2013-12-29 23:17:58	2014-03-12 23:20:17	ecb4069cdd3c60e9872419de	t
2	7	ruby	bob	3	hibernating	\N	2014-01-02 23:03:23	2014-03-08 00:50:55	c7ff71fa3dbcf010c0361c96	f
3	7	clojure	grains	1	hibernating	\N	2014-01-29 00:54:04	2014-01-29 09:18:03	a4fc86e8969e29f31b31b9ef	t
4	7	elixir	word-count	4	done	2014-02-28 11:18:51	2014-01-18 08:23:17	2014-02-28 11:18:51	96c6aca36c4a55105c47173c	t
5	7	clojure	rna-transcription	2	done	2014-02-04 19:40:09	2014-01-12 23:23:38	2014-02-04 19:40:09	04e16c7309d038e360dd53d9	t
6	7	ruby	hamming	1	pending	\N	2014-01-02 23:17:52	2014-01-02 23:17:52	fca75bdd4fa26aa13be0399c	f
7	7	ruby	proverb	4	done	2014-03-05 07:25:10	2014-01-11 11:25:16	2014-03-05 07:25:10	4a3ed683db6f12df0727505a	t
8	7	javascript	sieve	1	pending	\N	2014-02-18 09:14:12	2014-02-18 09:14:12	b1f1c86df53166b0dec9bd53	f
9	7	javascript	bob	1	pending	\N	2014-01-21 21:10:21	2014-01-21 21:10:21	b58d76cd3d18c855784bc4c4	t
10	7	python	bob	2	done	2014-02-25 10:42:21	2014-01-24 01:05:15	2014-02-25 10:42:21	d4071181230ce17f6364b9e8	t
11	7	ruby	binary-search-tree	1	done	2014-02-19 13:45:48	2014-01-06 08:50:46	2014-02-19 13:45:48	d7bb44f4bdd9cdff26b859f4	t
12	7	elixir	anagram	1	done	2014-03-19 03:01:10	2014-03-13 14:16:16	2014-03-19 03:01:10	c74c6583a9326ca1074d4332	t
13	7	ruby	leap	1	pending	\N	2014-01-26 19:11:55	2014-01-26 19:11:55	ba8fef8f3a25c52013d2ef19	t
14	7	javascript	word-count	4	pending	\N	2014-01-01 09:37:46	2014-01-01 09:37:46	0ae9fd8cd16c60917d221e2c	t
15	7	haskell	kindergarten-garden	3	done	2014-03-12 11:13:30	2014-01-07 02:43:40	2014-03-12 11:13:30	c15fb254fc558dd903bff544	t
16	7	ruby	roman-numerals	1	pending	\N	2013-12-27 21:20:10	2013-12-27 21:20:10	9d99d837aebf8519a55f1cd9	f
17	7	elixir	phone-number	5	done	2014-02-24 21:37:18	2013-12-28 01:16:04	2014-02-24 21:37:18	4da0e644413bd92763eb25ae	t
18	7	python	word-count	2	done	2014-02-15 11:54:18	2014-01-14 21:15:08	2014-02-15 11:54:18	85d98931cf960752f7344a9a	t
19	7	ruby	anagram	2	done	2014-03-12 10:01:08	2014-01-02 09:49:45	2014-03-12 10:01:08	fc65074528d78fc6a97d40a0	t
20	7	ruby	rna-transcription	5	done	2014-03-09 15:53:42	2013-12-30 20:02:44	2014-03-09 15:53:42	5f64f2b425dfa96eab97fb68	t
21	7	haskell	rna-transcription	1	done	2014-01-23 06:58:17	2014-01-20 06:55:51	2014-01-23 06:58:17	ad712ae6ea85464a81f2dce2	t
22	7	elixir	beer-song	2	hibernating	\N	2014-01-05 21:18:20	2014-02-15 06:15:49	fc2f8322da3c470c56c6751f	f
23	7	ruby	space-age	1	done	2014-03-13 15:37:07	2014-01-21 12:01:20	2014-03-13 15:37:07	c422eedadf8b40c4e02f0b4e	t
24	7	haskell	robot-simulator	1	done	2014-03-16 03:49:37	2014-03-15 12:13:50	2014-03-16 03:49:37	65a44180fd16869bae229fda	t
25	7	javascript	grade-school	1	done	2014-03-05 03:34:03	2014-01-17 06:23:13	2014-03-05 03:34:03	d16a1e0d55626fb26d1b31ed	t
26	7	javascript	rna-transcription	1	done	2014-02-20 01:57:21	2014-01-14 20:25:35	2014-02-20 01:57:21	7fba370d541cbd685e42ad68	t
27	7	python	rna-transcription	1	done	2014-01-25 09:23:36	2014-01-14 13:32:39	2014-01-25 09:23:36	cbcc5a957a59e10ebbde15dd	t
28	7	objective-c	hamming	1	done	2014-02-17 14:13:26	2014-01-25 19:39:08	2014-02-17 14:13:26	3d6e4252c13337219dac9d74	t
29	7	ruby	nucleotide-count	2	done	2014-03-05 09:25:00	2013-12-31 11:49:20	2014-03-05 09:25:00	e7d85d18b84e8e8b99c72788	t
30	7	ruby	grains	1	pending	\N	2014-01-18 19:14:26	2014-01-18 19:14:26	93ca07a22d9f20a872693c38	t
31	7	haskell	bob	3	done	2014-03-18 15:21:15	2014-01-11 16:32:48	2014-03-18 15:21:15	862ca727f01ad544640ecf98	t
32	7	javascript	phone-number	1	done	2014-01-15 22:50:16	2014-01-13 09:26:50	2014-01-15 22:50:16	406d6a10e12cc94aeab13dec	t
33	7	scala	nucleotide-count	1	pending	\N	2014-02-16 07:10:52	2014-02-16 07:10:52	8661a196fe4c223a9d777b3a	f
34	7	ruby	triangle	1	done	2014-03-01 01:50:44	2014-02-20 06:29:12	2014-03-01 01:50:44	147ef8c498587421385ddfae	t
35	7	haskell	queen-attack	1	pending	\N	2014-01-29 13:28:36	2014-01-29 13:28:36	bd4e0ed1c13610d74820022d	t
36	7	perl5	rna-transcription	1	done	2014-03-17 23:56:58	2014-01-30 02:18:56	2014-03-17 23:56:58	7d08ead367d403d1008f00c6	t
37	7	javascript	robot-name	2	done	2014-03-07 02:55:07	2014-01-14 01:41:30	2014-03-07 02:55:07	23981ad62f39c124771e4479	t
38	7	ruby	robot-name	2	done	2014-03-11 17:41:07	2014-01-27 15:48:28	2014-03-11 17:41:07	44cbbe540ed7c338edc7db8e	t
39	7	haskell	word-count	3	done	2014-02-21 06:45:37	2013-12-29 09:43:49	2014-02-21 06:45:37	576bebcae49fd8ac59808c82	t
40	7	haskell	beer-song	1	done	2014-02-05 10:50:48	2014-01-05 02:00:00	2014-02-05 10:50:48	20c3e431a39d0b3b006842af	t
41	7	javascript	pythagorean-triplet	1	done	2014-02-01 03:28:46	2014-01-15 00:15:34	2014-02-01 03:28:46	8f2c04d21538ac83dbec0339	t
42	7	elixir	etl	1	done	2014-03-11 21:08:26	2014-02-10 03:58:39	2014-03-11 21:08:26	e5f2fe7a59806e6d91ef2e04	t
43	7	clojure	bob	2	done	2014-03-18 09:34:16	2014-01-29 18:05:11	2014-03-18 09:34:16	574aaa1e5df2cdf385834166	t
44	7	haskell	nucleotide-count	3	done	2014-01-30 03:17:30	2014-01-03 07:17:46	2014-01-30 03:17:30	97f1c5088f96d2e984154ee1	t
45	7	ruby	crypto-square	1	done	2014-03-15 19:05:52	2013-12-28 03:28:31	2014-03-15 19:05:52	2cdd9de317332e91491e89eb	t
46	7	javascript	pascals-triangle	1	done	2014-02-27 21:37:33	2014-01-16 09:16:33	2014-02-27 21:37:33	d41d1e71d7c67ae8fc2c7876	t
47	7	elixir	leap	1	done	2014-01-15 16:44:45	2013-12-29 03:34:02	2014-01-15 16:44:45	4c5eddfb0bdab1d00e6da66d	t
48	7	javascript	etl	2	done	2014-03-12 10:20:38	2014-02-06 03:17:12	2014-03-12 10:20:38	db1a6409c54eb2551f9d6b59	t
49	7	haskell	matrix	1	done	2014-03-15 22:55:53	2014-02-26 12:17:02	2014-03-15 22:55:53	b591fa8fec2b8b9609f07136	t
50	7	haskell	simple-linked-list	2	done	2014-03-07 07:57:11	2014-01-04 11:55:23	2014-03-07 07:57:11	43a3956fe5b97b107db7967e	t
51	7	ruby	phone-number	1	done	2014-02-13 01:06:02	2014-01-16 15:36:42	2014-02-13 01:06:02	c7577097625bf09c2c8b2a74	t
52	7	haskell	point-mutations	1	pending	\N	2014-01-23 00:08:13	2014-01-23 00:08:13	93411cc678a82e2a55eb1749	t
53	7	javascript	beer-song	3	done	2014-02-26 14:36:05	2013-12-31 05:12:51	2014-02-26 14:36:05	4693959dad3225a0e5e0ffb6	t
54	3	javascript	bob	5	done	2014-03-20 20:57:29	2014-03-04 09:20:20	2014-03-20 20:57:29	ad5b819c286322f1eb11462b	t
55	3	javascript	word-count	10	done	2014-03-20 19:17:15	2014-03-03 06:37:15	2014-03-20 19:17:15	3ee55b9320006121e9d3f06f	t
56	3	javascript	anagram	2	done	2014-03-20 05:14:03	2014-03-07 11:17:55	2014-03-20 05:14:03	ee90e78c5a0f3502640c5b90	t
57	3	javascript	beer-song	1	done	2014-03-19 04:16:39	2014-03-18 23:35:22	2014-03-19 04:16:39	ab43375fbaa24066f263cb22	t
58	3	javascript	nucleotide-count	4	done	2014-03-19 10:44:50	2014-03-04 03:23:44	2014-03-19 10:44:50	200eae89b619b7c4fc4fd055	t
59	3	javascript	space-age	1	pending	\N	2014-02-28 15:31:11	2014-02-28 15:31:11	fc4440d2cb995ef856b0ccd4	f
60	3	javascript	binary	1	done	2014-03-20 00:07:49	2014-03-17 23:14:06	2014-03-20 00:07:49	ff89f949deb3a5beeec593d5	t
61	3	javascript	scrabble-score	1	done	2014-03-18 08:42:21	2014-03-11 19:22:30	2014-03-18 08:42:21	a2ebb2eda5dc9cd453d5470c	t
62	4	haskell	bob	1	done	2014-03-15 12:21:53	2014-03-10 23:57:04	2014-03-15 12:21:53	d4d0e65e980622ab68c3d40b	t
63	4	haskell	difference-of-squares	1	done	2014-03-16 10:38:35	2014-03-10 19:20:02	2014-03-16 10:38:35	8e785c7f57617aa948a0f7c7	t
64	4	haskell	rna-transcription	1	done	2014-03-15 15:31:07	2014-03-12 21:48:21	2014-03-15 15:31:07	1222a23db1810f10dd8b1ce5	t
65	4	haskell	grade-school	2	done	2014-03-19 07:23:48	2014-03-07 10:55:23	2014-03-19 07:23:48	9dbb4acbe42b1ee442fa90ca	t
66	4	haskell	word-count	8	done	2014-03-19 22:31:27	2014-03-08 05:20:49	2014-03-19 22:31:27	7a7bf07454b44e4974683dc0	t
67	4	haskell	leap	2	done	2014-03-16 05:45:29	2014-03-07 19:04:32	2014-03-16 05:45:29	e0a9f792613a4cece676a6ea	t
68	4	haskell	phone-number	4	hibernating	\N	2014-03-07 03:36:34	2014-03-17 22:35:23	d92da47932704ee7b45e39a2	f
69	4	haskell	binary	2	done	2014-03-07 16:24:05	2014-03-05 16:55:32	2014-03-07 16:24:05	c2ef973b8317a39693e6c146	t
70	4	haskell	beer-song	1	done	2014-03-16 01:53:26	2014-03-05 05:36:56	2014-03-16 01:53:26	83db9281a79efb9b3595d58f	t
71	4	haskell	anagram	1	done	2014-03-17 11:26:06	2014-03-16 18:51:56	2014-03-17 11:26:06	39545ac6b83319e6758d2ea6	t
72	21	ruby	hamming	1	done	2014-02-26 13:38:30	2014-02-07 17:37:02	2014-02-26 13:38:30	64eaa66684c24e49e354d35d	t
73	21	ruby	anagram	3	done	2014-02-27 02:27:29	2014-02-06 04:36:13	2014-02-27 02:27:29	81c7ae053d0ac4ddd64f7db9	t
74	21	ruby	bob	1	hibernating	\N	2014-01-14 01:06:40	2014-02-05 10:28:21	c72522fec48e988730f3045f	f
75	21	javascript	raindrops	1	pending	\N	2014-03-05 03:20:13	2014-03-05 03:20:13	505a76b084acbc9e80413bc4	f
76	21	javascript	bob	1	done	2014-02-20 16:48:54	2014-01-23 06:40:30	2014-02-20 16:48:54	f54a2be2ce3a51b7c9a72f10	t
77	21	ruby	word-count	2	hibernating	\N	2014-02-19 03:03:42	2014-03-19 23:49:52	f8e33ce4b86542d20184eb4d	f
78	21	javascript	robot-name	2	done	2014-03-17 08:47:22	2014-02-02 05:31:43	2014-03-17 08:47:22	ee1205df6cad3a9ec3a8ee94	t
79	21	haskell	word-count	2	done	2014-02-19 19:23:28	2014-01-27 08:49:01	2014-02-19 19:23:28	c58dd742b74a5170c40635c6	t
80	21	python	nucleotide-count	3	done	2014-02-26 23:17:55	2014-02-05 11:10:47	2014-02-26 23:17:55	a433b10f43098003d8571877	t
81	21	haskell	gigasecond	1	done	2014-02-11 05:44:37	2014-02-02 05:31:45	2014-02-11 05:44:37	c606a2ff6b3f38aae4af2559	t
82	21	elixir	phone-number	1	done	2014-01-22 18:49:42	2014-01-17 06:17:41	2014-01-22 18:49:42	4dfb860da0156b6c79114445	t
83	21	ruby	rna-transcription	8	done	2014-03-19 05:06:32	2014-02-04 08:33:16	2014-03-19 05:06:32	1d085f89679fd5ca8dc2baea	t
84	21	haskell	beer-song	4	done	2014-02-25 05:49:05	2014-01-16 12:30:32	2014-02-25 05:49:05	f90b8975a85abd69b9ae6959	t
85	26	haskell	bob	1	done	2014-02-23 02:11:38	2014-01-01 18:29:19	2014-02-23 02:11:38	0f641ae9dc30e89d1855b137	t
86	26	ruby	word-count	5	done	2014-02-08 05:30:05	2013-10-17 00:43:15	2014-02-08 05:30:05	3b3a16703504b415344d00dc	t
87	26	ruby	nucleotide-count	3	done	2014-03-18 03:15:39	2013-12-16 09:03:32	2014-03-18 03:15:39	1c53eedf289158fd91dd3c90	t
88	26	clojure	phone-number	3	done	2014-03-15 14:37:10	2013-12-15 02:41:16	2014-03-15 14:37:10	984541e0a9abde6ae8d1c44c	t
89	26	ruby	trinary	2	pending	\N	2013-10-28 15:25:45	2013-10-28 15:25:45	47d557710d6bd933609d27ce	t
90	26	clojure	kindergarten-garden	1	done	2014-03-09 18:39:15	2014-01-18 12:11:22	2014-03-09 18:39:15	4c4e67235ac44d84f4aecba8	t
91	26	haskell	rna-transcription	2	done	2014-03-20 01:18:15	2013-11-12 13:09:30	2014-03-20 01:18:15	bd031792443bfd7acc91d612	t
92	26	haskell	binary	1	done	2013-12-19 15:37:05	2013-11-28 05:18:40	2013-12-19 15:37:05	302ca7fe16ef6df2ccdd7775	t
93	26	ruby	leap	1	done	2013-12-26 13:32:45	2013-11-30 06:58:22	2013-12-26 13:32:45	6e41918ca882d5dcd61ce2ba	t
94	26	clojure	word-count	2	done	2014-02-19 18:15:28	2013-11-12 06:07:42	2014-02-19 18:15:28	4ecd520bca64a874ae0a69e6	t
95	26	javascript	word-count	4	done	2014-03-12 03:15:10	2013-11-10 21:02:19	2014-03-12 03:15:10	94ff9e5a24349aae99cbe93a	t
96	26	elixir	bob	3	done	2014-02-23 21:11:02	2013-11-20 18:49:20	2014-02-23 21:11:02	9a2de6a55aa216302ec85f40	t
97	26	clojure	bob	2	done	2014-03-02 02:20:46	2013-11-28 15:44:30	2014-03-02 02:20:46	71a3f9eeb4b6fdcdc317ef4c	t
98	26	ruby	bob	7	done	2014-02-27 16:59:46	2013-10-16 16:22:21	2014-02-27 16:59:46	861a2de5f50cda9e44e35a47	t
99	26	go	leap	2	done	2014-02-12 23:02:06	2013-12-17 06:59:48	2014-02-12 23:02:06	4e6282b782a94e977b50183a	t
100	26	ruby	triangle	1	done	2013-11-20 15:56:54	2013-11-16 14:52:15	2013-11-20 15:56:54	54900f55841411b68dd1930a	t
101	26	clojure	rna-transcription	3	done	2014-01-03 03:33:11	2013-11-05 05:33:31	2014-01-03 03:33:11	c35a6ce824a214609e9b12bd	t
102	26	ruby	prime-factors	1	pending	\N	2014-01-28 16:20:24	2014-01-28 16:20:24	61db6dbde892296a049073c6	f
103	26	python	bob	2	done	2014-02-15 07:33:54	2013-11-14 17:39:02	2014-02-15 07:33:54	cf5cbbdfd7492852243d2284	t
104	19	ruby	anagram	1	done	2013-11-16 23:17:51	2013-11-10 18:14:17	2013-11-16 23:17:51	216f85c1020ce471f4c45c1b	t
105	19	ruby	space-age	2	done	2013-12-22 14:14:35	2013-10-12 16:06:09	2013-12-22 14:14:35	093f0740a3eeb354f2d9caa2	t
106	19	python	bob	4	done	2014-02-13 21:08:17	2013-09-09 00:36:05	2014-02-13 21:08:17	3af3f0e0c64c4302dea096a8	t
107	19	python	word-count	1	pending	\N	2013-10-19 09:56:33	2013-10-19 09:56:33	dd52bed1e0738f98361f6e3d	f
108	19	ruby	grains	1	done	2014-03-13 13:21:34	2014-01-11 05:35:26	2014-03-13 13:21:34	3cb23f995991f7113b9e41d5	t
109	19	ruby	hamming	1	done	2014-03-04 15:28:22	2013-10-10 10:34:34	2014-03-04 15:28:22	60644d3eb4959b720018f443	t
110	19	ruby	bob	2	hibernating	\N	2013-09-29 00:40:47	2014-02-14 11:35:43	d498f6b07c7d71dd2dc5059c	t
111	19	javascript	word-count	1	hibernating	\N	2014-01-21 10:04:33	2014-03-19 20:31:02	ac885a6115480dd01325293b	f
112	19	clojure	anagram	1	pending	\N	2013-10-17 22:05:26	2013-10-17 22:05:26	6a0d0582f1a9d364d17621b3	t
113	19	haskell	nucleotide-count	2	done	2014-03-14 10:27:32	2014-02-15 04:17:30	2014-03-14 10:27:32	3e2dbc130272c4b771a94bf9	t
114	19	clojure	rna-transcription	1	done	2014-02-01 10:35:41	2013-10-24 10:32:08	2014-02-01 10:35:41	e2ded00dae3ce54850af4d43	t
115	19	clojure	bob	7	done	2014-03-13 13:55:00	2013-09-13 15:59:51	2014-03-13 13:55:00	4680ca9e0239c12694da3369	t
116	19	ruby	robot-name	4	done	2014-03-03 06:32:20	2013-09-23 13:07:38	2014-03-03 06:32:20	8b4454ca4e83a8b4eb4ca764	t
117	19	haskell	rna-transcription	1	done	2014-01-07 13:46:01	2013-12-22 12:14:07	2014-01-07 13:46:01	bbfa6c25d9a50fd4480fc08a	t
118	19	javascript	anagram	1	done	2014-01-22 20:15:45	2014-01-12 09:35:58	2014-01-22 20:15:45	a78fc8c2cc585fc926693087	t
119	24	ruby	anagram	2	done	2014-03-09 11:03:00	2013-10-24 15:05:15	2014-03-09 11:03:00	22e6a114607cc7716cf85243	t
120	24	ruby	nucleotide-count	2	done	2014-02-26 10:57:47	2013-12-02 16:10:42	2014-02-26 10:57:47	57da62e4b7e3319ecb89959d	t
121	24	ruby	bob	5	done	2014-01-18 14:28:05	2013-10-16 02:05:21	2014-01-18 14:28:05	ce63d322c94780f085ad4294	t
122	24	clojure	leap	1	done	2013-10-18 10:16:28	2013-08-29 23:38:47	2013-10-18 10:16:28	f9620bbfbfcac353555cc796	t
123	24	haskell	triangle	1	done	2014-02-25 04:28:39	2013-10-02 02:38:25	2014-02-25 04:28:39	faeca51652f27ce7f60b0b6c	t
124	24	ruby	robot-name	1	done	2014-03-15 15:48:48	2014-01-18 04:52:28	2014-03-15 15:48:48	66a3112711ab607a735b9da5	t
125	24	ruby	grains	2	pending	\N	2013-11-01 01:57:17	2013-11-01 01:57:17	8f74ac2e8a995927cd60ead6	t
126	24	ruby	hamming	1	done	2014-02-11 13:16:02	2013-08-21 20:12:20	2014-02-11 13:16:02	83175c17cd8d50046968a6e8	t
127	24	python	anagram	1	done	2013-11-06 02:48:34	2013-09-19 23:35:45	2013-11-06 02:48:34	d6dc8676c794c4b533643ba0	t
128	24	ruby	leap	1	done	2014-02-06 14:14:15	2013-09-29 10:50:53	2014-02-06 14:14:15	cf789850f09e588ceef8a2f8	t
129	24	haskell	beer-song	3	done	2014-02-03 08:26:05	2013-10-28 06:34:39	2014-02-03 08:26:05	67a3b2f3026bafcc2d267b19	t
130	24	haskell	rna-transcription	1	done	2014-02-18 11:24:00	2013-09-08 18:50:22	2014-02-18 11:24:00	1796bb63b47eed56c7aa2fe2	t
131	24	ruby	word-count	4	done	2014-03-01 00:56:52	2013-11-14 15:37:30	2014-03-01 00:56:52	f840612941861ed84e64cd05	t
132	18	ruby	bob	6	done	2014-03-19 13:06:47	2013-07-23 16:33:50	2014-03-19 13:06:47	c09048be3d2921405990d0bb	t
133	18	python	bob	2	hibernating	\N	2013-09-05 21:48:29	2014-02-15 11:28:09	b07b705b376498e5749d9d48	f
134	18	javascript	rna-transcription	1	done	2014-03-09 01:09:35	2013-09-29 18:47:48	2014-03-09 01:09:35	42f74a7d3234eb86d8de9d2f	t
135	18	elixir	nucleotide-count	1	done	2013-09-27 06:33:56	2013-08-24 14:15:22	2013-09-27 06:33:56	b4432849f0152d37a366ad1a	t
136	18	go	word-count	2	done	2014-01-19 20:58:58	2013-08-27 03:18:15	2014-01-19 20:58:58	891fc76b0a71dc6cbd780439	t
137	18	go	etl	1	done	2013-11-03 22:50:38	2013-09-08 04:45:51	2013-11-03 22:50:38	3f26be162e404d848e635ba0	t
138	18	javascript	nucleotide-count	2	done	2014-02-27 11:59:10	2013-08-18 04:19:35	2014-02-27 11:59:10	514ad2766b57af55875df815	t
139	18	elixir	word-count	8	done	2014-03-18 05:18:06	2013-09-13 14:13:24	2014-03-18 05:18:06	4c43f21015249128e3c25c1e	t
140	18	ruby	robot-name	2	pending	\N	2013-07-18 06:49:38	2013-07-18 06:49:38	03f343cae7b1c0ed558ca3bc	t
141	18	ruby	meetup	2	done	2014-01-10 11:23:45	2013-09-23 11:17:40	2014-01-10 11:23:45	9b16664233de156e8e08255f	t
142	18	javascript	bob	1	done	2013-09-30 14:16:53	2013-09-29 03:54:04	2013-09-30 14:16:53	9e3a64ee4c7a3e7b76988b07	t
143	18	haskell	word-count	1	done	2013-12-21 14:46:06	2013-08-25 08:37:56	2013-12-21 14:46:06	f2a980c61eee47aa620fabbf	t
144	18	go	leap	2	done	2014-01-24 11:58:36	2013-09-25 04:24:31	2014-01-24 11:58:36	8625d1965291b9e4ed2b1955	t
145	18	python	rna-transcription	1	pending	\N	2013-10-17 12:32:32	2013-10-17 12:32:32	968de65986ab6d096f3ced00	t
146	18	clojure	nucleotide-count	3	done	2013-12-01 11:27:20	2013-09-26 05:46:56	2013-12-01 11:27:20	f9ed5ab315a04b378070e938	t
147	18	ruby	anagram	3	done	2014-02-10 17:35:46	2013-09-22 09:56:28	2014-02-10 17:35:46	c314ca615b0ccc3a2bcf1216	t
148	18	ruby	word-count	1	hibernating	\N	2013-09-23 22:07:23	2014-01-13 21:59:01	aad91ebad5e1db2d626bedea	f
149	23	scala	bob	1	done	2014-02-13 14:17:05	2013-10-15 16:33:50	2014-02-13 14:17:05	5d4076f01a2a2d5adb2bb7bd	t
150	23	python	rna-transcription	3	done	2014-02-09 19:35:13	2013-11-04 09:53:41	2014-02-09 19:35:13	4306f06b53c08dc9edb9fb0a	t
151	23	javascript	anagram	3	done	2014-02-07 03:11:18	2013-12-15 08:42:33	2014-02-07 03:11:18	a32fe8a48801618d1202f8d7	t
152	23	ruby	anagram	2	done	2014-03-02 06:58:18	2014-01-15 16:37:25	2014-03-02 06:58:18	35114749099328d44d461688	t
153	23	ruby	grade-school	2	pending	\N	2013-12-01 19:27:51	2013-12-01 19:27:51	c58eebb0e053360d81252744	f
154	23	haskell	meetup	5	done	2014-03-11 22:45:41	2013-10-29 00:31:49	2014-03-11 22:45:41	999af605de05ab867976609a	t
155	23	ruby	rna-transcription	4	done	2014-02-18 11:02:49	2013-10-14 18:51:32	2014-02-18 11:02:49	5be330cfce73569b22709ea6	t
156	23	ruby	bob	11	done	2014-02-19 15:23:40	2013-10-26 02:45:25	2014-02-19 15:23:40	6df748cd8df68a409ca0c9dc	t
157	23	ruby	leap	1	done	2014-02-03 23:18:33	2013-10-05 09:08:34	2014-02-03 23:18:33	f956d3c415163e2463295cf7	t
158	23	ruby	word-count	4	done	2014-03-14 18:59:32	2013-11-25 17:35:28	2014-03-14 18:59:32	5ec5b373996496d1a3d3085b	t
159	23	clojure	bob	2	pending	\N	2013-12-03 18:31:21	2013-12-03 18:31:21	8728d88f3336efd752f39e22	t
160	23	haskell	anagram	1	done	2014-01-08 16:17:29	2013-10-15 05:23:10	2014-01-08 16:17:29	2013e566b2a403d06503397a	t
161	23	javascript	word-count	8	done	2014-02-22 15:24:49	2013-10-09 09:09:37	2014-02-22 15:24:49	423d01dd445ecd1543068dec	t
162	23	haskell	space-age	1	done	2014-01-01 03:40:07	2013-11-23 11:50:40	2014-01-01 03:40:07	3f4376d18db9c58e0acfabe8	t
163	23	haskell	rna-transcription	1	done	2014-03-09 23:22:24	2014-01-10 06:51:11	2014-03-09 23:22:24	ea7165b468e853090f5b91e3	t
164	23	python	anagram	2	pending	\N	2013-10-24 19:34:58	2013-10-24 19:34:58	f3847313aa0a87cff9fdeb95	f
165	25	javascript	word-count	1	done	2014-03-09 19:05:05	2014-02-16 06:07:01	2014-03-09 19:05:05	1ea2e9c62b22d25bf000c03b	t
166	25	haskell	beer-song	3	done	2014-03-15 15:39:04	2014-02-14 06:00:12	2014-03-15 15:39:04	22323e32f8154d81d3f0f038	t
167	25	javascript	simple-cipher	2	done	2014-03-12 23:40:50	2014-03-04 01:42:52	2014-03-12 23:40:50	03572d7093d3a6eceb5ce7fa	t
168	25	ruby	anagram	5	done	2014-03-17 10:08:01	2014-02-13 21:36:02	2014-03-17 10:08:01	ca90bc45e31a819a56fa80bf	t
169	25	javascript	binary	1	pending	\N	2014-03-08 06:37:55	2014-03-08 06:37:55	0a44d997b2df0b2a3b16e864	f
170	25	javascript	nucleotide-count	1	done	2014-03-16 02:20:07	2014-02-12 17:09:32	2014-03-16 02:20:07	d96a692217ebb9365c6354fd	t
171	25	elixir	rna-transcription	1	done	2014-03-02 08:56:50	2014-02-17 12:19:54	2014-03-02 08:56:50	bf6b89ca41d6471afaab0e5d	t
172	25	haskell	accumulate	2	done	2014-03-15 20:29:21	2014-03-04 23:59:41	2014-03-15 20:29:21	710792479cdb955baae1701d	t
173	25	python	bob	4	done	2014-03-19 01:30:10	2014-02-11 18:29:12	2014-03-19 01:30:10	8599070ecbd4160c410e0872	t
174	25	ruby	point-mutations	2	done	2014-03-05 16:22:17	2014-02-23 12:07:16	2014-03-05 16:22:17	0ac3c4ddf9924ea8948acdfc	t
175	25	ruby	word-count	4	done	2014-03-14 13:59:25	2014-02-12 20:54:49	2014-03-14 13:59:25	489c2c45a3cfa195b9a09f5b	t
176	25	ruby	raindrops	1	pending	\N	2014-02-20 11:36:57	2014-02-20 11:36:57	8fa2dde522ee58dbdefb5f75	f
177	25	clojure	bob	1	done	2014-03-12 01:05:18	2014-03-10 23:34:13	2014-03-12 01:05:18	02b75e1cb28c390e8bf5acd3	t
178	25	ruby	bob	1	hibernating	\N	2014-02-13 12:14:04	2014-02-25 20:31:58	7cfd0171a988a4bbfaf106c7	t
179	25	python	rna-transcription	1	done	2014-02-28 16:43:28	2014-02-17 14:12:01	2014-02-28 16:43:28	f0976afa43a3cb967ae05e99	t
180	25	haskell	nucleotide-count	2	done	2014-02-27 17:56:21	2014-02-24 17:59:18	2014-02-27 17:56:21	e8febb3c6a856286d6547a58	t
181	25	ruby	leap	3	done	2014-03-17 01:27:55	2014-02-15 10:26:39	2014-03-17 01:27:55	bd4361ae8db33d8e0128715d	t
182	25	python	anagram	1	done	2014-02-18 02:01:54	2014-02-17 10:15:38	2014-02-18 02:01:54	88e212919eaa52c9fc2ce8aa	t
183	20	ruby	word-count	1	done	2014-02-08 01:56:49	2014-02-04 12:54:19	2014-02-08 01:56:49	5614c85e9c6f7b305a543086	t
184	20	ruby	anagram	1	hibernating	\N	2013-12-23 08:23:49	2014-02-02 23:20:22	f7d28a78b2f716f3d75b2223	f
185	20	ruby	bob	3	done	2014-02-25 13:43:24	2013-11-14 07:16:50	2014-02-25 13:43:24	a9799882515b056926e0abae	t
186	20	ruby	rna-transcription	1	done	2014-02-22 07:52:24	2014-01-09 17:49:42	2014-02-22 07:52:24	9b751fcae8375d631091595b	t
187	20	go	hamming	2	done	2014-02-25 03:53:10	2014-01-23 14:20:16	2014-02-25 03:53:10	30c2ba6910e54582cd898699	t
188	20	elixir	anagram	6	done	2014-03-13 08:37:10	2013-12-19 08:19:03	2014-03-13 08:37:10	d81305f95cff4326665d7d44	t
189	20	ruby	proverb	1	done	2014-01-29 10:09:23	2013-11-22 15:03:28	2014-01-29 10:09:23	ebd8f0958b279f6b786dafc4	t
190	20	objective-c	word-count	3	done	2014-03-20 10:11:25	2013-11-10 20:12:52	2014-03-20 10:11:25	12a05b4115fa3e78aeef5f7a	t
191	20	elixir	word-count	3	done	2014-02-21 01:31:55	2013-11-28 22:03:31	2014-02-21 01:31:55	b706a5b376e8af843f8a1f56	t
192	20	ruby	hamming	8	done	2014-03-16 22:02:40	2013-11-04 07:59:50	2014-03-16 22:02:40	1844b505ed983141cc09866a	t
193	20	ruby	allergies	1	done	2014-01-30 20:14:34	2014-01-16 23:43:07	2014-01-30 20:14:34	69944390dc35717a94f82543	t
194	20	elixir	bob	3	done	2014-02-17 13:30:00	2013-11-04 14:00:49	2014-02-17 13:30:00	92d4b2611027a91a18b33204	t
195	20	clojure	bob	3	done	2014-03-07 12:11:34	2013-12-01 22:54:33	2014-03-07 12:11:34	fcb623c8016dfdc5d3b2e7f5	t
196	20	ruby	accumulate	1	done	2014-03-13 18:01:14	2013-11-14 18:54:32	2014-03-13 18:01:14	3488b085d0d38e794bcccd19	t
197	20	ruby	leap	2	done	2014-02-23 07:01:13	2013-12-23 20:24:47	2014-02-23 07:01:13	32728ee9b3759e4fd2a43dd8	t
198	20	haskell	phone-number	2	done	2014-03-20 02:06:09	2013-11-04 07:24:58	2014-03-20 02:06:09	92686b9e6b2f2a3985deabd5	t
199	5	ruby	bob	4	done	2014-03-17 23:10:12	2013-11-17 04:46:31	2014-03-17 23:10:12	e554c3f2fbdfb214ca08f1c3	t
200	5	ruby	word-count	2	done	2014-03-05 04:33:37	2014-01-10 13:24:58	2014-03-05 04:33:37	6a37264e0e73bebd15a94df4	t
201	5	haskell	bob	1	done	2014-02-09 15:06:15	2013-11-20 04:08:42	2014-02-09 15:06:15	934703d052acfebe94d6fb7a	t
202	5	javascript	anagram	1	pending	\N	2013-11-27 05:16:16	2013-11-27 05:16:16	21a9b762a3d337134c7ff2c0	t
203	5	clojure	word-count	1	done	2014-03-16 23:56:05	2013-12-29 13:24:53	2014-03-16 23:56:05	230770d920c6136142144040	t
204	5	elixir	word-count	11	done	2014-02-13 18:27:43	2013-11-14 19:13:19	2014-02-13 18:27:43	77a8787dd87a8268023fbc7f	t
205	5	haskell	scrabble-score	2	done	2014-03-01 15:34:50	2014-01-26 05:14:33	2014-03-01 15:34:50	8ab296d53ee9e0df2d232995	t
206	5	elixir	bob	6	done	2014-02-11 08:18:41	2013-12-08 17:46:20	2014-02-11 08:18:41	19529891705602a0e988c00f	t
207	5	javascript	rna-transcription	3	done	2014-03-16 22:57:51	2014-01-22 02:53:33	2014-03-16 22:57:51	1da8d0d95802173299ac556a	t
208	5	ruby	atbash-cipher	1	done	2014-01-31 07:42:45	2014-01-15 15:34:24	2014-01-31 07:42:45	a99606a7ef8373eb6b72204a	t
209	5	ruby	grade-school	1	done	2014-01-06 22:53:31	2013-12-22 10:44:09	2014-01-06 22:53:31	3485e31023dce514ef8333d7	t
210	5	clojure	binary	1	pending	\N	2014-02-24 09:53:02	2014-02-24 09:53:02	c6d9d6f8b6fa8b98dc2bbff4	t
211	5	elixir	meetup	2	done	2014-02-06 04:19:04	2014-01-22 04:13:07	2014-02-06 04:19:04	b11e9fa638f357e3bf7ac541	t
212	5	ruby	scrabble-score	1	done	2014-01-13 06:42:42	2013-11-25 01:49:41	2014-01-13 06:42:42	f249150bbc49c1c7c38f9beb	t
213	5	ruby	house	2	done	2014-03-03 19:31:03	2013-11-20 14:39:14	2014-03-03 19:31:03	ce22359393a836e66a194506	t
214	6	haskell	space-age	1	done	2014-01-06 08:38:35	2013-11-25 04:09:35	2014-01-06 08:38:35	93fb6dd204939bf54cda6322	t
215	6	javascript	bob	3	done	2014-03-04 07:32:41	2013-12-10 15:19:19	2014-03-04 07:32:41	19e6c64dca065184a39a9f07	t
216	6	haskell	robot-name	1	done	2014-03-12 10:40:36	2014-01-11 07:58:15	2014-03-12 10:40:36	9c77e6491cbc718e46db40e7	t
217	6	ruby	bob	2	done	2014-01-11 22:34:17	2013-11-11 13:35:29	2014-01-11 22:34:17	ff2130c08bc3753a96d97cb2	t
218	6	javascript	word-count	4	done	2014-02-20 06:48:12	2014-01-03 12:05:30	2014-02-20 06:48:12	87c61dfaffd10585fb7dc72f	t
219	6	javascript	nucleotide-count	4	done	2014-03-01 17:10:14	2013-12-11 17:33:16	2014-03-01 17:10:14	08bbd6954388444a1ab85467	t
220	6	ruby	anagram	3	done	2014-01-30 11:49:25	2013-11-02 09:46:13	2014-01-30 11:49:25	0708b721de331232242655ca	t
221	6	javascript	robot-name	1	pending	\N	2014-02-20 23:21:32	2014-02-20 23:21:32	175de431af578ffa688be829	f
222	6	haskell	roman-numerals	2	done	2014-02-20 21:35:01	2014-01-10 13:55:35	2014-02-20 21:35:01	86d3fed06e947bbcc02c7909	t
223	6	ruby	word-count	1	hibernating	\N	2013-11-13 06:51:11	2013-11-30 11:37:38	20a30ec8cfbceeac91e8fe84	f
224	6	ruby	leap	2	hibernating	\N	2013-11-01 13:20:08	2014-02-04 12:04:09	40e9e59c2f7158f1890547d4	f
225	6	perl5	bob	1	done	2013-12-27 17:49:31	2013-11-30 03:55:48	2013-12-27 17:49:31	cf25525c2582359bed95da83	t
226	6	elixir	point-mutations	2	done	2014-02-24 00:52:50	2013-12-27 18:53:16	2014-02-24 00:52:50	0c60f1cba95a7b620448fcdd	t
227	6	haskell	phone-number	1	done	2014-01-21 04:51:43	2013-12-27 09:28:18	2014-01-21 04:51:43	52fc62dba821f4c2eef8ecbb	t
228	6	python	bob	2	hibernating	\N	2013-11-07 16:48:12	2014-03-20 14:23:09	2a5e4eacaf211b415dad7d7a	f
229	6	python	anagram	1	done	2014-03-06 12:26:01	2014-01-19 12:04:00	2014-03-06 12:26:01	f165585a24106ddf83a5a934	t
230	6	elixir	prime-factors	1	done	2014-01-09 21:33:50	2013-11-18 23:22:08	2014-01-09 21:33:50	865425e76060ee0db444dfc4	t
231	8	ruby	bob	1	done	2014-03-19 04:35:10	2014-03-17 19:34:39	2014-03-19 04:35:10	faf4494d31be8b7d84311ce2	t
232	8	python	word-count	2	done	2014-03-19 13:38:27	2014-03-18 03:36:14	2014-03-19 13:38:27	ca7ed06f6d35e7df134fdb98	t
233	8	ruby	grade-school	2	done	2014-03-19 23:37:54	2014-03-17 13:35:26	2014-03-19 23:37:54	0e7baf5ceb71751a59a80958	t
234	8	javascript	bob	1	hibernating	\N	2014-03-19 22:18:25	2014-03-20 03:00:18	6536eb784190a2424cbd28b1	f
235	8	ruby	leap	5	done	2014-03-20 20:24:04	2014-03-18 01:51:03	2014-03-20 20:24:04	1e24775214c282e77e16d289	t
236	8	ruby	anagram	3	done	2014-03-18 10:15:52	2014-03-17 18:48:45	2014-03-18 10:15:52	fee5a16faecf91b9e804189e	t
237	8	python	phone-number	3	done	2014-03-20 12:20:40	2014-03-19 01:50:51	2014-03-20 12:20:40	e057260e533942208292988b	t
238	8	clojure	rna-transcription	1	done	2014-03-17 21:20:26	2014-03-17 04:33:54	2014-03-17 21:20:26	d0323230b7a09667342de530	t
239	8	python	bob	1	done	2014-03-19 07:22:37	2014-03-17 15:15:47	2014-03-19 07:22:37	ac0121823e2941f564cdea0a	t
240	8	javascript	point-mutations	2	done	2014-03-20 17:50:40	2014-03-18 16:03:17	2014-03-20 17:50:40	a5f9c725ca296244c0559124	t
241	8	elixir	beer-song	2	done	2014-03-18 18:25:34	2014-03-17 15:55:24	2014-03-18 18:25:34	4835b67c12f776404d6dabea	t
242	8	ruby	space-age	2	pending	\N	2014-03-17 05:29:49	2014-03-17 05:29:49	0d1973b6cf63fcf069044df2	t
243	8	ruby	gigasecond	1	done	2014-03-20 06:35:58	2014-03-19 20:58:56	2014-03-20 06:35:58	3a53d74e6c55f1c3a7a01fa7	t
244	8	haskell	bob	1	done	2014-03-19 17:06:06	2014-03-19 00:16:13	2014-03-19 17:06:06	ebf635f2e275017f1487d80b	t
245	9	ruby	nucleotide-count	8	done	2014-03-08 21:38:29	2013-10-30 02:46:44	2014-03-08 21:38:29	a82b86355265fdd8e6695734	t
246	9	elixir	nucleotide-count	2	done	2014-03-07 03:25:16	2013-11-04 21:15:40	2014-03-07 03:25:16	2b798fcaa5edc2d5f0e358e3	t
247	9	ruby	word-count	7	done	2014-03-18 23:15:04	2013-11-22 10:48:13	2014-03-18 23:15:04	63f97597d265700d1ee8616d	t
248	9	clojure	rna-transcription	1	pending	\N	2014-02-01 10:38:53	2014-02-01 10:38:53	cd1284c89521e647f1ad2b48	t
249	9	haskell	etl	1	done	2014-01-17 00:56:11	2013-11-23 16:41:28	2014-01-17 00:56:11	fdefa8bb2c7562eff3c5ee0e	t
250	9	elixir	word-count	4	done	2014-01-17 11:56:52	2013-11-15 12:27:38	2014-01-17 11:56:52	9038c6bf97df64f39081e5ab	t
251	9	javascript	word-count	1	hibernating	\N	2013-11-25 20:52:09	2013-12-01 12:26:06	d7bc5da7e5ba331bf60d46fa	f
252	9	go	etl	2	hibernating	\N	2013-11-24 04:38:09	2014-01-05 02:14:52	1405cf66aee86ee4aca0cc1c	t
253	9	clojure	bob	6	done	2014-02-17 05:37:40	2013-11-01 05:56:01	2014-02-17 05:37:40	46e1ecf31fe0d146f40412e4	t
254	9	ruby	bob	4	hibernating	\N	2013-11-14 13:54:06	2014-01-21 05:04:18	a3f079bb323e847248d3f609	f
255	9	ruby	grade-school	1	done	2014-01-24 20:25:36	2013-11-03 05:56:48	2014-01-24 20:25:36	492c312dbd93b5ac85b316e5	t
256	9	go	leap	2	done	2014-03-10 08:42:09	2013-12-03 11:54:18	2014-03-10 08:42:09	8b46f00425b6a4d55b8ece15	t
257	9	haskell	word-count	1	done	2013-12-30 14:58:51	2013-11-19 06:29:16	2013-12-30 14:58:51	de9efe7de5ba12a0efdd8b82	t
258	9	ruby	house	1	done	2014-02-01 13:51:00	2013-12-26 17:41:26	2014-02-01 13:51:00	464bfd71ce7b62bfce2fd64a	t
259	10	elixir	space-age	2	done	2014-01-20 10:46:27	2013-09-15 06:11:06	2014-01-20 10:46:27	be0459aa662becb011ce9b49	t
260	10	elixir	beer-song	4	done	2014-03-01 11:09:55	2013-11-16 23:01:26	2014-03-01 11:09:55	881b493cb8e8681edc2ad706	t
261	10	haskell	triangle	1	done	2013-11-20 10:22:53	2013-11-17 16:00:56	2013-11-20 10:22:53	1ea53bf971dcbddfc9a0d6ac	t
262	10	haskell	bob	1	done	2014-03-02 12:30:19	2013-11-12 18:25:47	2014-03-02 12:30:19	febbbd1076c5f4fa77af1b98	t
263	10	ruby	hamming	4	done	2014-03-11 03:41:13	2013-10-16 05:17:43	2014-03-11 03:41:13	cdfdc6827055bc32037b02e4	t
264	10	ruby	space-age	3	done	2014-03-07 14:40:44	2013-09-13 07:54:40	2014-03-07 14:40:44	d20a26041b40ee025391daca	t
265	10	clojure	bob	3	done	2014-02-01 05:10:09	2013-09-18 08:13:46	2014-02-01 05:10:09	70505c21e59b022857f4bb5a	t
266	10	ruby	robot-name	2	pending	\N	2013-11-25 13:26:59	2013-11-25 13:26:59	a1e7276138cde5eeb832d5ad	t
267	10	go	hamming	1	done	2013-12-12 06:22:13	2013-11-13 08:36:57	2013-12-12 06:22:13	df57f1cfb537eb4e5867180a	t
268	10	javascript	bob	3	done	2014-02-06 14:47:52	2013-09-28 17:39:01	2014-02-06 14:47:52	7ae7e6779988029961416c49	t
269	10	ruby	meetup	1	done	2014-03-07 01:10:38	2013-10-13 00:21:42	2014-03-07 01:10:38	495852b3e44db0d1c360a5f4	t
270	10	scala	hamming	1	done	2014-02-25 08:42:11	2014-02-19 10:47:23	2014-02-25 08:42:11	d894aee7148cacc05d123ff7	t
271	10	ruby	anagram	7	done	2014-02-27 17:44:10	2013-09-11 05:35:24	2014-02-27 17:44:10	62aa7ebf1e7a561834403224	t
272	10	elixir	strain	1	done	2014-02-25 19:25:19	2013-10-09 05:48:09	2014-02-25 19:25:19	b22c5b81f6c6c9d6e9249590	t
273	10	ruby	rna-transcription	1	done	2014-02-13 00:34:41	2013-12-06 14:09:50	2014-02-13 00:34:41	89b79bc9f4225ee12eab71a2	t
274	10	clojure	allergies	1	pending	\N	2013-10-19 21:41:51	2013-10-19 21:41:51	2f49f45075ea99e932bb75c9	f
275	10	javascript	word-count	3	done	2014-03-19 05:14:01	2013-09-08 07:13:58	2014-03-19 05:14:01	44793466fad41af051ee5c20	t
276	10	clojure	space-age	2	done	2014-02-17 09:00:46	2013-10-13 07:04:38	2014-02-17 09:00:46	4b1379d0c4bdaa9be0917fb2	t
277	10	ruby	leap	1	done	2014-02-01 11:18:37	2014-01-11 13:44:08	2014-02-01 11:18:37	b1acfde94d28bcc8a69dbad7	t
278	11	elixir	anagram	2	done	2014-03-19 01:12:36	2014-02-23 16:40:31	2014-03-19 01:12:36	5e733c4dafe6d5ea5043e1ba	t
279	11	haskell	raindrops	2	done	2014-03-04 10:49:11	2014-01-31 17:14:15	2014-03-04 10:49:11	2170168daa543a5a79642fbd	t
280	11	ruby	nucleotide-count	2	done	2014-03-02 06:46:19	2014-02-23 20:17:27	2014-03-02 06:46:19	bd912b017ee117bc98bd0b79	t
281	11	clojure	bob	3	done	2014-03-20 19:14:49	2014-02-06 12:40:19	2014-03-20 19:14:49	64e1bdc1134c8451c03c2240	t
282	11	haskell	grains	1	done	2014-02-21 07:59:50	2014-02-16 07:39:15	2014-02-21 07:59:50	d967dddb3404398dc71b0498	t
283	11	ruby	word-count	4	hibernating	\N	2014-02-05 17:39:12	2014-02-25 07:08:31	c6c544c0608a5014fabe38b2	f
284	11	ruby	leap	1	done	2014-03-07 21:56:34	2014-03-06 05:38:50	2014-03-07 21:56:34	c6f5283357784264c741a12d	t
285	11	ruby	anagram	1	pending	\N	2014-02-14 00:56:38	2014-02-14 00:56:38	c3eaf31effd2a81b3dff820b	t
286	11	ruby	triangle	1	done	2014-02-07 14:26:54	2014-01-31 03:27:46	2014-02-07 14:26:54	c7130ccc4e5cb8a3518dd68a	t
287	11	javascript	bob	2	done	2014-03-20 05:20:52	2014-02-28 14:57:52	2014-03-20 05:20:52	04c6c02f350ce99301cbb472	t
288	11	haskell	anagram	1	done	2014-03-06 12:31:20	2014-02-23 04:59:59	2014-03-06 12:31:20	8e41adf779242e8dfaec742b	t
289	11	ruby	bob	1	done	2014-03-12 22:40:27	2014-03-03 11:01:43	2014-03-12 22:40:27	abe342e105ad6d994a1be497	t
290	11	go	anagram	2	pending	\N	2014-02-11 05:19:24	2014-02-11 05:19:24	ec0e722d9a2ba3a2f4a2701e	f
291	11	haskell	beer-song	2	done	2014-03-13 17:40:07	2014-02-22 02:49:01	2014-03-13 17:40:07	fa2b5cb0080c0e22edfb139c	t
292	11	haskell	word-count	1	done	2014-02-13 15:14:59	2014-02-10 17:59:35	2014-02-13 15:14:59	86256556b043be71c3dcc9b3	t
293	11	javascript	word-count	2	done	2014-03-06 09:03:35	2014-02-21 13:48:56	2014-03-06 09:03:35	e377ae5fdee4cfa4a0c859ec	t
294	12	python	bob	2	done	2014-01-19 23:57:50	2013-10-23 04:25:58	2014-01-19 23:57:50	8e505105aa75b625b17565c8	t
295	12	haskell	gigasecond	1	done	2013-12-01 17:07:27	2013-11-13 08:04:36	2013-12-01 17:07:27	785d0654ea5f3ed701d63f52	t
296	12	ruby	bob	3	done	2014-03-20 08:11:59	2013-11-12 00:04:41	2014-03-20 08:11:59	1eafb9f4689948802dfe629f	t
297	12	python	beer-song	1	pending	\N	2013-10-14 07:16:23	2013-10-14 07:16:23	d4238578973b936b30b5f00d	f
298	12	ruby	raindrops	1	pending	\N	2013-10-27 22:00:47	2013-10-27 22:00:47	7730a9d481acfc374e974fad	f
299	12	ruby	rna-transcription	2	done	2014-02-12 20:27:46	2013-10-06 14:54:25	2014-02-12 20:27:46	6f11ea7e2bd1c7889ed2f238	t
300	12	objective-c	bob	1	pending	\N	2013-11-05 17:05:47	2013-11-05 17:05:47	4e4f915cd4a573e300e12f2b	f
301	12	javascript	word-count	2	done	2014-02-27 12:27:53	2013-10-08 13:56:37	2014-02-27 12:27:53	35ad683f112b59c21645dfff	t
302	12	python	space-age	1	pending	\N	2013-10-26 09:00:19	2013-10-26 09:00:19	07241a5ed5c4059d85271351	t
303	12	javascript	saddle-points	1	done	2014-02-25 09:45:54	2013-12-23 07:51:37	2014-02-25 09:45:54	33bbb97f476646b342add9a6	t
304	12	haskell	accumulate	1	done	2013-11-28 11:06:40	2013-10-13 23:00:27	2013-11-28 11:06:40	2b45e63a555d992585ee9c0a	t
305	12	javascript	bob	9	done	2014-03-06 19:12:41	2013-10-21 21:22:20	2014-03-06 19:12:41	6e179d36b621aec6b39388f3	t
306	12	haskell	hexadecimal	1	done	2013-12-17 18:35:04	2013-11-12 17:49:56	2013-12-17 18:35:04	9241482c17f5f88890015ff8	t
307	12	go	leap	5	pending	\N	2013-10-04 18:55:02	2013-10-04 18:55:02	ee641ea8cc761aad6016ad07	t
308	13	python	beer-song	1	done	2014-02-25 23:29:45	2014-02-11 15:45:45	2014-02-25 23:29:45	0ee07f594c36c33ea245d90e	t
309	13	javascript	bob	1	hibernating	\N	2013-11-10 20:57:02	2014-03-01 12:57:07	e4b3c28cbeb3aab2338f7681	t
310	13	clojure	word-count	3	done	2014-01-30 20:52:15	2013-09-30 18:16:32	2014-01-30 20:52:15	3ecad508f8a93fc86d4f95e9	t
311	13	ruby	nucleotide-count	3	hibernating	\N	2013-12-10 08:25:52	2014-03-11 07:39:37	7a258a1acd645289058c44be	f
312	13	objective-c	bob	2	done	2014-03-18 08:41:56	2013-12-12 23:51:31	2014-03-18 08:41:56	b38093e6530a13e591752c54	t
313	13	scala	grains	1	done	2013-11-09 19:53:34	2013-09-25 03:11:33	2013-11-09 19:53:34	dff85297a9df11c338a622af	t
314	13	python	rna-transcription	1	pending	\N	2013-11-22 13:37:41	2013-11-22 13:37:41	1b87299daef5a39e7a45375c	f
315	13	ruby	house	2	done	2014-02-14 17:45:35	2013-11-26 03:51:11	2014-02-14 17:45:35	16e15f43e331be017e4a7cd9	t
316	13	ruby	anagram	2	done	2014-02-09 03:40:27	2013-09-22 06:37:41	2014-02-09 03:40:27	f11ac9713784af966e9cc6b2	t
317	13	ruby	bob	3	hibernating	\N	2013-10-25 22:01:57	2013-12-21 22:49:19	ad8e84580fcc1e1d8c23fadc	f
318	13	ruby	point-mutations	2	done	2013-12-10 18:34:53	2013-09-13 06:13:07	2013-12-10 18:34:53	7a4d50c189cc99ef786d4186	t
319	13	javascript	word-count	4	done	2014-02-27 13:39:23	2013-09-21 22:28:33	2014-02-27 13:39:23	40fde0a8a98c585d9a26ec7b	t
320	13	haskell	robot-name	3	done	2013-12-26 09:54:46	2013-11-03 09:22:02	2013-12-26 09:54:46	50a1012c1d4f8e09e8cee3e1	t
321	13	elixir	bob	1	done	2013-10-29 15:33:47	2013-09-13 13:43:04	2013-10-29 15:33:47	420a7de65d07718aa713d2d9	t
322	13	ruby	leap	1	done	2014-01-30 19:48:05	2013-12-31 16:23:20	2014-01-30 19:48:05	6f15bdc806dbdc12571a82b1	t
323	13	go	etl	5	done	2014-03-20 04:10:07	2013-09-23 11:11:49	2014-03-20 04:10:07	bfc4541f4444557d3ce8f857	t
324	13	clojure	bob	9	done	2014-03-09 12:45:24	2013-09-20 16:27:48	2014-03-09 12:45:24	321b3ef2a38475c88a7c8485	t
325	14	haskell	grade-school	4	done	2014-03-14 12:45:25	2013-08-17 00:06:26	2014-03-14 12:45:25	eaaed8ca76d5471d75583339	t
326	14	clojure	rna-transcription	3	done	2014-03-14 11:20:39	2013-10-10 17:35:10	2014-03-14 11:20:39	76e6d5857f24e68f4387ca48	t
327	14	ruby	bob	1	done	2013-11-23 00:07:11	2013-08-09 04:48:44	2013-11-23 00:07:11	5eac0a4de12fdb8c517d51f0	t
328	14	javascript	word-count	3	hibernating	\N	2013-09-27 18:07:56	2014-01-31 22:51:03	9e24403c19a03fa44f94bfa9	f
329	14	ruby	word-count	2	done	2014-02-25 08:15:34	2013-12-06 08:15:29	2014-02-25 08:15:34	9ac0d09ff0121b54b1e261cb	t
330	14	go	hamming	1	pending	\N	2013-11-12 14:29:53	2013-11-12 14:29:53	66dd12c1cc13f8ca0e980d3b	f
331	14	ruby	nucleotide-count	1	done	2014-03-17 08:32:56	2013-12-09 00:23:52	2014-03-17 08:32:56	dde39dc51319609f7e0090ab	t
332	14	haskell	etl	1	done	2014-03-16 16:01:39	2013-09-10 05:53:04	2014-03-16 16:01:39	f2d96eaa3b16e6438f0b6500	t
333	14	clojure	point-mutations	2	pending	\N	2013-11-10 18:53:55	2013-11-10 18:53:55	9af740d97f729c6882f07ba9	t
334	14	ruby	binary-search	1	pending	\N	2013-08-20 16:52:12	2013-08-20 16:52:12	782798cd2066706be210e4a4	t
335	14	ruby	leap	2	done	2014-01-11 13:10:40	2013-08-24 08:27:11	2014-01-11 13:10:40	c3ede108de3c825675bda2e2	t
336	14	javascript	bob	1	done	2013-12-31 04:38:07	2013-08-26 09:50:20	2013-12-31 04:38:07	6f32c2518fe2baa36f575432	t
337	14	clojure	bob	1	hibernating	\N	2013-11-15 05:43:00	2013-12-19 19:41:26	363c26a08b4bcf1afc14b20a	f
338	15	javascript	rna-transcription	1	done	2014-03-11 04:18:26	2013-12-28 04:14:09	2014-03-11 04:18:26	d33fdb97853928fd23c8c9fb	t
339	15	haskell	gigasecond	1	done	2014-02-12 12:14:56	2013-12-28 21:56:47	2014-02-12 12:14:56	494e8c6b4f4f8430eff0b4a2	t
340	15	haskell	anagram	1	done	2014-01-13 00:28:59	2014-01-11 06:34:41	2014-01-13 00:28:59	c3252ce47ffa3a3ccad00073	t
341	15	ruby	leap	1	done	2014-02-16 19:06:51	2014-01-04 18:37:46	2014-02-16 19:06:51	53fe6bafe286e3f4370dbfff	t
342	15	ruby	grains	2	pending	\N	2014-01-06 14:31:38	2014-01-06 14:31:38	901c09c0e80270d06988f627	f
343	15	ruby	rna-transcription	5	done	2014-03-08 09:26:38	2013-12-05 22:51:58	2014-03-08 09:26:38	2acc6211552867b2e14c17ad	t
344	15	haskell	beer-song	1	done	2013-12-25 02:09:38	2013-12-08 07:28:50	2013-12-25 02:09:38	6e9e1f346f981cba29b3e343	t
345	15	go	etl	3	done	2014-03-19 15:32:50	2013-12-17 12:26:33	2014-03-19 15:32:50	8cfd06e4232ade1044fe87d4	t
346	15	haskell	nucleotide-count	2	done	2014-02-21 10:22:46	2014-01-02 06:45:32	2014-02-21 10:22:46	226252b1166b1ce711ecee50	t
347	15	python	word-count	2	done	2014-02-24 12:48:29	2014-01-04 01:46:16	2014-02-24 12:48:29	c601ffb7e3a82652f449357b	t
348	15	clojure	bob	3	done	2014-03-10 10:54:50	2013-12-19 12:24:40	2014-03-10 10:54:50	553f0b23169baf091cea91c2	t
349	15	javascript	word-count	2	hibernating	\N	2013-12-11 16:26:17	2014-02-12 08:15:25	9ee4da77b30d677937f948ff	f
350	15	elixir	scrabble-score	3	done	2014-03-15 05:34:58	2013-12-09 12:22:50	2014-03-15 05:34:58	fb609bdc56df6cd3fcc83c1f	t
351	15	haskell	word-count	3	done	2014-02-10 13:31:11	2013-12-19 01:21:24	2014-02-10 13:31:11	652af0df18db172d7534eb59	t
352	15	javascript	beer-song	2	done	2014-02-24 11:28:28	2013-12-13 03:52:08	2014-02-24 11:28:28	6e7e95e91664d65b75b036f3	t
353	15	ruby	anagram	8	done	2014-03-06 02:50:55	2013-12-09 11:02:30	2014-03-06 02:50:55	d876aeb558c94058d3f9039a	t
354	15	coffeescript	bob	2	done	2014-03-19 05:12:42	2014-01-28 23:23:26	2014-03-19 05:12:42	349958cf7a5cca5dae59322c	t
355	16	clojure	word-count	3	done	2014-02-06 11:54:38	2013-12-08 08:53:39	2014-02-06 11:54:38	ecde370de20ace73779b9d99	t
356	16	haskell	prime-factors	1	done	2013-12-30 11:15:09	2013-12-09 06:11:57	2013-12-30 11:15:09	857b4ad765cb9ee56af1ba6a	t
357	16	python	leap	1	done	2014-01-31 18:55:47	2013-12-08 02:40:02	2014-01-31 18:55:47	4c655c9406f487df25283238	t
358	16	ruby	hamming	2	done	2014-02-17 04:23:14	2013-12-14 13:36:46	2014-02-17 04:23:14	428fe8f4a779c40278a765df	t
359	16	ruby	meetup	7	done	2014-03-06 04:45:55	2013-12-03 23:34:20	2014-03-06 04:45:55	3281737679ed69123ca5abc3	t
360	16	ruby	word-count	2	done	2014-02-24 13:05:19	2013-11-26 21:13:44	2014-02-24 13:05:19	f5d8c670b5e27bc15c699922	t
361	16	javascript	beer-song	1	pending	\N	2013-12-01 19:42:57	2013-12-01 19:42:57	90707d67951940f529d1e9b3	f
362	16	ruby	point-mutations	1	hibernating	\N	2014-02-01 08:27:20	2014-02-16 15:01:33	27fba17e5e34e7d4768ed048	f
363	16	haskell	meetup	2	done	2014-03-14 09:09:46	2013-11-29 08:02:15	2014-03-14 09:09:46	d1a8237a26b1ada1658aec78	t
364	16	ruby	space-age	2	pending	\N	2013-12-20 03:52:45	2013-12-20 03:52:45	9aad89d8f9a2d1dcdeabc24f	t
365	16	ruby	nucleotide-count	2	done	2014-02-10 22:14:25	2014-01-06 03:03:10	2014-02-10 22:14:25	19e1e170970b3045a84f42fb	t
366	16	ruby	etl	1	pending	\N	2013-12-15 17:47:04	2013-12-15 17:47:04	92b177a1e10b1d3821db61bd	f
367	16	ruby	bob	5	done	2014-03-08 10:27:05	2014-01-05 09:12:53	2014-03-08 10:27:05	ad47b0ad1ec3fa41cf9ded98	t
368	16	haskell	word-count	2	hibernating	\N	2014-01-07 00:43:23	2014-03-09 04:51:29	330c4ecdfbc7515952c5e65b	f
369	16	scala	bob	1	pending	\N	2014-01-19 20:29:01	2014-01-19 20:29:01	543b05523f67f8f21f413582	f
370	16	haskell	beer-song	2	done	2014-01-28 14:13:04	2014-01-04 07:46:08	2014-01-28 14:13:04	f6bf4f58b4d85570e86086fd	t
371	16	ruby	crypto-square	1	done	2014-01-13 19:38:12	2013-11-27 21:01:11	2014-01-13 19:38:12	b9f5f7b18094b26991f8ff96	t
372	17	ruby	word-count	9	done	2014-02-11 18:18:03	2013-10-14 15:26:45	2014-02-11 18:18:03	133912ca30b797c6c63a7feb	t
373	17	ruby	hamming	1	pending	\N	2013-11-12 10:14:37	2013-11-12 10:14:37	3c979b6194be0e152532ba04	f
374	17	ruby	leap	1	pending	\N	2014-01-28 21:04:42	2014-01-28 21:04:42	029a5f2432fef130e52d6759	t
375	17	elixir	word-count	1	done	2014-03-08 19:51:21	2013-11-10 07:05:16	2014-03-08 19:51:21	0a54db6f75e3c1ad50b99605	t
376	17	clojure	beer-song	3	done	2014-01-23 10:26:12	2013-11-23 23:57:27	2014-01-23 10:26:12	2caa4501b9ffe1a80b1df5c5	t
377	17	ruby	anagram	6	done	2014-03-10 21:55:50	2013-11-29 10:23:00	2014-03-10 21:55:50	f11b4c9747a154dd66268064	t
378	17	clojure	rna-transcription	3	done	2014-02-10 19:12:30	2013-10-25 11:16:52	2014-02-10 19:12:30	1acaaf702cd1863e2cc8f90e	t
379	17	ruby	bob	1	done	2014-01-30 11:57:10	2014-01-16 04:00:31	2014-01-30 11:57:10	98d6be48137596131880eed5	t
380	17	javascript	wordy	1	done	2014-03-13 07:39:38	2013-12-06 10:39:51	2014-03-13 07:39:38	cb3e2cc51909bb61fc1a37b8	t
381	17	haskell	beer-song	1	done	2014-01-10 03:55:10	2013-11-12 05:55:22	2014-01-10 03:55:10	51ea42e9802ae1b31993388d	t
382	17	clojure	bob	4	done	2014-03-16 19:08:44	2013-11-11 09:30:16	2014-03-16 19:08:44	722f1cf5cf00b85901a1a523	t
383	17	ruby	raindrops	1	pending	\N	2013-12-12 14:21:47	2013-12-12 14:21:47	d54e2bd4cff6bf650c2f2f13	f
384	17	python	bob	1	done	2014-01-21 12:25:06	2013-12-16 13:30:22	2014-01-21 12:25:06	b71243771b20e360f659a58c	t
385	17	elixir	prime-factors	1	done	2014-02-03 14:13:00	2014-01-12 07:40:49	2014-02-03 14:13:00	fa78058750bb247e7f6ad91e	t
386	17	haskell	bob	1	done	2014-03-06 16:31:53	2014-03-05 10:24:57	2014-03-06 16:31:53	903b315eb2deaac05e47ed44	t
387	22	javascript	nucleotide-count	1	done	2014-01-03 19:56:17	2013-09-14 09:17:48	2014-01-03 19:56:17	78692c34fa6aab5fe9fe0df4	t
388	22	python	bob	2	done	2013-11-28 07:42:34	2013-07-22 23:08:24	2013-11-28 07:42:34	a9fd396cf7680a60f2067b94	t
389	22	ruby	word-count	1	done	2014-01-09 14:19:48	2013-11-01 04:04:43	2014-01-09 14:19:48	733b18cfd625dcb07f86c8cf	t
390	22	python	word-count	1	hibernating	\N	2013-07-31 18:33:12	2014-01-01 03:01:28	06e0ba9b7c1b154672335437	f
391	22	javascript	bob	1	done	2014-03-11 07:04:59	2013-10-17 21:28:27	2014-03-11 07:04:59	58a6e41af813090588e78b24	t
392	22	ruby	point-mutations	1	done	2014-02-10 11:15:58	2014-01-26 14:33:46	2014-02-10 11:15:58	6dc4440bcbcac88fcd1a0b13	t
393	22	ruby	scrabble-score	1	done	2014-03-17 23:16:08	2013-12-22 19:44:52	2014-03-17 23:16:08	ace939f3ab74e391e7bb043c	t
394	22	ruby	anagram	3	done	2014-02-02 21:00:11	2013-09-04 00:28:36	2014-02-02 21:00:11	d482be097194e7de7ec4b1ed	t
395	22	ruby	luhn	1	done	2013-10-20 20:59:04	2013-10-15 08:31:49	2013-10-20 20:59:04	2de79dc4ed5203c44ff62267	t
396	22	haskell	binary-search-tree	4	done	2013-11-25 05:33:47	2013-08-19 02:05:49	2013-11-25 05:33:47	a24fba21dcede258677cc159	t
397	22	clojure	robot-name	3	pending	\N	2013-09-27 10:45:18	2013-09-27 10:45:18	f2e50930fa58da982cbf8235	t
398	22	ruby	etl	3	done	2014-02-06 00:37:49	2013-11-05 17:59:33	2014-02-06 00:37:49	0db0634f5445687483afca02	t
399	22	javascript	beer-song	3	done	2014-02-26 14:31:04	2013-08-18 13:13:15	2014-02-26 14:31:04	e9a6ad6ae4f8a7d1f5b3850f	t
400	22	javascript	grains	1	pending	\N	2013-12-04 05:09:08	2013-12-04 05:09:08	1aacc85354a294478134bb02	f
401	27	coffeescript	trinary	1	pending	\N	2013-09-29 08:49:41	2013-09-29 08:49:41	97eb943058710f36d24d8619	t
402	27	haskell	bob	1	done	2014-02-26 23:36:55	2013-11-03 19:16:27	2014-02-26 23:36:55	74ff2106fc8efd8d49b3dc4f	t
403	27	clojure	meetup	3	pending	\N	2013-08-23 04:30:18	2013-08-23 04:30:18	66ebe0334425094b9d212a79	t
404	27	python	bob	4	done	2014-02-28 23:20:09	2013-08-17 21:58:49	2014-02-28 23:20:09	ef12560c5431d864a61e02e4	t
405	27	ruby	point-mutations	3	done	2014-02-20 07:15:51	2013-08-23 16:16:39	2014-02-20 07:15:51	6c69bb216fda833cef20ceaa	t
406	27	elixir	phone-number	1	done	2013-11-04 16:36:39	2013-08-15 17:32:10	2013-11-04 16:36:39	0074483c2c2c1581fbbf26a7	t
407	27	elixir	gigasecond	1	done	2014-02-14 05:37:59	2013-11-19 07:03:32	2014-02-14 05:37:59	f2f0192b2c94d32ef8c36466	t
408	27	python	rna-transcription	1	done	2014-01-21 08:41:42	2014-01-20 06:54:54	2014-01-21 08:41:42	e5751f8152baceedd67d4e6c	t
409	27	ruby	bob	3	done	2014-03-13 12:45:23	2013-08-05 15:25:21	2014-03-13 12:45:23	4373a6afbe0aabc99adbd0ae	t
410	27	elixir	word-count	8	done	2014-03-07 00:45:34	2013-09-08 13:52:39	2014-03-07 00:45:34	11e64a7d291408a453e9d37b	t
411	27	javascript	word-count	2	done	2014-01-18 06:38:32	2014-01-09 17:35:43	2014-01-18 06:38:32	6ab6a79c990285e589c05c22	t
412	27	ruby	prime-factors	1	done	2013-12-23 13:26:47	2013-09-18 04:30:46	2013-12-23 13:26:47	c9daa9049cd1ade1fde5153f	t
413	27	go	etl	3	done	2014-02-28 12:31:26	2013-08-06 09:29:11	2014-02-28 12:31:26	cc536368a464601c62028a59	t
414	27	ruby	word-count	2	hibernating	\N	2013-12-17 23:46:34	2014-01-31 11:51:51	b321b3decf1acd0d2ef4de9a	f
415	28	ruby	bob	5	hibernating	\N	2013-08-19 11:18:23	2014-03-14 00:24:25	d843f763d375cb5caa90b3a9	f
416	28	javascript	beer-song	5	done	2014-01-22 20:27:04	2013-10-03 06:27:24	2014-01-22 20:27:04	88159f396c7f311f945bbd90	t
417	28	haskell	gigasecond	1	done	2014-01-22 21:37:12	2013-11-08 01:38:03	2014-01-22 21:37:12	6943dbefb14f7ca0fba8ae4e	t
418	28	clojure	phone-number	2	done	2014-03-12 19:06:49	2013-12-26 08:20:32	2014-03-12 19:06:49	0cdfd2f118868088f4dd4ec4	t
419	28	ruby	word-count	4	done	2014-02-06 10:33:06	2013-09-18 09:04:23	2014-02-06 10:33:06	5553e243e6b52f5991b79529	t
420	28	ruby	raindrops	1	pending	\N	2013-12-12 21:41:01	2013-12-12 21:41:01	758436314ccbcd9e37be521a	t
421	28	python	anagram	1	done	2013-12-11 20:51:52	2013-11-16 22:08:06	2013-12-11 20:51:52	986a06297d1f764e06aa1f84	t
422	28	haskell	bob	1	done	2013-12-04 19:43:27	2013-10-09 05:17:59	2013-12-04 19:43:27	54e197873ea7efc0213dddf8	t
423	28	ruby	hamming	1	done	2014-02-17 21:09:47	2013-09-06 02:05:14	2014-02-17 21:09:47	fb5cdac6b95359ec554a4728	t
424	28	clojure	robot-name	2	done	2014-03-19 14:24:50	2013-09-12 20:24:54	2014-03-19 14:24:50	90507971127c7da063f9df89	t
425	28	haskell	point-mutations	2	done	2014-01-23 11:15:48	2013-08-27 11:09:35	2014-01-23 11:15:48	045f940a96d417783cb60518	t
426	28	ruby	anagram	4	done	2014-03-14 17:20:32	2013-08-13 18:01:19	2014-03-14 17:20:32	3e24c83f22e452853f35cd68	t
427	28	go	binary	1	done	2013-10-30 21:48:23	2013-09-24 00:06:16	2013-10-30 21:48:23	001d9f5d29ee9d6c01457bf3	t
428	28	python	rna-transcription	2	done	2013-11-12 12:38:03	2013-09-19 15:23:39	2013-11-12 12:38:03	0dd3e7e8efec5cc89745f947	t
429	28	python	bob	1	done	2013-08-31 10:00:36	2013-08-06 18:23:27	2013-08-31 10:00:36	f0a27f7bb52c8de7a151b4f3	t
430	29	ruby	rna-transcription	1	done	2014-03-17 19:36:30	2013-09-20 00:27:18	2014-03-17 19:36:30	eb4663f8e200313e4dd97862	t
431	29	ruby	bob	2	done	2014-03-06 01:14:33	2013-10-01 21:32:12	2014-03-06 01:14:33	c32cc939cfe3530c3de6991d	t
432	29	ruby	triangle	1	done	2014-02-15 20:28:47	2014-02-08 21:25:10	2014-02-15 20:28:47	10743f1dd1386331845343d5	t
433	29	ruby	nth-prime	1	done	2013-12-03 13:47:26	2013-09-09 03:52:26	2013-12-03 13:47:26	fe1276ed1303104174420334	t
434	29	javascript	anagram	1	pending	\N	2013-08-22 19:53:24	2013-08-22 19:53:24	89f2c82d6175625ce00f9401	t
435	29	ruby	raindrops	1	done	2013-09-16 11:22:11	2013-08-20 20:00:41	2013-09-16 11:22:11	e211efa0da33bc2e372be88e	t
436	29	clojure	anagram	3	done	2013-12-31 05:11:15	2013-08-01 00:47:39	2013-12-31 05:11:15	b9a920ee9bc2b55f86ca8e87	t
437	29	ruby	word-count	4	done	2014-03-19 03:08:20	2013-08-06 16:27:27	2014-03-19 03:08:20	7cbf9d87cc5828dac95b83b8	t
438	29	clojure	phone-number	5	done	2014-02-05 05:33:02	2013-08-24 22:13:42	2014-02-05 05:33:02	35f6c007bfbfbda78491fed5	t
439	29	python	rna-transcription	2	done	2014-02-23 18:27:03	2013-08-26 14:15:40	2014-02-23 18:27:03	985291dbcef8e2e603a4f0d7	t
440	29	ruby	grade-school	1	hibernating	\N	2013-10-14 15:50:06	2014-01-08 08:00:43	cd65c6b5feae294227d275cd	f
441	29	elixir	bob	2	hibernating	\N	2013-07-15 14:20:53	2014-02-05 07:32:41	3df09cba9b032bdadad09f27	f
442	29	python	word-count	2	hibernating	\N	2013-07-19 03:44:14	2013-12-12 01:31:13	9b9cea87b12c7b4f15062d17	f
443	29	haskell	word-count	4	done	2014-02-11 21:45:22	2013-07-29 17:53:19	2014-02-11 21:45:22	d99de16441056748bd04bb5a	t
444	29	haskell	roman-numerals	1	done	2014-03-05 04:20:14	2013-07-28 03:35:42	2014-03-05 04:20:14	63ae091e390226bcb4e93d30	t
445	29	perl5	bob	1	done	2014-03-13 18:05:38	2013-11-05 17:08:06	2014-03-13 18:05:38	720be4026a2c1388b933595c	t
446	29	javascript	robot-name	1	pending	\N	2014-01-06 19:23:37	2014-01-06 19:23:37	359282313d48a3c680492e6e	f
447	29	ruby	hamming	1	done	2014-03-15 06:11:18	2014-01-08 01:42:33	2014-03-15 06:11:18	d8065b5492244c3cfb8f4e57	t
448	30	haskell	word-count	3	done	2014-02-27 09:07:48	2014-02-10 20:30:27	2014-02-27 09:07:48	99292a13a77f11a698931efb	t
449	30	ruby	word-count	1	hibernating	\N	2014-03-15 20:17:27	2014-03-19 21:55:05	58db74ca6442ca57b07d1805	f
450	30	ruby	bob	6	done	2014-03-11 11:11:38	2014-02-07 05:41:01	2014-03-11 11:11:38	3ffa86ab1c0c46f19d432fc2	t
451	30	perl5	bob	4	hibernating	\N	2014-02-13 18:01:40	2014-03-17 16:14:15	c5575f6bcd603371da66a2c8	f
452	30	ruby	grade-school	1	done	2014-03-08 16:24:34	2014-02-19 23:23:15	2014-03-08 16:24:34	555523a490c5fad8646f4116	t
453	30	javascript	grains	3	pending	\N	2014-02-14 22:37:07	2014-02-14 22:37:07	9779b60e46b7ef948c706180	t
454	30	clojure	word-count	4	hibernating	\N	2014-02-07 18:18:38	2014-03-19 12:43:49	6f1610177bec4bc93e1d72ba	f
455	30	ruby	anagram	2	done	2014-03-10 06:40:18	2014-02-07 17:38:30	2014-03-10 06:40:18	08ed8a686806b0b36bc80b4a	t
456	30	python	rna-transcription	1	pending	\N	2014-02-15 00:46:54	2014-02-15 00:46:54	d96e22f867853ed4fc6b8f62	f
457	30	ruby	hamming	1	done	2014-02-22 18:41:04	2014-02-18 15:58:37	2014-02-22 18:41:04	f4feee40099407e3afd8a0a9	t
458	30	elixir	word-count	5	done	2014-03-06 00:07:25	2014-02-06 19:42:39	2014-03-06 00:07:25	111318eb3447d159b810ce12	t
459	30	ruby	atbash-cipher	1	done	2014-02-27 05:20:24	2014-02-16 19:38:24	2014-02-27 05:20:24	f6270e16c7e14dae51113b95	t
460	30	javascript	gigasecond	2	done	2014-03-15 13:20:25	2014-02-12 19:24:05	2014-03-15 13:20:25	a9cf8c91e7fd8940c50852f1	t
461	30	ruby	leap	1	pending	\N	2014-02-27 23:31:59	2014-02-27 23:31:59	6439ab22c47c65bc71f745d7	f
462	30	clojure	robot-name	3	done	2014-03-20 15:54:24	2014-02-19 08:53:21	2014-03-20 15:54:24	c66a06ef177269b108782ab0	t
463	30	ruby	scrabble-score	2	pending	\N	2014-02-20 01:00:44	2014-02-20 01:00:44	aa06558519b39a91c22b37fa	f
464	30	clojure	anagram	2	done	2014-03-04 22:27:22	2014-02-21 06:12:15	2014-03-04 22:27:22	6d56811d357455c0abdc510d	t
465	37	ruby	gigasecond	1	done	2014-02-22 23:38:02	2014-02-16 00:58:23	2014-02-22 23:38:02	7fbdeb95b960b61dc3275994	t
466	37	ruby	bob	3	done	2014-03-19 00:30:46	2014-02-17 12:52:25	2014-03-19 00:30:46	62a64d857dd0d58e7aec3e62	t
467	37	ruby	phone-number	6	done	2014-03-20 17:16:17	2014-02-15 08:07:10	2014-03-20 17:16:17	dd467f94940a7d7486bab986	t
468	37	elixir	sieve	2	done	2014-03-16 22:30:07	2014-03-02 23:09:02	2014-03-16 22:30:07	30facd3b6cbec92a5ae4bf9f	t
469	37	javascript	bob	4	done	2014-03-20 02:27:29	2014-03-11 11:45:44	2014-03-20 02:27:29	b51addd45394537f0daded34	t
470	37	haskell	rna-transcription	2	done	2014-03-10 02:23:56	2014-02-15 04:05:45	2014-03-10 02:23:56	da83b016df88172ba45aa723	t
471	37	elixir	nucleotide-count	2	done	2014-03-02 20:39:06	2014-02-21 22:48:36	2014-03-02 20:39:06	8e03a936201f3b7b5c387e07	t
472	37	haskell	word-count	3	done	2014-03-12 17:45:33	2014-02-16 17:12:46	2014-03-12 17:45:33	139ede73e72f98f4155f2cfa	t
473	37	javascript	word-count	5	done	2014-03-16 03:23:58	2014-02-14 06:46:49	2014-03-16 03:23:58	739b9421ca75510a3ae1968b	t
474	37	haskell	gigasecond	1	done	2014-03-15 03:03:38	2014-02-17 16:34:27	2014-03-15 03:03:38	6b194b48169e12a2568b329a	t
475	37	ruby	nucleotide-count	1	done	2014-03-20 01:05:08	2014-02-14 09:09:15	2014-03-20 01:05:08	f48cea29f9e69a856d30a15f	t
476	37	ruby	grade-school	1	done	2014-03-01 15:02:42	2014-02-21 00:52:12	2014-03-01 15:02:42	2c4242a5833c2fd7bcb69a35	t
477	37	haskell	binary	5	done	2014-03-20 02:14:31	2014-02-28 07:40:08	2014-03-20 02:14:31	417b5f0c2ca3373b32557973	t
478	37	haskell	point-mutations	3	done	2014-03-14 14:17:59	2014-02-16 14:55:43	2014-03-14 14:17:59	3d2e2311ea548a4e65289479	t
479	37	ruby	scrabble-score	1	hibernating	\N	2014-02-15 16:49:01	2014-03-15 05:51:21	c887464558755fcfbdc17790	f
480	41	ruby	word-count	3	done	2014-01-07 14:26:35	2013-10-15 12:23:25	2014-01-07 14:26:35	366717df73d228115cd86fee	t
481	41	clojure	rna-transcription	1	done	2014-02-25 21:47:52	2014-01-12 02:54:29	2014-02-25 21:47:52	7b8bd547ae56d97f95b388eb	t
482	41	javascript	bob	3	done	2014-02-16 23:45:34	2013-10-22 14:06:15	2014-02-16 23:45:34	ffc53970cb07a83b8f8c553a	t
483	41	python	bob	3	done	2014-02-26 12:20:49	2013-10-26 05:27:12	2014-02-26 12:20:49	cc4d7413696a829ef04bca10	t
484	41	clojure	nucleotide-count	3	done	2014-01-17 12:59:49	2013-11-24 11:55:22	2014-01-17 12:59:49	105a86dfb0db06bff49dba14	t
485	41	elixir	bob	2	done	2014-03-11 02:59:32	2013-10-29 22:04:56	2014-03-11 02:59:32	40a9936fdfff9d6ff76dad30	t
486	41	python	rna-transcription	1	done	2013-12-04 02:08:46	2013-11-12 10:45:15	2013-12-04 02:08:46	5c7284f16f647a9040ee14d5	t
487	41	ruby	grains	2	pending	\N	2013-10-31 22:33:53	2013-10-31 22:33:53	ab17607f185a5d7fcd5f364f	f
488	41	clojure	bob	1	hibernating	\N	2013-10-20 14:33:34	2014-02-19 15:42:32	e6bb00d10c753b03af0ed6ed	f
489	41	ruby	bob	11	done	2014-03-12 07:22:55	2013-10-19 23:42:38	2014-03-12 07:22:55	dbea1149fe7ec276d60d28b7	t
490	41	ruby	point-mutations	5	done	2014-03-11 13:48:26	2013-11-09 14:48:36	2014-03-11 13:48:26	018dbc3aec65593fe725abcd	t
491	41	python	word-count	1	done	2014-02-27 10:28:59	2013-10-24 20:37:34	2014-02-27 10:28:59	097319718800f6ce8d93fec6	t
492	41	ruby	leap	4	pending	\N	2013-11-11 07:56:36	2013-11-11 07:56:36	47ca91d74ef6700fcb88223b	f
493	41	javascript	word-count	3	done	2014-03-07 17:22:59	2013-11-30 18:47:42	2014-03-07 17:22:59	61c4eb5a25dbed564be245db	t
494	41	ruby	nucleotide-count	4	done	2014-03-14 09:10:26	2013-10-04 17:30:41	2014-03-14 09:10:26	6bc33cc1a6ffcd57965088e3	t
495	42	ruby	etl	2	done	2013-10-11 00:17:51	2013-09-12 00:41:05	2013-10-11 00:17:51	bde24357dd3ee3e48077cb70	t
496	42	ruby	phone-number	1	done	2013-12-30 18:56:26	2013-09-14 17:17:04	2013-12-30 18:56:26	29debf6f5f88b71fccb3bf5c	t
497	42	python	beer-song	1	done	2013-12-08 18:45:34	2013-11-12 16:43:00	2013-12-08 18:45:34	8606bae2873adccbbf88191b	t
498	42	javascript	phone-number	1	pending	\N	2014-03-01 04:45:11	2014-03-01 04:45:11	96ca19cf61b7c48841812fd5	f
499	42	elixir	word-count	5	done	2014-03-12 23:29:29	2013-10-21 11:23:58	2014-03-12 23:29:29	e5dacaf852b2f8911a536005	t
500	42	ruby	gigasecond	1	done	2013-11-17 13:18:08	2013-11-11 12:21:50	2013-11-17 13:18:08	1adf2b0bd194313d9590f104	t
501	42	python	phone-number	1	pending	\N	2013-11-23 06:06:44	2013-11-23 06:06:44	2858cc54a8bffa815206b166	t
502	42	javascript	bob	3	pending	\N	2013-11-06 01:20:29	2013-11-06 01:20:29	eff95330cd2397652c1defff	t
503	42	ruby	word-count	2	done	2014-02-11 02:28:47	2013-09-14 15:39:17	2014-02-11 02:28:47	8b5f516debdf8d6634270889	t
504	42	ruby	bob	2	hibernating	\N	2013-10-21 17:22:18	2014-01-30 13:03:04	506bbd1a991c0973a185b8f6	f
505	42	elixir	point-mutations	1	done	2014-03-20 00:00:35	2014-02-10 21:10:32	2014-03-20 00:00:35	69b939ff38466ec5b9dab23d	t
506	42	ruby	grains	1	done	2014-02-14 10:11:41	2013-11-25 20:10:09	2014-02-14 10:11:41	672d1af53a8e12f807b4747f	t
507	42	ruby	space-age	4	done	2014-01-12 00:47:21	2013-09-26 23:21:28	2014-01-12 00:47:21	ac38bb16814ace21d31d633b	t
508	42	ruby	leap	2	done	2013-12-22 20:56:03	2013-10-12 14:12:32	2013-12-22 20:56:03	08416edebfbf1902f64d3a57	t
509	42	go	leap	3	done	2014-03-11 02:14:47	2013-09-21 02:02:53	2014-03-11 02:14:47	3c3cc917c9f2a0a5f236a29f	t
510	42	ruby	largest-series-product	1	pending	\N	2013-09-09 01:40:12	2013-09-09 01:40:12	5e91eaa4d287338ea76ca6bc	f
511	42	javascript	space-age	1	done	2014-02-13 16:05:22	2013-12-06 05:24:58	2014-02-13 16:05:22	8ae70245ae644e776df1ca3d	t
512	42	javascript	roman-numerals	1	pending	\N	2013-11-11 02:21:57	2013-11-11 02:21:57	eba8de9913d53e2f0e2b6529	f
513	43	ruby	etl	1	done	2014-03-11 20:41:25	2014-03-09 19:04:00	2014-03-11 20:41:25	0b10bcf4e9aaff3991d582a1	t
514	43	haskell	space-age	3	done	2014-03-04 18:15:44	2014-01-18 21:05:36	2014-03-04 18:15:44	ee3b26e1116899c5e033e884	t
515	43	ruby	hamming	1	done	2014-02-18 05:16:25	2014-01-20 15:59:24	2014-02-18 05:16:25	40587359422e8fb6d872c142	t
516	43	clojure	gigasecond	1	done	2014-03-09 11:59:04	2014-01-26 09:31:06	2014-03-09 11:59:04	7a5725b68b37c98a706fb35c	t
517	43	clojure	bob	1	hibernating	\N	2014-02-24 05:09:21	2014-03-01 07:58:06	2ccc89b670ede14de2127db1	f
518	43	ruby	word-count	2	done	2014-03-17 01:03:44	2014-03-01 23:04:04	2014-03-17 01:03:44	b603fa68b9d55a8bf42e7ecd	t
519	43	ruby	bob	5	done	2014-03-17 08:46:57	2014-02-07 03:55:03	2014-03-17 08:46:57	a85bab1cf8b876fac005569a	t
520	43	coffeescript	hexadecimal	3	pending	\N	2014-01-24 14:46:14	2014-01-24 14:46:14	76a07d71267e6fa35ce89d01	t
521	43	ruby	anagram	2	done	2014-02-21 23:29:20	2014-01-19 04:22:58	2014-02-21 23:29:20	3bce24014710ba48324c6298	t
522	43	ruby	grade-school	1	done	2014-02-21 20:38:13	2014-02-01 23:17:03	2014-02-21 20:38:13	a78d7ec565e152dd567b7ec7	t
523	43	javascript	bob	5	done	2014-03-06 04:56:04	2014-01-19 11:03:36	2014-03-06 04:56:04	e056bb74b7ca534966eec18d	t
524	43	ruby	beer-song	4	hibernating	\N	2014-01-19 05:31:12	2014-03-11 14:25:41	2c284b353f75aab44802ec72	f
525	43	python	bob	2	done	2014-03-14 08:02:21	2014-01-23 09:26:48	2014-03-14 08:02:21	3da42c1b61c15a098731323f	t
526	43	perl5	anagram	2	pending	\N	2014-01-22 02:47:45	2014-01-22 02:47:45	f907ad4861fa29191edbef8c	f
527	43	haskell	rna-transcription	1	done	2014-03-06 16:07:33	2014-02-06 20:31:27	2014-03-06 16:07:33	cf51b4b758d57a6174915cc6	t
528	43	ruby	leap	1	done	2014-03-15 14:44:54	2014-03-05 06:27:18	2014-03-15 14:44:54	74bc09c3d9390fd0815dbd04	t
529	43	clojure	anagram	5	done	2014-03-06 15:38:49	2014-01-20 08:44:47	2014-03-06 15:38:49	668411e4380139ee871ea3ab	t
530	44	haskell	rna-transcription	1	done	2014-01-05 17:10:33	2013-09-21 15:26:21	2014-01-05 17:10:33	fb4c4519dbb9c84f7596bf18	t
531	44	clojure	phone-number	2	done	2014-03-15 03:28:11	2013-09-25 22:44:02	2014-03-15 03:28:11	38eb31882f268e70b0c9d9a6	t
532	44	clojure	bob	3	done	2014-01-18 11:11:51	2013-09-20 10:50:32	2014-01-18 11:11:51	85d24a4e8a784be2b0c6975a	t
533	44	javascript	anagram	1	hibernating	\N	2013-09-25 04:59:19	2014-01-28 23:42:57	c978fee4e763da7bffdd6a98	f
534	44	scala	nucleotide-count	1	pending	\N	2013-09-18 18:35:19	2013-09-18 18:35:19	886bd4a99d15699fa57ff5e3	f
535	44	clojure	rna-transcription	1	done	2014-01-06 17:22:17	2013-09-08 10:05:33	2014-01-06 17:22:17	7e8992971be3d83317845ea1	t
536	44	ruby	hamming	2	done	2014-02-03 15:13:11	2013-08-22 03:22:00	2014-02-03 15:13:11	62f1702eba15213d7f6e7fd4	t
537	44	haskell	bob	3	done	2014-01-16 00:27:55	2013-10-22 13:49:43	2014-01-16 00:27:55	b07ac44ab3a359e331091557	t
538	44	elixir	bob	2	done	2013-12-30 12:37:17	2013-09-13 11:24:23	2013-12-30 12:37:17	404fb732b9fc3c5619987198	t
539	44	haskell	grade-school	1	done	2014-02-11 02:47:41	2013-10-31 02:52:18	2014-02-11 02:47:41	4a5e73996c43b1b9ed05eacb	t
540	44	javascript	bob	2	done	2014-02-13 04:33:01	2013-11-21 16:42:01	2014-02-13 04:33:01	aec299c7ca9f9c093b58c787	t
541	44	coffeescript	binary	1	pending	\N	2013-09-06 08:17:29	2013-09-06 08:17:29	bad0669cc4bc55cf2b5666cd	t
542	44	clojure	robot-name	1	done	2013-10-13 14:52:18	2013-09-06 11:36:09	2013-10-13 14:52:18	a3ce541e1012ba15f956947a	t
543	44	python	bob	1	pending	\N	2013-12-21 16:07:54	2013-12-21 16:07:54	4ab8520e1fe7c49421fd332a	f
544	44	ruby	nucleotide-count	1	hibernating	\N	2013-10-16 10:07:20	2013-12-29 11:13:31	89faa315b11504ddc9008644	f
545	44	ruby	word-count	4	done	2014-01-30 13:41:04	2013-09-28 08:21:29	2014-01-30 13:41:04	c633b1306f1588011531e592	t
546	45	elixir	bob	5	done	2014-02-10 10:50:19	2013-11-20 18:07:13	2014-02-10 10:50:19	5b4d3d2ff213310ad69c03d0	t
547	45	ruby	word-count	5	done	2014-03-07 22:09:07	2013-11-08 07:11:51	2014-03-07 22:09:07	aa080be0f8d17aa5e86c5150	t
548	45	python	rna-transcription	1	done	2014-01-09 08:50:06	2013-12-04 17:31:24	2014-01-09 08:50:06	c43e754030d328228b8bc384	t
549	45	ruby	simple-cipher	1	done	2014-03-04 09:23:36	2013-12-27 19:01:06	2014-03-04 09:23:36	ab5a2f74f6c75016bddeae0b	t
550	45	perl5	word-count	2	done	2014-02-17 01:54:36	2014-01-18 01:42:01	2014-02-17 01:54:36	f3c09be2777986b9fb748023	t
551	45	go	hamming	5	done	2014-03-19 20:09:13	2013-11-22 22:14:44	2014-03-19 20:09:13	a2351a64d4b740595d4cbb17	t
552	45	ruby	bob	6	done	2014-01-09 22:59:22	2013-10-27 18:04:25	2014-01-09 22:59:22	98060f6d166215707055136f	t
553	45	ruby	grains	2	done	2014-01-15 07:12:21	2013-10-31 20:50:46	2014-01-15 07:12:21	3c24d87f04710558fe7de61e	t
554	45	elixir	raindrops	5	done	2014-03-19 05:45:02	2013-10-22 15:03:04	2014-03-19 05:45:02	68290681dc78e23a2d5a698e	t
555	45	python	word-count	1	pending	\N	2013-10-05 05:19:32	2013-10-05 05:19:32	8a713d52d1256ef6d44430e9	f
556	45	javascript	rna-transcription	1	done	2014-02-26 01:08:40	2014-02-07 02:49:02	2014-02-26 01:08:40	19731bc18967342cd785af12	t
557	45	javascript	bob	2	done	2014-03-17 11:46:57	2013-11-25 22:22:37	2014-03-17 11:46:57	0673d60b24862aafe21b82b5	t
558	45	go	etl	1	done	2013-12-16 05:02:36	2013-11-08 10:10:16	2013-12-16 05:02:36	f1a88fcbe2e7b6b3edab5263	t
559	45	ruby	atbash-cipher	1	done	2013-10-31 19:05:17	2013-10-19 13:30:13	2013-10-31 19:05:17	1d01cfbdb37d203d0c971b47	t
560	45	ruby	triangle	1	done	2014-01-09 02:02:45	2013-10-20 10:06:31	2014-01-09 02:02:45	72b219f10d294b0d2802ba92	t
561	45	ruby	nucleotide-count	2	done	2014-03-03 12:10:29	2013-10-24 10:59:35	2014-03-03 12:10:29	caf7ac030ceefe91e45ff202	t
562	45	haskell	gigasecond	1	done	2014-01-03 14:40:07	2013-12-28 16:17:50	2014-01-03 14:40:07	01a0d2d8a8b113ad78015001	t
563	46	ruby	proverb	7	done	2014-03-10 18:58:37	2014-01-11 09:35:17	2014-03-10 18:58:37	fed22fa6f6d22e8062e6f250	t
564	46	ruby	hamming	2	done	2014-02-28 01:42:40	2014-01-24 21:57:29	2014-02-28 01:42:40	d860f4b79c9ab2d94f59f5b4	t
565	46	ruby	rna-transcription	1	pending	\N	2014-01-28 17:48:28	2014-01-28 17:48:28	e671e932f92b415bc01bd43f	f
566	46	ruby	anagram	3	done	2014-03-12 02:38:26	2014-01-23 07:03:23	2014-03-12 02:38:26	4046d94a1f0c78098557ab2f	t
567	46	ruby	grade-school	1	done	2014-02-07 16:08:28	2014-01-18 04:49:05	2014-02-07 16:08:28	ed450c12ff8a7a496f5c640b	t
568	46	javascript	point-mutations	5	done	2014-03-10 04:15:44	2014-01-06 00:03:56	2014-03-10 04:15:44	5bac8c5cd94756b2d6c0ddfc	t
569	46	ruby	leap	1	hibernating	\N	2014-01-10 01:34:20	2014-03-16 18:35:09	ced9baa439275527cad47490	t
570	46	elixir	bob	5	done	2014-03-03 08:20:00	2014-01-16 20:38:51	2014-03-03 08:20:00	52b513c1d83943dd5f4a3704	t
571	46	elixir	word-count	1	done	2014-03-20 21:00:48	2014-02-24 15:35:45	2014-03-20 21:00:48	0528abf6a849b9825587262e	t
572	46	haskell	atbash-cipher	2	done	2014-03-01 16:32:54	2014-02-07 18:10:10	2014-03-01 16:32:54	88b6a8a021964e1c2c46c670	t
573	46	clojure	word-count	1	done	2014-02-14 19:02:19	2014-02-02 09:58:12	2014-02-14 19:02:19	0381cf3d01ac55ca3bbb6977	t
574	46	haskell	largest-series-product	3	done	2014-02-05 09:35:42	2014-01-05 09:56:37	2014-02-05 09:35:42	23879a8f5a6ab6f10d625625	t
575	46	python	beer-song	1	hibernating	\N	2014-01-21 22:12:02	2014-02-14 07:55:03	5b0bc9fb76cce0acec08dca8	f
576	46	haskell	beer-song	1	done	2014-03-10 20:08:44	2014-01-18 17:20:07	2014-03-10 20:08:44	9219601e859cbc4328836043	t
577	46	ruby	bob	2	done	2014-02-21 10:38:13	2014-01-08 10:52:20	2014-02-21 10:38:13	ccf205da7d4dcb1ee48f5ac5	t
578	46	haskell	bob	6	done	2014-03-11 17:14:02	2014-01-14 02:50:58	2014-03-11 17:14:02	d86690cd4f99983d37fe1335	t
579	46	javascript	bob	3	done	2014-02-04 02:50:03	2014-01-14 13:30:00	2014-02-04 02:50:03	029a19d73c1090f5815ec8e0	t
580	47	ruby	etl	1	done	2014-03-17 07:00:07	2013-11-25 14:48:09	2014-03-17 07:00:07	28aa2c8b8b7009eb6727cb12	t
581	47	javascript	word-count	1	hibernating	\N	2014-01-17 03:35:39	2014-03-09 17:37:56	179a34b9b1886c081870f936	f
582	47	ruby	bob	1	done	2014-03-19 19:56:34	2014-01-07 19:32:47	2014-03-19 19:56:34	54b7a25e4cb7555327dace0a	t
583	47	python	rna-transcription	1	pending	\N	2013-11-27 13:12:01	2013-11-27 13:12:01	70166af0903faa3800630a76	t
584	47	ruby	gigasecond	1	done	2014-01-20 00:30:09	2014-01-07 19:15:42	2014-01-20 00:30:09	ee48fd8f85ab7ecc088085cb	t
585	47	ruby	leap	1	done	2014-02-12 11:12:56	2014-01-27 12:07:20	2014-02-12 11:12:56	cb9e00401b66010a03c0e027	t
586	47	haskell	space-age	3	done	2014-02-17 21:27:24	2013-12-19 16:39:12	2014-02-17 21:27:24	96686380aaac08b166d54cd4	t
587	47	haskell	word-count	1	hibernating	\N	2013-12-30 19:55:00	2014-02-18 13:32:59	e164aaea2d41a0848cfa52c6	f
588	47	ruby	crypto-square	1	pending	\N	2013-11-15 22:13:55	2013-11-15 22:13:55	41b3775bfefb089499f1a21e	f
589	47	ruby	nucleotide-count	1	done	2014-02-03 09:52:47	2014-01-08 08:47:57	2014-02-03 09:52:47	1502b6b4830fae70b736fb7c	t
590	47	haskell	nucleotide-count	4	done	2014-03-05 10:27:20	2013-11-14 20:03:44	2014-03-05 10:27:20	449e523069a34ddf7c7a2e1c	t
591	47	javascript	scrabble-score	9	done	2014-03-19 13:08:25	2013-11-23 02:46:39	2014-03-19 13:08:25	e8a53a055d47233132667f29	t
592	47	javascript	space-age	1	done	2014-03-03 19:41:37	2013-12-05 13:25:15	2014-03-03 19:41:37	b891a049fc15b0999167ed4b	t
593	47	coffeescript	binary	1	pending	\N	2013-11-12 17:07:09	2013-11-12 17:07:09	39052a542345c8e00b289b71	f
594	47	ruby	rna-transcription	1	done	2013-12-24 01:14:34	2013-11-14 04:35:36	2013-12-24 01:14:34	de97992d7a070f6088f75163	t
595	48	ruby	bob	3	done	2014-02-24 04:53:52	2014-01-15 07:36:41	2014-02-24 04:53:52	40784927007054fd5bb874aa	t
596	48	python	rna-transcription	1	done	2014-02-21 09:10:33	2014-01-14 10:20:27	2014-02-21 09:10:33	2681072117c6179b666d70b0	t
597	48	ruby	word-count	8	done	2014-03-18 20:45:37	2013-12-30 14:24:16	2014-03-18 20:45:37	af793051a360ee378cd04165	t
598	48	python	bob	1	done	2014-01-16 18:23:22	2013-12-27 13:28:54	2014-01-16 18:23:22	15e3b4c7f1b16103438728b0	t
599	48	elixir	point-mutations	2	done	2014-03-12 09:49:06	2013-12-29 15:37:12	2014-03-12 09:49:06	4a0774dd59f658d2919ebedc	t
600	48	haskell	rna-transcription	5	done	2014-03-18 07:05:56	2013-12-30 02:45:24	2014-03-18 07:05:56	1d52bbbeeff6ad134170a452	t
601	48	haskell	prime-factors	2	done	2014-03-07 13:50:17	2014-01-04 06:49:02	2014-03-07 13:50:17	5dd9aaba3ebb4d93fe15366b	t
602	48	haskell	atbash-cipher	3	done	2014-03-16 02:11:56	2014-02-01 09:02:32	2014-03-16 02:11:56	1fd837cd17e0ff6d2857cd3a	t
603	48	ruby	binary	3	done	2014-03-11 12:31:39	2013-12-29 14:16:30	2014-03-11 12:31:39	b350eed81c13ce5da6c2b0ab	t
604	48	ruby	triangle	2	pending	\N	2014-02-05 23:31:35	2014-02-05 23:31:35	77299e134c3ec847486c494d	t
605	48	elixir	bob	1	done	2014-03-14 15:51:32	2014-01-29 23:40:31	2014-03-14 15:51:32	c7671ee674fcdeaed7bb471a	t
606	48	haskell	robot-name	2	done	2014-03-02 00:02:06	2014-01-29 20:05:07	2014-03-02 00:02:06	8ee19934f55df133dd9a544f	t
607	48	ruby	phone-number	3	done	2014-03-08 12:18:25	2013-12-26 14:32:51	2014-03-08 12:18:25	9cb5dd96944b1476994518e0	t
608	31	ruby	leap	1	done	2014-03-04 01:17:33	2013-11-27 03:23:02	2014-03-04 01:17:33	507f1a15810e8ce35bafb08c	t
609	31	ruby	bob	7	done	2014-02-16 14:13:36	2013-11-04 20:03:20	2014-02-16 14:13:36	67f5316b79d96fef513ec6d8	t
610	31	ruby	proverb	1	done	2013-12-19 20:39:16	2013-11-28 17:33:25	2013-12-19 20:39:16	4b753c45fbcb90753f86d624	t
611	31	ruby	rna-transcription	4	done	2014-03-07 23:25:36	2013-10-28 11:07:07	2014-03-07 23:25:36	0b7dbfb7be940d785fbd3f28	t
612	31	ruby	word-count	3	done	2014-02-21 18:23:46	2013-11-04 16:31:06	2014-02-21 18:23:46	1e2469bfc6c9453f4d84fdb9	t
613	31	ruby	prime-factors	1	pending	\N	2014-02-15 19:54:40	2014-02-15 19:54:40	4edd733d4a331c3e629e40a5	f
614	31	ruby	say	1	pending	\N	2014-01-28 20:58:28	2014-01-28 20:58:28	8ccac1d4419bf92178e8874e	f
615	31	ruby	anagram	1	pending	\N	2013-11-26 20:53:42	2013-11-26 20:53:42	c3372b3f9a129297a3324e19	t
616	39	ruby	grains	1	hibernating	\N	2014-02-16 23:21:23	2014-03-11 21:06:16	30f12e0d64e68977d09061de	f
617	39	ruby	word-count	7	done	2014-03-08 11:41:38	2014-01-27 09:58:21	2014-03-08 11:41:38	9373afdf38279bbe449fc6ce	t
618	39	ruby	bob	3	done	2014-03-20 13:00:53	2014-02-10 12:20:44	2014-03-20 13:00:53	d6eeb18630a0f8eb554caa70	t
619	39	ruby	scrabble-score	3	pending	\N	2014-02-07 09:18:44	2014-02-07 09:18:44	6ae860e5623a95a4aed8df34	f
620	39	ruby	leap	1	done	2014-02-27 11:41:42	2014-02-03 23:57:15	2014-02-27 11:41:42	097960460a1e0391d9b4e755	t
621	39	ruby	raindrops	1	done	2014-03-06 00:01:40	2014-02-26 05:54:09	2014-03-06 00:01:40	7530f8c9e34d382552422e51	t
622	39	ruby	hamming	2	done	2014-02-24 20:40:02	2014-01-25 21:44:05	2014-02-24 20:40:02	1d1d6a34cb2124f0dcfb500a	t
623	39	ruby	rna-transcription	4	done	2014-03-05 03:33:51	2014-01-25 14:53:04	2014-03-05 03:33:51	27cdc7782d082b436a89df08	t
624	39	ruby	nucleotide-count	2	done	2014-03-19 12:49:11	2014-02-13 10:38:00	2014-03-19 12:49:11	4418b9060ce07d1cd5f8b671	t
625	39	ruby	grade-school	4	pending	\N	2014-02-03 08:14:51	2014-02-03 08:14:51	0b0a5225f470f81d17f0ecca	f
626	39	ruby	proverb	1	done	2014-03-03 14:35:25	2014-02-21 14:42:30	2014-03-03 14:35:25	f5b2caff787f1c108e1cc501	t
627	39	ruby	meetup	1	done	2014-02-26 18:57:27	2014-02-03 19:12:24	2014-02-26 18:57:27	dd168e1789bb0c864b2c28f0	t
628	34	ruby	robot-name	1	done	2014-03-11 00:36:37	2014-02-08 01:50:59	2014-03-11 00:36:37	acb5d555298df66688b7863f	t
629	34	ruby	etl	2	done	2014-03-07 11:56:16	2014-02-11 17:00:42	2014-03-07 11:56:16	663d9badac6310b20e8d4a33	t
630	34	ruby	word-count	5	done	2014-03-08 20:03:41	2014-02-12 13:42:24	2014-03-08 20:03:41	98b3a9d3bea08b8e8b6b7934	t
631	34	ruby	bob	2	done	2014-02-26 22:34:48	2014-02-06 12:22:10	2014-02-26 22:34:48	16c4cf29be126c9eaef3efb1	t
632	34	ruby	beer-song	1	done	2014-03-14 10:17:00	2014-02-28 12:18:28	2014-03-14 10:17:00	ef051c63cbef9e2539020996	t
633	34	ruby	grade-school	1	done	2014-02-28 12:17:01	2014-02-23 10:15:14	2014-02-28 12:17:01	6cbcd4e897e460304bdc4354	t
634	34	ruby	raindrops	1	pending	\N	2014-03-04 02:08:02	2014-03-04 02:08:02	9ce97b5984d32247252e4342	f
635	34	ruby	grains	1	done	2014-02-14 14:02:54	2014-02-05 17:07:09	2014-02-14 14:02:54	bd6ba73dcc3e25efc09bfdae	t
636	34	ruby	crypto-square	1	done	2014-03-10 20:54:17	2014-02-03 00:24:18	2014-03-10 20:54:17	bbc05a2f97f50e37b9d935f3	t
637	34	ruby	anagram	2	done	2014-02-28 03:23:39	2014-02-01 00:28:12	2014-02-28 03:23:39	6f2cd598b8b8cb7f2fddbe64	t
638	34	ruby	gigasecond	1	done	2014-03-03 10:48:13	2014-02-28 05:47:22	2014-03-03 10:48:13	5262d01a15146729e606eb1a	t
639	36	ruby	point-mutations	1	done	2014-03-15 03:23:58	2014-01-14 11:53:14	2014-03-15 03:23:58	e109f6bdac716df0c6b04e51	t
640	36	ruby	nucleotide-count	1	done	2014-01-12 19:47:12	2014-01-11 01:08:52	2014-01-12 19:47:12	eef59489463860b81871063f	t
641	36	ruby	bob	2	hibernating	\N	2014-01-08 22:02:01	2014-03-20 00:48:54	f98638717977081e067bb6d9	f
642	36	ruby	beer-song	4	done	2014-03-13 16:57:48	2014-01-04 05:11:13	2014-03-13 16:57:48	0258c6f0ba6a30689a872888	t
643	36	ruby	anagram	2	done	2014-03-06 14:18:05	2014-01-17 07:10:17	2014-03-06 14:18:05	b592b3e9c536e45b23dc7d0b	t
644	36	ruby	word-count	1	done	2014-02-21 00:07:23	2014-01-26 23:37:33	2014-02-21 00:07:23	a1b2f1466b0a7b5e7d030c6a	t
645	36	ruby	hamming	1	done	2014-03-09 17:06:37	2014-02-10 15:40:47	2014-03-09 17:06:37	a2cd7d72a7e019dac901ec27	t
646	36	ruby	grade-school	3	done	2014-03-03 17:48:09	2014-01-02 08:01:21	2014-03-03 17:48:09	33afb8a8bf7900cf83da6786	t
647	36	ruby	leap	1	pending	\N	2014-02-20 00:49:48	2014-02-20 00:49:48	1b109bf30a543db14a91f707	f
648	36	ruby	rna-transcription	7	done	2014-03-01 06:09:53	2014-01-24 04:04:39	2014-03-01 06:09:53	d892e01c61a6b08aba04d204	t
649	36	ruby	etl	4	done	2014-03-18 22:11:08	2014-01-23 06:36:51	2014-03-18 22:11:08	72b2e6bddcbb3ccb0ddcdbad	t
650	36	ruby	phone-number	1	done	2014-01-17 22:21:33	2014-01-12 08:43:55	2014-01-17 22:21:33	5e8825c8f1a4a44fa5b3f293	t
651	32	ruby	bob	5	hibernating	\N	2013-10-03 05:42:42	2014-02-14 02:00:45	574e58f0713bb4e7ab96f2eb	f
652	32	ruby	accumulate	1	done	2013-12-04 21:32:58	2013-08-18 11:28:53	2013-12-04 21:32:58	902a30416ced70176125a64d	t
653	32	ruby	anagram	7	done	2014-03-01 03:45:38	2013-08-15 17:31:06	2014-03-01 03:45:38	12ccc836954849ffad0f8fbc	t
654	32	ruby	leap	3	done	2014-03-19 12:04:00	2013-10-19 01:45:23	2014-03-19 12:04:00	f57323f075e97eafdd9cb25a	t
655	32	ruby	roman-numerals	1	pending	\N	2013-09-02 19:56:27	2013-09-02 19:56:27	00f95a4dee19f116ff3f6e97	t
656	32	ruby	rna-transcription	7	done	2014-02-24 22:24:30	2013-09-09 21:42:09	2014-02-24 22:24:30	b701f678af4693b075835b89	t
657	32	ruby	phone-number	2	done	2013-12-16 02:53:36	2013-11-05 10:55:27	2013-12-16 02:53:36	8a309a1b2be6a873dce47cdc	t
658	32	ruby	point-mutations	4	done	2014-01-23 11:45:14	2013-10-21 01:33:25	2014-01-23 11:45:14	53267956d4aa2d7008cae9de	t
659	32	ruby	atbash-cipher	3	done	2014-02-05 04:08:31	2013-12-09 22:08:49	2014-02-05 04:08:31	0eea5edfd5f9165f7c6fac83	t
660	35	ruby	bob	3	hibernating	\N	2013-11-15 02:14:26	2014-02-15 17:00:32	f08dbbc6260f5e088291c17f	f
661	35	ruby	meetup	1	done	2014-01-04 07:31:56	2013-10-12 21:42:42	2014-01-04 07:31:56	44b3d5b9fc488b82602a98e9	t
662	35	ruby	etl	1	done	2014-03-05 05:56:07	2013-11-22 09:41:36	2014-03-05 05:56:07	40f6f94e9485e846fc6e578f	t
663	35	ruby	gigasecond	2	done	2013-12-31 06:06:20	2013-12-12 04:35:52	2013-12-31 06:06:20	441320984876143ca3c8007e	t
664	35	ruby	rna-transcription	1	done	2013-12-17 17:26:56	2013-11-17 00:34:57	2013-12-17 17:26:56	e43abd757b51757110e68404	t
665	35	ruby	leap	2	hibernating	\N	2014-01-03 07:51:58	2014-02-26 13:03:27	d6145fd1f9b3bbb9e3fd0d56	f
666	35	ruby	grade-school	1	done	2014-02-14 11:13:04	2013-12-25 17:53:06	2014-02-14 11:13:04	4f561a4050b0bb09bb4979cc	t
667	35	ruby	raindrops	2	pending	\N	2013-12-21 10:13:22	2013-12-21 10:13:22	f224879aff0b6cb37b4abf62	f
668	35	ruby	anagram	1	done	2013-12-31 05:51:57	2013-11-26 09:02:44	2013-12-31 05:51:57	aad7a96cfd4a07a75ddf7687	t
669	35	ruby	trinary	3	done	2014-01-22 20:20:33	2013-11-13 17:29:56	2014-01-22 20:20:33	8490e49b6ba3770dc0c88157	t
670	35	ruby	binary	2	done	2014-01-10 11:59:17	2013-10-22 16:54:54	2014-01-10 11:59:17	1faf40d4021c5b1bd82652c1	t
671	35	ruby	atbash-cipher	1	pending	\N	2014-01-13 22:41:07	2014-01-13 22:41:07	f1449e3aa8d9c521ee39892c	t
672	35	ruby	proverb	1	done	2014-03-13 13:09:48	2014-01-09 03:06:00	2014-03-13 13:09:48	aad8a3cecade87cd6bab7397	t
673	35	ruby	strain	1	pending	\N	2013-11-11 20:49:35	2013-11-11 20:49:35	c62fba69e7d7d71ffa7f729b	f
674	35	ruby	word-count	11	done	2014-03-07 11:03:15	2013-10-05 18:24:25	2014-03-07 11:03:15	5727a1eb02def7ce0be7e98c	t
675	33	ruby	grade-school	2	hibernating	\N	2013-11-27 15:07:39	2014-01-10 03:14:40	57fcdc7d6b2bc8ab671904e3	f
676	33	ruby	binary-search	3	pending	\N	2013-09-23 12:36:52	2013-09-23 12:36:52	6425b161f164e6af64e9a8d1	t
677	33	ruby	proverb	8	done	2014-02-28 23:01:11	2013-09-10 21:16:46	2014-02-28 23:01:11	23d2106cc6510605acc6ff92	t
678	33	ruby	hamming	1	pending	\N	2014-02-05 23:59:04	2014-02-05 23:59:04	ec530cbaf0e45f56e471139f	f
679	33	ruby	word-count	6	done	2014-02-28 06:52:35	2013-10-13 23:32:31	2014-02-28 06:52:35	c33282e5af813e8e11bae8d3	t
680	33	ruby	bob	5	done	2014-02-23 06:02:44	2013-10-11 18:54:49	2014-02-23 06:02:44	d8409e63a3aa56dee5dfbaaa	t
681	33	ruby	phone-number	1	done	2013-12-23 01:30:19	2013-10-06 20:36:11	2013-12-23 01:30:19	75db9d0bb4cebc63b20b795d	t
682	33	ruby	point-mutations	2	done	2014-03-14 09:21:29	2013-09-18 16:01:01	2014-03-14 09:21:29	8bc3cece17519b6ca0672756	t
683	33	ruby	anagram	3	done	2014-02-20 22:24:25	2013-10-11 21:26:45	2014-02-20 22:24:25	0d4ab86475a70906c14cee2e	t
684	33	ruby	rna-transcription	3	hibernating	\N	2013-10-03 06:32:19	2014-03-04 10:17:33	56cae60fcd8e060d76f479bd	f
685	33	ruby	triangle	5	done	2014-01-30 12:52:29	2013-10-10 09:01:24	2014-01-30 12:52:29	638070f02d887617000f8a9b	t
686	33	ruby	etl	1	done	2014-02-01 22:18:03	2013-09-30 18:06:49	2014-02-01 22:18:03	b31a5b8b2e130414ac182e8d	t
687	40	ruby	rna-transcription	2	done	2014-02-22 02:44:15	2014-02-07 19:23:43	2014-02-22 02:44:15	98e67220bfa2cd88e82a0ba4	t
688	40	ruby	bob	6	done	2014-03-09 04:31:12	2014-01-14 05:28:03	2014-03-09 04:31:12	ba96ab391924b92491839ca2	t
689	40	ruby	grade-school	1	hibernating	\N	2014-01-17 09:01:43	2014-03-05 11:22:57	eb7f4e00a1590036ded7267a	f
690	40	ruby	word-count	2	pending	\N	2014-02-28 16:59:06	2014-02-28 16:59:06	8d2b2f81fb073f97a2ccfe20	t
691	40	ruby	anagram	5	done	2014-03-15 13:06:12	2014-01-15 18:59:18	2014-03-15 13:06:12	fcf22dbb9d6ff4b98eb80f4e	t
692	40	ruby	raindrops	1	done	2014-03-20 11:31:22	2014-02-07 17:22:22	2014-03-20 11:31:22	2d6e6ccf5b6371f1d1ebf7f0	t
693	40	ruby	hamming	3	done	2014-03-19 02:39:24	2014-02-05 17:47:49	2014-03-19 02:39:24	91147ea8908a391757b5d455	t
694	40	ruby	leap	3	pending	\N	2014-01-23 21:30:14	2014-01-23 21:30:14	b41ae6d918f13aef50b2530f	t
695	40	ruby	phone-number	3	done	2014-03-17 20:25:03	2014-01-27 09:18:41	2014-03-17 20:25:03	152ae02e0257a8d85d50e47f	t
696	40	ruby	nucleotide-count	2	done	2014-02-23 16:11:12	2014-01-13 18:32:07	2014-02-23 16:11:12	59e64642349834e996a033d3	t
697	40	ruby	grains	2	pending	\N	2014-02-08 11:06:02	2014-02-08 11:06:02	0170fd177950970e07e19c57	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 697, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	\N	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-19604	mva528	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2013-11-04 14:51:15.039026	2013-11-04 14:51:15.039026
2	charlie	\N	https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg	-50663	hpe227	---\n- ruby\n	2013-11-11 08:29:49.049172	2013-11-11 08:29:49.049172
3	diana	\N	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-88692	ojc253	---\n- javascript\n	2014-02-28 00:04:51.05033	2014-02-28 00:04:51.05033
4	eve	\N	https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg	-83820	jbn964	---\n- python\n	2014-03-04 15:29:41.05133	2014-03-04 15:29:41.05133
5	amelie	\N	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-32606	utt348	--- []\n	2013-11-14 02:01:56.05226	2013-11-14 02:01:56.05226
6	beth	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg	-63081	amb328	--- []\n	2013-10-30 03:58:04.053073	2013-10-30 03:58:04.053073
7	bob	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg	-90287	kcm156	--- []\n	2013-12-26 15:26:43.054183	2013-12-26 15:26:43.054183
8	claire	\N	https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg	-26621	fex800	--- []\n	2014-03-16 22:18:05.05513	2014-03-16 22:18:05.05513
9	dawson	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg	-68211	rqr714	--- []\n	2013-10-27 01:21:37.055916	2013-10-27 01:21:37.055916
10	elisa	\N	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-95516	nwa645	--- []\n	2013-09-07 18:46:27.056958	2013-09-07 18:46:27.056958
11	frederique	\N	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-34861	uxl586	--- []\n	2014-01-30 04:07:42.061017	2014-01-30 04:07:42.061017
12	grace	\N	https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg	-71837	vnj161	--- []\n	2013-09-30 00:23:08.062226	2013-09-30 00:23:08.062226
13	haley	\N	https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg	-48682	drg994	--- []\n	2013-09-12 05:16:18.063131	2013-09-12 05:16:18.063131
14	isaac	\N	https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg	-47229	nnq175	--- []\n	2013-07-26 20:55:23.063922	2013-07-26 20:55:23.063922
15	jarrod	\N	https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg	-43404	jwa177	--- []\n	2013-12-03 14:28:46.064971	2013-12-03 14:28:46.064971
16	kieran	\N	https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg	-28762	ydu363	--- []\n	2013-11-22 17:49:26.065797	2013-11-22 17:49:26.065797
17	lisa	\N	https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg	-18104	tmd704	--- []\n	2013-10-14 12:42:42.06675	2013-10-14 12:42:42.06675
18	mack	\N	https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg	-57915	acp834	--- []\n	2013-07-17 22:14:40.067746	2013-07-17 22:14:40.067746
19	madison	\N	https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg	-92929	sdc681	--- []\n	2013-08-26 08:34:17.068671	2013-08-26 08:34:17.068671
20	marshall	\N	https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg	-68550	jmt470	--- []\n	2013-11-03 13:38:18.06964	2013-11-03 13:38:18.06964
21	mary	\N	https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg	-15294	bhh819	--- []\n	2014-01-13 11:14:13.070625	2014-01-13 11:14:13.070625
22	mia	\N	https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg	-60710	gby871	--- []\n	2013-06-30 05:46:37.071797	2013-06-30 05:46:37.071797
23	mike	\N	https://s3.amazonaws.com/uifaces/faces/twitter/fahdos/128.jpg	-58016	jzg756	--- []\n	2013-10-04 15:08:50.072594	2013-10-04 15:08:50.072594
24	mildred	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg	-39421	xuu750	--- []\n	2013-08-01 23:15:44.073324	2013-08-01 23:15:44.073324
25	mitchell	\N	https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg	-16161	hqi669	--- []\n	2014-02-09 08:34:56.074268	2014-02-09 08:34:56.074268
26	morris	\N	https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg	-36443	qmr920	--- []\n	2013-10-07 15:56:46.075069	2013-10-07 15:56:46.075069
27	norma	\N	https://s3.amazonaws.com/uifaces/faces/twitter/edwellbrook/128.jpg	-32738	nqc702	--- []\n	2013-08-02 11:36:20.075808	2013-08-02 11:36:20.075808
28	opal	\N	https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg	-97095	dmh774	--- []\n	2013-08-02 22:04:33.076539	2013-08-02 22:04:33.076539
29	paula	\N	https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg	-83363	mgp320	--- []\n	2013-07-06 00:36:43.077254	2013-07-06 00:36:43.077254
30	quentin	\N	https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg	-32745	hja690	--- []\n	2014-02-05 05:35:48.077973	2014-02-05 05:35:48.077973
31	rachel	\N	https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg	-95996	liy215	--- []\n	2013-10-20 22:44:21.078748	2013-10-20 22:44:21.078748
32	randall	\N	https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg	-89149	imx989	--- []\n	2013-08-11 06:08:04.079639	2013-08-11 06:08:04.079639
33	rick	\N	https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg	-1956	imh862	--- []\n	2013-09-09 02:38:01.080627	2013-09-09 02:38:01.080627
34	rita	\N	https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg	-35647	cjf581	--- []\n	2014-01-30 16:07:26.081479	2014-01-30 16:07:26.081479
35	river	\N	https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg	-6754	kfw215	--- []\n	2013-10-05 05:45:18.08234	2013-10-05 05:45:18.08234
36	rolf	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg	-93145	zwf659	--- []\n	2013-12-29 14:08:58.083244	2013-12-29 14:08:58.083244
37	ruben	\N	https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg	-2384	laz813	--- []\n	2014-02-13 11:06:04.084193	2014-02-13 11:06:04.084193
38	rudi	\N	https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg	-91412	stc404	--- []\n	2013-08-24 06:53:59.099575	2013-08-24 06:53:59.099575
39	russ	\N	https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg	-7421	dxa453	--- []\n	2014-01-23 11:03:54.108791	2014-01-23 11:03:54.108791
40	ryan	\N	https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg	-42965	gaf709	--- []\n	2014-01-10 08:24:09.111336	2014-01-10 08:24:09.111336
41	shaina	\N	https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg	-6482	mws599	--- []\n	2013-10-04 00:14:36.112657	2013-10-04 00:14:36.112657
42	talia	\N	https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg	-76363	cyq518	--- []\n	2013-09-05 23:59:20.113966	2013-09-05 23:59:20.113966
43	ursula	\N	https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg	-30912	nbd203	--- []\n	2014-01-17 11:31:44.114932	2014-01-17 11:31:44.114932
44	vince	\N	https://s3.amazonaws.com/uifaces/faces/twitter/fahdos/128.jpg	-1896	ptj865	--- []\n	2013-08-11 11:14:28.116029	2013-08-11 11:14:28.116029
45	wilson	\N	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-2615	zzg276	--- []\n	2013-10-04 00:42:27.116981	2013-10-04 00:42:27.116981
46	xavier	\N	https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg	-2207	dtv193	--- []\n	2014-01-04 03:48:44.117872	2014-01-04 03:48:44.117872
47	yvette	\N	https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg	-69464	kiy205	--- []\n	2013-11-09 03:42:39.118769	2013-11-09 03:42:39.118769
48	zachary	\N	https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg	-4076	gbd472	--- []\n	2013-12-26 09:45:21.119681	2013-12-26 09:45:21.119681
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- Name: alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: likes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY likes
    ADD CONSTRAINT likes_pkey PRIMARY KEY (id);


--
-- Name: log_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY log_entries
    ADD CONSTRAINT log_entries_pkey PRIMARY KEY (id);


--
-- Name: muted_submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY muted_submissions
    ADD CONSTRAINT muted_submissions_pkey PRIMARY KEY (id);


--
-- Name: notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: posts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: products_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY quotes
    ADD CONSTRAINT quotes_pkey PRIMARY KEY (id);


--
-- Name: submission_viewers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submission_viewers
    ADD CONSTRAINT submission_viewers_pkey PRIMARY KEY (id);


--
-- Name: submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submissions
    ADD CONSTRAINT submissions_pkey PRIMARY KEY (id);


--
-- Name: team_managers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_managers
    ADD CONSTRAINT team_managers_pkey PRIMARY KEY (id);


--
-- Name: team_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_memberships
    ADD CONSTRAINT team_memberships_pkey PRIMARY KEY (id);


--
-- Name: teams_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY teams
    ADD CONSTRAINT teams_pkey PRIMARY KEY (id);


--
-- Name: testimonials_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY testimonials
    ADD CONSTRAINT testimonials_pkey PRIMARY KEY (id);


--
-- Name: user_exercises_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY user_exercises
    ADD CONSTRAINT user_exercises_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: by_submission; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX by_submission ON submission_viewers USING btree (submission_id, viewer_id);


--
-- Name: index_alerts_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_alerts_on_user_id ON alerts USING btree (user_id);


--
-- Name: index_submissions_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_key ON submissions USING btree (key);


--
-- Name: index_submissions_on_user_exercise_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_user_exercise_id ON submissions USING btree (user_exercise_id);


--
-- Name: index_teams_on_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_teams_on_slug ON teams USING btree (slug);


--
-- Name: index_user_exercises_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_key ON user_exercises USING btree (key);


--
-- Name: index_user_exercises_on_language_and_slug_and_state; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_language_and_slug_and_state ON user_exercises USING btree (language, slug, state);


--
-- Name: index_user_exercises_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_user_id ON user_exercises USING btree (user_id);


--
-- Name: index_user_exercises_on_user_id_and_language_and_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_user_id_and_language_and_slug ON user_exercises USING btree (user_id, language, slug);


--
-- Name: index_users_on_username; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_users_on_username ON users USING btree (username);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: kytrinyx
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM kytrinyx;
GRANT ALL ON SCHEMA public TO kytrinyx;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

