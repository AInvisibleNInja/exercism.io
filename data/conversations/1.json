[
  {
    "code": "class Year\n  def self.leap?(year)\n    return year % 400 == 0 || ((year % 4 == 0) && (year % 100 != 0))\n  end\nend",
    "language": "ruby",
    "comments": [
      {
        "username": "kytrinyx",
        "author": false,
        "avatar": "kytrinyx.png",
        "text": "This is very succinct.\r\n\r\nThe `return` keyword is unnecessary in Ruby. Some people like to stick it on there anyway, but most people I work with prefer to only use explicit returns in guard clauses.\r\n\r\nDid you consider naming each of the chunks? If you were going to explain the rules of leap year to your friends, what words would you use?"
      },
      {
        "username": "DataWraith",
        "author": true,
        "avatar": "DataWraith.png",
        "text": "Hm, yeah, I could've left the return off here, but I don't like the way the naked expression looks. \r\n\r\nI'll upload a second iteration that is more verbose but easier to understand. It'll still have a return at the end of the function though, for symmetry reasons."
      }
    ]
  },
  {
    "code": "class Year\n  def self.leap?(year)\n    # Years divisible by 400 are leap years.\n    return true if year % 400 == 0\n\n    # Years divisible by 4 are leap years if they aren't divisible by 100.\n    return true if (year % 4 == 0) && (year % 100 != 0)\n\n    # Other years are not leap years\n    return false\n  end\nend",
    "language": "ruby",
    "comments": [
      {
        "username": "kytrinyx",
        "author": false,
        "avatar": "kytrinyx.png",
        "text": "I really like line 4. It's totally clear to me when reading it that it's an exception to the rule.\r\n\r\nIf you take the trailing `if` statement on line 7 and assign it to a variable, let's say `result`, then you could do this:\r\n\r\n```ruby\r\nresult = (year % 4 == 0) && (year % 100 != 0)\r\nreturn true if result\r\nreturn false\r\n```\r\n\r\nBut then you could just as well say:\r\n\r\n```ruby\r\nresult = (year % 4 == 0) && (year % 100 != 0)\r\nreturn result if result\r\nreturn result\r\n```\r\n\r\nwhich is the same thing as\r\n\r\n```ruby\r\nresult = (year % 4 == 0) && (year % 100 != 0)\r\nreturn result\r\n```\r\n\r\nAt which point the assignment is superfluous.\r\n\r\nOn the other hand, I kind of think line 7 would be clearer if it were about the exception to the rule (100), rather than everything except 400.\r\n\r\nThen you'd end up with a guard clause situation where you have:\r\n\r\n```ruby\r\n# return early for the 400 exception\r\n# return early for the 100 exception\r\n\r\n# default leap year behavior\r\n```"
      },
      {
        "username": "DataWraith",
        "author": true,
        "avatar": "DataWraith.png",
        "text": "Thank you for such a detailed nitpick. :)\r\n\r\nI think I've managed to come up with what you describe in the next iteration."
      }
    ]
  },
  {
    "code": "class Year\n  def self.leap?(year)\n    # Years divisible by 400 are leap years.\n    return true if year % 400 == 0\n\n    # Years divisible by 100 (and not by 400) are not leap years.\n    return false if year % 100 == 0\n\n    # Otherwise, years divisible by 4 are leap years.\n    return year % 4 == 0\n  end\nend",
    "language": "ruby",
    "comments": [
      {
        "username": "kytrinyx",
        "author": false,
        "avatar": "kytrinyx.png",
        "text": "Yeah, I find this much more understandable with 400 and 100 handled separately as edge cases.\r\n\r\nI notice that the comments use the term `divisible_by?`. Would it make sense to introduce that idea into the code itself so that you can delete the comments? (You know the saying: _comments are lies waiting to happen_).\r\n\r\nYou mentioned that you have the `return` keyword on the last line for symmetry with the others. Now that the two first are edge cases and the last one is not, is the symmetry still appropriate?"
      }
    ]
  },
  {
    "code": "class Fixnum\n  def divisible_by?(dividend)\n    self % dividend == 0\n  end\nend\n\nclass Year\n  def self.leap?(year)\n    return true  if year.divisible_by?(400)\n    return false if year.divisible_by?(100)\n\n    year.divisible_by?(4)\n  end\nend",
    "language": "ruby",
    "comments": [
      {
        "username": "DataWraith",
        "author": true,
        "avatar": "DataWraith.png",
        "text": "Thanks again for the superb nitpick :)\r\n\r\nI'm not sure if monkey-patching Fixnum like this is considered inacceptable, acceptable or even good form, so advice on that would be welcome. The alternative would have been to add a private method `self.divisible_by?` to `Year`, which would have taken two parameters, `year` and `dividend`. I didn't like the way that looked, although it might be preferable to monkey-patching, not sure about that.\r\n\r\nI already mentioned that I like explicit returns, and I'm sorely tempted to rewrite leap like so:\r\n\r\n```ruby\r\ndef self.leap?(year)\r\n  return true  if year.divisible_by?(400)\r\n  return false if year.divisible_by?(100)\r\n  return true  if year.divisible_by?(4)\r\n  return false\r\nend\r\n```\r\n\r\nThis might make it even more clear, what is returned and why. I could be persuaded to drop the last return in favor of just plain `false`, but I like the symmetry... %)"
      },
      {
        "username": "kytrinyx",
        "author": false,
        "avatar": "kytrinyx.png",
        "text": "I really like the name `divisible_by?`. It's at the perfect level of abstraction, to my taste.\r\n\r\nMonkey-patching is generally something I would do only if I could find no other way to do what I wanted. If you monkey-patch in a production system, you can be certain that it will be scrutinized in detail during code review!\r\n\r\nI, personally, like the version that you've submitted more than the more verbose one with explicit `return false` at the end, but I know that other people would say the reverse. I think at this point both of them are completely readable and you just have to make a choice based on some intangible quality that you make up on your own :)\r\n\r\nYou're right that `divisible_by?` with two parameters could get confusing. If you want to keep the `divisible_by?` idea without having two parameters, you have a couple of choices:\r\n\r\n* create an instance of year that has the method, and delegate from the class method, or\r\n* use a lambda\r\n\r\nBoth of these can be interesting approaches (very readable), and a good learning experience to play with. It all comes down to trade-offs, of course."
      }
    ]
  },
  {
    "code": "class Year\n  def self.leap?(year)\n    divisible_by = ->(dividend) { year % dividend == 0 }\n\n    return true  if divisible_by[400]\n    return false if divisible_by[100]\n\n    divisible_by[4]\n  end\nend",
    "language": "ruby",
    "comments": [
      {
        "username": "DataWraith",
        "author": true,
        "avatar": "DataWraith.png",
        "text": "I opted for the lambda-approach here, mostly because I don't have any experience with lambdas and wanted to see what it would look like.\r\n\r\nI like that it is shorter than the previous iteration, and the code has a nice visual flow, like a stanza from a poem. I dislike that I had to get rid of the question mark on `divisible_by`, because that's apparently not allowed for normal variable names."
      },
      {
        "username": "kytrinyx",
        "author": false,
        "avatar": "kytrinyx.png",
        "text": "I love this. I agree that it's a shame about that question-mark, but it is both inherently scannable and it still has the naming that explains the rules of leap years right up front."
      }
    ]
  }
]
